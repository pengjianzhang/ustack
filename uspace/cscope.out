cscope 15 $HOME/workspace_git_2013/ustack/uspace               0000656961
	@include/arp.h

1 #i‚de‡
_ARP_H


2 
	#_ARP_H


	)

4 
	~"ty≥s/∑ckë.h
"

7 
¨p_h™dÀr
(
∑ckë
 * 
pkt
);

9 
¨p_£nd_ªque°
(
ù_addªss
 * 
addr
,
nic_id
);

	@include/checksum.h

1 #i‚de‡
_CHECKSUM_H


2 
	#_CHECKSUM_H


	)

4 
	~"ty≥s/∑ckë.h
"

6 
checksum_ùv4
(
∑ckë
 * 
pkt
);

8 
checksum_udp
(
∑ckë
 * 
pkt
);

11 
checksum_t˝
(
∑ckë
 * 
pkt
);

	@include/common/comm_defns.h

16 #i‚de‡
_COMM_DEFNS_H


17 
	#_COMM_DEFNS_H


	)

21 
	#PROTO_NULL
 0

	)

22 
	#PROTO_ICMP
 88

	)

23 
	#PROTO_ICMPV6
 99

	)

24 
	#PROTO_TCP
 6

	)

25 
	#PROTO_UDP
 17

	)

28 
	#PROTO_IP
 0x08

	)

29 
	#PROTO_ARP
 0x608

	)

	@include/common/config.h

10 #i‚de‡
_CONFIG_H


11 
	#_CONFIG_H


	)

13 
	#MALLOC
 
mÆloc


	)

14 
	#FREE
 
‰ì


	)

15 
	#CALLOC
 
ˇŒoc


	)

17 
	#CONFIG_CON_TAB_BITS
 10

	)

22 
	#likñy
(
x
Ë(x)

	)

23 
	#u∆ikñy
(
x
Ë(
	`__buûtö_ex≥˘
(()(x), 0))

	)

25 
	#¥e„tch
(
x
Ë(x)

	)

30 
	#DEFAULT_CPU_FREQUENCY_MHZ
 (2600)

	)

31 
	#DEFAULT_SECONDS
 (60*5)

	)

33 
	#CAS
(
_a
, 
_o
, 
_n
Ë
	`__sync_vÆ_com∑ª_™d_sw≠
(_a, _o, _n)

	)

34 
	#bCAS
(
_a
,
_o
,
_n
Ë
	`__sync_boﬁ_com∑ª_™d_sw≠
(_a,_o,_n)

	)

37 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("" : : : "mem‹y")

	)

39 
	#mb
(Ë
asm
 vﬁ©ûe("m„n˚":::"mem‹y")

	)

40 
	#rmb
(Ë
asm
 vﬁ©ûe("l„n˚":::"mem‹y")

	)

41 
	#wmb
(Ë
asm
 vﬁ©ûe("s„n˚" ::: "mem‹y")

	)

45 
	#____ˇchñöe_Æig√d
 
	`__©åibuã__
((
	`__Æig√d__
(64)))

	)

	@include/common/debug.h

1 #i‚de‡
___XX_DEBUG_H


2 
	#___XX_DEBUG_H


	)

4 
	~<°dio.h
>

6 
	#__DEBUG


	)

8 #ifde‡
__DEBUG


9 
	#DPRINTF
(
x
...Ë
	`¥ötf
(x)

	)

11 
	#DPRINTF
(
x
...)

	)

15 #ifde‡
__DEBUG


16 
	#DPRINT_PACKET
(
pkt
Ë
	`debug_¥öt_∑ckë
’kt)

	)

18 
	#DPRINT_PACKET
(
pkt
)

	)

25 
	#ABORT_NOW
(Ë(*(*)0=0)

	)

31 
	#TRACE
(
fmt
, 
¨gs
...) do { \

32 
	`Ârötf
(
°dîr
, \

33 "[%s:%d %s] [£s†%p(%x)] " 
fmt
 "\n", \

34 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, \

35 ##
¨gs
); \

36 } 0)

	)

	@include/common/hashtable.h

14 #i‚de‡
_COMMON_HASHTABLE_H


15 
	#_COMMON_HASHTABLE_H


	)

17 
	~"comm⁄/jhash.h
"

18 
	~"comm⁄/li°.h
"

19 
	~"comm⁄/ty≥s.h
"

21 
u32
 
hash_ønd
;

23 
li°_hód
 * 
hashèbÀ_Æloc
(
size
);

26 
hashèbÀ_öô
(
li°_hód
 * 
èbÀ
, 
size
);

29 
hashèbÀ_‰ì
(
li°_hód
 * 
èbÀ
, 
size
);

31 
hash_moduÀ_öô
();

33 
ölöe
 
u32
 
	$ù_addªss_hash
(
ù_addªss
 * 
ù
)

35 
u32
 
h
;

37 if(
ù
->
Ámûy
 =
AF_INET
)

38 
h
 = 
	`jhash_1w‹d
(
ù
->
addr
.
ù4
,
hash_ønd
);

40 
h
 = 
	`jhash
(&(
ù
->
addr
.
ù6
),4, 
hash_ønd
);

42  (
h
);

43 
	}
}

45 
ölöe
 
u32
 
	$ù_p‹t_¥Ÿo_hash
(
ù_addªss
 * 
ù
,
u32
 
p‹t
, u32 
¥Ÿo
)

47 
u32
 
h
;

48 
u32
 
t
;

50 if(
ù
->
Ámûy
 =
AF_INET
)

52 
h
 = 
	`jhash_3w‹ds
(
ù
->
addr
.
ù4
, 
p‹t
, 
¥Ÿo
, 
hash_ønd
);

56 
t
 = 
JHASH_GOLDEN_RATIO
;

57 
t
 +
p‹t
;

58 
t
 +
¥Ÿo
;

59 
t
 +
hash_ønd
;

61 
h
 = 
	`jhash
(&(
ù
->
addr
.
ù6
),4, 
t
);

63  (
h
);

64 
	}
}

	@include/common/jhash.h

1 #i‚de‡
_LINUX_JHASH_H


2 
	#_LINUX_JHASH_H


	)

4 
	~"comm⁄/ty≥s.h
"

26 
	#__jhash_mix
(
a
, 
b
, 
c
) \

28 
a
 -
b
;á -
c
;á ^= (c>>13); \

29 
b
 -
c
; b -
a
; b ^= (a<<8); \

30 
c
 -
a
; c -
b
; c ^= (b>>13); \

31 
a
 -
b
;á -
c
;á ^= (c>>12); \

32 
b
 -
c
; b -
a
; b ^= (a<<16); \

33 
c
 -
a
; c -
b
; c ^= (b>>5); \

34 
a
 -
b
;á -
c
;á ^= (c>>3); \

35 
b
 -
c
; b -
a
; b ^= (a<<10); \

36 
c
 -
a
; c -
b
; c ^= (b>>15); \

37 }

	)

40 
	#JHASH_GOLDEN_RATIO
 0x9e3779b9

	)

46 
ölöe
 
u32
 
	$jhash
(c⁄° *
key
, 
u32
 
Àngth
, u32 
öôvÆ
)

48 
u32
 
a
, 
b
, 
c
, 
Àn
;

49 c⁄° 
u8
 *
k
 = 
key
;

51 
Àn
 = 
Àngth
;

52 
a
 = 
b
 = 
JHASH_GOLDEN_RATIO
;

53 
c
 = 
öôvÆ
;

55 
Àn
 >= 12) {

56 
a
 +(
k
[0] +((
u32
)k[1]<<8) +((u32)k[2]<<16) +((u32)k[3]<<24));

57 
b
 +(
k
[4] +((
u32
)k[5]<<8) +((u32)k[6]<<16) +((u32)k[7]<<24));

58 
c
 +(
k
[8] +((
u32
)k[9]<<8) +((u32)k[10]<<16)+((u32)k[11]<<24));

60 
	`__jhash_mix
(
a
,
b
,
c
);

62 
k
 += 12;

63 
Àn
 -= 12;

66 
c
 +
Àngth
;

67 
Àn
) {

68 11: 
c
 +((
u32
)
k
[10]<<24);

69 10: 
c
 +((
u32
)
k
[9]<<16);

70 9 : 
c
 +((
u32
)
k
[8]<<8);

71 8 : 
b
 +((
u32
)
k
[7]<<24);

72 7 : 
b
 +((
u32
)
k
[6]<<16);

73 6 : 
b
 +((
u32
)
k
[5]<<8);

74 5 : 
b
 +
k
[4];

75 4 : 
a
 +((
u32
)
k
[3]<<24);

76 3 : 
a
 +((
u32
)
k
[2]<<16);

77 2 : 
a
 +((
u32
)
k
[1]<<8);

78 1 : 
a
 +
k
[0];

81 
	`__jhash_mix
(
a
,
b
,
c
);

83  
c
;

84 
	}
}

89 
ölöe
 
u32
 
	$jhash2
(c⁄° 
u32
 *
k
, u32 
Àngth
, u32 
öôvÆ
)

91 
u32
 
a
, 
b
, 
c
, 
Àn
;

93 
a
 = 
b
 = 
JHASH_GOLDEN_RATIO
;

94 
c
 = 
öôvÆ
;

95 
Àn
 = 
Àngth
;

97 
Àn
 >= 3) {

98 
a
 +
k
[0];

99 
b
 +
k
[1];

100 
c
 +
k
[2];

101 
	`__jhash_mix
(
a
, 
b
, 
c
);

102 
k
 +3; 
Àn
 -= 3;

105 
c
 +
Àngth
 * 4;

107 
Àn
) {

108 2 : 
b
 +
k
[1];

109 1 : 
a
 +
k
[0];

112 
	`__jhash_mix
(
a
,
b
,
c
);

114  
c
;

115 
	}
}

124 
ölöe
 
u32
 
	$jhash_3w‹ds
(
u32
 
a
, u32 
b
, u32 
c
, u32 
öôvÆ
)

126 
a
 +
JHASH_GOLDEN_RATIO
;

127 
b
 +
JHASH_GOLDEN_RATIO
;

128 
c
 +
öôvÆ
;

130 
	`__jhash_mix
(
a
, 
b
, 
c
);

132  
c
;

133 
	}
}

135 
ölöe
 
u32
 
	$jhash_2w‹ds
(
u32
 
a
, u32 
b
, u32 
öôvÆ
)

137  
	`jhash_3w‹ds
(
a
, 
b
, 0, 
öôvÆ
);

138 
	}
}

140 
ölöe
 
u32
 
	$jhash_1w‹d
(
u32
 
a
, u32 
öôvÆ
)

142  
	`jhash_3w‹ds
(
a
, 0, 0, 
öôvÆ
);

143 
	}
}

	@include/common/list.h

1 #i‚de‡
_LINUX_LIST_H


2 
	#_LINUX_LIST_H


	)

3 
	~<°dlib.h
>

5 
	~"comm⁄/c⁄fig.h
"

19 
	sli°_hód
 {

20 
li°_hód
 *
	m√xt
, *
	m¥ev
;

23 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

25 
	#LIST_HEAD
(
«me
) \

26 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

28 
ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

30 
li°
->
√xt
 =Üist;

31 
li°
->
¥ev
 =Üist;

32 
	}
}

40 
ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

41 
li°_hód
 *
¥ev
,

42 
li°_hód
 *
√xt
)

44 
√xt
->
¥ev
 = 
√w
;

45 
√w
->
√xt
 =Çext;

46 
√w
->
¥ev
 =Örev;

47 
¥ev
->
√xt
 = 
√w
;

48 
	}
}

58 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

60 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

61 
	}
}

72 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

74 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

75 
	}
}

84 
ölöe
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

86 
√xt
->
¥ev
 =Örev;

87 
¥ev
->
√xt
 =Çext;

88 
	}
}

96 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

98 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

99 
	}
}

108 
ölöe
 
	$li°_ª∂a˚
(
li°_hód
 *
ﬁd
,

109 
li°_hód
 *
√w
)

111 
√w
->
√xt
 = 
ﬁd
->next;

112 
√w
->
√xt
->
¥ev
 =Çew;

113 
√w
->
¥ev
 = 
ﬁd
->prev;

114 
√w
->
¥ev
->
√xt
 =Çew;

115 
	}
}

117 
ölöe
 
	$li°_ª∂a˚_öô
(
li°_hód
 *
ﬁd
,

118 
li°_hód
 *
√w
)

120 
	`li°_ª∂a˚
(
ﬁd
, 
√w
);

121 
	`INIT_LIST_HEAD
(
ﬁd
);

122 
	}
}

128 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

130 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

131 
	`INIT_LIST_HEAD
(
íåy
);

132 
	}
}

139 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

141 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

142 
	`li°_add
(
li°
, 
hód
);

143 
	}
}

150 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

151 
li°_hód
 *
hód
)

153 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

154 
	`li°_add_èû
(
li°
, 
hód
);

155 
	}
}

162 
ölöe
 
	$li°_is_œ°
(c⁄° 
li°_hód
 *
li°
,

163 c⁄° 
li°_hód
 *
hód
)

165  
li°
->
√xt
 =
hód
;

166 
	}
}

172 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

174  
hód
->
√xt
 == head;

175 
	}
}

190 
ölöe
 
	$li°_em±y_ˇªful
(c⁄° 
li°_hód
 *
hód
)

192 
li°_hód
 *
√xt
 = 
hód
->next;

193  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

194 
	}
}

200 
ölöe
 
	$li°_rŸ©e_À·
(
li°_hód
 *
hód
)

202 
li°_hód
 *
fú°
;

204 i‡(!
	`li°_em±y
(
hód
)) {

205 
fú°
 = 
hód
->
√xt
;

206 
	`li°_move_èû
(
fú°
, 
hód
);

208 
	}
}

214 
ölöe
 
	$li°_is_söguœr
(c⁄° 
li°_hód
 *
hód
)

216  !
	`li°_em±y
(
hód
Ë&& (hód->
√xt
 =hód->
¥ev
);

217 
	}
}

219 
ölöe
 
	$__li°_cut_posôi⁄
(
li°_hód
 *
li°
,

220 
li°_hód
 *
hód
, li°_hód *
íåy
)

222 
li°_hód
 *
√w_fú°
 = 
íåy
->
√xt
;

223 
li°
->
√xt
 = 
hód
->next;

224 
li°
->
√xt
->
¥ev
 =Üist;

225 
li°
->
¥ev
 = 
íåy
;

226 
íåy
->
√xt
 = 
li°
;

227 
hód
->
√xt
 = 
√w_fú°
;

228 
√w_fú°
->
¥ev
 = 
hód
;

229 
	}
}

245 
ölöe
 
	$li°_cut_posôi⁄
(
li°_hód
 *
li°
,

246 
li°_hód
 *
hód
, li°_hód *
íåy
)

248 i‡(
	`li°_em±y
(
hód
))

250 i‡(
	`li°_is_söguœr
(
hód
) &&

251 (
hód
->
√xt
 !
íåy
 && head !=Éntry))

253 i‡(
íåy
 =
hód
)

254 
	`INIT_LIST_HEAD
(
li°
);

256 
	`__li°_cut_posôi⁄
(
li°
, 
hód
, 
íåy
);

257 
	}
}

259 
ölöe
 
	$__li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

260 
li°_hód
 *
¥ev
,

261 
li°_hód
 *
√xt
)

263 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

264 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

266 
fú°
->
¥ev
 =Örev;

267 
¥ev
->
√xt
 = 
fú°
;

269 
œ°
->
√xt
 =Çext;

270 
√xt
->
¥ev
 = 
œ°
;

271 
	}
}

278 
ölöe
 
	$li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

279 
li°_hód
 *
hód
)

281 i‡(!
	`li°_em±y
(
li°
))

282 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

283 
	}
}

290 
ölöe
 
	$li°_•li˚_èû
(
li°_hód
 *
li°
,

291 
li°_hód
 *
hód
)

293 i‡(!
	`li°_em±y
(
li°
))

294 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

295 
	}
}

304 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

305 
li°_hód
 *
hód
)

307 i‡(!
	`li°_em±y
(
li°
)) {

308 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

309 
	`INIT_LIST_HEAD
(
li°
);

311 
	}
}

321 
ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

322 
li°_hód
 *
hód
)

324 i‡(!
	`li°_em±y
(
li°
)) {

325 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

326 
	`INIT_LIST_HEAD
(
li°
);

328 
	}
}

338 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

340 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

341 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

342 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

351 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

352 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

362 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

363 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

370 
	#li°_f‹_óch
(
pos
, 
hód
) \

371 
pos
 = (
hód
)->
√xt
; 
	`¥e„tch
(pos->next),Öos != (head); \

372 
pos
 =Öos->
√xt
)

	)

384 
	#__li°_f‹_óch
(
pos
, 
hód
) \

385 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

392 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

393 
pos
 = (
hód
)->
¥ev
; 
	`¥e„tch
(pos->prev),Öos != (head); \

394 
pos
 =Öos->
¥ev
)

	)

402 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

403 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

404 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

412 
	#li°_f‹_óch_¥ev_ß„
(
pos
, 
n
, 
hód
) \

413 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev; \

414 
	`¥e„tch
(
pos
->
¥ev
),Öo†!(
hód
); \

415 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

423 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

424 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

425 
	`¥e„tch
(
pos
->
membî
.
√xt
), &pos->membî !(
hód
); \

426 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

434 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

435 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

436 
	`¥e„tch
(
pos
->
membî
.
¥ev
), &pos->membî !(
hód
); \

437 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

447 
	#li°_¥ï¨e_íåy
(
pos
, 
hód
, 
membî
) \

448 ((
pos
Ë? : 
	`li°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
))

	)

459 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

460 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

461 
	`¥e„tch
(
pos
->
membî
.
√xt
), &pos->membî !(
hód
); \

462 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

473 
	#li°_f‹_óch_íåy_c⁄töue_ªvî£
(
pos
, 
hód
, 
membî
) \

474 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

475 
	`¥e„tch
(
pos
->
membî
.
¥ev
), &pos->membî !(
hód
); \

476 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

486 
	#li°_f‹_óch_íåy_‰om
(
pos
, 
hód
, 
membî
) \

487 ; 
	`¥e„tch
(
pos
->
membî
.
√xt
), &pos->membî !(
hód
); \

488 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

497 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

498 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

499 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

500 &
pos
->
membî
 !(
hód
); \

501 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

513 
	#li°_f‹_óch_íåy_ß„_c⁄töue
(
pos
, 
n
, 
hód
, 
membî
) \

514 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

515 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

516 &
pos
->
membî
 !(
hód
); \

517 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

529 
	#li°_f‹_óch_íåy_ß„_‰om
(
pos
, 
n
, 
hód
, 
membî
) \

530 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

531 &
pos
->
membî
 !(
hód
); \

532 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

544 
	#li°_f‹_óch_íåy_ß„_ªvî£
(
pos
, 
n
, 
hód
, 
membî
) \

545 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
), \

546 
n
 = 
	`li°_íåy
(
pos
->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

547 &
pos
->
membî
 !(
hód
); \

548 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
¥ev
, 
	`ty≥of
(*n), membî))

	)

562 
	#li°_ß„_ª£t_√xt
(
pos
, 
n
, 
membî
) \

563 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), membî)

	)

572 
	shli°_hód
 {

573 
hli°_node
 *
	mfú°
;

576 
	shli°_node
 {

577 
hli°_node
 *
	m√xt
, **
	mµªv
;

580 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

581 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

582 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

583 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

585 
h
->
√xt
 = 
NULL
;

586 
h
->
µªv
 = 
NULL
;

587 
	}
}

589 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

591  !
h
->
µªv
;

592 
	}
}

594 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

596  !
h
->
fú°
;

597 
	}
}

599 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

601 
hli°_node
 *
√xt
 = 
n
->next;

602 
hli°_node
 **
µªv
 = 
n
->pprev;

603 *
µªv
 = 
√xt
;

604 i‡(
√xt
)

605 
√xt
->
µªv
 =Öprev;

606 
	}
}

608 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

610 
	`__hli°_dñ
(
n
);

611 
	}
}

613 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

615 i‡(!
	`hli°_unhashed
(
n
)) {

616 
	`__hli°_dñ
(
n
);

617 
	`INIT_HLIST_NODE
(
n
);

619 
	}
}

621 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

623 
hli°_node
 *
fú°
 = 
h
->first;

624 
n
->
√xt
 = 
fú°
;

625 i‡(
fú°
)

626 
fú°
->
µªv
 = &
n
->
√xt
;

627 
h
->
fú°
 = 
n
;

628 
n
->
µªv
 = &
h
->
fú°
;

629 
	}
}

632 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

633 
hli°_node
 *
√xt
)

635 
n
->
µªv
 = 
√xt
->pprev;

636 
n
->
√xt
 =Çext;

637 
√xt
->
µªv
 = &
n
->next;

638 *(
n
->
µªv
) =Ç;

639 
	}
}

641 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

642 
hli°_node
 *
√xt
)

644 
√xt
->√xà
n
->next;

645 
n
->
√xt
 =Çext;

646 
√xt
->
µªv
 = &
n
->next;

648 if(
√xt
->next)

649 
√xt
->√xt->
µªv
 = &next->next;

650 
	}
}

656 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

657 
hli°_hód
 *
√w
)

659 
√w
->
fú°
 = 
ﬁd
->first;

660 i‡(
√w
->
fú°
)

661 
√w
->
fú°
->
µªv
 = &new->first;

662 
ﬁd
->
fú°
 = 
NULL
;

663 
	}
}

665 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,ty≥,membî)

	)

667 
	#hli°_f‹_óch
(
pos
, 
hód
) \

668 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
	`¥e„tch
’os->
√xt
); 1; }); \

669 
pos
 =Öos->
√xt
)

	)

671 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

672 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

673 
pos
 = 
n
)

	)

682 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
membî
) \

683 
pos
 = (
hód
)->
fú°
; \

684 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

685 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

686 
pos
 =Öos->
√xt
)

	)

694 
	#hli°_f‹_óch_íåy_c⁄töue
(
ços
, 
pos
, 
membî
) \

695 
pos
 = (pos)->
√xt
; \

696 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

697 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

698 
pos
 =Öos->
√xt
)

	)

706 
	#hli°_f‹_óch_íåy_‰om
(
ços
, 
pos
, 
membî
) \

707 ; 
pos
 && ({ 
	`¥e„tch
’os->
√xt
); 1;}) && \

708 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

709 
pos
 =Öos->
√xt
)

	)

719 
	#hli°_f‹_óch_íåy_ß„
(
ços
, 
pos
, 
n
, 
hód
, 
membî
) \

720 
pos
 = (
hód
)->
fú°
; \

721 
pos
 && ({ 
n
 =Öos->
√xt
; 1; }) && \

722 ({ 
ços
 = 
	`hli°_íåy
(
pos
, 
	`ty≥of
(*ços), 
membî
); 1;}); \

723 
pos
 = 
n
)

	)

730 
	s¶i°


732 
¶i°
 * 
	m√xt
;

736 
ölöe
 
	$¶i°_add
(
¶i°
 *
node
, ¶i° * 
hód
)

738 
node
->
√xt
 = 
hód
->next;

739 
hód
->
√xt
 = 
node
;

740 
	}
}

743 
ölöe
 
¶i°
 * 
	$¶i°_dñ_fú°
(
¶i°
 * 
hód
)

745 
¶i°
 * 
node
 = 
hód
->
√xt
;

747 if(
node
 !
NULL
)

749 
hód
->
√xt
 = 
node
->next;

752  
node
;

753 
	}
}

755 
ölöe
 
	$¶i°_öô
(
¶i°
 *
li°
)

757 
li°
->
√xt
 = 
NULL
;

758 
	}
}

760 
ölöe
 
	$¶i°_em±y
(
¶i°
 * 
hód
)

762  (
hód
->
√xt
 !
NULL
);

763 
	}
}

	@include/common/random.h

1 #i‚de‡
_RANDOM_H


2 
	#_RANDOM_H


	)

5 
	#SEED
(Ë({ 
__t
; 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "=A" (__t)); __t; })

	)

8 
ölöe
 
	$p£udo_øndom32
(
£ed
)

11  
£ed
 * 1664525 + 1013904223;

12 
	}
}

	@include/common/types.h

1 #i‚de‡
_TYPES_H


2 
	#_TYPES_H


	)

4 
	~<°rög.h
>

5 
	~<¨∑/öë.h
>

6 
	~<löux/ty≥s.h
>

8 
__u16
 
	tu16
;

9 
__u32
 
	tu32
;

10 
__u64
 
	tu64
;

11 
__u8
 
	tu8
;

13 
	#IPV6_SIZE_BYTES
 16

	)

14 
	#IPV4_SIZE_BYTES
 4

	)

16 
	#IPV6_SIZE_U32
 4

	)

17 
	#IPV4_SIZE_U32
 1

	)

19 
	uöë_addªss
 {

20 
u32
 
	mÆl
[4];

21 
u32
 
	mù4
;

22 
u8
 
	mb
[16];

23 
u32
 
	mù6
[4];

24 
ö_addr
 
	mö4
;

25 
ö6_addr
 
	mö6
;

28 #i‚de‡
AF_INET


29 
	#AF_INET
 4

	)

31 #i‚de‡
AF_INET6


32 
	#AF_INET6
 10

	)

35 
	sù_addªss
{

36 
	mÁmûy
;

37 
öë_addªss
 
	maddr
;

41 
	s√t_addªss


43 
ù_addªss
 
	mù
;

44 
u16
 
	mp‹t
;

47 
ölöe
 
	$ù_addªss_eq
(
ù_addªss
 * 
ù1
, ù_addªs†* 
ù2
)

49 
ªt
 = 0;

51 if(
ù1
->
Ámûy
 =
ù2
->family)

53 if(
ù1
->
Ámûy
 =
AF_INET
)

55 if(
ù1
->
addr
.
ù4
 =
ù2
->addr.ip4)

56 
ªt
 = 1;

60 if((
ù1
->
addr
.
ù6
[0] =
ù2
->addr.ip6[0])

61 &&(
ù1
->
addr
.
ù6
[1] =
ù2
->addr.ip6[1])

62 &&(
ù1
->
addr
.
ù6
[2] =
ù2
->addr.ip6[2])

63 &&(
ù1
->
addr
.
ù6
[3] =
ù2
->addr.ip6[3]))

64 
ªt
 = 1;

69  
ªt
;

70 
	}
}

72 
ölöe
 
	$ù_addªss_c›y
(
ù_addªss
 * 
de°
, ù_addªs†* 
§c
)

74 
	`mem˝y
((*)
de°
,(*)
§c
,(
ù_addªss
));

75 
	}
}

78 
ölöe
 
	$ù_addªss_is_ùv4
(
ù_addªss
 * 
ù
)

80  (
ù
->
Ámûy
 =
AF_INET
);

81 
	}
}

84 
ölöe
 
u32
 
	$ù_addªss_gë_ùv4
(
ù_addªss
 * 
ù
)

86  
ù
->
addr
.
ù4
;

87 
	}
}

89 
ölöe
 
u32
 * 
	$ù_addªss_gë_ùv6
(
ù_addªss
 * 
ù
)

91  
ù
->
addr
.
ù6
;

92 
	}
}

94 
ölöe
 
	$ù_addªss_öô_v4
(
ù_addªss
 * 
ù
, 
u32
 
ù4
)

96 
ù
->
Ámûy
 = 
AF_INET
;

97 
ù
->
addr
.
ù4
 = ip4;

98 
	}
}

100 
ölöe
 
	$ù_addªss_öô_v6
(
ù_addªss
 * 
ù
, 
u32
 * 
ù6
)

102 
ù
->
Ámûy
 = 
AF_INET6
;

103 
ù
->
addr
.
ö6
 = *((
ö6_addr
 *)(
ù6
));

104 
	}
}

107 
ölöe
 
	$√t_addªss_öô_v4
(
√t_addªss
 * 
addr
,* 
ù
, 
u16
 
p‹t
)

109 
u32
 
ù4
 = 
	`öë_addr
(
ù
);

110 
	`ù_addªss_öô_v4
(&(
addr
->
ù
), 
ù4
);

111 
addr
->
p‹t
 = 
	`ht⁄s
(port);

112 
	}
}

115 
ölöe
 
	$√t_addªss_öô_v6
(
√t_addªss
 * 
addr
,* 
ù
, 
u16
 
p‹t
)

117 
ö6_addr
 
ö6
;

118 
	`öë_±⁄
(
AF_INET6
,
ù
,(*)&
ö6
);

119 
	`ù_addªss_öô_v6
(&(
addr
->
ù
), (
u32
*)&
ö6
);

120 
addr
->
p‹t
 = 
	`ht⁄s
(port);

121 
	}
}

	@include/connection.h

13 #i‚de‡
_CONNECTION_H


14 
	#_CONNECTION_H


	)

16 
	~"comm⁄/c⁄fig.h
"

17 
	~"comm⁄/li°.h
"

18 
	~"comm⁄/ty≥s.h
"

19 
	~"comm⁄/comm_de‚s.h
"

20 
	~"ty≥s/c⁄√˘i⁄.h
"

22 
	~"∑ckë.h
"

23 
	~"v£rvî.h
"

27 
	#CONNECTION_IS_FULLNAT
(
˝
Ë((˝)->
Êags
 &1)

	)

28 
	#CONNECTION_SET_FULLNAT
(
˝
Ë((˝)->
Êags
 = ((˝)->Êag†| 1))

	)

29 
	#CONNECTION_SET_TRANSPARANT
(
˝
Ë((˝)->
Êags
 = ((˝)->Êag†& 0x„))

	)

31 
	#CONNECTION_IS_TCP
(
˝
Ë((˝)->
¥Ÿocﬁ
 =
PROTO_TCP
)

	)

34 
	#CONNECTION_TIMEOUT_SECONDS
 60

	)

37 
c⁄√˘i⁄
 * 
c⁄√˘i⁄_lookup
(
ù_addªss
 * 
ù
 ,
u16
 
p‹t
,
u8
 
¥Ÿo
, u8 
is_˛õ¡
);

40 
c⁄√˘i⁄
 * 
c⁄√˘i⁄_¸óã
(
∑ckë
 * 
pkt
,
v£rvî
 * 
vs
);

41 
c⁄√˘i⁄_‰ì
(
c⁄√˘i⁄
 *
˝
);

43 
c⁄√˘i⁄_moduÀ_öô
();

45 
ölöe
 
ù_addªss
 * 
	$c⁄√˘i⁄_gë_˛õ¡_ù
(
c⁄√˘i⁄
 *
˝
)

47  &(
˝
->
˛õ¡_addr
);

48 
	}
}

51 
ölöe
 
u16
 
	$c⁄√˘i⁄_gë_˛õ¡_p‹t
(
c⁄√˘i⁄
 *
˝
)

53  
˝
->
˛õ¡_p‹t
;

54 
	}
}

	@include/dispatch.h

12 #i‚de‡
_DISPATCH_H


13 
	#_DISPATCH_H


	)

15 
	~"comm⁄/ty≥s.h
"

16 
	~"ty≥s/∑ckë.h
"

17 
	~"ty≥s/lf_queue.h
"

19 
di•©ch_moduÀ_öô
(
n
, 
id
);

21 
di•©ch_gë_p‹t_ønge
(
u16
 * 
low
, u16 * 
high
);

23 
di•©ch_∑ckë
(
lfq
 * 
q
, 
li°_hód
 * 
£nd_hód
,li°_hód * 
ªcv_hód
, li°_hód * 
ª˛aim_hód
);

25 
di•©ch_ª˛aim
(
lfq
 * 
q
, 
li°_hód
 * 
to_ª˛aim
);

27 
di•©ch_Êush
(
lfq
 * 
q
);

	@include/driver.h

13 #i‚de‡
_DRIVER_H


14 
	#_DRIVER_H


	)

17 
	~"löux-√t/if_ëhî.h
"

18 
	~"comm⁄/ty≥s.h
"

19 
	~"comm⁄/li°.h
"

20 
	~"ty≥s/∑ckë.h
"

21 
	~"ty≥s/drivî.h
"

24 
	#RX_FLAG
 0

	)

25 
	#TX_FLAG
 1

	)

27 
	#DESC_BLOCK_SIZE
 4096

28 

	)

29 
	#REG_BLOCK_SIZE
 524288

	)

32 
	#DESC_NUM
 256

	)

37 
drivî
 * 
drivî_moduÀ_öô
(
id
);

39 
drivî_Æloc_rx_buf„r
(
drivî
 * 
d
, 
∑ckë_poﬁ
 * 
µ
);

41 
drivî_˛o£
(
drivî
 * 
d
);

43 
drivî_ªcv
(
drivî
 * 
d
,
li°_hód
 * 
hód
);

45 
drivî_£nd
(
drivî
 * 
d
);

47 
drivî_ª˛aim_tx_buf„r
(
drivî
 * 
d
, 
li°_hód
 * 
hód
);

49 
drivî_¥o˚ss_∑ckës
(
drivî
 * 
d
, (*
¥o˚ss
)(
∑ckë
 * 
p
) );

51 
	`drivî_put_∑ckë_to_£nd_buf„r
(
drivî
 * 
d
, 
∑ckë
 * 
pkt
);

53 
ölöe
 
u8
 * 
	$drivî_gë_mac
(
drivî
 * 
d
, 
ad≠ãr_idx
)

55  
d
->
ad≠ãrs
[
ad≠ãr_idx
]->
mac
;

56 
	}
}

58 
ölöe
 
ad≠ãr
 * 
	$drivî_gë_ad≠ãr
(
drivî
 * 
d
, 
ad≠ãr_idx
)

60  (
d
->
ad≠ãrs
[
ad≠ãr_idx
]);

61 
	}
}

64 
ölöe
 
	$drivî_gë_ad≠ãr_num
(
drivî
 * 
d
)

66  
d
->
ad≠ãr_num
;

67 
	}
}

	@include/interface.h

12 #i‚de‡
_INTERFACE_H


13 
	#_INTERFACE_H


	)

15 
	~"comm⁄/li°.h
"

16 
	~"ty≥s/loˇl_ù.h
"

17 
	~"ty≥s/öãrÁ˚.h
"

18 
	~"loˇl_ù.h
"

20 
öãrÁ˚
 * 
öãrÁ˚_moduÀ_öô
(
num
, 
u16
 
vs_low
,u16 
vs_high
,u16 
£lf_low
, u16 
£lf_high
);

22 
loˇl_ù
 * 
öãrÁ˚_¸óã_loˇl_ù
(
öãrÁ˚
 * 
ôf
, 
ù_addªss
 * 
ù
,
ty≥
, 
nic_id
);

24 
loˇl_ù
 * 
öãrÁ˚_lookup
(
öãrÁ˚
 * 
ôf
, 
ù_addªss
 * 
ù
, 
is_vs
);

26 
öãrÁ˚_add_lù
(
öãrÁ˚
 * 
ôf
,
loˇl_ù
 * 
lù
);

28 
öãrÁ˚_dñ_lù
(
öãrÁ˚
 * 
i·
, 
loˇl_ù
 * 
lù
);

30 
loˇl_ù
 * 
öãrÁ˚_gë_lù_º
(
öãrÁ˚
 * 
ôf
,
nic_id
, 
is_vsù
, 
is_ùv4
);

32 
ölöe
 
loˇl_ù
 * 
	$öãrÁ˚_¸óã_vsù
(
öãrÁ˚
 * 
ôf
, 
ù_addªss
 * 
ù
, 
nic_id
)

34  
	`öãrÁ˚_¸óã_loˇl_ù
(
ôf
, 
ù
,
VS_IP_T
,
nic_id
);

35 
	}
}

37 
ölöe
 
loˇl_ù
 * 
	$öãrÁ˚_¸óã_£lfù
(
öãrÁ˚
 * 
ôf
, 
ù_addªss
 * 
ù
, 
nic_id
)

39  
	`öãrÁ˚_¸óã_loˇl_ù
(
ôf
, 
ù
,
SELF_IP_T
,
nic_id
);

40 
	}
}

	@include/lf_queue.h

1 #i‚de‡
_LF_QUEUE_H


2 
	#_LF_QUEUE_H


	)

4 
	~"ty≥s/∑ckë.h
"

5 
	~"comm⁄/li°.h
"

6 
	~"ty≥s/lf_queue.h
"

8 
lfq
 * 
lfq_moduÀ_öô
(
n
, 
my_id
,
desc_num
, * 
°¨t
);

12 
ölöe
 
	$lfq_gë_moduÀ_size
(
lfq
 * 
q
)

14  
q
->
moduÀ_size
;

15 
	}
}

17 
ölöe
 
	$lfq_‰ì
(
lfq
 * 
q
)

19 if(
q
->
ªcv_queue
)

20 
	`FREE
(
q
->
ªcv_queue
);

21 if(
q
->
£nd_queue
)

22 
	`FREE
(
q
->
£nd_queue
);

23 
	`FREE
(
q
);

25 
	}
}

27 
lfq_ªcv
(
lfq
 * 
q
,
li°_hód
 *
hód
);

28 
lfq_£nd
(
lfq
 * 
q
, 
∑ckë
 * 
pkt
,
id
);

30 
lfq_ª˛aim_ªcv
(
lfq
 * 
q
,
li°_hód
 *
hód
);

31 
lfq_ª˛aim_£nd
(
lfq
 * 
q
, 
∑ckë
 * 
pkt
,
id
);

34 
lfq_ª˛aim_fûãr
(
lfq
 * 
q
, 
li°_hód
 * 
hód
);

37 
lfq_fûãr
(
lfq
 * 
q
, 
li°_hód
 * 
hód
);

39 
lfq_£nd_Êush
(
lfq
 * 
q
);

	@include/linux-net/e1000_82575.h

28 #i‚de‡
_E1000_82575_H_


29 
	#_E1000_82575_H_


	)

31 
	~<löux/ty≥s.h
>

34 
	#ID_LED_DEFAULT_82575_SERDES
 ((
ID_LED_DEF1_DEF2
 << 12) | \

35 (
ID_LED_DEF1_DEF2
 << 8) | \

36 (
ID_LED_DEF1_DEF2
 << 4) | \

37 (
ID_LED_OFF1_ON2
))

	)

39 
	#E1000_RAR_ENTRIES_82575
 16

	)

40 
	#E1000_RAR_ENTRIES_82576
 24

	)

41 
	#E1000_RAR_ENTRIES_82580
 24

	)

42 
	#E1000_RAR_ENTRIES_I350
 32

	)

44 
	#E1000_SW_SYNCH_MB
 0x00000100

	)

45 
	#E1000_STAT_DEV_RST_SET
 0x00100000

	)

46 
	#E1000_CTRL_DEV_RST
 0x20000000

	)

49 
	#E1000_SRRCTL_BSIZEPKT_SHIFT
 10

	)

50 
	#E1000_SRRCTL_BSIZEHDRSIZE_SHIFT
 2

	)

51 
	#E1000_SRRCTL_DESCTYPE_ADV_ONEBUF
 0x02000000

	)

52 
	#E1000_SRRCTL_DESCTYPE_HDR_SPLIT_ALWAYS
 0x0A000000

	)

53 
	#E1000_SRRCTL_DROP_EN
 0x80000000

	)

54 
	#E1000_SRRCTL_TIMESTAMP
 0x40000000

	)

56 
	#E1000_MRQC_ENABLE_RSS_4Q
 0x00000002

	)

57 
	#E1000_MRQC_ENABLE_VMDQ
 0x00000003

	)

58 
	#E1000_MRQC_ENABLE_VMDQ_RSS_2Q
 0x00000005

	)

59 
	#E1000_MRQC_RSS_FIELD_IPV4_UDP
 0x00400000

	)

60 
	#E1000_MRQC_RSS_FIELD_IPV6_UDP
 0x00800000

	)

61 
	#E1000_MRQC_RSS_FIELD_IPV6_UDP_EX
 0x01000000

	)

63 
	#E1000_EICR_TX_QUEUE
 ( \

64 
E1000_EICR_TX_QUEUE0
 | \

65 
E1000_EICR_TX_QUEUE1
 | \

66 
E1000_EICR_TX_QUEUE2
 | \

67 
E1000_EICR_TX_QUEUE3
)

	)

69 
	#E1000_EICR_RX_QUEUE
 ( \

70 
E1000_EICR_RX_QUEUE0
 | \

71 
E1000_EICR_RX_QUEUE1
 | \

72 
E1000_EICR_RX_QUEUE2
 | \

73 
E1000_EICR_RX_QUEUE3
)

	)

76 
	#E1000_IMIREXT_SIZE_BP
 0x00001000

	)

77 
	#E1000_IMIREXT_CTRL_BP
 0x00080000

	)

80 
	ue1000_adv_rx_desc
 {

82 
__À64
 
	mpkt_addr
;

83 
__À64
 
	mhdr_addr
;

84 } 
	mªad
;

88 
__À16
 
	mpkt_öfo
;

89 
__À16
 
	mhdr_öfo
;

91 } 
	mlo_dw‹d
;

93 
__À32
 
	mrss
;

95 
__À16
 
	mù_id
;

96 
__À16
 
	mcsum
;

97 } 
	mcsum_ù
;

98 } 
	mhi_dw‹d
;

99 } 
	mlowî
;

101 
__À32
 
	m°©us_îr‹
;

102 
__À16
 
	mÀngth
;

103 
__À16
 
	mvœn
;

104 } 
	muµî
;

105 } 
	mwb
;

108 
	#E1000_RXDADV_HDRBUFLEN_MASK
 0x7FE0

	)

109 
	#E1000_RXDADV_HDRBUFLEN_SHIFT
 5

	)

110 
	#E1000_RXDADV_STAT_TS
 0x10000

	)

111 
	#E1000_RXDADV_STAT_TSIP
 0x08000

	)

114 
	ue1000_adv_tx_desc
 {

116 
__À64
 
	mbuf„r_addr
;

117 
__À32
 
	mcmd_ty≥_Àn
;

118 
__À32
 
	mﬁöfo_°©us
;

119 } 
	mªad
;

121 
__À64
 
	mrsvd
;

122 
__À32
 
	mnxt£q_£ed
;

123 
__À32
 
	m°©us
;

124 } 
	mwb
;

128 
	#E1000_ADVTXD_MAC_TSTAMP
 0x00080000

	)

129 
	#E1000_ADVTXD_DTYP_CTXT
 0x00200000

	)

130 
	#E1000_ADVTXD_DTYP_DATA
 0x00300000

	)

131 
	#E1000_ADVTXD_DCMD_IFCS
 0x02000000

	)

132 
	#E1000_ADVTXD_DCMD_DEXT
 0x20000000

	)

133 
	#E1000_ADVTXD_DCMD_VLE
 0x40000000

	)

134 
	#E1000_ADVTXD_DCMD_TSE
 0x80000000

	)

135 
	#E1000_ADVTXD_PAYLEN_SHIFT
 14

	)

138 
	se1000_adv_tx_c⁄ãxt_desc
 {

139 
__À32
 
	mvœn_macù_Àns
;

140 
__À32
 
	m£qnum_£ed
;

141 
__À32
 
	mty≥_tucmd_mlhl
;

142 
__À32
 
	mmss_l4Àn_idx
;

145 
	#E1000_ADVTXD_MACLEN_SHIFT
 9

	)

146 
	#E1000_ADVTXD_TUCMD_IPV4
 0x00000400

	)

147 
	#E1000_ADVTXD_TUCMD_L4T_TCP
 0x00000800

	)

148 
	#E1000_ADVTXD_TUCMD_L4T_SCTP
 0x00001000

	)

150 
	#E1000_ADVTXD_L4LEN_SHIFT
 8

	)

151 
	#E1000_ADVTXD_MSS_SHIFT
 16

	)

156 
	#E1000_TXDCTL_QUEUE_ENABLE
 0x02000000

	)

160 
	#E1000_RXDCTL_QUEUE_ENABLE
 0x02000000

	)

163 
	#E1000_DCA_CTRL_DCA_MODE_DISABLE
 0x01

	)

164 
	#E1000_DCA_CTRL_DCA_MODE_CB2
 0x02

	)

166 
	#E1000_DCA_RXCTRL_CPUID_MASK
 0x0000001F

	)

167 
	#E1000_DCA_RXCTRL_DESC_DCA_EN
 (1 << 5Ë

	)

168 
	#E1000_DCA_RXCTRL_HEAD_DCA_EN
 (1 << 6Ë

	)

169 
	#E1000_DCA_RXCTRL_DATA_DCA_EN
 (1 << 7Ë

	)

171 
	#E1000_DCA_TXCTRL_CPUID_MASK
 0x0000001F

	)

172 
	#E1000_DCA_TXCTRL_DESC_DCA_EN
 (1 << 5Ë

	)

173 
	#E1000_DCA_TXCTRL_TX_WB_RO_EN
 (1 << 11Ë

	)

176 
	#E1000_DCA_TXCTRL_CPUID_MASK_82576
 0xFF000000

	)

177 
	#E1000_DCA_RXCTRL_CPUID_MASK_82576
 0xFF000000

	)

178 
	#E1000_DCA_TXCTRL_CPUID_SHIFT
 24

	)

179 
	#E1000_DCA_RXCTRL_CPUID_SHIFT
 24

	)

182 
	#E1000_ETQF_FILTER_ENABLE
 (1 << 26)

	)

183 
	#E1000_ETQF_1588
 (1 << 30)

	)

186 
	#E1000_FTQF_VF_BP
 0x00008000

	)

187 
	#E1000_FTQF_1588_TIME_STAMP
 0x08000000

	)

188 
	#E1000_FTQF_MASK
 0xF0000000

	)

189 
	#E1000_FTQF_MASK_PROTO_BP
 0x10000000

	)

190 
	#E1000_FTQF_MASK_SOURCE_PORT_BP
 0x80000000

	)

192 
	#E1000_NVM_APME_82575
 0x0400

	)

193 
	#MAX_NUM_VFS
 8

	)

195 
	#E1000_DTXSWC_VMDQ_LOOPBACK_EN
 (1 << 31Ë

	)

198 
	#E1000_VT_CTL_DEFAULT_POOL_SHIFT
 7

	)

199 
	#E1000_VT_CTL_DEFAULT_POOL_MASK
 (0x7 << 
E1000_VT_CTL_DEFAULT_POOL_SHIFT
)

	)

202 
	#E1000_VT_CTL_IGNORE_MAC
 (1 << 28)

	)

203 
	#E1000_VT_CTL_DISABLE_DEF_POOL
 (1 << 29)

	)

204 
	#E1000_VT_CTL_VM_REPL_EN
 (1 << 30)

	)

207 
	#E1000_VMOLR_RLPML_MASK
 0x00003FFF

	)

208 
	#E1000_VMOLR_LPE
 0x00010000

	)

209 
	#E1000_VMOLR_RSSE
 0x00020000

	)

210 
	#E1000_VMOLR_AUPE
 0x01000000

	)

211 
	#E1000_VMOLR_ROMPE
 0x02000000

	)

212 
	#E1000_VMOLR_ROPE
 0x04000000

	)

213 
	#E1000_VMOLR_BAM
 0x08000000

	)

214 
	#E1000_VMOLR_MPME
 0x10000000

	)

215 
	#E1000_VMOLR_STRVLAN
 0x40000000

	)

216 
	#E1000_VMOLR_STRCRC
 0x80000000

	)

218 
	#E1000_VLVF_ARRAY_SIZE
 32

	)

219 
	#E1000_VLVF_VLANID_MASK
 0x00000FFF

	)

220 
	#E1000_VLVF_POOLSEL_SHIFT
 12

	)

221 
	#E1000_VLVF_POOLSEL_MASK
 (0xFF << 
E1000_VLVF_POOLSEL_SHIFT
)

	)

222 
	#E1000_VLVF_LVLAN
 0x00100000

	)

223 
	#E1000_VLVF_VLANID_ENABLE
 0x80000000

	)

225 
	#E1000_VMVIR_VLANA_DEFAULT
 0x40000000

	)

226 
	#E1000_VMVIR_VLANA_NEVER
 0x80000000

	)

228 
	#E1000_IOVCTL
 0x05BBC

	)

229 
	#E1000_IOVCTL_REUSE_VFQ
 0x00000001

	)

231 
	#E1000_RPLOLR_STRVLAN
 0x40000000

	)

232 
	#E1000_RPLOLR_STRCRC
 0x80000000

	)

234 
	#E1000_DTXCTL_8023LL
 0x0004

	)

235 
	#E1000_DTXCTL_VLAN_ADDED
 0x0008

	)

236 
	#E1000_DTXCTL_OOS_ENABLE
 0x0010

	)

237 
	#E1000_DTXCTL_MDP_EN
 0x0020

	)

238 
	#E1000_DTXCTL_SPOOF_INT
 0x0040

	)

240 
	#ALL_QUEUES
 0xFFFF

	)

243 
	#E1000_RXPBS_SIZE_MASK_82576
 0x0000007F

	)

	@include/linux-net/e1000_defines.h

28 #i‚de‡
_E1000_DEFINES_H_


29 
	#_E1000_DEFINES_H_


	)

32 
	#REQ_TX_DESCRIPTOR_MULTIPLE
 8

	)

33 
	#REQ_RX_DESCRIPTOR_MULTIPLE
 8

	)

37 
	#E1000_WUC_PME_EN
 0x00000002

	)

40 
	#E1000_WUFC_LNKC
 0x00000001

	)

41 
	#E1000_WUFC_MAG
 0x00000002

	)

42 
	#E1000_WUFC_EX
 0x00000004

	)

43 
	#E1000_WUFC_MC
 0x00000008

	)

44 
	#E1000_WUFC_BC
 0x00000010

	)

47 
	#E1000_CTRL_EXT_SDP3_DATA
 0x00000080

	)

49 
	#E1000_CTRL_EXT_PFRSTD
 0x00004000

	)

50 
	#E1000_CTRL_EXT_LINK_MODE_MASK
 0x00C00000

	)

51 
	#E1000_CTRL_EXT_LINK_MODE_PCIE_SERDES
 0x00C00000

	)

52 
	#E1000_CTRL_EXT_LINK_MODE_1000BASE_KX
 0x00400000

	)

53 
	#E1000_CTRL_EXT_LINK_MODE_SGMII
 0x00800000

	)

54 
	#E1000_CTRL_EXT_EIAME
 0x01000000

	)

55 
	#E1000_CTRL_EXT_IRCA
 0x00000001

	)

58 
	#E1000_CTRL_EXT_DRV_LOAD
 0x10000000

	)

63 
	#E1000_CTRL_EXT_PBA_CLR
 0x80000000

	)

64 
	#E1000_I2CCMD_REG_ADDR_SHIFT
 16

	)

65 
	#E1000_I2CCMD_PHY_ADDR_SHIFT
 24

	)

66 
	#E1000_I2CCMD_OPCODE_READ
 0x08000000

	)

67 
	#E1000_I2CCMD_OPCODE_WRITE
 0x00000000

	)

68 
	#E1000_I2CCMD_READY
 0x20000000

	)

69 
	#E1000_I2CCMD_ERROR
 0x80000000

	)

70 
	#E1000_MAX_SGMII_PHY_REG_ADDR
 255

	)

71 
	#E1000_I2CCMD_PHY_TIMEOUT
 200

	)

72 
	#E1000_IVAR_VALID
 0x80

	)

73 
	#E1000_GPIE_NSICR
 0x00000001

	)

74 
	#E1000_GPIE_MSIX_MODE
 0x00000010

	)

75 
	#E1000_GPIE_EIAME
 0x40000000

	)

76 
	#E1000_GPIE_PBA
 0x80000000

	)

79 
	#E1000_RXD_STAT_DD
 0x01

	)

80 
	#E1000_RXD_STAT_EOP
 0x02

	)

81 
	#E1000_RXD_STAT_IXSM
 0x04

	)

82 
	#E1000_RXD_STAT_VP
 0x08

	)

83 
	#E1000_RXD_STAT_UDPCS
 0x10

	)

84 
	#E1000_RXD_STAT_TCPCS
 0x20

	)

85 
	#E1000_RXD_STAT_TS
 0x10000

	)

87 
	#E1000_RXDEXT_STATERR_CE
 0x01000000

	)

88 
	#E1000_RXDEXT_STATERR_SE
 0x02000000

	)

89 
	#E1000_RXDEXT_STATERR_SEQ
 0x04000000

	)

90 
	#E1000_RXDEXT_STATERR_CXE
 0x10000000

	)

91 
	#E1000_RXDEXT_STATERR_TCPE
 0x20000000

	)

92 
	#E1000_RXDEXT_STATERR_IPE
 0x40000000

	)

93 
	#E1000_RXDEXT_STATERR_RXE
 0x80000000

	)

96 
	#E1000_RXDEXT_ERR_FRAME_ERR_MASK
 ( \

97 
E1000_RXDEXT_STATERR_CE
 | \

98 
E1000_RXDEXT_STATERR_SE
 | \

99 
E1000_RXDEXT_STATERR_SEQ
 | \

100 
E1000_RXDEXT_STATERR_CXE
 | \

101 
E1000_RXDEXT_STATERR_RXE
)

	)

103 
	#E1000_MRQC_RSS_FIELD_IPV4_TCP
 0x00010000

	)

104 
	#E1000_MRQC_RSS_FIELD_IPV4
 0x00020000

	)

105 
	#E1000_MRQC_RSS_FIELD_IPV6_TCP_EX
 0x00040000

	)

106 
	#E1000_MRQC_RSS_FIELD_IPV6
 0x00100000

	)

107 
	#E1000_MRQC_RSS_FIELD_IPV6_TCP
 0x00200000

	)

111 
	#E1000_MANC_SMBUS_EN
 0x00000001

	)

112 
	#E1000_MANC_ASF_EN
 0x00000002

	)

114 
	#E1000_MANC_RCV_TCO_EN
 0x00020000

	)

115 
	#E1000_MANC_BLK_PHY_RST_ON_IDE
 0x00040000

	)

117 
	#E1000_MANC_EN_MAC_ADDR_FILTER
 0x00100000

	)

120 
	#E1000_RCTL_EN
 0x00000002

	)

121 
	#E1000_RCTL_SBP
 0x00000004

	)

122 
	#E1000_RCTL_UPE
 0x00000008

	)

123 
	#E1000_RCTL_MPE
 0x00000010

	)

124 
	#E1000_RCTL_LPE
 0x00000020

	)

125 
	#E1000_RCTL_LBM_MAC
 0x00000040

	)

126 
	#E1000_RCTL_LBM_TCVR
 0x000000C0

	)

127 
	#E1000_RCTL_RDMTS_HALF
 0x00000000

	)

128 
	#E1000_RCTL_MO_SHIFT
 12

	)

129 
	#E1000_RCTL_BAM
 0x00008000

	)

130 
	#E1000_RCTL_SZ_512
 0x00020000

	)

131 
	#E1000_RCTL_SZ_256
 0x00030000

	)

132 
	#E1000_RCTL_VFE
 0x00040000

	)

133 
	#E1000_RCTL_CFIEN
 0x00080000

	)

134 
	#E1000_RCTL_SECRC
 0x04000000

	)

153 
	#E1000_PSRCTL_BSIZE0_MASK
 0x0000007F

	)

154 
	#E1000_PSRCTL_BSIZE1_MASK
 0x00003F00

	)

155 
	#E1000_PSRCTL_BSIZE2_MASK
 0x003F0000

	)

156 
	#E1000_PSRCTL_BSIZE3_MASK
 0x3F000000

	)

158 
	#E1000_PSRCTL_BSIZE0_SHIFT
 7

	)

159 
	#E1000_PSRCTL_BSIZE1_SHIFT
 2

	)

160 
	#E1000_PSRCTL_BSIZE2_SHIFT
 6

	)

161 
	#E1000_PSRCTL_BSIZE3_SHIFT
 14

	)

164 
	#E1000_SWFW_EEP_SM
 0x1

	)

165 
	#E1000_SWFW_PHY0_SM
 0x2

	)

166 
	#E1000_SWFW_PHY1_SM
 0x4

	)

170 
	#E1000_CTRL_FD
 0x00000001

	)

171 
	#E1000_CTRL_GIO_MASTER_DISABLE
 0x00000004

	)

172 
	#E1000_CTRL_LRST
 0x00000008

	)

173 
	#E1000_CTRL_ASDE
 0x00000020

	)

174 
	#E1000_CTRL_SLU
 0x00000040

	)

175 
	#E1000_CTRL_ILOS
 0x00000080

	)

176 
	#E1000_CTRL_SPD_SEL
 0x00000300

	)

177 
	#E1000_CTRL_SPD_100
 0x00000100

	)

178 
	#E1000_CTRL_SPD_1000
 0x00000200

	)

179 
	#E1000_CTRL_FRCSPD
 0x00000800

	)

180 
	#E1000_CTRL_FRCDPX
 0x00001000

	)

184 
	#E1000_CTRL_SWDPIN0
 0x00040000

	)

185 
	#E1000_CTRL_SWDPIN1
 0x00080000

	)

186 
	#E1000_CTRL_SWDPIO0
 0x00400000

	)

187 
	#E1000_CTRL_RST
 0x04000000

	)

188 
	#E1000_CTRL_RFCE
 0x08000000

	)

189 
	#E1000_CTRL_TFCE
 0x10000000

	)

190 
	#E1000_CTRL_VME
 0x40000000

	)

191 
	#E1000_CTRL_PHY_RST
 0x80000000

	)

193 
	#E1000_CTRL_I2C_ENA
 0x02000000

	)

199 
	#E1000_CONNSW_ENRGSRC
 0x4

	)

200 
	#E1000_PCS_CFG_PCS_EN
 8

	)

201 
	#E1000_PCS_LCTL_FLV_LINK_UP
 1

	)

202 
	#E1000_PCS_LCTL_FSV_100
 2

	)

203 
	#E1000_PCS_LCTL_FSV_1000
 4

	)

204 
	#E1000_PCS_LCTL_FDV_FULL
 8

	)

205 
	#E1000_PCS_LCTL_FSD
 0x10

	)

206 
	#E1000_PCS_LCTL_FORCE_LINK
 0x20

	)

207 
	#E1000_PCS_LCTL_FORCE_FCTRL
 0x80

	)

208 
	#E1000_PCS_LCTL_AN_ENABLE
 0x10000

	)

209 
	#E1000_PCS_LCTL_AN_RESTART
 0x20000

	)

210 
	#E1000_PCS_LCTL_AN_TIMEOUT
 0x40000

	)

211 
	#E1000_ENABLE_SERDES_LOOPBACK
 0x0410

	)

213 
	#E1000_PCS_LSTS_LINK_OK
 1

	)

214 
	#E1000_PCS_LSTS_SPEED_100
 2

	)

215 
	#E1000_PCS_LSTS_SPEED_1000
 4

	)

216 
	#E1000_PCS_LSTS_DUPLEX_FULL
 8

	)

217 
	#E1000_PCS_LSTS_SYNK_OK
 0x10

	)

220 
	#E1000_STATUS_FD
 0x00000001

	)

221 
	#E1000_STATUS_LU
 0x00000002

	)

222 
	#E1000_STATUS_FUNC_MASK
 0x0000000C

	)

223 
	#E1000_STATUS_FUNC_SHIFT
 2

	)

224 
	#E1000_STATUS_FUNC_1
 0x00000004

	)

225 
	#E1000_STATUS_TXOFF
 0x00000010

	)

226 
	#E1000_STATUS_SPEED_100
 0x00000040

	)

227 
	#E1000_STATUS_SPEED_1000
 0x00000080

	)

230 
	#E1000_STATUS_GIO_MASTER_ENABLE
 0x00080000

	)

235 
	#SPEED_10
 10

	)

236 
	#SPEED_100
 100

	)

237 
	#SPEED_1000
 1000

	)

238 
	#HALF_DUPLEX
 1

	)

239 
	#FULL_DUPLEX
 2

	)

242 
	#ADVERTISE_10_HALF
 0x0001

	)

243 
	#ADVERTISE_10_FULL
 0x0002

	)

244 
	#ADVERTISE_100_HALF
 0x0004

	)

245 
	#ADVERTISE_100_FULL
 0x0008

	)

246 
	#ADVERTISE_1000_HALF
 0x0010

	)

247 
	#ADVERTISE_1000_FULL
 0x0020

	)

250 
	#E1000_ALL_SPEED_DUPLEX
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_10_FULL
 | \

251 
ADVERTISE_100_HALF
 | 
ADVERTISE_100_FULL
 | \

252 
ADVERTISE_1000_FULL
)

	)

253 
	#E1000_ALL_NOT_GIG
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_10_FULL
 | \

254 
ADVERTISE_100_HALF
 | 
ADVERTISE_100_FULL
)

	)

255 
	#E1000_ALL_100_SPEED
 (
ADVERTISE_100_HALF
 | 
ADVERTISE_100_FULL
)

	)

256 
	#E1000_ALL_10_SPEED
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_10_FULL
)

	)

257 
	#E1000_ALL_FULL_DUPLEX
 (
ADVERTISE_10_FULL
 | 
ADVERTISE_100_FULL
 | \

258 
ADVERTISE_1000_FULL
)

	)

259 
	#E1000_ALL_HALF_DUPLEX
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_100_HALF
)

	)

261 
	#AUTONEG_ADVERTISE_SPEED_DEFAULT
 
E1000_ALL_SPEED_DUPLEX


	)

264 
	#E1000_LEDCTL_LED0_MODE_SHIFT
 0

	)

265 
	#E1000_LEDCTL_LED0_BLINK
 0x00000080

	)

267 
	#E1000_LEDCTL_MODE_LED_ON
 0xE

	)

268 
	#E1000_LEDCTL_MODE_LED_OFF
 0xF

	)

271 
	#E1000_TXD_POPTS_IXSM
 0x01

	)

272 
	#E1000_TXD_POPTS_TXSM
 0x02

	)

273 
	#E1000_TXD_CMD_EOP
 0x01000000

	)

274 
	#E1000_TXD_CMD_IFCS
 0x02000000

	)

275 
	#E1000_TXD_CMD_RS
 0x08000000

	)

276 
	#E1000_TXD_CMD_DEXT
 0x20000000

	)

277 
	#E1000_TXD_STAT_DD
 0x00000001

	)

281 
	#E1000_TCTL_EN
 0x00000002

	)

282 
	#E1000_TCTL_PSP
 0x00000008

	)

283 
	#E1000_TCTL_CT
 0x00000ff0

	)

284 
	#E1000_TCTL_COLD
 0x003ff000

	)

285 
	#E1000_TCTL_RTLC
 0x01000000

	)

290 
	#E1000_SCTL_DISABLE_SERDES_LOOPBACK
 0x0400

	)

293 
	#E1000_RXCSUM_IPOFL
 0x00000100

	)

294 
	#E1000_RXCSUM_TUOFL
 0x00000200

	)

295 
	#E1000_RXCSUM_CRCOFL
 0x00000800

	)

296 
	#E1000_RXCSUM_PCSD
 0x00002000

	)

299 
	#E1000_RFCTL_LEF
 0x00040000

	)

302 
	#E1000_COLLISION_THRESHOLD
 15

	)

303 
	#E1000_CT_SHIFT
 4

	)

304 
	#E1000_COLLISION_DISTANCE
 63

	)

305 
	#E1000_COLD_SHIFT
 12

	)

308 
	#ETHERNET_IEEE_VLAN_TYPE
 0x8100

	)

310 
	#MAX_JUMBO_FRAME_SIZE
 0x3F00

	)

313 
	#E1000_PBA_34K
 0x0022

	)

314 
	#E1000_PBA_64K
 0x0040

	)

317 
	#E1000_SWSM_SMBI
 0x00000001

	)

318 
	#E1000_SWSM_SWESMBI
 0x00000002

	)

321 
	#E1000_ICR_TXDW
 0x00000001

	)

322 
	#E1000_ICR_LSC
 0x00000004

	)

323 
	#E1000_ICR_RXSEQ
 0x00000008

	)

324 
	#E1000_ICR_RXDMT0
 0x00000010

	)

325 
	#E1000_ICR_RXT0
 0x00000080

	)

326 
	#E1000_ICR_VMMB
 0x00000100

	)

327 
	#E1000_ICR_DRSTA
 0x40000000

	)

329 
	#E1000_ICR_INT_ASSERTED
 0x80000000

	)

331 
	#E1000_ICR_DOUTSYNC
 0x10000000

	)

334 
	#E1000_EICR_RX_QUEUE0
 0x00000001

	)

335 
	#E1000_EICR_RX_QUEUE1
 0x00000002

	)

336 
	#E1000_EICR_RX_QUEUE2
 0x00000004

	)

337 
	#E1000_EICR_RX_QUEUE3
 0x00000008

	)

338 
	#E1000_EICR_TX_QUEUE0
 0x00000100

	)

339 
	#E1000_EICR_TX_QUEUE1
 0x00000200

	)

340 
	#E1000_EICR_TX_QUEUE2
 0x00000400

	)

341 
	#E1000_EICR_TX_QUEUE3
 0x00000800

	)

342 
	#E1000_EICR_OTHER
 0x80000000

	)

354 
	#IMS_ENABLE_MASK
 ( \

355 
E1000_IMS_RXT0
 | \

356 
E1000_IMS_TXDW
 | \

357 
E1000_IMS_RXDMT0
 | \

358 
E1000_IMS_RXSEQ
 | \

359 
E1000_IMS_LSC
 | \

360 
E1000_IMS_DOUTSYNC
)

	)

363 
	#E1000_IMS_TXDW
 
E1000_ICR_TXDW


	)

364 
	#E1000_IMS_LSC
 
E1000_ICR_LSC


	)

365 
	#E1000_IMS_VMMB
 
E1000_ICR_VMMB


	)

366 
	#E1000_IMS_RXSEQ
 
E1000_ICR_RXSEQ


	)

367 
	#E1000_IMS_RXDMT0
 
E1000_ICR_RXDMT0


	)

368 
	#E1000_IMS_RXT0
 
E1000_ICR_RXT0


	)

369 
	#E1000_IMS_DRSTA
 
E1000_ICR_DRSTA


	)

370 
	#E1000_IMS_DOUTSYNC
 
E1000_ICR_DOUTSYNC


	)

373 
	#E1000_EIMS_OTHER
 
E1000_EICR_OTHER


	)

376 
	#E1000_ICS_LSC
 
E1000_ICR_LSC


	)

377 
	#E1000_ICS_RXDMT0
 
E1000_ICR_RXDMT0


	)

378 
	#E1000_ICS_DRSTA
 
E1000_ICR_DRSTA


	)

386 
	#FLOW_CONTROL_ADDRESS_LOW
 0x00C28001

	)

387 
	#FLOW_CONTROL_ADDRESS_HIGH
 0x00000100

	)

388 
	#FLOW_CONTROL_TYPE
 0x8808

	)

391 
	#VLAN_TAG_SIZE
 4

	)

392 
	#E1000_VLAN_FILTER_TBL_SIZE
 128

	)

402 
	#E1000_RAH_AV
 0x80000000

	)

403 
	#E1000_RAL_MAC_ADDR_LEN
 4

	)

404 
	#E1000_RAH_MAC_ADDR_LEN
 2

	)

405 
	#E1000_RAH_POOL_MASK
 0x03FC0000

	)

406 
	#E1000_RAH_POOL_1
 0x00040000

	)

409 
	#E1000_ERR_NVM
 1

	)

410 
	#E1000_ERR_PHY
 2

	)

411 
	#E1000_ERR_CONFIG
 3

	)

412 
	#E1000_ERR_PARAM
 4

	)

413 
	#E1000_ERR_MAC_INIT
 5

	)

414 
	#E1000_ERR_RESET
 9

	)

415 
	#E1000_ERR_MASTER_REQUESTS_PENDING
 10

	)

416 
	#E1000_BLK_PHY_RESET
 12

	)

417 
	#E1000_ERR_SWFW_SYNC
 13

	)

418 
	#E1000_NOT_IMPLEMENTED
 14

	)

419 
	#E1000_ERR_MBX
 15

	)

422 
	#COPPER_LINK_UP_LIMIT
 10

	)

423 
	#PHY_AUTO_NEG_LIMIT
 45

	)

424 
	#PHY_FORCE_LIMIT
 20

	)

426 
	#MASTER_DISABLE_TIMEOUT
 800

	)

428 
	#PHY_CFG_TIMEOUT
 100

	)

431 
	#AUTO_READ_DONE_TIMEOUT
 10

	)

434 
	#E1000_FCRTL_XONE
 0x80000000

	)

436 
	#E1000_TSYNCTXCTL_VALID
 0x00000001

	)

437 
	#E1000_TSYNCTXCTL_ENABLED
 0x00000010

	)

439 
	#E1000_TSYNCRXCTL_VALID
 0x00000001

	)

440 
	#E1000_TSYNCRXCTL_TYPE_MASK
 0x0000000E

	)

441 
	#E1000_TSYNCRXCTL_TYPE_L2_V2
 0x00

	)

442 
	#E1000_TSYNCRXCTL_TYPE_L4_V1
 0x02

	)

443 
	#E1000_TSYNCRXCTL_TYPE_L2_L4_V2
 0x04

	)

444 
	#E1000_TSYNCRXCTL_TYPE_ALL
 0x08

	)

445 
	#E1000_TSYNCRXCTL_TYPE_EVENT_V2
 0x0A

	)

446 
	#E1000_TSYNCRXCTL_ENABLED
 0x00000010

	)

448 
	#E1000_TSYNCRXCFG_PTP_V1_CTRLT_MASK
 0x000000FF

	)

449 
	#E1000_TSYNCRXCFG_PTP_V1_SYNC_MESSAGE
 0x00

	)

450 
	#E1000_TSYNCRXCFG_PTP_V1_DELAY_REQ_MESSAGE
 0x01

	)

451 
	#E1000_TSYNCRXCFG_PTP_V1_FOLLOWUP_MESSAGE
 0x02

	)

452 
	#E1000_TSYNCRXCFG_PTP_V1_DELAY_RESP_MESSAGE
 0x03

	)

453 
	#E1000_TSYNCRXCFG_PTP_V1_MANAGEMENT_MESSAGE
 0x04

	)

455 
	#E1000_TSYNCRXCFG_PTP_V2_MSGID_MASK
 0x00000F00

	)

456 
	#E1000_TSYNCRXCFG_PTP_V2_SYNC_MESSAGE
 0x0000

	)

457 
	#E1000_TSYNCRXCFG_PTP_V2_DELAY_REQ_MESSAGE
 0x0100

	)

458 
	#E1000_TSYNCRXCFG_PTP_V2_PATH_DELAY_REQ_MESSAGE
 0x0200

	)

459 
	#E1000_TSYNCRXCFG_PTP_V2_PATH_DELAY_RESP_MESSAGE
 0x0300

	)

460 
	#E1000_TSYNCRXCFG_PTP_V2_FOLLOWUP_MESSAGE
 0x0800

	)

461 
	#E1000_TSYNCRXCFG_PTP_V2_DELAY_RESP_MESSAGE
 0x0900

	)

462 
	#E1000_TSYNCRXCFG_PTP_V2_PATH_DELAY_FOLLOWUP_MESSAGE
 0x0A00

	)

463 
	#E1000_TSYNCRXCFG_PTP_V2_ANNOUNCE_MESSAGE
 0x0B00

	)

464 
	#E1000_TSYNCRXCFG_PTP_V2_SIGNALLING_MESSAGE
 0x0C00

	)

465 
	#E1000_TSYNCRXCFG_PTP_V2_MANAGEMENT_MESSAGE
 0x0D00

	)

467 
	#E1000_TIMINCA_16NS_SHIFT
 24

	)

470 
	#E1000_GCR_CMPL_TMOUT_MASK
 0x0000F000

	)

471 
	#E1000_GCR_CMPL_TMOUT_10ms
 0x00001000

	)

472 
	#E1000_GCR_CMPL_TMOUT_RESEND
 0x00010000

	)

473 
	#E1000_GCR_CAP_VER2
 0x00040000

	)

476 
	#MII_CR_FULL_DUPLEX
 0x0100

	)

477 
	#MII_CR_RESTART_AUTO_NEG
 0x0200

	)

478 
	#MII_CR_POWER_DOWN
 0x0800

	)

479 
	#MII_CR_AUTO_NEG_EN
 0x1000

	)

480 
	#MII_CR_LOOPBACK
 0x4000

	)

481 
	#MII_CR_RESET
 0x8000

	)

482 
	#MII_CR_SPEED_1000
 0x0040

	)

483 
	#MII_CR_SPEED_100
 0x2000

	)

484 
	#MII_CR_SPEED_10
 0x0000

	)

487 
	#MII_SR_LINK_STATUS
 0x0004

	)

488 
	#MII_SR_AUTONEG_COMPLETE
 0x0020

	)

491 
	#NWAY_AR_10T_HD_CAPS
 0x0020

	)

492 
	#NWAY_AR_10T_FD_CAPS
 0x0040

	)

493 
	#NWAY_AR_100TX_HD_CAPS
 0x0080

	)

494 
	#NWAY_AR_100TX_FD_CAPS
 0x0100

	)

495 
	#NWAY_AR_PAUSE
 0x0400

	)

496 
	#NWAY_AR_ASM_DIR
 0x0800

	)

499 
	#NWAY_LPAR_PAUSE
 0x0400

	)

500 
	#NWAY_LPAR_ASM_DIR
 0x0800

	)

505 
	#CR_1000T_HD_CAPS
 0x0100

	)

506 
	#CR_1000T_FD_CAPS
 0x0200

	)

507 
	#CR_1000T_MS_VALUE
 0x0800

	)

509 
	#CR_1000T_MS_ENABLE
 0x1000

	)

513 
	#SR_1000T_REMOTE_RX_STATUS
 0x1000

	)

514 
	#SR_1000T_LOCAL_RX_STATUS
 0x2000

	)

519 
	#PHY_CONTROL
 0x00

	)

520 
	#PHY_STATUS
 0x01

	)

521 
	#PHY_ID1
 0x02

	)

522 
	#PHY_ID2
 0x03

	)

523 
	#PHY_AUTONEG_ADV
 0x04

	)

524 
	#PHY_LP_ABILITY
 0x05

	)

525 
	#PHY_1000T_CTRL
 0x09

	)

526 
	#PHY_1000T_STATUS
 0x0A

	)

529 
	#E1000_EECD_SK
 0x00000001

	)

530 
	#E1000_EECD_CS
 0x00000002

	)

531 
	#E1000_EECD_DI
 0x00000004

	)

532 
	#E1000_EECD_DO
 0x00000008

	)

533 
	#E1000_EECD_REQ
 0x00000040

	)

534 
	#E1000_EECD_GNT
 0x00000080

	)

535 
	#E1000_EECD_PRES
 0x00000100

	)

537 
	#E1000_EECD_ADDR_BITS
 0x00000400

	)

538 
	#E1000_NVM_GRANT_ATTEMPTS
 1000

	)

539 
	#E1000_EECD_AUTO_RD
 0x00000200

	)

540 
	#E1000_EECD_SIZE_EX_MASK
 0x00007800

	)

541 
	#E1000_EECD_SIZE_EX_SHIFT
 11

	)

544 
	#E1000_NVM_RW_REG_DATA
 16

	)

545 
	#E1000_NVM_RW_REG_DONE
 2

	)

546 
	#E1000_NVM_RW_REG_START
 1

	)

547 
	#E1000_NVM_RW_ADDR_SHIFT
 2

	)

548 
	#E1000_NVM_POLL_READ
 0

	)

551 
	#NVM_ID_LED_SETTINGS
 0x0004

	)

553 
	#NVM_INIT_CONTROL2_REG
 0x000F

	)

554 
	#NVM_INIT_CONTROL3_PORT_B
 0x0014

	)

555 
	#NVM_INIT_CONTROL3_PORT_A
 0x0024

	)

556 
	#NVM_ALT_MAC_ADDR_PTR
 0x0037

	)

557 
	#NVM_CHECKSUM_REG
 0x003F

	)

559 
	#E1000_NVM_CFG_DONE_PORT_0
 0x040000

	)

560 
	#E1000_NVM_CFG_DONE_PORT_1
 0x080000

	)

561 
	#E1000_NVM_CFG_DONE_PORT_2
 0x100000

	)

562 
	#E1000_NVM_CFG_DONE_PORT_3
 0x200000

	)

564 
	#NVM_82580_LAN_FUNC_OFFSET
(
a
Ë◊ ? (0x40 + (0x40 *á)Ë: 0)

	)

567 
	#NVM_WORD0F_PAUSE_MASK
 0x3000

	)

568 
	#NVM_WORD0F_ASM_DIR
 0x2000

	)

573 
	#NVM_SUM
 0xBABA

	)

575 
	#NVM_PBA_OFFSET_0
 8

	)

576 
	#NVM_PBA_OFFSET_1
 9

	)

577 
	#NVM_WORD_SIZE_BASE_SHIFT
 6

	)

582 
	#NVM_MAX_RETRY_SPI
 5000

	)

583 
	#NVM_WRITE_OPCODE_SPI
 0x02

	)

584 
	#NVM_A8_OPCODE_SPI
 0x08

	)

585 
	#NVM_WREN_OPCODE_SPI
 0x06

	)

586 
	#NVM_RDSR_OPCODE_SPI
 0x05

	)

589 
	#NVM_STATUS_RDY_SPI
 0x01

	)

592 
	#ID_LED_RESERVED_0000
 0x0000

	)

593 
	#ID_LED_RESERVED_FFFF
 0xFFFF

	)

594 
	#ID_LED_DEFAULT
 ((
ID_LED_OFF1_ON2
 << 12) | \

595 (
ID_LED_OFF1_OFF2
 << 8) | \

596 (
ID_LED_DEF1_DEF2
 << 4) | \

597 (
ID_LED_DEF1_DEF2
))

	)

598 
	#ID_LED_DEF1_DEF2
 0x1

	)

599 
	#ID_LED_DEF1_ON2
 0x2

	)

600 
	#ID_LED_DEF1_OFF2
 0x3

	)

601 
	#ID_LED_ON1_DEF2
 0x4

	)

602 
	#ID_LED_ON1_ON2
 0x5

	)

603 
	#ID_LED_ON1_OFF2
 0x6

	)

604 
	#ID_LED_OFF1_DEF2
 0x7

	)

605 
	#ID_LED_OFF1_ON2
 0x8

	)

606 
	#ID_LED_OFF1_OFF2
 0x9

	)

608 
	#IGP_ACTIVITY_LED_MASK
 0xFFFFF0FF

	)

609 
	#IGP_ACTIVITY_LED_ENABLE
 0x0300

	)

610 
	#IGP_LED3_MODE
 0x07000000

	)

613 
	#PCIE_DEVICE_CONTROL2
 0x28

	)

614 
	#PCIE_DEVICE_CONTROL2_16ms
 0x0005

	)

616 
	#PHY_REVISION_MASK
 0xFFFFFFF0

	)

617 
	#MAX_PHY_REG_ADDRESS
 0x1F

	)

618 
	#MAX_PHY_MULTI_PAGE_REG
 0xF

	)

625 
	#M88E1111_I_PHY_ID
 0x01410CC0

	)

626 
	#IGP03E1000_E_PHY_ID
 0x02A80390

	)

627 
	#I82580_I_PHY_ID
 0x015403A0

	)

628 
	#I350_I_PHY_ID
 0x015403B0

	)

629 
	#M88_VENDOR
 0x0141

	)

632 
	#M88E1000_PHY_SPEC_CTRL
 0x10

	)

633 
	#M88E1000_PHY_SPEC_STATUS
 0x11

	)

634 
	#M88E1000_EXT_PHY_SPEC_CTRL
 0x14

	)

636 
	#M88E1000_PHY_PAGE_SELECT
 0x1D

	)

637 
	#M88E1000_PHY_GEN_CONTROL
 0x1E

	)

640 
	#M88E1000_PSCR_POLARITY_REVERSAL
 0x0002

	)

642 
	#M88E1000_PSCR_MDI_MANUAL_MODE
 0x0000

	)

644 
	#M88E1000_PSCR_MDIX_MANUAL_MODE
 0x0020

	)

646 
	#M88E1000_PSCR_AUTO_X_1000T
 0x0040

	)

648 
	#M88E1000_PSCR_AUTO_X_MODE
 0x0060

	)

654 
	#M88E1000_PSCR_ASSERT_CRS_ON_TX
 0x0800

	)

657 
	#M88E1000_PSSR_REV_POLARITY
 0x0002

	)

658 
	#M88E1000_PSSR_DOWNSHIFT
 0x0020

	)

659 
	#M88E1000_PSSR_MDIX
 0x0040

	)

667 
	#M88E1000_PSSR_CABLE_LENGTH
 0x0380

	)

668 
	#M88E1000_PSSR_SPEED
 0xC000

	)

669 
	#M88E1000_PSSR_1000MBS
 0x8000

	)

671 
	#M88E1000_PSSR_CABLE_LENGTH_SHIFT
 7

	)

684 
	#M88E1000_EPSCR_MASTER_DOWNSHIFT_MASK
 0x0C00

	)

685 
	#M88E1000_EPSCR_MASTER_DOWNSHIFT_1X
 0x0000

	)

690 
	#M88E1000_EPSCR_SLAVE_DOWNSHIFT_MASK
 0x0300

	)

691 
	#M88E1000_EPSCR_SLAVE_DOWNSHIFT_1X
 0x0100

	)

692 
	#M88E1000_EPSCR_TX_CLK_25
 0x0070

	)

695 
	#M88EC018_EPSCR_DOWNSHIFT_COUNTER_MASK
 0x0E00

	)

696 
	#M88EC018_EPSCR_DOWNSHIFT_COUNTER_5X
 0x0800

	)

699 
	#E1000_MDIC_REG_SHIFT
 16

	)

700 
	#E1000_MDIC_PHY_SHIFT
 21

	)

701 
	#E1000_MDIC_OP_WRITE
 0x04000000

	)

702 
	#E1000_MDIC_OP_READ
 0x08000000

	)

703 
	#E1000_MDIC_READY
 0x10000000

	)

704 
	#E1000_MDIC_ERROR
 0x40000000

	)

707 
	#E1000_GEN_CTL_READY
 0x80000000

	)

708 
	#E1000_GEN_CTL_ADDRESS_SHIFT
 8

	)

709 
	#E1000_GEN_POLL_TIMEOUT
 640

	)

711 
	#E1000_VFTA_ENTRY_SHIFT
 5

	)

712 
	#E1000_VFTA_ENTRY_MASK
 0x7F

	)

713 
	#E1000_VFTA_ENTRY_BIT_SHIFT_MASK
 0x1F

	)

716 
	#E1000_PCIEMISC_LX_DECISION
 0x00000080

	)

	@include/linux-net/e1000_regs.h

28 #i‚de‡
_E1000_REGS_H_


29 
	#_E1000_REGS_H_


	)

31 
	#E1000_CTRL
 0x00000

	)

32 
	#E1000_STATUS
 0x00008

	)

33 
	#E1000_EECD
 0x00010

	)

34 
	#E1000_EERD
 0x00014

	)

35 
	#E1000_CTRL_EXT
 0x00018

	)

36 
	#E1000_MDIC
 0x00020

	)

37 
	#E1000_MDICNFG
 0x00E04

	)

38 
	#E1000_SCTL
 0x00024

	)

39 
	#E1000_FCAL
 0x00028

	)

40 
	#E1000_FCAH
 0x0002C

	)

41 
	#E1000_FCT
 0x00030

	)

42 
	#E1000_CONNSW
 0x00034

	)

43 
	#E1000_VET
 0x00038

	)

44 
	#E1000_ICR
 0x000C0

	)

45 
	#E1000_ITR
 0x000C4

	)

46 
	#E1000_ICS
 0x000C8

	)

47 
	#E1000_IMS
 0x000D0

	)

48 
	#E1000_IMC
 0x000D8

	)

49 
	#E1000_IAM
 0x000E0

	)

50 
	#E1000_RCTL
 0x00100

	)

51 
	#E1000_FCTTV
 0x00170

	)

52 
	#E1000_TXCW
 0x00178

	)

53 
	#E1000_EICR
 0x01580

	)

54 
	#E1000_EITR
(
_n
Ë(0x01680 + (0x4 * (_n)))

	)

55 
	#E1000_EICS
 0x01520

	)

56 
	#E1000_EIMS
 0x01524

	)

57 
	#E1000_EIMC
 0x01528

	)

58 
	#E1000_EIAC
 0x0152C

	)

59 
	#E1000_EIAM
 0x01530

	)

60 
	#E1000_GPIE
 0x01514

	)

61 
	#E1000_IVAR0
 0x01700

	)

62 
	#E1000_IVAR_MISC
 0x01740

	)

63 
	#E1000_TCTL
 0x00400

	)

64 
	#E1000_TCTL_EXT
 0x00404

	)

65 
	#E1000_TIPG
 0x00410

	)

66 
	#E1000_AIT
 0x00458

	)

67 
	#E1000_LEDCTL
 0x00E00

	)

68 
	#E1000_PBA
 0x01000

	)

69 
	#E1000_PBS
 0x01008

	)

70 
	#E1000_EEMNGCTL
 0x01010

	)

71 
	#E1000_EEWR
 0x0102C

	)

72 
	#E1000_I2CCMD
 0x01028

	)

73 
	#E1000_FRTIMER
 0x01048

	)

74 
	#E1000_TCPTIMER
 0x0104C

	)

75 
	#E1000_FCRTL
 0x02160

	)

76 
	#E1000_FCRTH
 0x02168

	)

77 
	#E1000_FCRTV
 0x02460

	)

80 
	#E1000_TSYNCRXCTL
 0x0B620

	)

81 
	#E1000_TSYNCTXCTL
 0x0B614

	)

82 
	#E1000_TSYNCRXCFG
 0x05F50

	)

83 
	#E1000_RXSTMPL
 0x0B624

	)

84 
	#E1000_RXSTMPH
 0x0B628

	)

85 
	#E1000_RXSATRL
 0x0B62C

	)

86 
	#E1000_RXSATRH
 0x0B630

	)

87 
	#E1000_TXSTMPL
 0x0B618

	)

88 
	#E1000_TXSTMPH
 0x0B61C

	)

89 
	#E1000_SYSTIML
 0x0B600

	)

90 
	#E1000_SYSTIMH
 0x0B604

	)

91 
	#E1000_TIMINCA
 0x0B608

	)

92 
	#E1000_TSAUXC
 0x0B640

	)

93 
	#E1000_SYSTIMR
 0x0B6F8

	)

96 
	#E1000_SAQF
(
_n
Ë(0x5980 + 4 * (_n))

	)

97 
	#E1000_DAQF
(
_n
Ë(0x59A0 + 4 * (_n))

	)

98 
	#E1000_SPQF
(
_n
Ë(0x59C0 + 4 * (_n))

	)

99 
	#E1000_FTQF
(
_n
Ë(0x59E0 + 4 * (_n))

	)

100 
	#E1000_SAQF0
 
	`E1000_SAQF
(0)

	)

101 
	#E1000_DAQF0
 
	`E1000_DAQF
(0)

	)

102 
	#E1000_SPQF0
 
	`E1000_SPQF
(0)

	)

103 
	#E1000_FTQF0
 
	`E1000_FTQF
(0)

	)

104 
	#E1000_SYNQF
(
_n
Ë(0x055FC + (4 * (_n))Ë

	)

105 
	#E1000_ETQF
(
_n
Ë(0x05CB0 + (4 * (_n))Ë

	)

107 
	#E1000_RQDPC
(
_n
Ë(0x0C030 + ((_nË* 0x40))

	)

110 
	#E1000_RXPBS
 0x02404

	)

119 
	#E1000_RDBAL
(
_n
) ((_n) < 4 ? (0x02800 + ((_n) * 0x100)) \

120 : (0x0C000 + ((
_n
Ë* 0x40)))

	)

121 
	#E1000_RDBAH
(
_n
) ((_n) < 4 ? (0x02804 + ((_n) * 0x100)) \

122 : (0x0C004 + ((
_n
Ë* 0x40)))

	)

123 
	#E1000_RDLEN
(
_n
) ((_n) < 4 ? (0x02808 + ((_n) * 0x100)) \

124 : (0x0C008 + ((
_n
Ë* 0x40)))

	)

125 
	#E1000_SRRCTL
(
_n
) ((_n) < 4 ? (0x0280C + ((_n) * 0x100)) \

126 : (0x0C00C + ((
_n
Ë* 0x40)))

	)

127 
	#E1000_RDH
(
_n
) ((_n) < 4 ? (0x02810 + ((_n) * 0x100)) \

128 : (0x0C010 + ((
_n
Ë* 0x40)))

	)

129 
	#E1000_RDT
(
_n
) ((_n) < 4 ? (0x02818 + ((_n) * 0x100)) \

130 : (0x0C018 + ((
_n
Ë* 0x40)))

	)

131 
	#E1000_RXDCTL
(
_n
) ((_n) < 4 ? (0x02828 + ((_n) * 0x100)) \

132 : (0x0C028 + ((
_n
Ë* 0x40)))

	)

133 
	#E1000_TDBAL
(
_n
) ((_n) < 4 ? (0x03800 + ((_n) * 0x100)) \

134 : (0x0E000 + ((
_n
Ë* 0x40)))

	)

135 
	#E1000_TDBAH
(
_n
) ((_n) < 4 ? (0x03804 + ((_n) * 0x100)) \

136 : (0x0E004 + ((
_n
Ë* 0x40)))

	)

137 
	#E1000_TDLEN
(
_n
) ((_n) < 4 ? (0x03808 + ((_n) * 0x100)) \

138 : (0x0E008 + ((
_n
Ë* 0x40)))

	)

139 
	#E1000_TDH
(
_n
) ((_n) < 4 ? (0x03810 + ((_n) * 0x100)) \

140 : (0x0E010 + ((
_n
Ë* 0x40)))

	)

141 
	#E1000_TDT
(
_n
) ((_n) < 4 ? (0x03818 + ((_n) * 0x100)) \

142 : (0x0E018 + ((
_n
Ë* 0x40)))

	)

143 
	#E1000_TXDCTL
(
_n
) ((_n) < 4 ? (0x03828 + ((_n) * 0x100)) \

144 : (0x0E028 + ((
_n
Ë* 0x40)))

	)

145 
	#E1000_DCA_TXCTRL
(
_n
Ë(0x03814 + (_¿<< 8))

	)

146 
	#E1000_DCA_RXCTRL
(
_n
Ë(0x02814 + (_¿<< 8))

	)

147 
	#E1000_TDWBAL
(
_n
) ((_n) < 4 ? (0x03838 + ((_n) * 0x100)) \

148 : (0x0E038 + ((
_n
Ë* 0x40)))

	)

149 
	#E1000_TDWBAH
(
_n
) ((_n) < 4 ? (0x0383C + ((_n) * 0x100)) \

150 : (0x0E03C + ((
_n
Ë* 0x40)))

	)

151 
	#E1000_TDFH
 0x03410

	)

152 
	#E1000_TDFT
 0x03418

	)

153 
	#E1000_TDFHS
 0x03420

	)

154 
	#E1000_TDFPC
 0x03430

	)

155 
	#E1000_DTXCTL
 0x03590

	)

156 
	#E1000_CRCERRS
 0x04000

	)

157 
	#E1000_ALGNERRC
 0x04004

	)

158 
	#E1000_SYMERRS
 0x04008

	)

159 
	#E1000_RXERRC
 0x0400C

	)

160 
	#E1000_MPC
 0x04010

	)

161 
	#E1000_SCC
 0x04014

	)

162 
	#E1000_ECOL
 0x04018

	)

163 
	#E1000_MCC
 0x0401C

	)

164 
	#E1000_LATECOL
 0x04020

	)

165 
	#E1000_COLC
 0x04028

	)

166 
	#E1000_DC
 0x04030

	)

167 
	#E1000_TNCRS
 0x04034

	)

168 
	#E1000_SEC
 0x04038

	)

169 
	#E1000_CEXTERR
 0x0403C

	)

170 
	#E1000_RLEC
 0x04040

	)

171 
	#E1000_XONRXC
 0x04048

	)

172 
	#E1000_XONTXC
 0x0404C

	)

173 
	#E1000_XOFFRXC
 0x04050

	)

174 
	#E1000_XOFFTXC
 0x04054

	)

175 
	#E1000_FCRUC
 0x04058

	)

176 
	#E1000_PRC64
 0x0405C

	)

177 
	#E1000_PRC127
 0x04060

	)

178 
	#E1000_PRC255
 0x04064

	)

179 
	#E1000_PRC511
 0x04068

	)

180 
	#E1000_PRC1023
 0x0406C

	)

181 
	#E1000_PRC1522
 0x04070

	)

182 
	#E1000_GPRC
 0x04074

	)

183 
	#E1000_BPRC
 0x04078

	)

184 
	#E1000_MPRC
 0x0407C

	)

185 
	#E1000_GPTC
 0x04080

	)

186 
	#E1000_GORCL
 0x04088

	)

187 
	#E1000_GORCH
 0x0408C

	)

188 
	#E1000_GOTCL
 0x04090

	)

189 
	#E1000_GOTCH
 0x04094

	)

190 
	#E1000_RNBC
 0x040A0

	)

191 
	#E1000_RUC
 0x040A4

	)

192 
	#E1000_RFC
 0x040A8

	)

193 
	#E1000_ROC
 0x040AC

	)

194 
	#E1000_RJC
 0x040B0

	)

195 
	#E1000_MGTPRC
 0x040B4

	)

196 
	#E1000_MGTPDC
 0x040B8

	)

197 
	#E1000_MGTPTC
 0x040BC

	)

198 
	#E1000_TORL
 0x040C0

	)

199 
	#E1000_TORH
 0x040C4

	)

200 
	#E1000_TOTL
 0x040C8

	)

201 
	#E1000_TOTH
 0x040CC

	)

202 
	#E1000_TPR
 0x040D0

	)

203 
	#E1000_TPT
 0x040D4

	)

204 
	#E1000_PTC64
 0x040D8

	)

205 
	#E1000_PTC127
 0x040DC

	)

206 
	#E1000_PTC255
 0x040E0

	)

207 
	#E1000_PTC511
 0x040E4

	)

208 
	#E1000_PTC1023
 0x040E8

	)

209 
	#E1000_PTC1522
 0x040EC

	)

210 
	#E1000_MPTC
 0x040F0

	)

211 
	#E1000_BPTC
 0x040F4

	)

212 
	#E1000_TSCTC
 0x040F8

	)

213 
	#E1000_TSCTFC
 0x040FC

	)

214 
	#E1000_IAC
 0x04100

	)

216 
	#E1000_ICRXPTC
 0x04104

	)

218 
	#E1000_ICRXATC
 0x04108

	)

220 
	#E1000_ICTXPTC
 0x0410C

	)

222 
	#E1000_ICTXATC
 0x04110

	)

224 
	#E1000_ICTXQEC
 0x04118

	)

226 
	#E1000_ICTXQMTC
 0x0411C

	)

228 
	#E1000_ICRXDMTC
 0x04120

	)

229 
	#E1000_ICRXOC
 0x04124

	)

230 
	#E1000_PCS_CFG0
 0x04200

	)

231 
	#E1000_PCS_LCTL
 0x04208

	)

232 
	#E1000_PCS_LSTAT
 0x0420C

	)

233 
	#E1000_CBTMPC
 0x0402C

	)

234 
	#E1000_HTDPMC
 0x0403C

	)

235 
	#E1000_CBRMPC
 0x040FC

	)

236 
	#E1000_RPTHC
 0x04104

	)

237 
	#E1000_HGPTC
 0x04118

	)

238 
	#E1000_HTCBDPC
 0x04124

	)

239 
	#E1000_HGORCL
 0x04128

	)

240 
	#E1000_HGORCH
 0x0412C

	)

241 
	#E1000_HGOTCL
 0x04130

	)

242 
	#E1000_HGOTCH
 0x04134

	)

243 
	#E1000_LENERRS
 0x04138

	)

244 
	#E1000_SCVPC
 0x04228

	)

245 
	#E1000_PCS_ANADV
 0x04218

	)

246 
	#E1000_PCS_LPAB
 0x0421C

	)

247 
	#E1000_PCS_NPTX
 0x04220

	)

248 
	#E1000_PCS_LPABNP
 0x04224

	)

249 
	#E1000_RXCSUM
 0x05000

	)

250 
	#E1000_RLPML
 0x05004

	)

251 
	#E1000_RFCTL
 0x05008

	)

252 
	#E1000_MTA
 0x05200

	)

253 
	#E1000_RA
 0x05400

	)

254 
	#E1000_RA2
 0x054E0

	)

255 
	#E1000_PSRTYPE
(
_i
Ë(0x05480 + ((_iË* 4))

	)

256 
	#E1000_RAL
(
_i
) (((_i) <= 15) ? (0x05400 + ((_i) * 8)) : \

257 (0x054E0 + ((
_i
 - 16Ë* 8)))

	)

258 
	#E1000_RAH
(
_i
) (((_i) <= 15) ? (0x05404 + ((_i) * 8)) : \

259 (0x054E4 + ((
_i
 - 16Ë* 8)))

	)

260 
	#E1000_IP4AT_REG
(
_i
Ë(0x05840 + ((_iË* 8))

	)

261 
	#E1000_IP6AT_REG
(
_i
Ë(0x05880 + ((_iË* 4))

	)

262 
	#E1000_WUPM_REG
(
_i
Ë(0x05A00 + ((_iË* 4))

	)

263 
	#E1000_FFMT_REG
(
_i
Ë(0x09000 + ((_iË* 8))

	)

264 
	#E1000_FFVT_REG
(
_i
Ë(0x09800 + ((_iË* 8))

	)

265 
	#E1000_FFLT_REG
(
_i
Ë(0x05F00 + ((_iË* 8))

	)

266 
	#E1000_VFTA
 0x05600

	)

267 
	#E1000_VT_CTL
 0x0581C

	)

268 
	#E1000_WUC
 0x05800

	)

269 
	#E1000_WUFC
 0x05808

	)

270 
	#E1000_WUS
 0x05810

	)

271 
	#E1000_MANC
 0x05820

	)

272 
	#E1000_IPAV
 0x05838

	)

273 
	#E1000_WUPL
 0x05900

	)

275 
	#E1000_SW_FW_SYNC
 0x05B5C

	)

276 
	#E1000_CCMCTL
 0x05B48

	)

277 
	#E1000_GIOCTL
 0x05B44

	)

278 
	#E1000_SCCTL
 0x05B4C

	)

279 
	#E1000_GCR
 0x05B00

	)

280 
	#E1000_FACTPS
 0x05B30

	)

281 
	#E1000_SWSM
 0x05B50

	)

282 
	#E1000_FWSM
 0x05B54

	)

283 
	#E1000_DCA_CTRL
 0x05B74

	)

286 
	#E1000_MRQC
 0x05818

	)

287 
	#E1000_IMIR
(
_i
Ë(0x05A80 + ((_iË* 4)Ë

	)

288 
	#E1000_IMIREXT
(
_i
Ë(0x05AA0 + ((_iË* 4)Ë

	)

289 
	#E1000_IMIRVP
 0x05AC0

	)

291 
	#E1000_MSIXBM
(
_i
Ë(0x01600 + ((_iË* 4))

	)

293 
	#E1000_RETA
(
_i
Ë(0x05C00 + ((_iË* 4))

	)

294 
	#E1000_RSSRK
(
_i
Ë(0x05C80 + ((_iË* 4)Ë

	)

297 
	#E1000_MBVFICR
 0x00C80

	)

298 
	#E1000_MBVFIMR
 0x00C84

	)

299 
	#E1000_VFLRE
 0x00C88

	)

300 
	#E1000_VFRE
 0x00C8C

	)

301 
	#E1000_VFTE
 0x00C90

	)

302 
	#E1000_QDE
 0x02408

	)

303 
	#E1000_DTXSWC
 0x03500

	)

304 
	#E1000_RPLOLR
 0x05AF0

	)

305 
	#E1000_UTA
 0x0A000

	)

306 
	#E1000_IOVTCL
 0x05BBC

	)

308 
	#E1000_P2VMAILBOX
(
_n
Ë(0x00C00 + (4 * (_n)))

	)

309 
	#E1000_VMBMEM
(
_n
Ë(0x00800 + (64 * (_n)))

	)

310 
	#E1000_VMOLR
(
_n
Ë(0x05AD0 + (4 * (_n)))

	)

311 
	#E1000_VLVF
(
_n
Ë(0x05D00 + (4 * (_n))Ë

	)

313 
	#E1000_VMVIR
(
_n
Ë(0x03700 + (4 * (_n)))

	)

315 
	#wr32
(
ªg
, 
vÆue
Ë(
	`wrôñ
(vÆue, 
hw
->
hw_addr
 +Ñeg))

	)

316 
	#rd32
(
ªg
Ë(
	`ªadl
(
hw
->
hw_addr
 +Ñeg))

	)

317 
	#wrÊ
(Ë(()
	`rd32
(
E1000_STATUS
))

	)

319 
	#¨øy_wr32
(
ªg
, 
off£t
, 
vÆue
) \

320 (
	`wrôñ
(
vÆue
, 
hw
->
hw_addr
 + 
ªg
 + ((
off£t
Ë<< 2)))

	)

321 
	#¨øy_rd32
(
ªg
, 
off£t
) \

322 (
	`ªadl
(
hw
->
hw_addr
 + 
ªg
 + ((
off£t
Ë<< 2)))

	)

325 
	#E1000_PCIEMISC
 0x05BB8

	)

	@include/linux-net/icmp.h

17 #i‚de‡
_LINUX_ICMP_H


18 
	#_LINUX_ICMP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	#ICMP_ECHOREPLY
 0

	)

23 
	#ICMP_DEST_UNREACH
 3

	)

24 
	#ICMP_SOURCE_QUENCH
 4

	)

25 
	#ICMP_REDIRECT
 5

	)

26 
	#ICMP_ECHO
 8

	)

27 
	#ICMP_TIME_EXCEEDED
 11

	)

28 
	#ICMP_PARAMETERPROB
 12

	)

29 
	#ICMP_TIMESTAMP
 13

	)

30 
	#ICMP_TIMESTAMPREPLY
 14

	)

31 
	#ICMP_INFO_REQUEST
 15

	)

32 
	#ICMP_INFO_REPLY
 16

	)

33 
	#ICMP_ADDRESS
 17

	)

34 
	#ICMP_ADDRESSREPLY
 18

	)

35 
	#NR_ICMP_TYPES
 18

	)

39 
	#ICMP_NET_UNREACH
 0

	)

40 
	#ICMP_HOST_UNREACH
 1

	)

41 
	#ICMP_PROT_UNREACH
 2

	)

42 
	#ICMP_PORT_UNREACH
 3

	)

43 
	#ICMP_FRAG_NEEDED
 4

	)

44 
	#ICMP_SR_FAILED
 5

	)

45 
	#ICMP_NET_UNKNOWN
 6

	)

46 
	#ICMP_HOST_UNKNOWN
 7

	)

47 
	#ICMP_HOST_ISOLATED
 8

	)

48 
	#ICMP_NET_ANO
 9

	)

49 
	#ICMP_HOST_ANO
 10

	)

50 
	#ICMP_NET_UNR_TOS
 11

	)

51 
	#ICMP_HOST_UNR_TOS
 12

	)

52 
	#ICMP_PKT_FILTERED
 13

	)

53 
	#ICMP_PREC_VIOLATION
 14

	)

54 
	#ICMP_PREC_CUTOFF
 15

	)

55 
	#NR_ICMP_UNREACH
 15

	)

58 
	#ICMP_REDIR_NET
 0

	)

59 
	#ICMP_REDIR_HOST
 1

	)

60 
	#ICMP_REDIR_NETTOS
 2

	)

61 
	#ICMP_REDIR_HOSTTOS
 3

	)

64 
	#ICMP_EXC_TTL
 0

	)

65 
	#ICMP_EXC_FRAGTIME
 1

	)

68 
	sicmphdr
 {

69 
__u8
 
	mty≥
;

70 
__u8
 
	mcode
;

71 
__sum16
 
	mchecksum
;

74 
__be16
 
	mid
;

75 
__be16
 
	m£quí˚
;

76 } 
	mecho
;

77 
__be32
 
	mg©eway
;

79 
__be16
 
	m__unu£d
;

80 
__be16
 
	mmtu
;

81 } 
	m‰ag
;

82 } 
	mun
;

85 #ifde‡
__KERNEL__


86 
	~<löux/skbuff.h
>

88 
ölöe
 
icmphdr
 *
	$icmp_hdr
(c⁄° 
sk_buff
 *
skb
)

90  (
icmphdr
 *)
	`skb_å™•‹t_hódî
(
skb
);

91 
	}
}

98 
	#ICMP_FILTER
 1

	)

100 
	sicmp_fûãr
 {

101 
__u32
 
	md©a
;

	@include/linux-net/icmpv6.h

1 #i‚de‡
_LINUX_ICMPV6_H


2 
	#_LINUX_ICMPV6_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

7 
	sicmp6hdr
 {

9 
__u8
 
	micmp6_ty≥
;

10 
__u8
 
	micmp6_code
;

11 
__sum16
 
	micmp6_cksum
;

15 
__be32
 
	mun_d©a32
[1];

16 
__be16
 
	mun_d©a16
[2];

17 
__u8
 
	mun_d©a8
[4];

19 
	sicmpv6_echo
 {

20 
__be16
 
	midítifõr
;

21 
__be16
 
	m£quí˚
;

22 } 
	mu_echo
;

24 
	sicmpv6_nd_advt
 {

25 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

26 
__u32
 
	mª£rved
:5,

27 
	movîride
:1,

28 
	msﬁicôed
:1,

29 
	mrouãr
:1,

30 
	mª£rved2
:24;

31 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

32 
__u32
 
	mrouãr
:1,

33 
	msﬁicôed
:1,

34 
	movîride
:1,

35 
	mª£rved
:29;

39 } 
	mu_nd_advt
;

41 
	sicmpv6_nd_ø
 {

42 
__u8
 
	mh›_limô
;

43 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

44 
__u8
 
	mª£rved
:3,

45 
	mrouãr_¥ef
:2,

46 
	mhome_agít
:1,

47 
	mŸhî
:1,

48 
	mm™aged
:1;

50 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

51 
__u8
 
	mm™aged
:1,

52 
	mŸhî
:1,

53 
	mhome_agít
:1,

54 
	mrouãr_¥ef
:2,

55 
	mª£rved
:3;

59 
__be16
 
	mπ_li„time
;

60 } 
	mu_nd_ø
;

62 } 
	micmp6_d©aun
;

64 
	#icmp6_idítifõr
 
icmp6_d©aun
.
u_echo
.
idítifõr


	)

65 
	#icmp6_£quí˚
 
icmp6_d©aun
.
u_echo
.
£quí˚


	)

66 
	#icmp6_poöãr
 
icmp6_d©aun
.
un_d©a32
[0]

	)

67 
	#icmp6_mtu
 
icmp6_d©aun
.
un_d©a32
[0]

	)

68 
	#icmp6_unu£d
 
icmp6_d©aun
.
un_d©a32
[0]

	)

69 
	#icmp6_maxdñay
 
icmp6_d©aun
.
un_d©a16
[0]

	)

70 
	#icmp6_rouãr
 
icmp6_d©aun
.
u_nd_advt
.
rouãr


	)

71 
	#icmp6_sﬁicôed
 
icmp6_d©aun
.
u_nd_advt
.
sﬁicôed


	)

72 
	#icmp6_ovîride
 
icmp6_d©aun
.
u_nd_advt
.
ovîride


	)

73 
	#icmp6_ndis¸e£rved
 
icmp6_d©aun
.
u_nd_advt
.
ª£rved


	)

74 
	#icmp6_h›_limô
 
icmp6_d©aun
.
u_nd_ø
.
h›_limô


	)

75 
	#icmp6_addrc⁄f_m™aged
 
icmp6_d©aun
.
u_nd_ø
.
m™aged


	)

76 
	#icmp6_addrc⁄f_Ÿhî
 
icmp6_d©aun
.
u_nd_ø
.
Ÿhî


	)

77 
	#icmp6_π_li„time
 
icmp6_d©aun
.
u_nd_ø
.
π_li„time


	)

78 
	#icmp6_rouãr_¥ef
 
icmp6_d©aun
.
u_nd_ø
.
rouãr_¥ef


	)

82 
	#ICMPV6_ROUTER_PREF_LOW
 0x3

	)

83 
	#ICMPV6_ROUTER_PREF_MEDIUM
 0x0

	)

84 
	#ICMPV6_ROUTER_PREF_HIGH
 0x1

	)

85 
	#ICMPV6_ROUTER_PREF_INVALID
 0x2

	)

87 
	#ICMPV6_DEST_UNREACH
 1

	)

88 
	#ICMPV6_PKT_TOOBIG
 2

	)

89 
	#ICMPV6_TIME_EXCEED
 3

	)

90 
	#ICMPV6_PARAMPROB
 4

	)

92 
	#ICMPV6_INFOMSG_MASK
 0x80

	)

94 
	#ICMPV6_ECHO_REQUEST
 128

	)

95 
	#ICMPV6_ECHO_REPLY
 129

	)

96 
	#ICMPV6_MGM_QUERY
 130

	)

97 
	#ICMPV6_MGM_REPORT
 131

	)

98 
	#ICMPV6_MGM_REDUCTION
 132

	)

100 
	#ICMPV6_NI_QUERY
 139

	)

101 
	#ICMPV6_NI_REPLY
 140

	)

103 
	#ICMPV6_MLD2_REPORT
 143

	)

105 
	#ICMPV6_DHAAD_REQUEST
 144

	)

106 
	#ICMPV6_DHAAD_REPLY
 145

	)

107 
	#ICMPV6_MOBILE_PREFIX_SOL
 146

	)

108 
	#ICMPV6_MOBILE_PREFIX_ADV
 147

	)

113 
	#ICMPV6_NOROUTE
 0

	)

114 
	#ICMPV6_ADM_PROHIBITED
 1

	)

115 
	#ICMPV6_NOT_NEIGHBOUR
 2

	)

116 
	#ICMPV6_ADDR_UNREACH
 3

	)

117 
	#ICMPV6_PORT_UNREACH
 4

	)

122 
	#ICMPV6_EXC_HOPLIMIT
 0

	)

123 
	#ICMPV6_EXC_FRAGTIME
 1

	)

128 
	#ICMPV6_HDR_FIELD
 0

	)

129 
	#ICMPV6_UNK_NEXTHDR
 1

	)

130 
	#ICMPV6_UNK_OPTION
 2

	)

136 
	#ICMPV6_FILTER
 1

	)

142 
	#ICMPV6_FILTER_BLOCK
 1

	)

143 
	#ICMPV6_FILTER_PASS
 2

	)

144 
	#ICMPV6_FILTER_BLOCKOTHERS
 3

	)

145 
	#ICMPV6_FILTER_PASSONLY
 4

	)

147 
	sicmp6_fûãr
 {

148 
__u32
 
	md©a
[8];

154 
	#MLD2_MODE_IS_INCLUDE
 1

	)

155 
	#MLD2_MODE_IS_EXCLUDE
 2

	)

156 
	#MLD2_CHANGE_TO_INCLUDE
 3

	)

157 
	#MLD2_CHANGE_TO_EXCLUDE
 4

	)

158 
	#MLD2_ALLOW_NEW_SOURCES
 5

	)

159 
	#MLD2_BLOCK_OLD_SOURCES
 6

	)

161 
	#MLD2_ALL_MCR_INIT
 { { { 0xff,0x02,0,0,0,0,0,0,0,0,0,0,0,0,0,0x16 } } }

	)

	@include/linux-net/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~"comm⁄/ty≥s.h
"

27 
	~"löux-√t/if_ëhî.h
"

31 
	#ARPHRD_NETROM
 0

	)

32 
	#ARPHRD_ETHER
 1

	)

33 
	#ARPHRD_EETHER
 2

	)

34 
	#ARPHRD_AX25
 3

	)

35 
	#ARPHRD_PRONET
 4

	)

36 
	#ARPHRD_CHAOS
 5

	)

37 
	#ARPHRD_IEEE802
 6

	)

38 
	#ARPHRD_ARCNET
 7

	)

39 
	#ARPHRD_APPLETLK
 8

	)

40 
	#ARPHRD_DLCI
 15

	)

41 
	#ARPHRD_ATM
 19

	)

42 
	#ARPHRD_METRICOM
 23

	)

43 
	#ARPHRD_IEEE1394
 24

	)

44 
	#ARPHRD_EUI64
 27

	)

45 
	#ARPHRD_INFINIBAND
 32

	)

48 
	#ARPHRD_SLIP
 256

	)

49 
	#ARPHRD_CSLIP
 257

	)

50 
	#ARPHRD_SLIP6
 258

	)

51 
	#ARPHRD_CSLIP6
 259

	)

52 
	#ARPHRD_RSRVD
 260

	)

53 
	#ARPHRD_ADAPT
 264

	)

54 
	#ARPHRD_ROSE
 270

	)

55 
	#ARPHRD_X25
 271

	)

56 
	#ARPHRD_HWX25
 272

	)

57 
	#ARPHRD_CAN
 280

	)

58 
	#ARPHRD_PPP
 512

	)

59 
	#ARPHRD_CISCO
 513

	)

60 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

61 
	#ARPHRD_LAPB
 516

	)

62 
	#ARPHRD_DDCMP
 517

	)

63 
	#ARPHRD_RAWHDLC
 518

	)

65 
	#ARPHRD_TUNNEL
 768

	)

66 
	#ARPHRD_TUNNEL6
 769

	)

67 
	#ARPHRD_FRAD
 770

	)

68 
	#ARPHRD_SKIP
 771

	)

69 
	#ARPHRD_LOOPBACK
 772

	)

70 
	#ARPHRD_LOCALTLK
 773

	)

71 
	#ARPHRD_FDDI
 774

	)

72 
	#ARPHRD_BIF
 775

	)

73 
	#ARPHRD_SIT
 776

	)

74 
	#ARPHRD_IPDDP
 777

	)

75 
	#ARPHRD_IPGRE
 778

	)

76 
	#ARPHRD_PIMREG
 779

	)

77 
	#ARPHRD_HIPPI
 780

	)

78 
	#ARPHRD_ASH
 781

	)

79 
	#ARPHRD_ECONET
 782

	)

80 
	#ARPHRD_IRDA
 783

	)

82 
	#ARPHRD_FCPP
 784

	)

83 
	#ARPHRD_FCAL
 785

	)

84 
	#ARPHRD_FCPL
 786

	)

85 
	#ARPHRD_FCFABRIC
 787

	)

87 
	#ARPHRD_IEEE802_TR
 800

	)

88 
	#ARPHRD_IEEE80211
 801

	)

89 
	#ARPHRD_IEEE80211_PRISM
 802

	)

90 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

91 
	#ARPHRD_IEEE802154
 804

	)

93 
	#ARPHRD_PHONET
 820

	)

94 
	#ARPHRD_PHONET_PIPE
 821

	)

95 
	#ARPHRD_CAIF
 822

	)

97 
	#ARPHRD_VOID
 0xFFFF

	)

98 
	#ARPHRD_NONE
 0xFFFE

	)

101 
	#ARPOP_REQUEST
 1

	)

102 
	#ARPOP_REPLY
 2

	)

103 
	#ARPOP_RREQUEST
 3

	)

104 
	#ARPOP_RREPLY
 4

	)

105 
	#ARPOP_InREQUEST
 8

	)

106 
	#ARPOP_InREPLY
 9

	)

107 
	#ARPOP_NAK
 10

	)

111 
	#ATF_COM
 0x02

	)

112 
	#ATF_PERM
 0x04

	)

113 
	#ATF_PUBL
 0x08

	)

114 
	#ATF_USETRAILERS
 0x10

	)

115 
	#ATF_NETMASK
 0x20

	)

117 
	#ATF_DONTPUB
 0x40

	)

123 
	s¨phdr
 {

124 
__be16
 
	m¨_hrd
;

125 
__be16
 
	m¨_¥o
;

126 
	m¨_h 
;

127 
	m¨_∂n
;

128 
__be16
 
	m¨_›
;

133 
	m¨_sha
[
ETH_ALEN
];

134 
	m¨_sù
[4];

135 
	m¨_tha
[
ETH_ALEN
];

136 
	m¨_tù
[4];

140 
	s¨µack
 {

141 
__be16
 
	m¨_hrd
;

142 
__be16
 
	m¨_¥o
;

143 
	m¨_h 
;

144 
	m¨_∂n
;

145 
__be16
 
	m¨_›
;

150 
	m¨_sha
[
ETH_ALEN
];

151 
	m¨_sù
[4];

152 
	m¨_tha
[
ETH_ALEN
];

153 
	m¨_tù
[4];

	@include/linux-net/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_FIP
 0x8914

	)

84 
	#ETH_P_EDSA
 0xDADA

	)

90 
	#ETH_P_802_3
 0x0001

	)

91 
	#ETH_P_AX25
 0x0002

	)

92 
	#ETH_P_ALL
 0x0003

	)

93 
	#ETH_P_802_2
 0x0004

	)

94 
	#ETH_P_SNAP
 0x0005

	)

95 
	#ETH_P_DDCMP
 0x0006

	)

96 
	#ETH_P_WAN_PPP
 0x0007

	)

97 
	#ETH_P_PPP_MP
 0x0008

	)

98 
	#ETH_P_LOCALTALK
 0x0009

	)

99 
	#ETH_P_CAN
 0x000C

	)

100 
	#ETH_P_PPPTALK
 0x0010

	)

101 
	#ETH_P_TR_802_2
 0x0011

	)

102 
	#ETH_P_MOBITEX
 0x0015

	)

103 
	#ETH_P_CONTROL
 0x0016

	)

104 
	#ETH_P_IRDA
 0x0017

	)

105 
	#ETH_P_ECONET
 0x0018

	)

106 
	#ETH_P_HDLC
 0x0019

	)

107 
	#ETH_P_ARCNET
 0x001A

	)

108 
	#ETH_P_DSA
 0x001B

	)

109 
	#ETH_P_TRAILER
 0x001C

	)

110 
	#ETH_P_PHONET
 0x00F5

	)

111 
	#ETH_P_IEEE802154
 0x00F6

	)

112 
	#ETH_P_CAIF
 0x00F7

	)

118 
	sëhhdr
 {

119 
	mh_de°
[
ETH_ALEN
];

120 
	mh_sour˚
[
ETH_ALEN
];

121 
__be16
 
	mh_¥Ÿo
;

122 } 
__©åibuã__
((
∑cked
));

	@include/linux-net/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

22 
	~"comm⁄/ty≥s.h
"

24 
	#IPTOS_TOS_MASK
 0x1E

	)

25 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

26 
	#IPTOS_LOWDELAY
 0x10

	)

27 
	#IPTOS_THROUGHPUT
 0x08

	)

28 
	#IPTOS_RELIABILITY
 0x04

	)

29 
	#IPTOS_MINCOST
 0x02

	)

31 
	#IPTOS_PREC_MASK
 0xE0

	)

32 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

33 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

34 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

35 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

36 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

37 
	#IPTOS_PREC_FLASH
 0x60

	)

38 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

39 
	#IPTOS_PREC_PRIORITY
 0x20

	)

40 
	#IPTOS_PREC_ROUTINE
 0x00

	)

44 
	#IPOPT_COPY
 0x80

	)

45 
	#IPOPT_CLASS_MASK
 0x60

	)

46 
	#IPOPT_NUMBER_MASK
 0x1f

	)

48 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

49 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

50 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

52 
	#IPOPT_CONTROL
 0x00

	)

53 
	#IPOPT_RESERVED1
 0x20

	)

54 
	#IPOPT_MEASUREMENT
 0x40

	)

55 
	#IPOPT_RESERVED2
 0x60

	)

57 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

58 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

59 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

60 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

62 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

64 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

65 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

68 
	#IPVERSION
 4

	)

69 
	#MAXTTL
 255

	)

70 
	#IPDEFTTL
 64

	)

72 
	#IPOPT_OPTVAL
 0

	)

73 
	#IPOPT_OLEN
 1

	)

74 
	#IPOPT_OFFSET
 2

	)

75 
	#IPOPT_MINOFF
 4

	)

76 
	#MAX_IPOPTLEN
 40

	)

77 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

78 
	#IPOPT_EOL
 
IPOPT_END


	)

79 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

81 
	#IPOPT_TS_TSONLY
 0

	)

82 
	#IPOPT_TS_TSANDADDR
 1

	)

83 
	#IPOPT_TS_PRESPEC
 3

	)

85 
	#IPV4_BEET_PHMAXLEN
 8

	)

87 
	sùhdr
 {

88 
__u8
 
	mihl
:4,

89 
	mvîsi⁄
:4;

91 
__u8
 
	mtos
;

92 
__be16
 
	mtŸ_Àn
;

93 
__be16
 
	mid
;

94 
__be16
 
	m‰ag_off
;

95 
__u8
 
	mâl
;

96 
__u8
 
	m¥Ÿocﬁ
;

97 
__sum16
 
	mcheck
;

98 
__be32
 
	mßddr
;

99 
__be32
 
	mdaddr
;

	@include/linux-net/ipv6.h

1 #i‚de‡
___IPV6_H__


2 
	#___IPV6_H__


	)

4 
	~"comm⁄/ty≥s.h
"

5 
	~<√töë/ö.h
>

9 
	#IPV6_MIN_MTU
 1280

	)

19 
	sùv6hdr
 {

20 
__u8
 
	m¥i‹ôy
:4,

21 
	mvîsi⁄
:4;

23 
__u8
 
	mÊow_lbl
[3];

25 
__be16
 
	m∑ylﬂd_Àn
;

26 
__u8
 
	m√xthdr
;

27 
__u8
 
	mh›_limô
;

29 
ö6_addr
 
	mßddr
;

30 
ö6_addr
 
	mdaddr
;

35 
	mDEVCONF_FORWARDING
 = 0,

36 
	mDEVCONF_HOPLIMIT
,

37 
	mDEVCONF_MTU6
,

38 
	mDEVCONF_ACCEPT_RA
,

39 
	mDEVCONF_ACCEPT_REDIRECTS
,

40 
	mDEVCONF_AUTOCONF
,

41 
	mDEVCONF_DAD_TRANSMITS
,

42 
	mDEVCONF_RTR_SOLICITS
,

43 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

44 
	mDEVCONF_RTR_SOLICIT_DELAY
,

45 
	mDEVCONF_USE_TEMPADDR
,

46 
	mDEVCONF_TEMP_VALID_LFT
,

47 
	mDEVCONF_TEMP_PREFERED_LFT
,

48 
	mDEVCONF_REGEN_MAX_RETRY
,

49 
	mDEVCONF_MAX_DESYNC_FACTOR
,

50 
	mDEVCONF_MAX_ADDRESSES
,

51 
	mDEVCONF_FORCE_MLD_VERSION
,

52 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

53 
	mDEVCONF_ACCEPT_RA_PINFO
,

54 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

55 
	mDEVCONF_RTR_PROBE_INTERVAL
,

56 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

57 
	mDEVCONF_PROXY_NDP
,

58 
	mDEVCONF_OPTIMISTIC_DAD
,

59 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

60 
	mDEVCONF_MC_FORWARDING
,

61 
	mDEVCONF_DISABLE_IPV6
,

62 
	mDEVCONF_ACCEPT_DAD
,

63 
	mDEVCONF_FORCE_TLLAO
,

64 
	mDEVCONF_MAX


	@include/linux-net/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

26 
	st˝hdr
 {

27 
__be16
 
	msour˚
;

28 
__be16
 
	mde°
;

29 
__be32
 
	m£q
;

30 
__be32
 
	mack_£q
;

31 
__u16
 
	mªs1
:4,

32 
	mdoff
:4,

33 
	mfö
:1,

34 
	msyn
:1,

35 
	mr°
:1,

36 
	mpsh
:1,

37 
	mack
:1,

38 
	murg
:1,

39 
	me˚
:1,

40 
	mcwr
:1;

42 
__be16
 
	mwödow
;

43 
__sum16
 
	mcheck
;

44 
__be16
 
	murg_±r
;

52 
	ut˝_w‹d_hdr
 {

53 
t˝hdr
 
	mhdr
;

54 
__be32
 
	mw‹ds
[5];

57 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

60 
	mTCP_FLAG_CWR
 = 
__˝u_to_be32
(0x00800000),

61 
	mTCP_FLAG_ECE
 = 
__˝u_to_be32
(0x00400000),

62 
	mTCP_FLAG_URG
 = 
__˝u_to_be32
(0x00200000),

63 
	mTCP_FLAG_ACK
 = 
__˝u_to_be32
(0x00100000),

64 
	mTCP_FLAG_PSH
 = 
__˝u_to_be32
(0x00080000),

65 
	mTCP_FLAG_RST
 = 
__˝u_to_be32
(0x00040000),

66 
	mTCP_FLAG_SYN
 = 
__˝u_to_be32
(0x00020000),

67 
	mTCP_FLAG_FIN
 = 
__˝u_to_be32
(0x00010000),

68 
	mTCP_RESERVED_BITS
 = 
__˝u_to_be32
(0x0F000000),

69 
	mTCP_DATA_OFFSET
 = 
__˝u_to_be32
(0xF0000000)

75 
	#TCP_MSS_DEFAULT
 536U

	)

76 
	#TCP_MSS_DESIRED
 1220U

	)

79 
	#TCP_NODELAY
 1

	)

80 
	#TCP_MAXSEG
 2

	)

81 
	#TCP_CORK
 3

	)

82 
	#TCP_KEEPIDLE
 4

	)

83 
	#TCP_KEEPINTVL
 5

	)

84 
	#TCP_KEEPCNT
 6

	)

85 
	#TCP_SYNCNT
 7

	)

86 
	#TCP_LINGER2
 8

	)

87 
	#TCP_DEFER_ACCEPT
 9

	)

88 
	#TCP_WINDOW_CLAMP
 10

	)

89 
	#TCP_INFO
 11

	)

90 
	#TCP_QUICKACK
 12

	)

91 
	#TCP_CONGESTION
 13

	)

92 
	#TCP_MD5SIG
 14

	)

93 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

94 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

95 
	#TCP_THIN_DUPACK
 17

	)

98 
	#TCPI_OPT_TIMESTAMPS
 1

	)

99 
	#TCPI_OPT_SACK
 2

	)

100 
	#TCPI_OPT_WSCALE
 4

	)

101 
	#TCPI_OPT_ECN
 8

	)

103 
	et˝_ˇ_°©e
 {

104 
	mTCP_CA_O≥n
 = 0,

105 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

106 
	mTCP_CA_Dis‹dî
 = 1,

107 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

108 
	mTCP_CA_CWR
 = 2,

109 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

110 
	mTCP_CA_Recovîy
 = 3,

111 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

112 
	mTCP_CA_Loss
 = 4

113 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

	@include/linux-net/udp.h

17 #i‚de‡
_LINUX_UDP_H


18 
	#_LINUX_UDP_H


	)

20 
	~<löux/ty≥s.h
>

23 
	sudphdr
 {

24 
__be16
 
	msour˚
;

25 
__be16
 
	mde°
;

26 
__be16
 
	mÀn
;

27 
__sum16
 
	mcheck
;

	@include/local_ip.h

12 #i‚de‡
_LOCAL_IP_H


13 
	#_LOCAL_IP_H


	)

15 
	~"comm⁄/c⁄fig.h
"

16 
	~"comm⁄/ty≥s.h
"

17 
	~"comm⁄/li°.h
"

18 
	~"ty≥s/loˇl_ù.h
"

35 
	#SELF_IP_T
 1

	)

36 
	#VS_IP_T
 2

	)

38 
	#LOCAL_IP_HT_BITS
 8

	)

39 
	#LOCAL_IP_HT_SIZE
 (1 << 
LOCAL_IP_HT_BITS
)

	)

40 
	#LOCAL_IP_HT_MASK
 ( (
LOCAL_IP_HT_SIZE
Ë- 1)

	)

43 
loˇl_ù
 * 
lù_ù_•a˚_¸óã_loˇl_ù
(
ù_•a˚
 * 
•a˚
, 
ù_addªss
 * 
ù
,
ty≥
, 
nic_id
);

45 
ù_•a˚
 * 
lù_ù_•a˚_¸óã
(
u16
 
vs_low
, u16 
vs_high
, u16 
£lf_low
, u16 
£lf_high
);

47 
lù_ù_•a˚_add
(
ù_•a˚
 * 
•a˚
, 
loˇl_ù
 * 
lù
);

50 
lù_ù_•a˚_dñ
(
ù_•a˚
 * 
•a˚
, 
loˇl_ù
 * 
lù
);

52 
loˇl_ù
 * 
lù_ù_•a˚_lookup
(
ù_•a˚
 * 
•a˚
, 
ù_addªss
 * 
ù
, 
is_vs
);

55 
ölöe
 
u16
 
	$lù_gë_t˝_p‹t
(
loˇl_ù
 * 
lù
,
u16
 
p‹t
)

57  
	`p‹t_ønge_gë_p‹t
(
lù
->
t˝_p‹t
,
p‹t
);

58 
	}
}

61 
ölöe
 
u16
 
	$lù_gë_udp_p‹t
(
loˇl_ù
 * 
lù
,
u16
 
p‹t
)

63  
	`p‹t_ønge_gë_p‹t
(
lù
->
udp_p‹t
,
p‹t
);

64 
	}
}

67 
ölöe
 
	$lù_put_t˝_p‹t
(
loˇl_ù
 * 
lù
, 
u16
 
p‹t
)

69 
	`p‹t_ønge_put_p‹t
(
lù
->
t˝_p‹t
,
p‹t
);

70 
	}
}

72 
ölöe
 
	$lù_put_udp_p‹t
(
loˇl_ù
 * 
lù
, 
u16
 
p‹t
)

74 
	`p‹t_ønge_put_p‹t
(
lù
->
udp_p‹t
,
p‹t
);

75 
	}
}

77 
ölöe
 
	$lù_is_£lfù
(
loˇl_ù
 * 
lù
)

79  (
lù
->
ty≥
 =
SELF_IP_T
);

80 
	}
}

84 
ölöe
 
	$lù_is_vsù
(
loˇl_ù
 * 
lù
)

86  (
lù
->
ty≥
 =
VS_IP_T
);

87 
	}
}

89 
ölöe
 
	$lù_is_ùv4
(
loˇl_ù
 * 
lù
)

91  (
lù
->
addr
.
Ámûy
 =
AF_INET
);

92 
	}
}

96 
ölöe
 
ù_addªss
 * 
	$lù_gë_ù_addªss
(
loˇl_ù
 * 
lù
)

98  &(
lù
->
addr
);

99 
	}
}

	@include/mem_pool.h

7 #i‚de‡
_MEM_POOL_H


8 
	#_MEM_POOL_H


	)

11 
	~"comm⁄/c⁄fig.h
"

12 
	~"comm⁄/li°.h
"

13 
	~"ty≥s/mem_poﬁ.h
"

15 
	#CHUNKSIZE
 (1024*1024Ë

	)

19 
mem_poﬁ
 * 
mem_poﬁ_¸óã
(*
«me
, 
size
);

21 * 
mem_poﬁ_Æloc
(
mem_poﬁ
 * 
p
);

24 
mem_poﬁ_‰ì
(
mem_poﬁ
 * 
p
, * 
node
);

	@include/net_global.h

12 #i‚de‡
_NET_GLOBAL_H


13 
	#_NET_GLOBAL_H


	)

16 
	~"öãrÁ˚.h
"

17 
	~"drivî.h
"

18 
	~"∑ckë.h
"

19 
	~"lf_queue.h
"

20 
	~"loˇl_ù.h
"

21 
	~"rouã.h
"

22 
	~"ty≥s/√t_globÆ.h
"

23 
	~"comm⁄/ty≥s.h
"

25 
√t_globÆ
Çet_global;

28 
ng_öô
(
id
, 
drivî
 * 
d
, 
∑ckë_z⁄e
 * 
z
, 
lfq
 * 
q
, 
öãrÁ˚
 * 
ôf
,
rouã_èbÀ
 * 
π
);

30 
loˇl_ù
 * 
ng_add_ù
(* 
ù_°rög
, 
Ámûy
,
isvsù
, 
nic_id
);

32 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_¸óã_vsù
(
ù_addªss
 * 
ù
,
nic_id
)

34  
	`öãrÁ˚_¸óã_loˇl_ù
(
√t_globÆ
.
ôf
,
ù
,
VS_IP_T
,
nic_id
);

35 
	}
}

37 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_¸óã_£lfù
(
ù_addªss
 * 
ù
,
nic_id
)

39  
	`öãrÁ˚_¸óã_loˇl_ù
(
√t_globÆ
.
ôf
,
ù
,
SELF_IP_T
,
nic_id
);

40 
	}
}

44 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_lookup_vsù
(
ù_addªss
 * 
ù
)

46  
	`öãrÁ˚_lookup
(
√t_globÆ
.
ôf
, 
ù
,1);

47 
	}
}

50 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_lookup_£lfù
(
ù_addªss
 * 
ù
)

52  
	`öãrÁ˚_lookup
(
√t_globÆ
.
ôf
, 
ù
,0);

53 
	}
}

56 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_lookup_ù
(
ù_addªss
 * 
ù
)

58 
loˇl_ù
 * 
lù
;

60 
lù
 = 
	`öãrÁ˚_lookup
(
√t_globÆ
.
ôf
, 
ù
,0);

62 if(
lù
 =
NULL
)

63 
lù
 = 
	`öãrÁ˚_lookup
(
√t_globÆ
.
ôf
, 
ù
,1);

65  
lù
;

66 
	}
}

68 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_gë_£lfùv4_º
(
nic_id
)

70  
	`öãrÁ˚_gë_lù_º
(
√t_globÆ
.
ôf
,
nic_id
, 0, 1);

71 
	}
}

74 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_gë_vsùv4_º
(
nic_id
)

76  
	`öãrÁ˚_gë_lù_º
(
√t_globÆ
.
ôf
,
nic_id
, 1, 1);

77 
	}
}

80 
ölöe
 
loˇl_ù
 * 
	$ng_öãrÁ˚_gë_£lfùv6_º
(
nic_id
)

82  
	`öãrÁ˚_gë_lù_º
(
√t_globÆ
.
ôf
,
nic_id
, 0, 0);

83 
	}
}

85 
ölöe
 
rouã_íåy
 * 
	$ng_π_lookup_º
(
ù_addªss
 * 
ù
)

87  
	`π_lookup_º
(
√t_globÆ
.
π
, 
ù
);

88 
	}
}

90 
ölöe
 
rouã_íåy
 * 
	$ng_π_lookup
(
ù_addªss
 * 
ù
)

92  
	`π_lookup
(
√t_globÆ
.
π
, 
ù
);

93 
	}
}

96 
ölöe
 
rouã_íåy
 * 
	$ng_π_lookup_wôh_nic_id
(
ù_addªss
 * 
ù
, 
nic_id
)

98  
	`π_lookup_wôh_nic_id
(
√t_globÆ
.
π
,
ù
,
nic_id
);

100 
	}
}

102 
ölöe
 
	$ng_π_add_íåy
(
rouã_íåy
 * 
ª
 )

104  
	`π_add_íåy
(
√t_globÆ
.
π
,
ª
);

105 
	}
}

107 
ölöe
 
u8
 * 
	$ng_drivî_gë_mac
(
ad≠ãr_idx
)

109  
	`drivî_gë_mac
(
√t_globÆ
.
d
, 
ad≠ãr_idx
);

110 
	}
}

112 
ölöe
 
	$ng_drivî_put_∑ckë_to_£nd_buf„r
(
∑ckë
 * 
pkt
)

114  
	`drivî_put_∑ckë_to_£nd_buf„r
(
√t_globÆ
.
d
, 
pkt
);

115 
	}
}

118 
ölöe
 
∑ckë
 * 
	$ng_∑ckë_of_phys
(
u64
 
phys
 )

120  
	`∑ckë_of_phys
(
√t_globÆ
.
z
, 
phys
 );

121 
	}
}

123 
ölöe
 
∑ckë
 * 
	$ng_gë_‰ì_∑ckë
()

125 
∑ckë_poﬁ
 * 
µ
 = 
	`∑ckë_z⁄e_gë_‰ì_∑ckë_poﬁ
(
√t_globÆ
.
z
);

126  
	`∑ckë_poﬁ_gë
(
µ
);

127 
	}
}

129 
ölöe
 
	$ng_drivî_gë_ad≠ãr_num
()

131  
	`drivî_gë_ad≠ãr_num
(
√t_globÆ
.
d
);

132 
	}
}

	@include/packet.h

13 #i‚de‡
_PACKET_H


14 
	#_PACKET_H


	)

16 
	~"comm⁄/li°.h
"

17 
	~"comm⁄/ty≥s.h
"

18 
	~"ty≥s/∑ckë.h
"

19 
	~"löux-√t/if_ëhî.h
"

20 
	~"löux-√t/ù.h
"

21 
	~"löux-√t/t˝.h
"

22 
	~"löux-√t/udp.h
"

23 
	~"comm⁄/comm_de‚s.h
"

25 
	#PACKET_SIZE
 2048

	)

27 
	#PACKET_OFFSET
 1792

	)

30 
	#PACKET_IS_ARP
(
pkt
Ë(’kt)->
¥Ÿocﬁ_ëh
 =
PROTO_ARP
)

	)

32 
	#PACKET_IS_IPV4
(
pkt
Ë(’kt)->
Ámûy
 =
AF_INET
)

	)

33 
	#PACKET_IS_IPV6
(
pkt
Ë(’kt)->
Ámûy
 =
AF_INET6
)

	)

34 
	#PACKET_IS_IP
(
pkt
Ë(’kt)->
¥Ÿocﬁ_ëh
 =
PROTO_IP
)

	)

35 
	#PACKET_IS_TCP
(
pkt
Ë(’kt)->
¥Ÿocﬁ_ù
 =
PROTO_TCP
)

	)

36 
	#PACKET_IS_UDP
(
pkt
Ë(’kt)->
¥Ÿocﬁ_ù
 =
PROTO_UDP
)

	)

38 
	#PACKET_IS_ICMP
(
pkt
Ë(’kt)->
¥Ÿocﬁ_ù
 =
PROTO_ICMP
)

	)

40 
	#PACKET_IS_ICMPV6
(
pkt
Ë(’kt)->
¥Ÿocﬁ_ù
 =
PROTO_ICMPV6
)

	)

43 
	#PACKET_ACCEPT
 0

	)

44 
	#PACKET_DROP
 1

	)

45 
	#PACKET_STOLEN
 2

	)

50 
ölöe
 
∑ckë
 * 
	$∑ckë_of
(
__u8
 * 
d©a
)

52  (
∑ckë
 *Ë((
__u64
)
d©a
 + 
PACKET_OFFSET
);

53 
	}
}

56 
ölöe
 
u8
 * 
	$∑ckë_d©a
(
∑ckë
 * 
pkt
)

58  (
u8
 *)((
u64
)
pkt
 - 
PACKET_OFFSET
);

59 
	}
}

63 
∑ckë_£t_d©a_Àn
(
∑ckë
 * 
pkt
, 
__u16
 
Àn
);

65 
∑ckë_poﬁ
 * 
∑ckë_poﬁ_¸óã
();

67 
∑ckë_poﬁ_öô
(
∑ckë_poﬁ
 * 
µ
);

69 
∑ckë_z⁄e
 *
∑ckë_z⁄e_¸óã
();

71 
poﬁ_add_∑ckës
(
∑ckë_z⁄e
 * 
z⁄e
, 
∑ckë_poﬁ
 * 
poﬁ
);

74 
∑ckë_öô_™d_fûãr
(
li°_hód
 * 
hód
, li°_hód * 
dr›_out
 );

77 
∑ckë_z⁄e
 * 
∑ckë_moduÀ_öô
–
__u64
 
°¨t
, __u64 
phys
, __u64 
size
, 
≈roc
, 
id
);

79 
ölöe
 
∑ckë
 * 
	$∑ckë_poﬁ_gë
(
∑ckë_poﬁ
 * 
µ
)

81 
∑ckë
 * 
pkt
 = 
NULL
;

82 
li°_hód
 * 
li°
;

84 if(
µ
->
num
 >0)

86 
li°
 = 
µ
->li°.
√xt
;

87 
	`li°_dñ
(
li°
);

88 
µ
->
num
--;

89 
pkt
 = 
	`li°_íåy
(
li°
, 
∑ckë
, 
√xt
);

92  
pkt
;

93 
	}
}

96 
ölöe
 
	$∑ckë_poﬁ_put
(
∑ckë_poﬁ
 * 
µ
, 
∑ckë
 * 
pkt
)

98 
	`li°_add_èû
(&(
pkt
->
√xt
),&(
µ
->
li°
));

99 
µ
->
num
++;

100 
	}
}

107 
ölöe
 
	$∑ckë_poﬁ_gë_Æl
(
∑ckë_poﬁ
 * 
µ
, 
li°_hód
 * 
hód
)

109 if(
µ
->
num
 > 0)

111 
µ
->
num
 = 0;

112 
	`li°_•li˚_èû_öô
(&(
µ
->
li°
),
hód
);

114 
	}
}

120 
ölöe
 
	$∑ckë_poﬁ_put_Æl
(
∑ckë_poﬁ
 * 
µ
, 
li°_hód
 * 
hód
)

122 
li°_hód
 * 
li°
;

123 
∑ckë
 * 
pkt
;

125 !
	`li°_em±y
(
hód
))

127 
li°
 = 
hód
->
√xt
;

128 
	`li°_dñ
(
li°
);

129 
pkt
 = 
	`li°_íåy
(
li°
, 
∑ckë
, 
√xt
);

130 
	`∑ckë_poﬁ_put
(
µ
,
pkt
);

132 
	}
}

134 
ölöe
 
	$∑ckë_z⁄e_ª˛aim
(
∑ckë_z⁄e
 * 
z
, 
li°_hód
 * 
hód
)

136 
	`∑ckë_poﬁ_put_Æl
(&(
z
->
‰ì_∑ckë_poﬁ
),
hód
);

137 
	}
}

139 
ölöe
 
∑ckë_poﬁ
 * 
	$∑ckë_z⁄e_gë_‰ì_∑ckë_poﬁ
(
∑ckë_z⁄e
 * 
z
)

141  &(
z
->
‰ì_∑ckë_poﬁ
);

142 
	}
}

157 
ölöe
 
u8
 * 
	$∑ckë_å™•‹t_hódî
(
∑ckë
 *
pkt
)

159  (
	`∑ckë_d©a
(
pkt
Ë+Ökt->
å™•‹t_hódî
);

160 
	}
}

162 
ölöe
 
u8
 * 
	$∑ckë_√tw‹k_hódî
(
∑ckë
 * 
pkt
)

164  (
	`∑ckë_d©a
(
pkt
Ë+Ökt->
√tw‹k_hódî
);

165 
	}
}

168 
ölöe
 
u8
 * 
	$∑ckë_mac_hódî
(
∑ckë
 * 
pkt
)

170  (
	`∑ckë_d©a
(
pkt
Ë+Ökt->
mac_hódî
);

171 
	}
}

174 
ölöe
 
ëhhdr
 * 
	$∑ckë_gë_ëhhdr
(
∑ckë
 * 
pkt
)

176  (
ëhhdr
 * )
	`∑ckë_mac_hódî
(
pkt
);

177 
	}
}

179 
ölöe
 
¨µack
 * 
	$∑kë_gë_¨µack
(
∑ckë
 * 
pkt
)

181  (
¨µack
 * ) 
	`∑ckë_√tw‹k_hódî
(
pkt
);

182 
	}
}

184 
ölöe
 
ùhdr
 * 
	$∑ckë_gë_ùhdr
(
∑ckë
 * 
pkt
)

186  (
ùhdr
 * ) 
	`∑ckë_√tw‹k_hódî
(
pkt
);

187 
	}
}

189 
ölöe
 
ùv6hdr
 * 
	$∑ckë_gë_ùv6hdr
(
∑ckë
 * 
pkt
)

191  (
ùv6hdr
 * )
	`∑ckë_√tw‹k_hódî
(
pkt
);

192 
	}
}

194 
ölöe
 
udphdr
 * 
	$∑ckë_gë_udphdr
(
∑ckë
 * 
pkt
)

196  ( 
udphdr
 *Ë
	`∑ckë_å™•‹t_hódî
(
pkt
);

197 
	}
}

199 
ölöe
 
t˝hdr
 * 
	$∑ckë_gë_t˝hdr
(
∑ckë
 * 
pkt
)

201  ( 
t˝hdr
 *Ë
	`∑ckë_å™•‹t_hódî
(
pkt
);

202 
	}
}

205 
ölöe
 
u16
 
	$∑ckë_gë_dp‹t
(
∑ckë
 * 
pkt
)

207  
pkt
->
daddr
.
p‹t
;

208 
	}
}

210 
ölöe
 
u16
 
	$∑ckë_gë_•‹t
(
∑ckë
 * 
pkt
)

212  
pkt
->
ßddr
.
p‹t
;

213 
	}
}

215 
ölöe
 
ù_addªss
 * 
	$∑ckë_gë_sù
(
∑ckë
 * 
pkt
)

217  &(
pkt
->
ßddr
.
ù
);

218 
	}
}

220 
ölöe
 
ù_addªss
 * 
	$∑ckë_gë_dù
(
∑ckë
 * 
pkt
)

222  &(
pkt
->
daddr
.
ù
);

223 
	}
}

226 
ölöe
 
u8
 
	$∑ckë_gë_å™•‹t_¥Ÿocﬁ
(
∑ckë
 * 
pkt
)

228  
pkt
->
¥Ÿocﬁ_ù
;

229 
	}
}

232 
ölöe
 
∑ckë
 * 
	$∑ckë_of_phys
(
∑ckë_z⁄e
 * 
z
, 
u64
 
phys
 )

234  
	`∑ckë_of
((
u8
 *Ë(
z
->
°¨t_Æl
 + (
phys
 - z->
phys_Æl
)));

235 
	}
}

237 
ölöe
 
	$∑ckë_£t_lfq_°©e
(
∑ckë
 * 
pkt
, 
lfq_°©e
 
s
)

239 
pkt
->
lfq_°©e
 = 
s
;

240 
	}
}

242 
ölöe
 
lfq_°©e
 
	$∑ckë_gë_lfq_°©e
(
∑ckë
 * 
pkt
)

244  
pkt
->
lfq_°©e
;

245 
	}
}

	@include/port_range.h

13 #i‚de‡
_PORT_RANGE_H


14 
	#_PORT_RANGE_H


	)

16 
	~"comm⁄/ty≥s.h
"

17 
	~"ty≥s/p‹t_ønge.h
"

20 
	#DYNAMIC_PORTS_MIN
 1024

	)

21 
	#DYNAMIC_PORTS_MAX
 65535

	)

22 
	#DYNAMIC_PORTS_NUM
 (
DYNAMIC_PORTS_MAX
 - 
DYNAMIC_PORTS_MIN
 + 1)

	)

24 
	#RESERVED_PORTS_MIN
 1

	)

25 
	#RESERVED_PORTS_MAX
 1023

	)

26 
	#RESERVED_PORTS_NUM
 (
RESERVED_PORTS_MAX
 - 
RESERVED_PORTS_MIN
 + 1 )

	)

30 
p‹t_ønge
 *
p‹t_ønge_¸óã
(
n
);

32 
p‹t_ønge_‰ì
(
p‹t_ønge
 * 
ønge
);

34 
p‹t_ønge_öô
(
p‹t_ønge
 * 
ønge
, 
u16
 
p‹t1
, u16 
p‹t2
);

36 
p‹t_ønge_put_p‹t
(
p‹t_ønge
 *
ønge
, 
u16
 
p‹t
);

38 
u16
 
p‹t_ønge_gë_p‹t
(
p‹t_ønge
 * 
ønge
, u16 
p‹t
);

	@include/process.h

12 #i‚de‡
_PROCESS_H


13 
	#_PROCESS_H


	)

15 
	~"comm⁄/li°.h
"

17 
¥o˚ss_∑ckës
(
li°_hód
 * 
∑ckë_hód
, li°_hód * 
‰ì_hód
);

	@include/route.h

12 #i‚de‡
_ROUTE_H


13 
	#_ROUTE_H


	)

15 
	~"ty≥s/rouã.h
"

16 
	~"comm⁄/ty≥s.h
"

17 
	~"comm⁄/c⁄fig.h
"

18 
	~"comm⁄/hashèbÀ.h
"

19 
	~"comm⁄/li°.h
"

22 
	#ROUTE_HT_BITS
 8

	)

23 
	#ROUTE_HT_SIZE
 (1 << 
ROUTE_HT_BITS
)

	)

24 
	#ROUTE_HT_MASK
 ( (
ROUTE_HT_SIZE
Ë- 1)

	)

27 
rouã_èbÀ
 * 
π_¸óã
();

29 
rouã_èbÀ_‰ì
(
rouã_èbÀ
 * 
π
);

31 
rouã_íåy
 * 
π_íåy_¸óã
();

33 
π_íåy_‰ì
(
rouã_íåy
 * 
ª
);

35 
π_íåy_öô
(
rouã_íåy
 * 
ª
, 
ù_addªss
 * 
addr
, 
u32
 
nic_id
);

37 
rouã_íåy
 * 
π_lookup_º
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
);

39 
rouã_íåy
 * 
π_lookup
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
);

41 
rouã_íåy
 * 
π_lookup_wôh_nic_id
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
, 
nic_id
);

43 
π_add_íåy
(
rouã_èbÀ
 * 
π
, 
rouã_íåy
 * 
ª
);

45 
π_dñ_íåy
(
rouã_èbÀ
 * 
π
, 
rouã_íåy
 * 
ª
);

47 
rouã_èbÀ
 * 
π_moduÀ_öô
();

50 
π_föd_£rvî_rouã
();

	@include/rss.h

13 #i‚de‡
_RSS_H


14 
	#_RSS_H


	)

16 
	~"drivî.h
"

18 
rss_hash_v4
(
ßddr
, 
daddr
, 
•‹t
,
dp‹t
);

20 
ölöe
 
u8
 
	$rss_hash_v4_idx
(
ßddr
, 
daddr
, 
•‹t
,
dp‹t
)

22 
u8
 
idx
 = 
	`rss_hash_v4
(
ßddr
, 
daddr
,
•‹t
,
dp‹t
) & 0x7f;

23 
idx
 = idx % (
drivî
.
rög_num
);

25  
idx
;

26 
	}
}

	@include/server_pool.h

13 #i‚de‡
_SERVER_POOL_H


14 
	#_SERVER_POOL_H


	)

16 
	~"comm⁄/li°.h
"

17 
	~"comm⁄/ty≥s.h
"

18 
	~"ty≥s/£rvî_poﬁ.h
"

20 
	#f‹_óch_£rvî
(
§v
,
hód
Ë
	`li°_f‹_óch_íåy
(§v,hód,
li°
)

	)

21 
	#f‹_óch_£rvî_poﬁ
(
poﬁ
,
hód
Ë
	`li°_f‹_óch_íåy
’oﬁ,hód,
li°
)

	)

23 
li°_hód
 * 
£rvî_poﬁ_gë_£rvî_li°
();

25 
li°_hód
 * 
£rvî_poﬁ_gë_£rvî_poﬁ_li°
();

27 
£rvî_poﬁ
 * 
£rvî_poﬁ_¸óã
();

29 
£rvî_poﬁ_‰ì
(
£rvî_poﬁ
 * 
p
);

31 
£rvî
 * 
£rvî_poﬁ_add_£rvî
(
£rvî_poﬁ
 * 
p
, 
√t_addªss
 * 
addr
);

34 
£rvî_poﬁ_add_£rvî_TEST
(
£rvî_poﬁ
 * 
p
, 
u8
 * 
mac
, 
√t_addªss
 * 
addr
);

36 
£rvî
 * 
£rvî_poﬁ_gë_£rvî
(
£rvî_poﬁ
 * 
p
);

39 
ölöe
 
	$£rvî_£t_mac
(
£rvî
 * 
§v
, 
u8
 * 
mac
)

41 
	`mem˝y
(
§v
->
mac
,mac,
ETH_ALEN
);

42 
	}
}

44 
ölöe
 
ù_addªss
 * 
	$£rvî_gë_ù_addªss
(
£rvî
 * 
§v
)

46  &(
§v
->
addr
.
ù
);

47 
	}
}

49 
ölöe
 
u16
 
	$£rvî_gë_p‹t
(
£rvî
 * 
§v
)

51  
§v
->
addr
.
p‹t
;

52 
	}
}

	@include/tcp.h

14 #i‚de‡
_TCP_H


15 
	#_TCP_H


	)

17 
	~"ty≥s/∑ckë.h
"

18 
	~"ty≥s/c⁄√˘i⁄.h
"

20 
t˝_°©es
(
∑ckë
 * 
pkt
);

22 
t˝_h™dÀr
(
∑ckë
 * 
pkt
);

24 
t˝_ch™ge_°©e
(
∑ckë
 * 
pkt
,
c⁄√˘i⁄
 * 
˝
);

27 
	#TCP_INIT
 0

	)

28 
	#TCP_FIN1
 1

	)

29 
	#TCP_FIN1_ACK
 2

	)

30 
	#TCP_FIN2
 3

	)

31 
	#TCP_FIN2_ACK
 4

	)

32 
	#TCP_CLOSED
 5

	)

	@include/test.h

1 #i‚de‡
_TEST_H


2 
	#_TEST_H


	)

5 
ã°_¨p
();

	@include/timer.h

13 #i‚de‡
_TIMER_H


14 
	#_TIMER_H


	)

16 
	~"ty≥s/timî.h
"

18 
timî_moduÀ_öô
(
£c⁄ds
);

21 
timî_öô
(
timî
 * 
t
,(*
h™dÀr
)(timer *Å));

23 
	`timî_add
(
timî
 * 
t
, 
£c⁄ds
);

25 
	`timî_dñ
(
timî
 * 
t
);

27 
	`timî_expúe
();

	@include/types/connection.h

11 #i‚de‡
_TYPES_CONNECTION_H


12 
	#_TYPES_CONNECTION_H


	)

14 
	~"comm⁄/li°.h
"

15 
	~"comm⁄/ty≥s.h
"

16 
	~"ty≥s/öãrÁ˚.h
"

17 
	~"ty≥s/timî.h
"

18 
	~"löux-√t/if_ëhî.h
"

34 
	sc⁄√˘i⁄
 {

35 
li°_hód
 
	m˛õ¡_li°
;

36 
li°_hód
 
	m£lf_li°
;

38 
loˇl_ù
 * 
	mvs_addr
;

39 
loˇl_ù
 * 
	m£lf_addr
;

40 
£rvî
 * 
	m£rvî
;

41 
v£rvî
 * 
	mvs
;

42 
timî
 
	mexpúe
;

44 
ù_addªss
 
	m˛õ¡_addr
;

45 
u16
 
	m˛õ¡_p‹t
;

46 
u16
 
	m£lf_p‹t
;

49 
u8
 
	m˛õ¡_ad≠ãr_idx
;

50 
u8
 
	m˛õ¡_queue_idx
;

51 
u8
 
	m£rvî_ad≠ãr_idx
;

52 
u8
 
	m£rvî_queue_idx
;

53 
u8
 
	m˛õ¡_mac
[
ETH_ALEN
];

55 
u8
 
	m°©e
;

56 
u8
 
	mÊags
;

57 
u8
 
	m¥Ÿocﬁ
;

	@include/types/dispatch.h

11 #i‚de‡
_TYPES_DISPATCH_H


12 
	#_TYPES_DISPATCH_H


	)

14 
	~"comm⁄/ty≥s.h
"

17 
	sdi•©ch


19 
	mid
;

20 
	mnum
;

21 
u16
 
	mp‹t_ba£
;

22 
u16
 
	mp‹t_¶i˚
;

24 
u16
 
	m£lf_p‹t_low
;

25 
u16
 
	m£lf_p‹t_high
;

	@include/types/driver.h

13 #i‚de‡
_TYPES_DRIVER_H


14 
	#_TYPES_DRIVER_H


	)

16 
	~"comm⁄/ty≥s.h
"

17 
	~"ty≥s/∑ckë.h
"

18 
	~"löux-√t/if_ëhî.h
"

21 
	srög
 {

22 
ad≠ãr
 * 
	ma
;

23 *
	mdesc
;

24 
u32
 
	mdesc_num
;

25 
u32
 
	mhód
;

26 
u32
 
	mèû
;

29 
u32
 * 
	mèû_ªg
;

31 
u8
 
	mqueue_idx
;

32 
∑ckë_poﬁ
 
	mpoﬁ
;

34 
∑ckë
 * 
	mbuf„r
[0];

38 
	sad≠ãr
 {

39 
u32
 
	mid
;

40 
u8
 
	mmac
[
ETH_ALEN
];

42 
rög
 *
	mtx_rög
;

44 
rög
 *
	mrx_rög
;

46 
u8
 
	mqueue_num
;

47 
u32
 
	mdesc_num
;

48 
u8
 
	mqueue_idx
;

49 
u64
 
	mªgs_addr
;

50 
u64
 
	mdesc_addr
;

55 
	sdrivî


57 
u8
 
	mid
;

58 
	mfd
;

59 * 
	mdev
;

60 
ad≠ãr
 * 
	mad≠ãrs
[32];

62 
u8
 
	mad≠ãr_num
;

63 
u8
 
	mrög_num
;

64 
u16
 
	mdesc_num
;

66 
u64
 
	mdesc_tŸÆ_size
;

67 
u64
 
	mªgs_tŸÆ_size
;

68 
u64
 
	mbuf„r_tŸÆ_size
;

70 
u32
 
	mdesc_size
;

71 
u32
 
	mªgs_size
;

73 
u64
 
	mªgs_addr
;

74 
u64
 
	mdesc_addr
;

75 
u64
 
	mbuf„r_addr
;

76 
u64
 
	mbuf„r_addr_phys
;

	@include/types/interface.h

12 #i‚de‡
_TYPES_INTERFACE_H


13 
	#_TYPES_INTERFACE_H


	)

16 
	~"comm⁄/li°.h
"

17 
	~"ty≥s/loˇl_ù.h
"

19 
	snic


21 
	mid
;

25 
li°_hód
 
	m£lf_li°_ùv4
;

26 
li°_hód
 
	m£lf_li°_ùv6
;

28 
li°_hód
 
	mvs_li°_ùv4
;

29 
li°_hód
 
	mvs_li°_ùv6
;

34 
	söãrÁ˚


36 
	mnum
;

37 
ù_•a˚
 * 
	m•a˚
;

38 
nic
 
	mnic
[0];

	@include/types/lf_queue.h

2 #i‚de‡
_TYPES_LF_QUEUE_H


3 
	#_TYPES_LF_QUEUE_H


	)

5 
	~"comm⁄/li°.h
"

6 
	~"comm⁄/ty≥s.h
"

7 
	~"comm⁄/c⁄fig.h
"

10 
	elfq_°©e


12 
	mLFQ_START
,

13 
	mLFQ_DISPATCH
,

14 
	mLFQ_RECLAIM
,

15 
	mLFQ_XMIT
,

16 
	mLFQ_END


19 
	slfq


21 
	m≈roc
;

22 
	mid
;

23 
	mdesc_num
;

24 
	mmoduÀ_size
;

25 
	mlf_queue_size
;

26 
	m°¨t
;

28 
lf_queue
 ** 
	mªcv_queue
;

29 
lf_queue
 ** 
	m£nd_queue
;

32 
	slf_queue


34 
	msize
;

35 
li°_hód
 
	mli°
;

36 
hód
 
	m____ˇchñöe_Æig√d
;

37 
èû
 
	m____ˇchñöe_Æig√d
;

38 
u64
 
	mdesc
[0];

	@include/types/local_ip.h

12 #i‚de‡
_TYPES_LOCAL_IP_H


13 
	#_TYPES_LOCAL_IP_H


	)

15 
	~"comm⁄/li°.h
"

16 
	~"ty≥s/p‹t_ønge.h
"

17 
	~"comm⁄/ty≥s.h
"

19 
	sloˇl_ù


21 
li°_hód
 
	mli°
;

23 
li°_hód
 
	mnic_li°
;

25 
	mty≥
;

26 
ù_addªss
 
	maddr
;

28 
	mnic_id
;

30 
p‹t_ønge
 * 
	mt˝_p‹t
;

31 
p‹t_ønge
 * 
	mudp_p‹t
;

35 
	sù_£t


37 
li°_hód
 * 
	mhashèbÀ
;

41 
	sù_•a˚


43 
u16
 
	mvs_p‹t_low
;

44 
u16
 
	mvs_p‹t_high
;

45 
u16
 
	m£lf_p‹t_low
;

46 
u16
 
	m£lf_p‹t_high
;

48 
ù_£t
 * 
	m£lf_ù_v4_£t
;

49 
ù_£t
 * 
	m£lf_ù_v6_£t
;

50 
ù_£t
 * 
	mvs_ù_v4_£t
;

51 
ù_£t
 * 
	mvs_ù_v6_£t
;

	@include/types/mem_pool.h

2 #i‚de‡
_TYPES_MEM_POOL_H


3 
	#_TYPES_MEM_POOL_H


	)

6 
	~"comm⁄/li°.h
"

8 
	smem_poﬁ
 {

9 
li°_hód
 
	mli°
;

10 
¶i°
 
	m‰ì_li°
;

11 
	msize
;

12 
	mchunksize
;

13 
	mnum
;

14 
	m«me
[32];

	@include/types/net_global.h

12 #i‚de‡
_TYPES_NET_GLOBAL_H


13 
	#_TYPES_NET_GLOBAL_H


	)

16 
	~"ty≥s/drivî.h
"

17 
	~"ty≥s/∑ckë.h
"

18 
	~"ty≥s/lf_queue.h
"

19 
	~"ty≥s/öãrÁ˚.h
"

20 
	~"ty≥s/rouã.h
"

22 
	s√t_globÆ


24 
	mid
;

26 
drivî
 * 
	md
;

27 
öãrÁ˚
 * 
	môf
;

28 
∑ckë_z⁄e
 * 
	mz
;

29 
lfq
 * 
	mq
;

30 
rouã_èbÀ
 * 
	mπ
;

	@include/types/packet.h

12 #i‚de‡
_TYPES_PACKET_H


13 
	#_TYPES_PACKET_H


	)

15 
	~"comm⁄/ty≥s.h
"

16 
	~"comm⁄/li°.h
"

17 
	~"ty≥s/lf_queue.h
"

19 
	s∑ckë


21 
li°_hód
 
	m√xt
;

23 
u64
 
	mphys
;

24 
u16
 
	mÀn
;

25 
u16
 
	msize
;

27 
u16
 
	m¥Ÿocﬁ_ëh
;

28 
u8
 
	m¥Ÿocﬁ_ù
;

30 
u8
 
	mÁmûy
;

31 
u8
 
	mad≠ãr_idx
;

34 
lfq_°©e
 
	mlfq_°©e
;

36 
	mid
;

38 
√t_addªss
 
	mßddr
;

39 
√t_addªss
 
	mdaddr
;

41 
	må™•‹t_hódî
;

42 
	m√tw‹k_hódî
;

43 
	mmac_hódî
;

47 
	s∑ckë_poﬁ


49 
__u64
 
	mnum
;

50 
li°_hód
 
	mli°
;

53 
	s∑ckë_z⁄e


55 
u64
 
	m°¨t_Æl
;

56 
u64
 
	mphys_Æl
;

58 
__u64
 
	m°¨t
;

59 
__u64
 
	mphys
;

60 
__u64
 
	msize
;

61 
__u64
 
	m∑ckë_num
;

62 
__u16
 
	m∑ckë_size
;

63 
__u16
 
	m∑ckë_off£t
;

64 
	mid
;

65 
∑ckë_poﬁ
 
	m‰ì_∑ckë_poﬁ
;

	@include/types/port_range.h

13 #i‚de‡
_TYPES_PORT_RANGE_H


14 
	#_TYPES_PORT_RANGE_H


	)

16 
	~"comm⁄/ty≥s.h
"

19 
	sp‹t_ønge
 {

20 
	msize
, 
	mgë
, 
	mput
;

21 
	mavaû
;

22 
u16
 
	mp‹ts
[0];

	@include/types/route.h

12 #i‚de‡
_TYPES_ROUTE_H


13 
	#_TYPES_ROUTE_H


	)

16 
	~"comm⁄/ty≥s.h
"

17 
	~"comm⁄/li°.h
"

20 
	srouã_íåy


22 
li°_hód
 
	mli°
;

23 
ù_addªss
 
	maddr
;

24 
u32
 
	mnic_id
;

27 
	srouã_èbÀ


29 
u32
 
	mgw_nic_id
;

30 
li°_hód
 * 
	mhashèbÀ
;

	@include/types/server_pool.h

11 #i‚de‡
_TYPES_SERVER_POOL_H


12 
	#_TYPES_SERVER_POOL_H


	)

14 
	~"comm⁄/ty≥s.h
"

15 
	~"löux-√t/if_ëhî.h
"

18 
	s£rvî


20 
li°_hód
 
	mli°
;

21 
√t_addªss
 
	maddr
;

22 
u8
 
	mmac
[
ETH_ALEN
];

23 
u64
 
	mbôsö
;

24 
u64
 
	mbôsout
;

25 
u64
 
	mcuºít_c⁄n
;

26 
u64
 
	mtŸÆ_c⁄n
;

30 
	#MAX_SERVER
 64

	)

31 
	s£rvî_poﬁ


33 
li°_hód
 
	mli°
;

34 
£rvî
 
	m£rvî_li°
[
MAX_SERVER
];

35 
	mnum
;

36 
	m√xt
;

37 
	mªf
;

	@include/types/timer.h

13 #i‚de‡
_TYPES_TIMER_H


14 
	#_TYPES_TIMER_H


	)

16 
	~"comm⁄/li°.h
"

18 
	stimî


20 (*
	mh™dÀr
)(
timî
 * 
	mt
);

21 
li°_hód
 
	mli°
;

26 
	s˛ock


28 
	m˝u_‰equícy
;

29 
	mnow
;

30 
	mfûl
;

31 
	mœ°_expúe
;

32 
	mtŸÆ_˛ock_£c⁄ds
;

33 
	m√xt_˛ock_£c⁄d
;

34 
li°_hód
 
	mtimî_èbÀ
[0];

	@include/types/vserver.h

11 #i‚de‡
_TYPES_VSERVER_H


12 
	#_TYPES_VSERVER_H


	)

14 
	~"comm⁄/li°.h
"

15 
	~"comm⁄/ty≥s.h
"

17 
	#VS_IP_NUM_MAX
 16

	)

19 
	sv£rvî


21 
li°_hód
 
	mli°
;

22 
li°_hód
 
	mvs_lù_node
;

23 
£rvî_poﬁ
 * 
	mpoﬁ
;

25 
u8
 
	m«me
[32];

26 
loˇl_ù
 * 
	maddr
[
VS_IP_NUM_MAX
];

27 
u8
 
	mù_num
;

29 
u16
 
	mp‹t
;

30 
u8
 
	m¥Ÿocﬁ
;

32 
u8
 
	mis_fuŒ«t
;

36 
	svs_lù_node


38 
li°_hód
 
	mhash_li°
;

39 
li°_hód
 
	m√xt
;

41 
v£rvî
 * 
	mvs
;

42 
loˇl_ù
 * 
	mlù
;

	@include/vserver.h

1 #i‚de‡
_VSERVER_H


2 
	#_VSERVER_H


	)

4 
	~"comm⁄/ty≥s.h
"

5 
	~"ty≥s/loˇl_ù.h
"

6 
	~"ty≥s/v£rvî.h
"

10 
	#VS_IS_TCP
(
vs
Ë(vs->
¥Ÿocﬁ
 =
PROTO_TCP
)

	)

13 
v£rvî_moduÀ_öô
();

15 
v£rvî
 * 
v£rvî_lookup
(
ù_addªss
 * 
ù
, 
u16
 
p‹t
, 
u8
 
¥Ÿocﬁ
, 
loˇl_ù
 ** 
vs_lù
);

17 
v£rvî
 * 
v£rvî_¸óã
(
£rvî_poﬁ
 * 
p
, 
u16
 
p‹t
, 
u8
 
¥Ÿocﬁ
, u8 
is_fuŒ«t
);

19 
v£rvî_‰ì
(
v£rvî
 * 
vs
);

21 
v£rvî_add_ù
(
v£rvî
 * 
vs
, 
loˇl_ù
 * 
lù
 );

23 
£rvî
 * 
v£rvî_gë_£rvî
(
v£rvî
 * 
vs
);

	@src/arp.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<sys/sockë.h
>

24 
	~<sys/waô.h
>

25 
	~<uni°d.h
>

26 
	~<¨∑/öë.h
>

28 
	~"comm⁄/ty≥s.h
"

29 
	~"comm⁄/debug.h
"

30 
	~"löux-√t/if_¨p.h
"

31 
	~"löux-√t/if_ëhî.h
"

32 
	~"drivî.h
"

33 
	~"rouã.h
"

34 
	~"∑ckë.h
"

35 
	~"loˇl_ù.h
"

36 
	~"√t_globÆ.h
"

37 
	~"£rvî_poﬁ.h
"

39 
	#ARP_REQUEST_OP
 0x100

	)

40 
	#ARP_REPLY_OP
 0x200

	)

42 
	#IS_ARP_REQUEST
(
pkt
)

	)

43 
	#IS_ARP_REPLY
(
pkt
)

	)

45 
ölöe
 
	$is_¨p_ªque°
(
∑ckë
 * 
pkt
)

47 
¨µack
 * 
≠
 = 
	`∑kë_gë_¨µack
(
pkt
);

49  (
≠
->
¨_›
 =
ARP_REQUEST_OP
);

50 
	}
}

52 
ölöe
 
	$is_¨p_ª∂y
(
∑ckë
 * 
pkt
)

54 
¨µack
 * 
≠
 = 
	`∑kë_gë_¨µack
(
pkt
);

56  (
≠
->
¨_›
 =
ARP_REPLY_OP
);

57 
	}
}

84 
	$¨p_£rvî_rouã
(
∑ckë
 * 
pkt
)

86 
¨µack
 * 
≠
 = 
	`∑kë_gë_¨µack
(
pkt
);

87 
li°_hód
 * 
hód
;

88 
£rvî
 * 
§v
;

89 
ù_addªss
 * 
§v_ù
;

90 
ù_addªss
 * 
pkt_sù
 = 
	`∑ckë_gë_sù
(
pkt
);

91 
rouã_íåy
 * 
ª
;

92 
nic_id
 = 
pkt
->
ad≠ãr_idx
;

96 
hód
 = 
	`£rvî_poﬁ_gë_£rvî_li°
();

98 
	`f‹_óch_£rvî
(
§v
,
hód
)

100 
§v_ù
 = 
	`£rvî_gë_ù_addªss
(
§v
);

102 if–
	`ù_addªss_eq
(
§v_ù
,
pkt_sù
))

106 
ª
 = 
	`ng_π_lookup_wôh_nic_id
(
§v_ù
, 
nic_id
);

107 if(!
ª
)

109 
ª
 = 
	`π_íåy_¸óã
();

110 
	`π_íåy_öô
(
ª
, 
§v_ù
 , 
nic_id
);

111 
	`ng_π_add_íåy
(
ª
);

113 
	`£rvî_£t_mac
(
§v
,
≠
->
¨_sha
);

120 
	}
}

132 
u8
 
	gÆl_mac
[
ETH_ALEN
] = {0xff,0xff,0xff,0xff,0xff,0xff};

133 
u8
 
	gzîo_mac
[
ETH_ALEN
] = {0,0,0,0,0,0};

135 
	$¨p_£nd_ªque°
(
ù_addªss
 * 
addr
,
nic_id
)

137 
∑ckë
 * 
pkt
 ;

138 
ëhhdr
 * 
ï
 ;

139 
¨µack
 * 
≠
 ;

140 
u8
 *
d©a
;

141 
u8
 * 
§c_mac
 ;

142 
loˇl_ù
 * 
lù
;

144 
ù_addªss
 * 
§c_ù
 ;

146 
lù
 = 
	`ng_öãrÁ˚_gë_vsùv4_º
(
nic_id
);

147 if(!
lù
)

148 
lù
 = 
	`ng_öãrÁ˚_gë_£lfùv4_º
(
nic_id
);

150 if(!
lù
)  0;

152 
pkt
 = 
	`ng_gë_‰ì_∑ckë
();

154 if(!
pkt
)  0;

156 
d©a
 = 
	`∑ckë_d©a
(
pkt
);

157 
ï
 = (
ëhhdr
*)(
d©a
);

158 
≠
 = ( 
¨µack
 *)(
d©a
 + (
ëhhdr
));

159 
§c_mac
 = 
	`ng_drivî_gë_mac
(
nic_id
);

162 
	`mem˝y
(
ï
->
h_de°
,
Æl_mac
,
ETH_ALEN
);

163 
	`mem˝y
(
ï
->
h_sour˚
,
§c_mac
,
ETH_ALEN
);

164 
ï
->
h_¥Ÿo
 = 
PROTO_ARP
;

168 
≠
->
¨_hrd
 = 0x0100;

169 
≠
->
¨_¥o
 = 0x0008;

170 
≠
->
¨_h 
 = 6;

171 
≠
->
¨_∂n
 = 4;

172 
≠
->
¨_›
 = 
ARP_REQUEST_OP
;

173 
	`mem˝y
(
≠
->
¨_sha
,
§c_mac
,
ETH_ALEN
);

174 
§c_ù
 = 
	`lù_gë_ù_addªss
(
lù
);

175 *(
u32
*)(
≠
->
¨_sù
Ë
§c_ù
->
addr
.
ù4
;

177 
	`mem˝y
(
≠
->
¨_tha
,
zîo_mac
,
ETH_ALEN
);

178 *(
u32
*)(
≠
->
¨_tù
Ë
addr
->addr.
ù4
;

180 
pkt
->
Àn
 = (
¨µack
Ë+ (
ëhhdr
);

181 
pkt
->
ad≠ãr_idx
 = 
nic_id
;

182 
	`ng_drivî_put_∑ckë_to_£nd_buf„r
(
pkt
);

185 
	}
}

194 
	$¨p_ª•⁄£
(
∑ckë
 * 
pkt
)

196 
ëhhdr
 * 
ï
 = 
	`∑ckë_gë_ëhhdr
(
pkt
);

197 
¨µack
 * 
≠
 = 
	`∑kë_gë_¨µack
(
pkt
);

198 
u32
 
ù4
 = *(*)(&(
≠
->
¨_tù
));

199 
ù_addªss
 
ù
;

201 
	`ù_addªss_öô_v4
(&
ù
,
ù4
 );

204 if(!
	`ng_öãrÁ˚_lookup_ù
–&
ù
))  0;

207 
	`DPRINTF
("¨p_ª•⁄£: %d %d %d %d\n",
ù
.
addr
.
b
[0], ip.addr.b[1],ip.addr.b[2],ip.addr.b[3]);

208 
	`DPRINT_PACKET
(
pkt
);

212 if(
≠
->
¨_›
 !
ARP_REQUEST_OP
)  0;

214 
rouã_íåy
 * 
ª
 = 
	`ng_π_lookup_º
(&
ù
);

215 if(
ª
 =
NULL
)  0;

216 
u8
 * 
hwaddr
 = 
	`ng_drivî_gë_mac
(
ª
->
nic_id
);

217 
tmp
 = *(*)(&(
≠
->
¨_tù
));

219 
	`mem˝y
(
≠
->
¨_tha
,≠->
¨_sha
,
ETH_ALEN
 + 4);

222 
	`mem˝y
(
≠
->
¨_sha
,
hwaddr
,
ETH_ALEN
 );

223 *(*)(
≠
->
¨_sù
Ë
tmp
;

225 
≠
->
¨_›
 = 
ARP_REPLY_OP
;

228 
	`mem˝y
(
ï
->
h_de°
,ï->
h_sour˚
,
ETH_ALEN
);

229 
	`mem˝y
(
ï
->
h_sour˚
,
hwaddr
,
ETH_ALEN
);

231 
pkt
->
ad≠ãr_idx
 = 
ª
->
nic_id
;

233  (
ëhhdr
 ) + (
¨µack
);

234 
	}
}

249 
	$¨p_h™dÀr
(
∑ckë
 * 
pkt
)

252 if(
	`is_¨p_ªque°
(
pkt
))

254 if(
	`¨p_ª•⁄£
(
pkt
))

256 
	`DPRINTF
("\nARTP RESPONSE:\n");

257 
	`DPRINT_PACKET
(
pkt
);

259 
	`ng_drivî_put_∑ckë_to_£nd_buf„r
(
pkt
);

261  
PACKET_STOLEN
;

264 if(
	`is_¨p_ª∂y
(
pkt
))

266 
	`¨p_£rvî_rouã
(
pkt
);

272  
PACKET_ACCEPT
;

273 
	}
}

	@src/checksum.c

15 
	~<¨∑/öë.h
>

16 
	~"comm⁄/ty≥s.h
"

17 
	~"löux-√t/if_ëhî.h
"

18 
	~"löux-√t/ù.h
"

19 
	~"löux-√t/udp.h
"

20 
	~"löux-√t/t˝.h
"

21 
	~"löux-√t/ùv6.h
"

22 
	~"∑ckë.h
"

25 
u16
 
	$_checksum
(
u16
 *
buf„r
,
size
, 
öô
)

27 
cksum
=
öô
;

28 
size
>1)

30 
cksum
+=*
buf„r
++;

31 
size
-=(
u16
);

34 if(
size
)

36 
cksum
+=*(
u8
 *)
buf„r
;

39 
cksum
>>16)

40 
cksum
=(cksum>>16)+(cksum & 0xffff);

42  (
u16
Ë(~
cksum
);

43 
	}
}

46 
u16
 
	$checksum
(
u16
 *
buf„r
,
size
, 
öô
)

48  
	`_checksum
(
buf„r
, 
size
, 0);

49 
	}
}

55 
u16
 
	$checksum_t˝udp
(
u16
 * 
buf„r
, 
size
, 
u32
 * 
§c
, u32 * 
d°
, 
ù_Àn
, 
u8
 
¥Ÿo
, u16 
Àn
)

57 
cksum
 = 0;

58 
u16
 
_¥Ÿo
 = 
¥Ÿo
 << 8;

59 
i
;

61 
i
 = 0; i < 
ù_Àn
; i++)

63 
cksum
 +
§c
[
i
] >> 16;

64 
cksum
 +(
§c
[
i
] & 0xffff);

65 
cksum
 +
d°
[
i
] >> 16;

66 
cksum
 +
d°
[
i
] & 0xffff;

69 
cksum
 +
_¥Ÿo
;

70 
cksum
 +
Àn
;

72  
	`_checksum
(
buf„r
, 
size
, 
cksum
);

73 
	}
}

77 
	$checksum_ùv4
(
∑ckë
 * 
pkt
)

79 * 
d©a
 = 
	`∑ckë_d©a
(
pkt
);

80 
ùhdr
 * 
ù
 = (ùhd∏* )(
d©a
 + (
ëhhdr
));

82 
ù
->
check
 = 0;

84 
ù
->
check
 = 
	`checksum
((
u16
*)ù, (
ùhdr
),0);

85 
	}
}

87 
	$checksum_udp
(
∑ckë
 * 
pkt
)

89 
u16
 
Àn
;

90 
ùhdr
 * 
ù
 = 
	`∑ckë_gë_ùhdr
(
pkt
);

91 
ùv6hdr
 * 
ù6
 = 
	`∑ckë_gë_ùv6hdr
(
pkt
);

92 
udphdr
 * 
udp
 = 
	`∑ckë_gë_udphdr
(
pkt
);

93 
u16
 
size
;

94 
ù_Àn
;

95 
u32
 * 
ßddr
;

96 
u32
 * 
daddr
;

98 
udp
->
check
 = 0;

99 if(
	`PACKET_IS_IPV4
(
pkt
))

101 
size
 = 
	`¡ohs
(
ù
->
tŸ_Àn
) - 20;

102 
Àn
 = 
	`ht⁄s
 (
size
);

103 
ù_Àn
 = 1;

104 
ßddr
 = &(
ù
->saddr);

105 
daddr
 = &(
ù
->daddr);

109 
Àn
 = 
ù6
->
∑ylﬂd_Àn
;

110 
size
 = 
	`¡ohs
(
Àn
);

111 
ù_Àn
 = 4;

112 
ßddr
 = (
u32
*)&(
ù6
->saddr);

113 
daddr
 = (
u32
*)&(
ù6
->daddr);

117 
udp
->
check
 = 
	`checksum_t˝udp
((
u16
 *Ëudp, 
size
, 
ßddr
,
daddr
,
ù_Àn
,
ù
->
¥Ÿocﬁ
,
Àn
);

118 
	}
}

123 
	$checksum_t˝
(
∑ckë
 * 
pkt
)

125 
u16
 
Àn
;

126 
u16
 
size
;

127 
ùhdr
 * 
ù
 = 
	`∑ckë_gë_ùhdr
(
pkt
);

128 
ùv6hdr
 * 
ù6
 = 
	`∑ckë_gë_ùv6hdr
(
pkt
);

129 
t˝hdr
 * 
t˝
 = 
	`∑ckë_gë_t˝hdr
(
pkt
);

130 
ù_Àn
;

131 
u32
 * 
ßddr
;

132 
u32
 * 
daddr
;

134 
t˝
->
check
 = 0;

135 if(
	`PACKET_IS_IPV4
(
pkt
))

137 
size
 = 
	`¡ohs
(
ù
->
tŸ_Àn
) - 20;

138 
Àn
 = 
	`ht⁄s
 (
size
);

139 
ù_Àn
 = 1;

140 
ßddr
 = &(
ù
->saddr);

141 
daddr
 = &(
ù
->daddr);

145 
Àn
 = 
ù6
->
∑ylﬂd_Àn
;

146 
size
 = 
	`¡ohs
(
Àn
);

147 
ù_Àn
 = 4;

148 
ßddr
 = (
u32
*)&(
ù6
->saddr);

149 
daddr
 = (
u32
*)&(
ù6
->daddr);

153 
t˝
->
check
 = 
	`checksum_t˝udp
((
u16
 *Ët˝, 
size
, 
ßddr
,
daddr
,
ù_Àn
,
ù
->
¥Ÿocﬁ
,
Àn
);

154 
	}
}

	@src/connection.c

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<¨∑/öë.h
>

44 
	~<°rög.h
>

45 
	~"comm⁄/li°.h
"

46 
	~"comm⁄/ty≥s.h
"

47 
	~"comm⁄/c⁄fig.h
"

48 
	~"comm⁄/øndom.h
"

49 
	~"comm⁄/jhash.h
"

50 
	~"comm⁄/hashèbÀ.h
"

51 
	~"comm⁄/debug.h
"

52 
	~"löux-√t/if_ëhî.h
"

53 
	~"löux-√t/ù.h
"

54 
	~"löux-√t/t˝.h
"

55 
	~"löux-√t/udp.h
"

56 
	~"t˝.h
"

57 
	~"loˇl_ù.h
"

58 
	~"c⁄√˘i⁄.h
"

59 
	~"v£rvî.h
"

60 
	~"∑ckë.h
"

61 
	~"timî.h
"

62 
	~"√t_globÆ.h
"

63 
	~"rouã.h
"

64 
	~"mem_poﬁ.h
"

65 
	~"£rvî_poﬁ.h
"

68 
mem_poﬁ
 * 
	gc⁄n_mem_poﬁ
;

71 
li°_hód
 * 
	g˛õ¡_hashèbÀ
;

72 
li°_hód
 * 
	g£lf_hashèbÀ
;

74 
	#CONN_HT_BITS
 
CONFIG_CON_TAB_BITS


	)

75 
	#CONN_HT_SIZE
 (1 << 
CONN_HT_BITS
Ë

	)

76 
	#CONN_HT_MASK
 ( (
CONN_HT_SIZE
Ë- 1Ë

	)

81 
	$c⁄√˘i⁄_mem_poﬁ_¸óã
()

83 
c⁄n_mem_poﬁ
 = 
	`mem_poﬁ_¸óã
("c⁄√˘i⁄Öoﬁ", (
c⁄√˘i⁄
));

84 if(
c⁄n_mem_poﬁ
 =
NULL
)  0;

87 
	}
}

89 
c⁄√˘i⁄
 * 
	$c⁄√˘oö_gë_‰ì
()

91  (
c⁄√˘i⁄
 *)
	`mem_poﬁ_Æloc
(
c⁄n_mem_poﬁ
);

92 
	}
}

95 
	$c⁄√˘oö_put_‰ì
(
c⁄√˘i⁄
 * 
˝
)

97 
	`mem_poﬁ_‰ì
(
c⁄n_mem_poﬁ
,(*)
˝
);

98 
	}
}

103 
	$c⁄√˘i⁄_hashkey
(
ù_addªss
 * 
ù
, 
u32
 
p‹t
, u32 
¥Ÿo
)

105 
u32
 
h
 = 
	`ù_p‹t_¥Ÿo_hash
(
ù
,
p‹t
, 
¥Ÿo
);

106  (
h
 & 
CONN_HT_MASK
);

107 
	}
}

111 
	$c⁄√˘i⁄_hashkey_˛õ¡
(
c⁄√˘i⁄
 * 
˝
)

113  
	`c⁄√˘i⁄_hashkey
(&(
˝
->
˛õ¡_addr
), cp->
˛õ¡_p‹t
,˝->
¥Ÿocﬁ
);

114 
	}
}

116 
	$c⁄√˘i⁄_hashkey_£lf
(
c⁄√˘i⁄
 * 
˝
)

118  
	`c⁄√˘i⁄_hashkey
(&(
˝
->
£lf_addr
->
addr
), cp->
£lf_p‹t
,˝->
¥Ÿocﬁ
);

119 
	}
}

122 
ölöe
 
	$c⁄√˘i⁄_˛õ¡_eq
(
c⁄√˘i⁄
 * 
˝
, 
ù_addªss
 * 
ù
 ,
u16
 
p‹t
,
u8
 
¥Ÿo
)

125 if(
	`ù_addªss_eq
–&(
˝
->
˛õ¡_addr
),
ù
Ë&& (˝->
˛õ¡_p‹t
 =
p‹t
Ë&& (˝->
¥Ÿocﬁ
 = 
¥Ÿo
) )

129 
	}
}

131 
ölöe
 
	$c⁄√˘i⁄_£lf_eq
(
c⁄√˘i⁄
 * 
˝
, 
ù_addªss
 *
ù
 ,
u16
 
p‹t
,
u8
 
¥Ÿo
)

134 if(
	`ù_addªss_eq
(&(
˝
->
£lf_addr
->
addr
), 
ù
Ë&& (˝->
£lf_p‹t
 =
p‹t
Ë&& (˝->
¥Ÿocﬁ
 = 
¥Ÿo
) )

138 
	}
}

141 
	$c⁄√˘i⁄_add
(
c⁄√˘i⁄
 * 
˝
)

143 
idx
;

145 
idx
 = 
	`c⁄√˘i⁄_hashkey_˛õ¡
(
˝
);

146 
	`li°_add
(&(
˝
->
˛õ¡_li°
),&
˛õ¡_hashèbÀ
[
idx
]);

148 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

150 
idx
 = 
	`c⁄√˘i⁄_hashkey_£lf
(
˝
);

151 
	`li°_add
(&(
˝
->
£lf_li°
),&
£lf_hashèbÀ
[
idx
]);

153 
	}
}

156 
	$c⁄√˘i⁄_dñ
(
c⁄√˘i⁄
 * 
˝
)

158 
	`li°_dñ
(&(
˝
->
˛õ¡_li°
));

160 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

161 
	`li°_dñ
(&(
˝
->
£lf_li°
));

162 
	}
}

172 
c⁄√˘i⁄
 * 
	$c⁄√˘i⁄_lookup
(
ù_addªss
 * 
ù
 ,
u16
 
p‹t
,
u8
 
¥Ÿo
, u8 
is_˛õ¡
)

174 
idx
 = 
	`c⁄√˘i⁄_hashkey
(
ù
 ,
p‹t
,
¥Ÿo
);

175 
c⁄√˘i⁄
 *
˝
;

177 if(
is_˛õ¡
){

178 
	`li°_f‹_óch_íåy
(
˝
, &
˛õ¡_hashèbÀ
[
idx
], 
˛õ¡_li°
) {

179 if(
˝
 =
NULL
)

181 
	`¥ötf
("Strange\n");

183 if(
	`c⁄√˘i⁄_˛õ¡_eq
(
˝
,
ù
 ,
p‹t
,
¥Ÿo
))  cp;

187 
	`li°_f‹_óch_íåy
(
˝
, &
£lf_hashèbÀ
[
idx
], 
£lf_li°
) {

188 if(
	`c⁄√˘i⁄_£lf_eq
(
˝
,
ù
 ,
p‹t
,
¥Ÿo
))  cp;

192  
NULL
;

193 
	}
}

196 
	$c⁄√˘i⁄_timeout
(
timî
 * 
t
)

198 
c⁄√˘i⁄
 * 
˝
 =–c⁄√˘i⁄ *Ë
	`c⁄èöî_of
(
t
,c⁄√˘i⁄,
expúe
);

200 
	`c⁄√˘i⁄_‰ì
(
˝
);

202 
	`DPRINTF
("Connection Time out\n");

205 
	}
}

211 
ölöe
 
	$c⁄√˘i⁄_£t_rouã
(
∑ckë
 * 
pkt
, 
c⁄√˘i⁄
 * 
˝
, 
£rvî
 * 
§v
)

213 
ëhhdr
 * 
ï
 = 
	`∑ckë_gë_ëhhdr
(
pkt
);

214 
rouã_íåy
 * 
ª
;

218 
	`mem˝y
(
˝
->
˛õ¡_mac
,
ï
->
h_sour˚
 ,
ETH_ALEN
);

219 
˝
->
˛õ¡_ad≠ãr_idx
 = 
pkt
->
ad≠ãr_idx
;

220 
˝
->
˛õ¡_queue_idx
 = 0;

224 
ª
 = 
	`ng_π_lookup_º
(&(
§v
->
addr
.
ù
));

226 if(
ª
 =
NULL
)  0;

228 
˝
->
£rvî_ad≠ãr_idx
 = 
ª
->
nic_id
;

229 
˝
->
£rvî_queue_idx
 = 0;

230 
	}
}

232 
ölöe
 
	$c⁄√˘i⁄_£t_£lf_ù_p‹t
(
c⁄√˘i⁄
 * 
˝
,
nic_id
,
is_ùv4
, 
is_t˝
)

234 
loˇl_ù
 * 
lù
;

235 
u16
 
p‹t
;

237 if(
is_ùv4
)

238 
lù
 = 
	`ng_öãrÁ˚_gë_£lfùv4_º
(
nic_id
);

240 
lù
 = 
	`ng_öãrÁ˚_gë_£lfùv6_º
(
nic_id
);

242 if(
lù
 =
NULL
)  0;

244 
˝
->
£lf_addr
 = 
lù
;

246 if(
is_t˝
)

247 
p‹t
 = 
	`lù_gë_t˝_p‹t
(
lù
,0);

249 
p‹t
 = 
	`lù_gë_udp_p‹t
(
lù
,0);

251 if(
p‹t
 == 0)

254 
˝
->
£lf_p‹t
 = 
p‹t
;

257 
	}
}

270 
c⁄√˘i⁄
 * 
	$c⁄√˘i⁄_¸óã
(
∑ckë
 * 
pkt
,
v£rvî
 * 
vs
)

272 
c⁄√˘i⁄
 *
˝
 = (c⁄√˘i⁄ *)
	`c⁄√˘oö_gë_‰ì
();

273 
u8
 
idx
 = 0;

275 if(
˝
 =
NULL
Ë
îr
;

277 
	`timî_öô
(&(
˝
->
expúe
),
c⁄√˘i⁄_timeout
);

278 
˝
->
vs_addr
 = 
	`ng_öãrÁ˚_lookup_vsù
(
	`∑ckë_gë_dù
(
pkt
));

279 
˝
->
¥Ÿocﬁ
 = 
vs
->protocol;

280 
˝
->
vs
 = vs;

282 if(
vs
->
is_fuŒ«t
)

283 
	`CONNECTION_SET_FULLNAT
(
˝
);

285 
	`CONNECTION_SET_TRANSPARANT
(
˝
);

288 
˝
->
£rvî
 = 
	`v£rvî_gë_£rvî
(
vs
);

289 if(
˝
->
£rvî
 =
NULL
Ë
îr
;

291 if(
	`c⁄√˘i⁄_£t_rouã
(
pkt
,
˝
,˝->
£rvî
Ë=0Ë
îr
;

294 if(
	`CONNECTION_IS_FULLNAT
(
˝
)){

295 if(
	`c⁄√˘i⁄_£t_£lf_ù_p‹t
(
˝
,˝->
£rvî_ad≠ãr_idx
,

296 
	`PACKET_IS_IPV4
(
pkt
),
	`VS_IS_TCP
(
vs
)) == 0)

297 
îr
;

301 
˝
->
˛õ¡_addr
 = * 
	`∑ckë_gë_sù
(
pkt
);

302 
˝
->
˛õ¡_p‹t
 = 
	`∑ckë_gë_•‹t
(
pkt
);

304 if(
	`VS_IS_TCP
(
vs
))

305 
˝
->
°©e
 = 
TCP_INIT
;

307 
	`c⁄√˘i⁄_add
(
˝
);

308 
	`timî_add
(&(
˝
->
expúe
),
CONNECTION_TIMEOUT_SECONDS
);

310  
˝
;

311 
îr
:

312 if(
˝
)

313 
	`c⁄√˘oö_put_‰ì
(
˝
);

315  
NULL
;

316 
	}
}

319 
	$c⁄√˘i⁄_‰ì
(
c⁄√˘i⁄
 *
˝
)

321 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

323 if(
	`CONNECTION_IS_TCP
(
˝
))

324 
	`lù_put_t˝_p‹t
(
˝
->
£lf_addr
, cp->
£lf_p‹t
);

326 
	`lù_put_udp_p‹t
(
˝
->
£lf_addr
, cp->
£lf_p‹t
);

328 
	`timî_dñ
(&(
˝
->
expúe
));

330 
	`c⁄√˘i⁄_dñ
(
˝
);

331 
	`c⁄√˘oö_put_‰ì
(
˝
);

332 
	}
}

339 
	$c⁄√˘i⁄_moduÀ_öô
()

341 
u32
 
c⁄n_size
 = 
CONN_HT_SIZE
;

343 if(
	`c⁄√˘i⁄_mem_poﬁ_¸óã
() == 0)

346 
˛õ¡_hashèbÀ
 = 
	`hashèbÀ_Æloc
(
c⁄n_size
);

347 if(
˛õ¡_hashèbÀ
 =
NULL
)  0;

349 
	`hashèbÀ_öô
(
˛õ¡_hashèbÀ
, 
c⁄n_size
);

351 
£lf_hashèbÀ
 = 
	`hashèbÀ_Æloc
(
c⁄n_size
);

352 if(
£lf_hashèbÀ
 =
NULL
)  0;

354 
	`hashèbÀ_öô
(
£lf_hashèbÀ
, 
c⁄n_size
);

357 
	}
}

	@src/debug.c

1 
	~<°dio.h
>

2 
	~"comm⁄/ty≥s.h
"

3 
	~"comm⁄/debug.h
"

4 
	~"∑ckë.h
"

7 
	$debug_¥öt_∑ckë
(
∑ckë
 * 
pkt
)

9 
i
;

10 * 
skb
 = 
	`∑ckë_d©a
(
pkt
);

12 
i
 = 0; i < 64; i++)

14 
	`¥ötf
("%d ",
skb
[
i
]);

17 
	`¥ötf
("********\n");

19 
i
 = 0; i < 64; i++)

21 
	`¥ötf
("%x ",
skb
[
i
]);

24 
	`¥ötf
("\n\n");

26 
	}
}

	@src/dispatch.c

11 
	~"comm⁄/debug.h
"

12 
	~"comm⁄/ty≥s.h
"

13 
	~"comm⁄/jhash.h
"

14 
	~"ty≥s/di•©ch.h
"

15 
	~"∑ckë.h
"

16 
	~"loˇl_ù.h
"

17 
	~"√t_globÆ.h
"

18 
	~"di•©ch.h
"

19 
	~"lf_queue.h
"

21 
di•©ch
 
	gdi•
;

24 
	$di•©ch_moduÀ_öô
(
n
, 
id
)

26 
di•
.
id
 = id;

27 
di•
.
num
 = 
n
;

28 
di•
.
p‹t_ba£
 = 1024;

29 
di•
.
p‹t_¶i˚
 = (65535 - di•.
p‹t_ba£
Ë/ 
n
;

30 
u16
 
_low
 = 
id
 * 
di•
.
p‹t_¶i˚
 + di•.
p‹t_ba£
;

31 
u16
 
_high
 = 
_low
 + 
di•
.
p‹t_¶i˚
 - 1;

33 
di•
.
£lf_p‹t_low
 = 
_low
;

34 
di•
.
£lf_p‹t_high
 = 
_high
;

37 
	}
}

39 
	$di•©ch_gë_p‹t_ønge
(
u16
 * 
low
, u16 * 
high
)

41 *
low
 = 
di•
.
£lf_p‹t_low
;

42 *
high
 = 
di•
.
£lf_p‹t_high
;

43 
	}
}

45 
ölöe
 
	$di•©ch_p‹t_to_id
(
u16
 
p‹t
)

47 
id
 = (
p‹t
 - 
di•
.
p‹t_ba£
Ë/ di•.
p‹t_¶i˚
;

49  
id
;

50 
	}
}

60 
	$__di•©ch_∑ckë
(
∑ckë
 * 
pkt
)

62 
id
;

63 
u32
 
h
;

64 
ù_addªss
 * 
§c_ù
 =&(
pkt
->
ßddr
.
ù
) ;

65 
ù_addªss
 * 
d°_ù
 = &(
pkt
->
daddr
.
ù
) ;

66 
loˇl_ù
 * 
lù
;

67 
u16
 
d°_p‹t
 = 
pkt
->
daddr
.
p‹t
;

70 
lù
 = 
	`ng_öãrÁ˚_lookup_vsù
(
§c_ù
);

72 if(
lù
)

74 
h
 = 
	`ù_addªss_hash
(
§c_ù
);

75 
id
 = 
h
 % 
di•
.
num
;

80 
lù
 = 
	`ng_öãrÁ˚_lookup_£lfù
(
d°_ù
);

83 if(
lù
)

85 
id
 = 
	`di•©ch_p‹t_to_id
(
d°_p‹t
);

89 
h
 = 
	`ù_addªss_hash
(
d°_ù
);

90 
id
 = 
h
 % 
di•
.
num
;

94  
id
;

95 
	}
}

107 
	$di•©ch_∑ckë
(
lfq
 * 
q
, 
li°_hód
 * 
£nd_hód
,li°_hód * 
ªcv_hód
, li°_hód * 
ª˛aim_hód
)

109 
∑ckë
 * 
pos
;

110 
∑ckë
 * 
n
;

111 
id
;

113 
lfq_°©e
 
s
;

115 if(!
	`li°_em±y
(
£nd_hód
))

117 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
£nd_hód
, 
√xt
)

119 
id
 = 
	`__di•©ch_∑ckë
(
pos
);

121 if(
id
 !
q
->id)

123 
	`li°_dñ
(&(
pos
->
√xt
));

124 
	`∑ckë_£t_lfq_°©e
(
pos
,
LFQ_DISPATCH
);

125 
	`lfq_£nd
(
q
, 
pos
,
id
);

129 
	`lfq_£nd_Êush
(
q
);

132 
	`lfq_ªcv
(
q
,
ªcv_hód
);

134 if(!
	`li°_em±y
(
ªcv_hód
))

136 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
ªcv_hód
, 
√xt
)

138 
s
 = 
	`∑ckë_gë_lfq_°©e
(
pos
);

139 
s
)

141 
LFQ_START
: ;

142 
LFQ_DISPATCH
: ;

143 
LFQ_RECLAIM
:

144 
	`∑ckë_£t_lfq_°©e
(
pos
,
LFQ_END
);

145 
	`li°_move_èû
(&(
pos
->
√xt
),
ª˛aim_hód
);

147 
LFQ_XMIT
:

148 
	`li°_dñ
(&(
pos
->
√xt
));

150 
	`ng_drivî_put_∑ckë_to_£nd_buf„r
(
pos
);

152 
LFQ_END
:

154 
	`DPRINTF
("error @@@\n");

155 
	`exô
(-1);

159 
	}
}

161 
	$di•©ch_ª˛aim
(
lfq
 * 
q
, 
li°_hód
 * 
to_ª˛aim
)

163 
∑ckë
 * 
pos
;

164 
∑ckë
 * 
n
;

165 
id
;

168 if(!
	`li°_em±y
(
to_ª˛aim
))

170 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
to_ª˛aim
, 
√xt
)

172 
id
 = 
pos
->id;

173 if(
id
 !
q
->id)

175 
	`li°_dñ
(&(
pos
->
√xt
));

176 
	`∑ckë_£t_lfq_°©e
(
pos
,
LFQ_RECLAIM
);

177 
	`lfq_£nd
(
q
, 
pos
,
id
);

181 
	`lfq_£nd_Êush
(
q
);

183 
	}
}

186 
	$di•©ch_Êush
(
lfq
 * 
q
)

188 
	`lfq_£nd_Êush
(
q
);

189 
	}
}

	@src/driver.c

12 
	#_GNU_SOURCE


	)

13 
	#__USE_GNU


	)

14 
	~<sched.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<f˙é.h
>

17 
	~<°dio.h
>

18 
	~<î∫o.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

21 
	~<°dlib.h
>

22 
	~<˘y≥.h
>

23 
	~<sys/mm™.h
>

24 
	~<sys/u£r.h
>

25 
	~"comm⁄/c⁄fig.h
"

26 
	~"comm⁄/ty≥s.h
"

27 
	~"comm⁄/debug.h
"

28 
	~"löux-√t/e1000_82575.h
"

29 
	~"löux-√t/e1000_deföes.h
"

30 
	~"löux-√t/e1000_ªgs.h
"

31 
	~"löux-√t/if_ëhî.h
"

32 
	~"∑ckë.h
"

33 
	~"drivî.h
"

44 
ölöe
 
e1000_adv_rx_desc
 * 
	$rög_rx_desc
(
rög
 * 
r
, 
i
)

46  ((
e1000_adv_rx_desc
 * )(
r
->
desc
)+
i
);

47 
	}
}

49 
ölöe
 
e1000_adv_tx_desc
 * 
	$rög_tx_desc
(
rög
 * 
r
, 
i
)

51  ((
e1000_adv_tx_desc
 * )(
r
->
desc
)+
i
);

52 
	}
}

54 
ölöe
 
	$wrôñ
(
d©a
, * 
addr
)

56 
	`wmb
();

57 *((vﬁ©ûê*)
addr
Ë
d©a
;

58 
	}
}

66 
rög
 * 
	$rög_¸óã
(
ad≠ãr
 * 
a
, 
u32
 * 
èû_ªg
, * 
desc
, u32 
desc_num
, 
u8
 
id
)

68 
i
;

69 
rög
 * 
r
;

71 if(
desc_num
 <0 || 
a
 =
NULL
 || 
èû_ªg
 =NULL || 
desc
 == NULL)  NULL;

72 
r
 = (
rög
 * )
	`MALLOC
((rög)+(
∑ckë
 *)*
desc_num
);

74 
r
->
a
 =á;

75 
r
->
desc
 = desc;

76 
r
->
desc_num
 = desc_num;

77 
r
->
hód
 = 0;

78 
r
->
èû
 = 0;

79 
r
->
queue_idx
 = 
id
;

81 
r
->
èû_ªg
 =Åail_reg;

83 
	`∑ckë_poﬁ_öô
(&(
r
->
poﬁ
));

85 
i
 = 0; i < 
r
->
desc_num
; i++)

86 
r
->
buf„r
[
i
] = 
NULL
;

88  
r
;

89 
	}
}

93 
	$ad≠ãr_queue_ªgs_desc_addr
(
ad≠ãr
 * 
a
,
u32
 ** 
queue_èû_ªg
, ** 
queue_desc
, 
is_rx
)

95 
u32
 * 
r_addr
;

96 * 
d_addr
;

98 
u32
 
desc_size
 = (
e1000_adv_tx_desc
Ë* 
a
->
desc_num
;

100 if(
is_rx
)

102 
r_addr
 = (
u32
 *)(
a
->
ªgs_addr
 + ()
	`E1000_RDT
◊->
queue_idx
));

103 
d_addr
 = (*)(
a
->
desc_addr
 + (a->
queue_num
 +á->
queue_idx
)*
desc_size
);

108 
r_addr
 = (
u32
 *)(
a
->
ªgs_addr
 + ()
	`E1000_TDT
◊->
queue_idx
));

109 
d_addr
 = (*)(
a
->
desc_addr
 + (a->
queue_idx
)*
desc_size
);

112 *
queue_èû_ªg
 = 
r_addr
;

113 *
queue_desc
 = 
d_addr
;

114 
	}
}

116 
ad≠ãr
 * 
	$ad≠ãr_¸óã
(
u32
 
id
, 
u8
 
queue_idx
, u8 
queue_num
, 
u64
 
ªgs_addr
, u64 
desc_addr
, u32 
desc_num
, u8 * 
mac
)

118 
ad≠ãr
 * 
a
 =(ad≠ã∏*Ë
	`MALLOC
((adapter));

119 
u32
 * 
ªg_rx
;

120 * 
desc_rx
;

121 
u32
 * 
ªg_tx
;

122 * 
desc_tx
;

124 
a
->
id
 = id;

125 
a
->
queue_num
 = queue_num;

126 
a
->
desc_num
 = desc_num;

127 
a
->
queue_idx
 = queue_idx;

128 
a
->
ªgs_addr
 =Ñegs_addr;

129 
a
->
desc_addr
 = desc_addr;

130 
	`mem˝y
(
a
->
mac
,mac,
ETH_ALEN
);

132 
	`ad≠ãr_queue_ªgs_desc_addr
(
a
,&
ªg_rx
, &
desc_rx
,1);

133 
	`ad≠ãr_queue_ªgs_desc_addr
(
a
,&
ªg_tx
, &
desc_tx
,0);

136 
a
->
rx_rög
 = 
	`rög_¸óã
◊,
ªg_rx
,
desc_rx
,
desc_num
,
queue_idx
);

137 
a
->
tx_rög
 = 
	`rög_¸óã
◊,
ªg_tx
,
desc_tx
,
desc_num
,
queue_idx
);

139  
a
;

140 
	}
}

152 
	$drivî_öô
(
drivî
 * 
d
, 
u8
 
¥o˚ss_id
)

154 
i
;

155 
d
->
id
 = 
¥o˚ss_id
;

156 
d
->
fd
 = -1;

157 
d
->
dev
 = "/dev/ukmem";

158 
d
->
ad≠ãr_num
 = 0;

159 
d
->
rög_num
 = 0;

160 
d
->
desc_num
 = 
DESC_NUM
;

162 
d
->
desc_size
 = 
DESC_BLOCK_SIZE
;

163 
d
->
ªgs_size
 = 
REG_BLOCK_SIZE
;

165 
d
->
desc_tŸÆ_size
 = 0;

166 
d
->
ªgs_tŸÆ_size
 = 0;

167 
d
->
buf„r_tŸÆ_size
 = 0;

169 
d
->
ªgs_addr
 = 0;

170 
d
->
desc_addr
 = 0;

171 
d
->
buf„r_addr
 = 0;

172 
d
->
buf„r_addr_phys
 = 0;

174 
i
 = 0; i < 32; i++)

175 
d
->
ad≠ãrs
[
i
] = 
NULL
;

177 
	}
}

180 
	$drivî_›í
(
drivî
 * 
d
)

183 
ad≠ãr
 * 
a
;

184 
fd
 ;

185 
u64
 
t
[20];

186 
cou¡
;

187 
i
;

188 
u64
 
ªgs
;

189 
u64
 
desc
;

190 vﬁ©ûê* 
addr
;

192 
fd
 = 
	`›í
(
d
->
dev
, 
O_RDWR
);

193 
d
->
fd
 = fd;

196 
cou¡
 = 
	`ªad
(
fd
,
t
,(
u64
)*20);

197 
d
->
buf„r_addr_phys
 = 
t
[0];

198 
d
->
buf„r_tŸÆ_size
 = 
t
[1];

199 
d
->
ad≠ãr_num
 = 
t
[2];

200 
d
->
rög_num
 = 
t
[3];

202 
d
->
desc_tŸÆ_size
 = d->
desc_size
 * d->
ad≠ãr_num
 * d->
rög_num
 *2;

203 
d
->
ªgs_tŸÆ_size
 = d->
ªgs_size
 * d->
ad≠ãr_num
 ;

205 
	`¥ötf
("rög_num %ld\n",
d
->
rög_num
 );

207 
ªgs
 = 
d
->
ªgs_addr
 = (
u64
)
	`mm≠64
(0,d->
ªgs_tŸÆ_size
,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
fd
,0);

208 
desc
 = 
d
->
desc_addr
 = (
u64
)
	`mm≠64
(0,d->
desc_tŸÆ_size
,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
fd
,0);

209 
d
->
buf„r_addr
 = (
u64
Ë
	`mm≠64
(0, d->
buf„r_tŸÆ_size
 ,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
fd
,0);

211 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++ )

213 
a
 = 
	`ad≠ãr_¸óã
(
i
,
d
->
id
, d->
rög_num
, 
ªgs
,
desc
, d->
desc_num
, (
u8
*)(&
t
[4 + i]));

214 
d
->
ad≠ãrs
[
i
] = 
a
;

215 
ªgs
 +
d
->
ªgs_size
;

216 
desc
 +
d
->
desc_size
 * d->
rög_num
 * 2;

218 
	}
}

224 
	$drivî_˛o£
(
drivî
 * 
d
)

226 
	`˛o£
(
d
->
fd
);

229 
	}
}

232 
drivî
 * 
	$drivî_¸óã
(
¥o˚ss_id
)

234 
drivî
 * 
d
;

236 
d
 = (
drivî
 * )
	`MALLOC
((driver));

238 if(
d
 =
NULL
)  NULL;

240 
	`drivî_öô
(
d
,
¥o˚ss_id
);

241 
	`drivî_›í
(
d
);

243  
d
;

244 
	}
}

247 
drivî
 * 
	$drivî_moduÀ_öô
(
id
)

249  
	`drivî_¸óã
(
id
);

250 
	}
}

259 
	$rög_Æloc_rx_buf„r
(
rög
 * 
r
,
i
, 
∑ckë_poﬁ
 * 
µ
)

261 
∑ckë
 * 
pkt
 = 
	`∑ckë_poﬁ_gë
(
µ
);

262 
e1000_adv_rx_desc
 * 
rx_desc
 = 
	`rög_rx_desc
(
r
,
i
) ;

264 if(
pkt
 =
NULL
)  0;

269 
rx_desc
->
ªad
.
pkt_addr
 = 
pkt
->
phys
;

270 
rx_desc
->
ªad
.
hdr_addr
 = 0;

271 
r
->
buf„r
[
i
] = 
pkt
;

274 
	}
}

285 
	$rög_Æloc_rx_buf„rs
(
rög
 * 
r
, 
∑ckë_poﬁ
 * 
µ
)

287 
i
 = 
r
->
èû
;

288 
cou¡
 = 0;

289 
íd
 = 
r
->
hód
;

290 
size
 = 
r
->
desc_num
;

291 
ªt
;

293  (
i
 + 1)%
size
 !
íd
 )

295 
ªt
 = 
	`rög_Æloc_rx_buf„r
(
r
,
i
, 
µ
);

297 if(
ªt
 == 0) ;

298 
i
 = (ò+ 1Ë% 
size
;

299 
cou¡
++;

302 if(
cou¡
 > 0)

304 
r
->
èû
 = 
i
;

305 
	`wrôñ
(
i
,
r
->
èû_ªg
);

308  
cou¡
;

309 
	}
}

312 
	$ad≠ãr_Æloc_rx_buf„rs
(
ad≠ãr
 * 
a
, 
∑ckë_poﬁ
 * 
µ
)

314 
	`rög_Æloc_rx_buf„rs
(
a
->
rx_rög
,
µ
);

317 
	}
}

322 
	$drivî_Æloc_rx_buf„r
(
drivî
 * 
d
, 
∑ckë_poﬁ
 * 
µ
)

324 
i
;

326 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

327 
	`ad≠ãr_Æloc_rx_buf„rs
(
d
->
ad≠ãrs
[
i
],
µ
);

330 
	}
}

341 
	$rög_ªcv_rx_buf„r
(
rög
 * 
r
,
i
)

343 
∑ckë
 * 
pkt
 = 
r
->
buf„r
[
i
];

344 
e1000_adv_rx_desc
 * 
rx_desc
 = 
	`rög_rx_desc
(
r
,
i
) ;

345 
°©îr
;

346 
Àngth
;

348 
°©îr
 = 
rx_desc
->
wb
.
uµî
.
°©us_îr‹
;

349 if(
°©îr
 & 
E1000_RXD_STAT_DD
)

353 
Àngth
 = 
rx_desc
->
wb
.
uµî
.length;

354 
pkt
->
Àn
 = 
Àngth
;

355 
rx_desc
->
wb
.
uµî
.
°©us_îr‹
 = 0;

356 
r
->
buf„r
[
i
] = 
NULL
;

357 
pkt
->
ad≠ãr_idx
 = 
r
->
a
->
id
;

359 
	`∑ckë_poﬁ_put
(&(
r
->
poﬁ
), 
pkt
);

365 
	}
}

367 
	$rög_ªcv
(
rög
 * 
r
)

369 
i
 = 
r
->
hód
;

370 
cou¡
 = 0;

371 
íd
 = 
r
->
èû
;

372 
size
 = 
r
->
desc_num
;

373 
ªt
;

375  
i
 !
íd
 )

377 
ªt
 = 
	`rög_ªcv_rx_buf„r
(
r
,
i
);

378 if(
ªt
 == 0) ;

379 
i
 = (ò+ 1Ë% 
size
;

380 
cou¡
++;

383 if(
cou¡
 > 0)

384 
r
->
hód
 = 
i
;

386  
cou¡
;

387 
	}
}

389 
	$ad≠ãr_ªcv
(
ad≠ãr
 * 
a
)

391  
	`rög_ªcv
(
a
->
rx_rög
);

392 
	}
}

396 
	$drivî_gë_ª˚ived_∑ckës
(
drivî
 * 
d
, 
li°_hód
 * 
hód
)

398 
i
,
j
;

400 
ad≠ãr
 * 
a
;

401 
rög
 * 
r
;

402 
ªt
;

404 
i
 = 0; i < 
d
-> 
ad≠ãr_num
; i++)

406 
a
 = 
d
->
ad≠ãrs
[
i
];

407 
r
 = 
a
->
rx_rög
;

408 
	`∑ckë_poﬁ_gë_Æl
(&(
r
->
poﬁ
),
hód
);

412 
	}
}

419 
	$drivî_ªcv
(
drivî
 * 
d
, 
li°_hód
 * 
hód
)

421 
cou¡
 = 0;

422 
i
;

424 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

425 
cou¡
 +
	`ad≠ãr_ªcv
(
d
->
ad≠ãrs
[
i
]);

427 
	`drivî_gë_ª˚ived_∑ckës
(
d
,
hód
);

429  
cou¡
;

430 
	}
}

439 
	$rög_£nd_tx_buf„r
(
rög
 * 
r
,
idx
)

441 
e1000_adv_tx_desc
 * 
tx_desc
 = 
	`rög_tx_desc
(
r
, 
idx
);

442 
∑ckë
 * 
pkt
 = 
	`∑ckë_poﬁ_gë
(&(
r
->
poﬁ
));

443 
ﬁöfo_°©us
 = 0, 
cmd_ty≥_Àn
;

444 
Àn
;

446 if(
pkt
 =
NULL
)  0;

447 
cmd_ty≥_Àn
 = (
E1000_ADVTXD_DTYP_DATA
 | 
E1000_ADVTXD_DCMD_IFCS
 |

448 
E1000_ADVTXD_DCMD_DEXT
)| 
E1000_TXD_CMD_EOP
 | 
E1000_TXD_CMD_RS
;

450 
r
->
buf„r
[
idx
] = 
pkt
;

452 
Àn
 = 
pkt
->len;

453 if(
Àn
 < 60)Üen = 60;

454 
ﬁöfo_°©us
 |((
Àn
Ë<< 
E1000_ADVTXD_PAYLEN_SHIFT
);

456 
tx_desc
->
ªad
.
buf„r_addr
 = 
pkt
->
phys
;

457 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 = cmd_ty≥_À¿| ()
Àn
;

458 
tx_desc
->
ªad
.
ﬁöfo_°©us
 = olinfo_status;

461 
	}
}

464 
	$rög_£nd
(
rög
 * 
r
)

466 
i
 = 
r
->
èû
;

467 
cou¡
 = 0;

468 
íd
 = 
r
->
hód
;

469 
size
 = 
r
->
desc_num
;

470 
ªt
;

472  (
i
 + 1Ë% 
size
 !
íd
 )

474 
ªt
 = 
	`rög_£nd_tx_buf„r
(
r
,
i
);

475 if(
ªt
 == 0) ;

476 
i
 = (ò+ 1Ë% 
size
;

477 
cou¡
++;

480 if(
cou¡
 > 0)

482 
r
->
èû
 = 
i
;

483 
	`wrôñ
(
i
,
r
->
èû_ªg
);

486  
cou¡
;

487 
	}
}

490 
	$ad≠ãr_£nd
(
ad≠ãr
 * 
a
)

492  
	`rög_£nd
(
a
->
tx_rög
);

493 
	}
}

501 
	$drivî_£nd
(
drivî
 * 
d
)

503 
i
;

504 
cou¡
 = 0;

506 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

507 
cou¡
 +
	`ad≠ãr_£nd
(
d
->
ad≠ãrs
[
i
]);

509  
cou¡
;

510 
	}
}

518 
	$drivî_put_∑ckë_to_£nd_buf„r
(
drivî
 * 
d
, 
∑ckë
 * 
pkt
)

520 
ad≠ãr
 * 
a
 = 
	`drivî_gë_ad≠ãr
(
d
,
pkt
->
ad≠ãr_idx
);

521 
rög
 * 
r
 = 
a
->
tx_rög
;

523 
	`DPRINTF
("Puà∑ckë %lxÅÿad≠ã∏%d\n",
pkt
,pkt->
ad≠ãr_idx
);

524 
	`∑ckë_poﬁ_put
(&(
r
->
poﬁ
), 
pkt
);

527 
	}
}

546 
	$rög_ª˛aim_tx_buf„r
(
rög
 * 
r
,
i
, 
li°_hód
 * 
hód
)

548 
ªt
 = 0;

549 
∑ckë
 * 
pkt
;

550 vﬁ©ûê
e1000_adv_tx_desc
 * 
tx_desc
 = 
	`rög_tx_desc
(
r
,
i
) ;

552 if(
tx_desc
->
wb
.
°©us
 & 
E1000_TXD_STAT_DD
)

554 
pkt
 = 
r
->
buf„r
[
i
];

555 
r
->
buf„r
[
i
] = 
NULL
;

556 
tx_desc
->
wb
.
°©us
 = 0;

559 if(
pkt
 =
NULL
)

561 
	`DPRINTF
("ERRORáppear\n");

562 
	`exô
(-1);

565 
	`li°_add_èû
(&(
pkt
->
√xt
),
hód
);

566 
ªt
 = 1;

569  
ªt
;

570 
	}
}

575 
	$rög_ª˛aim_tx_buf„rs
(
rög
 * 
r
,
li°_hód
 * 
hód
)

577 
i
 = 
r
->
hód
;

578 
cou¡
 = 0;

579 
íd
 = 
r
->
èû
;

580 
size
 = 
r
->
desc_num
;

581 
ªt
;

583  (
i
 + 1)%
size
 !
íd
 )

585 
ªt
 = 
	`rög_ª˛aim_tx_buf„r
(
r
,
i
,
hód
);

586 if(
ªt
 == 0) ;

587 
i
 = (ò+ 1Ë% 
size
;

588 
cou¡
++;

591 if(
cou¡
 > 0)

592 
r
->
hód
 = 
i
;

594  
cou¡
;

595 
	}
}

597 
	$ad≠ãr_ª˛aim_tx_buf„rs
(
ad≠ãr
 * 
a
,
li°_hód
 * 
hód
)

599  
	`rög_ª˛aim_tx_buf„rs
(
a
->
tx_rög
, 
hód
);

600 
	}
}

605 
	$drivî_ª˛aim_tx_buf„r
(
drivî
 * 
d
, 
li°_hód
 * 
hód
)

607 
i
;

608 
cou¡
 = 0;

610 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

611 
cou¡
 +
	`ad≠ãr_ª˛aim_tx_buf„rs
(
d
->
ad≠ãrs
[
i
],
hód
);

613  
cou¡
;

614 
	}
}

	@src/hashtable.c

13 
	~<°dlib.h
>

14 
	~"comm⁄/c⁄fig.h
"

15 
	~"comm⁄/li°.h
"

16 
	~"comm⁄/ty≥s.h
"

17 
	~"comm⁄/øndom.h
"

19 
u32
 
	ghash_ønd
;

21 
li°_hód
 * 
	$hashèbÀ_Æloc
(
size
)

23 
li°_hód
 * 
èbÀ
;

24 
èbÀ
 = (
li°_hód
 *)
	`MALLOC
(
size
 * (list_head));

26  
èbÀ
;

27 
	}
}

29 
	$hashèbÀ_öô
(
li°_hód
 * 
èbÀ
, 
size
)

31 
i
;

33 
i
 = 0; i < 
size
; i++)

34 
	`INIT_LIST_HEAD
(
èbÀ
 + 
i
);

35 
	}
}

38 
	$hashèbÀ_‰ì
(
li°_hód
 * 
èbÀ
, 
size
)

41 
	}
}

45 
	$hash_moduÀ_öô
()

47 
hash_ønd
 = 
	`SEED
();

50 
	}
}

	@src/interface.c

12 
	~"öãrÁ˚.h
"

13 
	~"comm⁄/li°.h
"

14 
	~"loˇl_ù.h
"

16 
	$nic_öô
(
nic
 *Çic, 
id
)

18 
nic
->
id
 = id;

20 
	`INIT_LIST_HEAD
(&(
nic
->
£lf_li°_ùv4
));

21 
	`INIT_LIST_HEAD
(&(
nic
->
£lf_li°_ùv6
));

22 
	`INIT_LIST_HEAD
(&(
nic
->
vs_li°_ùv4
));

23 
	`INIT_LIST_HEAD
(&(
nic
->
vs_li°_ùv6
));

24 
	}
}

30 
öãrÁ˚
 * 
	$öãrÁ˚_moduÀ_öô
(
num
, 
u16
 
vs_low
,u16 
vs_high
,u16 
£lf_low
, u16 
£lf_high
)

32 
i
;

33 
ù_•a˚
 * 
•a˚
;

34 
öãrÁ˚
 * 
ôf
 = (öãrÁ˚ *Ë
	`MALLOC
((öãrÁ˚Ë+ (
nic
)*
num
);

37 if(
ôf
 =
NULL
)  NULL;

39 
•a˚
 = 
	`lù_ù_•a˚_¸óã
(
vs_low
,
vs_high
,
£lf_low
,
£lf_high
);

41 if(
•a˚
 =
NULL
)

43 
	`FREE
(
ôf
);

44  
NULL
;

47 
i
 = 0; i < 
num
; i++)

49 
	`nic_öô
(&(
ôf
->
nic
[
i
]),i);

52 
ôf
->
num
 =Çum;

53 
ôf
->
•a˚
 = space;

55  
ôf
;

56 
	}
}

59 
li°_hód
 * 
	$__gë_li°_hód2
(
nic
 *Çic, 
is_vsù
, 
is_ùv4
)

61 
li°_hód
 * 
hód
;

63 if(
is_vsù
)

65 if(
is_ùv4
)

66 
hód
 =&(
nic
->
vs_li°_ùv4
);

68 
hód
 =&(
nic
->
vs_li°_ùv6
);

72 if(
is_ùv4
)

73 
hód
 =&(
nic
->
£lf_li°_ùv4
);

75 
hód
 =&(
nic
->
£lf_li°_ùv6
);

78  
hód
;

79 
	}
}

82 
li°_hód
 * 
	$__gë_li°_hód3
(
öãrÁ˚
 * 
ôf
,
nic_id
, 
is_vsù
, 
is_ùv4
)

84 
nic
 *Çic;

86 if(
nic_id
 >
ôf
->
num
)

87  
NULL
;

89 
nic
 =&(
ôf
->nic[
nic_id
]);

92  
	`__gë_li°_hód2
(
nic
, 
is_vsù
, 
is_ùv4
);

93 
	}
}

95 
	$nic_add_lù
(
öãrÁ˚
 * 
ôf
,
loˇl_ù
 * 
lù
)

97 
li°_hód
 * 
hód
;

98 
hód
 = 
	`__gë_li°_hód3
(
ôf
, 
lù
->
nic_id
,

99 
	`lù_is_vsù
(
lù
),
	`lù_is_ùv4
(lip));

101 
	`li°_add
(&(
lù
->
nic_li°
),
hód
);

102 
	}
}

105 
	$nic_dñ_lù
(
öãrÁ˚
 * 
i·
, 
loˇl_ù
 * 
lù
)

107 
	`li°_dñ
(&(
lù
->
nic_li°
));

108 
	}
}

111 
loˇl_ù
 * 
	$öãrÁ˚_gë_lù_º
(
öãrÁ˚
 * 
ôf
,
nic_id
, 
is_vsù
, 
is_ùv4
)

113 
loˇl_ù
 * 
lù
 = 
NULL
;

114 
li°_hód
 * 
hód
 = 
	`__gë_li°_hód3
(
ôf
,
nic_id
, 
is_vsù
, 
is_ùv4
);

116 if(!
	`li°_em±y
(
hód
))

118 
lù
 = 
	`li°_fú°_íåy
(
hód
, 
loˇl_ù
, 
nic_li°
);

119 
	`li°_move_èû
(&(
lù
->
nic_li°
),
hód
);

122  
lù
;

123 
	}
}

126 
loˇl_ù
 * 
	$öãrÁ˚_lookup
(
öãrÁ˚
 * 
ôf
, 
ù_addªss
 * 
ù
, 
is_vs
)

128  
	`lù_ù_•a˚_lookup
(
ôf
->
•a˚
, 
ù
, 
is_vs
);

129 
	}
}

135 
loˇl_ù
 * 
	$öãrÁ˚_¸óã_loˇl_ù
(
öãrÁ˚
 * 
ôf
, 
ù_addªss
 * 
ù
,
ty≥
, 
nic_id
)

138 
loˇl_ù
 * 
lù
 = 
	`lù_ù_•a˚_¸óã_loˇl_ù
(
ôf
->
•a˚
,
ù
,
ty≥
,
nic_id
);

140 if(
lù
 =
NULL
)  NULL;

142 
	`lù_ù_•a˚_add
(
ôf
->
•a˚
, 
lù
);

143 
	`nic_add_lù
(
ôf
,
lù
);

145  
lù
;

146 
	}
}

152 
	$öãrÁ˚_add_lù
(
öãrÁ˚
 * 
ôf
, 
loˇl_ù
 * 
lù
)

154 
	`lù_ù_•a˚_add
(
ôf
->
•a˚
, 
lù
);

155 
	`nic_add_lù
(
ôf
,
lù
);

156 
	}
}

163 
	$öãrÁ˚_dñ_lù
(
öãrÁ˚
 * 
ôf
, 
loˇl_ù
 * 
lù
)

165 
	`lù_ù_•a˚_dñ
(
ôf
->
•a˚
, 
lù
);

166 
	`nic_dñ_lù
(
ôf
,
lù
);

167 
	}
}

	@src/lf_queue.c

28 
	~<uni°d.h
>

29 
	~"comm⁄/debug.h
"

30 
	~"comm⁄/li°.h
"

31 
	~"∑ckë.h
"

32 
	~"drivî.h
"

33 
	~"lf_queue.h
"

34 
	~"di•©ch.h
"

35 
	~"√t_globÆ.h
"

37 
	#ALIGN_BYTES
 64

	)

43 
	$lf_queue_Æig√d_size
(
desc_num
)

45 
Æign
 = 
ALIGN_BYTES
;

47 
size
 = (
lf_queue
Ë+ ((
u64
Ë* 
desc_num
) ;

49 
Æign_size
 = ((
size
 + 
Æign
 - 1) /álign)*align;

51  
Æign_size
;

52 
	}
}

58 
	$lf_queue_num
(
n
)

60  
n
 *Ç ;

61 
	}
}

68 
	$__lfq_moduÀ_size
(
n
, 
desc_num
)

70 
size
 = 
	`lf_queue_Æig√d_size
(
desc_num
);

71 
tŸÆ
 = 
size
 * 
	`lf_queue_num
(
n
);

72 
size_t
 
∑gesize
 = 
	`gë∑gesize
();

74  ((
tŸÆ
 + 
∑gesize
 - 1)/pagesize)*pagesize;

75 
	}
}

78 
lf_queue
 * 
	$lfq_queue_¸óã_öô
(
lfq
 * 
q
, 
row
, 
cﬁum
)

80 
lf_queue
 * 
lq
 = (lf_queuê*)(
q
->
°¨t
 + (
row
 * q->
≈roc
 + 
cﬁum
Ë*q->
lf_queue_size
);

82 
lq
->
size
 = 
q
->
desc_num
;

83 
lq
->
hód
 = 0;

84 
lq
->
èû
 = 0;

85 
	`INIT_LIST_HEAD
(&(
lq
->
li°
));

87  
lq
;

88 
	}
}

102 
lfq
 * 
	$lfq_moduÀ_öô
(
n
, 
my_id
,
desc_num
, * 
°¨t
)

104 
qnum
 ;

105 
i
;

106 
lfq
 *Üfq;

108 if((
n
 =0Ë|| (
°¨t
 =
NULL
Ë|| (
my_id
 < 0Ë|| (my_id >n)||(
desc_num
 <= 0))  NULL;

109 
lfq
 = (lfq *Ë
	`MALLOC
((lfq));

111 if(
lfq
 =
NULL
)  NULL;

113 
lfq
->
ªcv_queue
 = (
lf_queue
 **Ë
	`MALLOC
(
n
 * ( lf_queue *));

114 
lfq
->
£nd_queue
 = (
lf_queue
 **Ë
	`MALLOC
(
n
 * (lf_queue *));

116 if(
lfq
->
ªcv_queue
 =
NULL
 ||Üfq->
£nd_queue
 == NULL)  NULL;

118 
lfq
->
≈roc
 = 
n
;

119 
lfq
->
id
 = 
my_id
;

120 
lfq
->
desc_num
 = desc_num;

121 
lfq
->
moduÀ_size
 = 
	`__lfq_moduÀ_size
(
n
,
desc_num
);

122 
lfq
->
lf_queue_size
 = 
	`lf_queue_Æig√d_size
(
desc_num
);

124 
lfq
->
°¨t
 = () start;

127 
i
 = 0; i < 
n
; i++)

130 
lfq
->
ªcv_queue
[
i
] = 
	`lfq_queue_¸óã_öô
÷fq,
my_id
,i);

131 
lfq
->
£nd_queue
[
i
] = 
	`lfq_queue_¸óã_öô
÷fq,i,
my_id
);

134  
lfq
;

135 
	}
}

147 
	$__gë_∑ckë_‰om_queue
(
lf_queue
 * 
queue
,
li°_hód
 * 
lhód
)

149 
hód
 = 
queue
->head;

150 
èû
 = 
queue
->tail;

151 
∑ckë
 * 
pkt
;

152 
u64
 
phys
;

153 
cou¡
 = 0;

154 
i
 = 
hód
;

156 
i
 !
èû
)

158 
phys
 = 
queue
->
desc
[
i
];

159 
pkt
 = 
	`ng_∑ckë_of_phys
(
phys
);

160 
	`li°_add_èû
(&(
pkt
->
√xt
),
lhód
);

161 
cou¡
++;

162 
i
++;

163 if(
i
 >
queue
->
size
) i = 0;

166 if(
cou¡
 > 0)

168 
	`b¨rõr
();

169 if(!
	`bCAS
(&(
queue
->
hód
),hód,
i
))

171 
	`DPRINTF
("ERRPR __get_packet_from_queue\n");

172 
	`exô
(-1);

176  
cou¡
;

177 
	}
}

187 
	$__put_∑ckë_to_queue
(
lf_queue
 * 
queue
,
li°_hód
 * 
lhód
)

189 
hód
 = 
queue
->head;

190 
èû
 = 
queue
->tail;

191 
∑ckë
 * 
pkt
;

192 
cou¡
 = 0;

193 
i
 = 
èû
;

195 
i
 !
hód
)

197 if(
	`li°_em±y
(
lhód
)) ;

198 
pkt
 = 
	`li°_fú°_íåy
(
lhód
, 
∑ckë
, 
√xt
);

199 
	`li°_dñ
(&(
pkt
->
√xt
));

200 
queue
->
desc
[
i
] = 
pkt
->
phys
;

201 
cou¡
++;

202 
i
++;

203 if(
i
 >
queue
->
size
) i = 0;

206 if(
cou¡
 > 0)

208 
	`wmb
();

209 if(!
	`bCAS
(&(
queue
->
èû
),èû,
i
))

211 
	`DPRINTF
("ERRPR __get_packet_from_queue\n");

212 
	`exô
(-1);

216  
cou¡
;

217 
	}
}

225 
ölöe
 
	$__lfq_ªcv
(
lfq
 * 
q
, 
lf_queue
 ** 
qhód
,
li°_hód
 *
hód
)

227 
i
;

228 
cou¡
 = 0;

230 
i
 = 0; i < 
q
->
≈roc
; i++)

232 if(
i
 !
q
->
id
 )

234 
cou¡
 +
	`__gë_∑ckë_‰om_queue
(
qhód
[
i
],
hód
);

238  
cou¡
;

239 
	}
}

241 
	$lfq_ªcv
(
lfq
 * 
q
,
li°_hód
 *
hód
)

243  
	`__lfq_ªcv
(
q
, q->
ªcv_queue
,
hód
);

244 
	}
}

248 
ölöe
 
	$__lfq_£nd
(
lfq
 * 
q
,
lf_queue
 ** 
qhód
, 
∑ckë
 * 
pkt
, 
id
)

250 
lf_queue
 * 
queue
 = 
qhód
[
id
];

251 
	`li°_add_èû
(&(
pkt
->
√xt
), &(
queue
->
li°
));

252 
	}
}

254 
	$lfq_£nd
(
lfq
 * 
q
, 
∑ckë
 * 
pkt
,
id
)

256 
	`__lfq_£nd
(
q
,q->
£nd_queue
,
pkt
,
id
);

257 
	}
}

260 
ölöe
 
	$__lfq_£nd_Êush
(
lfq
 * 
q
, 
lf_queue
 ** 
qhód
)

262 
i
;

263 
cou¡
 = 0;

264 
lf_queue
 * 
queue
;

266 
i
 = 0; i < 
q
->
≈roc
; i++)

268 
queue
 = 
qhód
[
i
];

270 if(
i
 !
q
->
id
)

272 
cou¡
 +
	`__put_∑ckë_to_queue
(
queue
,&(queue->
li°
));

276  
cou¡
;

277 
	}
}

279 
	$lfq_£nd_Êush
(
lfq
 * 
q
)

281  
	`__lfq_£nd_Êush
–
q
, q->
£nd_queue
);

282 
	}
}

291 
	$lfq_ª˛aim_fûãr
(
lfq
 * 
q
, 
li°_hód
 * 
hód
)

293 
∑ckë
 * 
pos
;

294 
∑ckë
 * 
n
;

296 if(!
	`li°_em±y
(
hód
))

298 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
√xt
)

300 if(
pos
->
id
 !
q
->id)

302 
	`li°_dñ
(&(
pos
->
√xt
));

303 
	`∑ckë_£t_lfq_°©e
(
pos
,
LFQ_RECLAIM
);

304 
	`lfq_£nd
(
q
, 
pos
,pos->
id
);

309 
	`lfq_£nd_Êush
(
q
);

311 
	}
}

	@src/local_ip.c

11 
	~<°dlib.h
>

12 
	~"comm⁄/c⁄fig.h
"

13 
	~"comm⁄/ty≥s.h
"

14 
	~"comm⁄/li°.h
"

15 
	~"comm⁄/hashèbÀ.h
"

16 
	~"p‹t_ønge.h
"

17 
	~"drivî.h
"

18 
	~"loˇl_ù.h
"

34 
ölöe
 
	$lù_hashkey
(
ù_addªss
 * 
ù
)

36 
u32
 
h
;

38 
h
 = 
	`ù_addªss_hash
(
ù
);

40  (
h
& 
LOCAL_IP_HT_MASK
);

41 
	}
}

45 
	$lù_‰ì
(
loˇl_ù
 * 
lù
)

47 if(
lù
)

49 if(
lù
->
t˝_p‹t
Ë
	`p‹t_ønge_‰ì
(lip->tcp_port);

50 if(
lù
->
udp_p‹t
Ë
	`p‹t_ønge_‰ì
(lip->udp_port);

51 
	`FREE
(
lù
);

53 
	}
}

65 
loˇl_ù
 * 
	$lù_¸óã
(
p‹t_num
)

67 
loˇl_ù
 * 
lù
 = (loˇl_ù *)
	`CALLOC
(1,(local_ip));

69 if(
lù
 =
NULL
Ë
îr
;

71 if(–
lù
->
t˝_p‹t
 = 
	`p‹t_ønge_¸óã
(
p‹t_num
)Ë=
NULL
Ë
îr
;

72 if(–
lù
->
udp_p‹t
 = 
	`p‹t_ønge_¸óã
(
p‹t_num
)Ë=
NULL
Ë
îr
;

76  
lù
;

77 
îr
:

78 if(
lù
)

79 
	`lù_‰ì
(
lù
);

81  
NULL
;

82 
	}
}

84 
	$lù_öô
(
loˇl_ù
 * 
lù
, 
ù_addªss
 * 
ù
,
u16
 
low
, u16 
high
,
ty≥
 , 
nic_id
)

86 
	`p‹t_ønge_öô
(
lù
->
t˝_p‹t
, 
low
, 
high
);

87 
	`p‹t_ønge_öô
(
lù
->
udp_p‹t
, 
low
, 
high
);

89 
	`INIT_LIST_HEAD
(&(
lù
->
li°
));

90 
	`INIT_LIST_HEAD
(&(
lù
->
nic_li°
));

92 
	`ù_addªss_c›y
(&(
lù
->
addr
), 
ù
);

94 
lù
->
ty≥
 =Åype;

95 
lù
->
nic_id
 =Çic_id;

96 
	}
}

103 
ù_£t
 * 
	$ù_£t_¸óã
(
u16
 
low
, u16 
high
)

106 
ù_£t
 * 
£t
 = 
	`MALLOC
((ip_set));

108 if(
£t
 =
NULL
)  NULL;

110 if((
£t
->
hashèbÀ
 = 
	`hashèbÀ_Æloc
(
LOCAL_IP_HT_SIZE
)Ë=
NULL
)

112 
	`FREE
(
£t
);

113  
NULL
;

116 
	`hashèbÀ_öô
(
£t
->
hashèbÀ
,
LOCAL_IP_HT_SIZE
);

119  
£t
;

120 
	}
}

122 
loˇl_ù
 * 
	$ù_£t_lookup
(
ù_£t
 *
£t
, 
ù_addªss
 * 
ù
)

124 
idx
 = 
	`lù_hashkey
(
ù
);

125 
loˇl_ù
 * 
lù
;

127 
	`li°_f‹_óch_íåy
(
lù
, & 
£t
->
hashèbÀ
[
idx
], 
li°
) {

128 if(
	`ù_addªss_eq
(
ù
,&(
lù
->
addr
) )) Üip;

131  
NULL
;

132 
	}
}

135 
	$ù_£t_add
(
ù_£t
 * 
£t
, 
loˇl_ù
 * 
lù
)

137 
idx
 = 
	`lù_hashkey
(&(
lù
->
addr
));

139 
	`li°_add
(&(
lù
->
li°
), &(
£t
->
hashèbÀ
[
idx
]));

142 
	}
}

145 
	$ù_£t_dñ
(
loˇl_ù
 * 
lù
)

147 
	`li°_dñ
(&(
lù
->
li°
));

150 
	}
}

159 
ù_•a˚
 * 
	$lù_ù_•a˚_¸óã
(
u16
 
vs_low
, u16 
vs_high
, u16 
£lf_low
, u16 
£lf_high
)

161 
ù_•a˚
 * 
•a˚
 = (ù_•a˚ *)
	`MALLOC
((ip_space));

162 
ù_£t
 * 
£lf_v4
 = 
	`ù_£t_¸óã
(
£lf_low
,
£lf_high
);

163 
ù_£t
 * 
£lf_v6
 = 
	`ù_£t_¸óã
(
£lf_low
,
£lf_high
);

164 
ù_£t
 * 
vs_v4
 = 
	`ù_£t_¸óã
(
vs_low
,
vs_high
);

165 
ù_£t
 * 
vs_v6
 = 
	`ù_£t_¸óã
(
vs_low
,
vs_high
);

168 
•a˚
->
£lf_ù_v4_£t
 = 
£lf_v4
;

169 
•a˚
->
£lf_ù_v6_£t
 = 
£lf_v6
;

170 
•a˚
->
vs_ù_v4_£t
 = 
vs_v4
;

171 
•a˚
->
vs_ù_v6_£t
 = 
vs_v6
;

174 
•a˚
->
vs_p‹t_low
 = 
vs_low
;

175 
•a˚
->
vs_p‹t_high
 = 
vs_high
;

176 
•a˚
->
£lf_p‹t_low
 = 
£lf_low
;

177 
•a˚
->
£lf_p‹t_high
 = 
£lf_high
;

179  
•a˚
;

180 
	}
}

183 
ù_£t
 * 
	$__gë_ù_£t
(
ù_•a˚
 * 
•a˚
, 
is_vs
, 
is_ùv4
)

185 
ù_£t
 * 
£t
;

187 if(
is_vs
){

188 if(
is_ùv4
Ë
£t
 = 
•a˚
->
vs_ù_v4_£t
;

189 
£t
 = 
•a˚
->
vs_ù_v6_£t
;

191 if(
is_ùv4
Ë
£t
 = 
•a˚
->
£lf_ù_v4_£t
;

192 
£t
 = 
•a˚
->
£lf_ù_v6_£t
;

195  
£t
;

196 
	}
}

198 
loˇl_ù
 * 
	$lù_ù_•a˚_lookup
(
ù_•a˚
 * 
•a˚
, 
ù_addªss
 * 
ù
, 
is_vs
)

200 
ù_£t
 * 
£t
;

202 
£t
 = 
	`__gë_ù_£t
(
•a˚
,
is_vs
, 
	`ù_addªss_is_ùv4
(
ù
));

204  
	`ù_£t_lookup
(
£t
,
ù
);

205 
	}
}

208 
	$lù_ù_•a˚_add
(
ù_•a˚
 * 
•a˚
, 
loˇl_ù
 * 
lù
)

210 
ù_£t
 * 
£t
 = 
	`__gë_ù_£t
(
•a˚
, 
	`lù_is_vsù
(
lù
), 
	`lù_is_ùv4
(Üip));

211  
	`ù_£t_add
(
£t
,
lù
);

212 
	}
}

214 
	$lù_ù_•a˚_dñ
(
ù_•a˚
 * 
•a˚
, 
loˇl_ù
 * 
lù
)

217  
	`ù_£t_dñ
(
lù
);

218 
	}
}

221 
loˇl_ù
 * 
	$lù_ù_•a˚_¸óã_loˇl_ù
(
ù_•a˚
 * 
•a˚
, 
ù_addªss
 * 
ù
,
ty≥
, 
nic_id
)

223 
p‹t_num
,
p‹t_low
,
p‹t_high
 ;

224 
loˇl_ù
 * 
lù
;

226 if(
ty≥
 =
SELF_IP_T
)

229 
p‹t_high
 = 
•a˚
->
£lf_p‹t_high
;

230 
p‹t_low
 = 
•a˚
->
£lf_p‹t_low
 ;

234 
p‹t_high
 = 
•a˚
->
vs_p‹t_high
;

235 
p‹t_low
 = 
•a˚
->
vs_p‹t_low
 ;

238 
p‹t_num
 = 
p‹t_high
 - 
p‹t_low
 + 1;

240 
lù
 = 
	`lù_¸óã
(
p‹t_num
);

242 
	`lù_öô
(
lù
,
ù
,
p‹t_low
,
p‹t_high
,
ty≥
, 
nic_id
);

245  
lù
;

246 
	}
}

	@src/main.c

1 
	#_GNU_SOURCE


	)

2 
	#__USE_GNU


	)

3 
	~<sched.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

9 
	~"comm⁄/hashèbÀ.h
"

10 
	~"comm⁄/li°.h
"

11 
	~"comm⁄/ty≥s.h
"

12 
	~"comm⁄/debug.h
"

13 
	~"drivî.h
"

14 
	~"¥o˚ss.h
"

15 
	~"loˇl_ù.h
"

16 
	~"c⁄√˘i⁄.h
"

17 
	~"v£rvî.h
"

18 
	~"∑ckë.h
"

19 
	~"£rvî_poﬁ.h
"

20 
	~"lf_queue.h
"

21 
	~"di•©ch.h
"

22 
	~"öãrÁ˚.h
"

23 
	~"√t_globÆ.h
"

24 
	~"rouã.h
"

25 
	~"ã°.h
"

33 
	$öô
(
n
, 
id
 )

36 
drivî
 * 
d
;

37 
lfq
 * 
q
;

38 
u£d
;

39 
∑ckë_z⁄e
 * 
z
;

40 
addr
,
phys
,
size
;

41 
öãrÁ˚
 * 
ôf
;

42 
u16
 
£lf_low
, 
£lf_high
;

43 
rouã_èbÀ
 * 
π
;

44 
nic_num
 ;

46 if((
π
 = 
	`π_moduÀ_öô
()Ë=
NULL
)

49 if(!
	`hash_moduÀ_öô
())

52 if(!
	`di•©ch_moduÀ_öô
(
n
,
id
))

56 
d
 = 
	`drivî_moduÀ_öô
(
id
);

57 if(
d
 =
NULL
)  0;

59 
	`di•©ch_gë_p‹t_ønge
(&
£lf_low
,&
£lf_high
);

60 
nic_num
 = 
	`drivî_gë_ad≠ãr_num
(
d
);

61 
ôf
 = 
	`öãrÁ˚_moduÀ_öô
(
nic_num
, 1,65535,
£lf_low
,
£lf_high
);

63 if(
ôf
 =
NULL
)  0;

66 
q
 = 
	`lfq_moduÀ_öô
(
n
, 
id
,1024,(*)
d
->
buf„r_addr
);

67 if(
q
 =
NULL
)  0;

69 
u£d
 = 
	`lfq_gë_moduÀ_size
(
q
);

70 
addr
 = 
d
->
buf„r_addr
+
u£d
;

71 
phys
 = 
d
->
buf„r_addr_phys
+
u£d
;

72 
size
 = 
d
->
buf„r_tŸÆ_size
 - 
u£d
;

74 
z
 = 
	`∑ckë_moduÀ_öô
(
addr
,
phys
,
size
 ,
n
,
id
);

75 if(
z
 =
NULL
)  0;

77 if(!
	`timî_moduÀ_öô
(
DEFAULT_SECONDS
))

80 if(!
	`c⁄√˘i⁄_moduÀ_öô
())

84 if(!
	`v£rvî_moduÀ_öô
())

87 
	`ng_öô
(
id
,
d
,
z
,
q
,
ôf
,
π
);

90 
	}
}

93 
	$ußge
()

95 
	`¥ötf
("Usage:./ukmem_uspaceÇproc");

97 
	}
}

99 
	$böd_˝u
(
id
)

101 
ªt
 = 1;

102 
˝u_£t_t
 
mask
;

104 
	`CPU_ZERO
(&
mask
);

105 
	`CPU_SET
(
id
, &
mask
);

107 i‡(
	`sched_£èfföôy
(0, (
mask
), &mask) == -1){

108 
	`¥ötf
("Error: couldÇot set CPUáffinity, continuing...\n");

109 
ªt
 = 0;

112  
ªt
;

113 
	}
}

120 
	$•awn
(
n
,
is_d´m⁄
)

122 
ªt
 ;

123 
i
;

125 if(
n
 == 1)  0;

127 
˝unum
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

129 if(
n
 > 
˝unum
)

131 
	`¥ötf
("W¨∫ög: Thi†sy°em ha†%d cpus, c™'àf‹k %dÖro˚s£s\n",
˝unum
,
n
);

132 
n
 = 
˝unum
;

136 
i
 = 0; i < 
n
; i++) {

137 
ªt
 = 
	`f‹k
();

138 i‡(
ªt
 < 0) {

139 
	`¥ötf
("Cannot fork.\n");

140 
	`exô
(1);

142 i‡(
ªt
 == 0)

147 if(
i
 =
n
)

148 
	`exô
(0);

150 if(
is_d´m⁄
) {

151 
	`f˛o£
(
°dö
);

152 
	`f˛o£
(
°dout
);

153 
	`f˛o£
(
°dîr
);

157 if(!
	`böd_˝u
(
i
)){

158 
	`¥ötf
("Eº‹:Pro˚s†%d c™'àböd o¿˝u %d\n",
i
,i);

159 
	`exô
(-1);

162  
i
;

163 
	}
}

167 
	$maö_lo›
()

169 
	`LIST_HEAD
(
ªcv_‰om_drivî
) ;

170 
	`LIST_HEAD
(
ªcv_‰om_di•©ch
) ;

171 
	`LIST_HEAD
(
to_ª˛aim
) ;

172 
	`LIST_HEAD
(
‰ì_hód
) ;

175 
	`π_föd_£rvî_rouã
();

177 
∑ckë_poﬁ
 * 
µ
 = 
	`∑ckë_z⁄e_gë_‰ì_∑ckë_poﬁ
(
√t_globÆ
.
z
);

182 
	`drivî_Æloc_rx_buf„r
(
√t_globÆ
.
d
,
µ
);

185 
	`drivî_ªcv
(
√t_globÆ
.
d
,&
ªcv_‰om_drivî
);

188 
	`∑ckë_öô_™d_fûãr
(&
ªcv_‰om_drivî
, &
‰ì_hód
);

191 
	`di•©ch_∑ckë
(
√t_globÆ
.
q
,&
ªcv_‰om_drivî
,&
ªcv_‰om_di•©ch
,&
‰ì_hód
);

194 
	`¥o˚ss_∑ckës
(&
ªcv_‰om_drivî
, &
‰ì_hód
);

197 
	`¥o˚ss_∑ckës
(&
ªcv_‰om_di•©ch
, &
to_ª˛aim
);

200 
	`drivî_ª˛aim_tx_buf„r
(
√t_globÆ
.
d
,&
to_ª˛aim
);

205 
	`di•©ch_ª˛aim
(
√t_globÆ
.
q
,&
to_ª˛aim
);

207 
	`∑ckë_z⁄e_ª˛aim
(
√t_globÆ
.
z
, &
‰ì_hód
);

208 
	`∑ckë_z⁄e_ª˛aim
(
√t_globÆ
.
z
, &
to_ª˛aim
);

210 
	`drivî_£nd
(
√t_globÆ
.
d
);

211 
	`di•©ch_Êush
(
√t_globÆ
.
q
);

213 
	`timî_expúe
();

216 
	`lfq_‰ì
(
√t_globÆ
.
q
);

217 
	`drivî_˛o£
(
√t_globÆ
.
d
);

218 
	}
}

221 
	$°¨t_kî√l_moduÀ
()

224 
	}
}

226 
	$maö
(
¨gc
, * 
¨gv
[])

228 
ªt
 ;

229 
≈roc
 = 1;

230 
id
 = 0;

231 
is_d´m⁄
 = 0;

232 
˝u_num
 ;

234 if(
¨gc
 != 2){

235 
	`ußge
();

239 
≈roc
 = 
	`©oi
(
¨gv
[1]);

241 
id
 = 
	`•awn
(
≈roc
,
is_d´m⁄
);

249 if(!
	`öô
(
≈roc
,
id
))

252 if(!
	`ã°_¨p
())

260 
	`maö_lo›
();

263 
	}
}

	@src/mem_pool.c

6 
	~<°rög.h
>

7 
	~"comm⁄/c⁄fig.h
"

8 
	~"comm⁄/debug.h
"

9 
	~"comm⁄/li°.h
"

10 
	~"mem_poﬁ.h
"

12 
li°_hód
 
	gpoﬁs
 = 
LIST_HEAD_INIT
(
poﬁs
) ;

15 
mem_poﬁ
 * 
	$mem_poﬁ_¸óã
(*
«me
, 
size
)

17 
mem_poﬁ
 *
poﬁ
;

18 
Æign
 = 8;

20 
Æign
 = 8;

21 
size
 = (sizê+ 
Æign
 - 1) & -align;

23 
poﬁ
 = 
	`CALLOC
(1, (*pool));

24 i‡(
«me
)

25 
	`°∫˝y
(
poﬁ
->
«me
,Çame, (pool->name));

26 
poﬁ
->
size
 = size;

27 
poﬁ
->
chunksize
 = 
CHUNKSIZE
;

28 
	`¶i°_öô
(&(
poﬁ
->
‰ì_li°
));

30 
	`li°_add
–&(
poﬁ
->
li°
), &
poﬁs
);

32  
poﬁ
;

33 
	}
}

39 
	$_mem_poﬁ_Æloc_chunk
(
mem_poﬁ
 *
poﬁ
)

41 * 
p
;

42 * 
°¨t
 = (*)
	`MALLOC
(
poﬁ
->
chunksize
);

43 
i
, 
num
;

44 
size
 = 
poﬁ
->size;

46 if(
°¨t
 =
NULL
 )  0;

48 
num
 = 
poﬁ
->
chunksize
 /
size
;

50 
i
 = 0; i < 
num
; i++)

52 
p
 = (
°¨t
 + 
i
 * 
size
);

53 
	`¶i°_add
((
¶i°
 *)
p
, &(
poﬁ
->
‰ì_li°
));

56 
poﬁ
->
num
 +=Çum;

59  
num
;

60 
	}
}

63 * 
	$mem_poﬁ_Æloc
(
mem_poﬁ
 * 
p
)

65 
ªt
;

66 
¶i°
 * 
node
 = 
	`¶i°_dñ_fú°
(&(
p
->
‰ì_li°
));

68 if(
node
 =
NULL
)

70 
ªt
 = 
	`_mem_poﬁ_Æloc_chunk
(
p
);

71 if(
ªt
 =0Ë 
NULL
;

72 
node
 = 
	`¶i°_dñ_fú°
(&(
p
->
‰ì_li°
));

75 if(
node
Ë
p
->
num
--;

77  (*Ë
node
;

78 
	}
}

82 
	$mem_poﬁ_‰ì
(
mem_poﬁ
 * 
p
, * 
node
)

84 
	`¶i°_add
((
¶i°
 *)
node
,&(
p
->
‰ì_li°
));

85 
p
->
num
++;

86 
	}
}

	@src/net_global.c

12 
	~"√t_globÆ.h
"

13 
	~"rouã.h
"

14 
	~"loˇl_ù.h
"

15 
	~<¨∑/öë.h
>

17 
√t_globÆ
 
	g√t_globÆ
;

19 
	$ng_öô
(
id
, 
drivî
 * 
d
, 
∑ckë_z⁄e
 * 
z
, 
lfq
 * 
q
, 
öãrÁ˚
 * 
ôf
,
rouã_èbÀ
 * 
π
)

21 
√t_globÆ
.
id
 = id;

22 
√t_globÆ
.
d
 = d;

23 
√t_globÆ
.
z
 = z;

24 
√t_globÆ
.
q
 = q;

25 
√t_globÆ
.
ôf
 = itf;

26 
√t_globÆ
.
π
 =Ñt;

29 
	}
}

43 
loˇl_ù
 * 
	$ng_add_ù
(* 
ù_°rög
, 
Ámûy
,
isvsù
, 
nic_id
)

45 
u32
 
ù4
;

46 
ù_addªss
 
ù
;

47 
ö6_addr
 
ö6
;

48 
rouã_íåy
 * 
ª
 = 
	`π_íåy_¸óã
();

49 
loˇl_ù
 * 
lù
 = 
NULL
;

51 if(
ª
 =
NULL
)  NULL;

53 if(
Ámûy
 =
AF_INET
)

55 
ù4
 = 
	`öë_addr
(
ù_°rög
);

56 
	`ù_addªss_öô_v4
(&
ù
,
ù4
);

60 
	`öë_±⁄
(
AF_INET6
,
ù_°rög
,(*)&
ö6
);

61 
	`ù_addªss_öô_v6
(&
ù
, (
u32
*)&
ö6
);

65 if(
isvsù
)

66 
lù
 = 
	`öãrÁ˚_¸óã_loˇl_ù
(
√t_globÆ
.
ôf
,&
ù
,
VS_IP_T
,
nic_id
);

68 
lù
 = 
	`öãrÁ˚_¸óã_loˇl_ù
(
√t_globÆ
.
ôf
,&
ù
,
SELF_IP_T
,
nic_id
);

70 
	`π_íåy_öô
(
ª
, &
ù
, 
nic_id
);

72 if(!
	`π_add_íåy
(
√t_globÆ
.
π
, 
ª
)Ë 
NULL
;

74  
lù
;

75 
	}
}

	@src/packet.c

13 
	~"comm⁄/li°.h
"

14 
	~"comm⁄/c⁄fig.h
"

15 
	~"comm⁄/comm_de‚s.h
"

16 
	~"comm⁄/debug.h
"

17 
	~"löux-√t/if_ëhî.h
"

18 
	~"löux-√t/if_¨p.h
"

19 
	~"löux-√t/ù.h
"

20 
	~"löux-√t/ùv6.h
"

21 
	~"∑ckë.h
"

22 
	~"lf_queue.h
"

26 
∑ckë
 * 
	$∑ckë_öô
(
__u64
 
°¨t
, __u64 
phys
, 
id
)

28 
∑ckë
 * 
pkt
 = 
	`∑ckë_of
((
__u8
 *)
°¨t
);

30 
pkt
->
lfq_°©e
 = 
LFQ_END
;

31 
pkt
->
phys
 =Öhys;

32 
pkt
->
Àn
 = 0;

33 
pkt
->
size
 = 
PACKET_SIZE
;

34 
pkt
->
id
 = id;

36 
	`INIT_LIST_HEAD
(&(
pkt
->
√xt
));

38  
pkt
;

39 
	}
}

41 
	$∑ckë_£t_d©a_Àn
(
∑ckë
 * 
pkt
, 
__u16
 
Àn
)

43 
pkt
->
Àn
 =Üen;

44 
	}
}

46 
∑ckë_poﬁ
 * 
	$∑ckë_poﬁ_¸óã
()

48  (
∑ckë_poﬁ
 *)
	`MALLOC
((packet_pool));

49 
	}
}

52 
	$∑ckë_poﬁ_öô
(
∑ckë_poﬁ
 * 
µ
)

54 
µ
->
num
 = 0;

55 
	`INIT_LIST_HEAD
(&(
µ
->
li°
));

56 
	}
}

58 
∑ckë_z⁄e
 *
	$∑ckë_z⁄e_¸óã
()

60  (
∑ckë_z⁄e
 *)
	`MALLOC
((packet_zone));

61 
	}
}

67 
	$poﬁ_add_∑ckës
(
∑ckë_z⁄e
 * 
z⁄e
, 
∑ckë_poﬁ
 * 
poﬁ
)

69 
__u64
 
i
;

70 
__u64
 
°¨t
 = 
z⁄e
->start;

71 
__u64
 
phys
 = 
z⁄e
->phys;

72 
__u64
 
num
 = 
z⁄e
->
size
 / 
PACKET_SIZE
;

73 
∑ckë
 * 
pkt
;

75 
i
 = 0; i < 
num
; i++)

77 
pkt
 = 
	`∑ckë_öô
(
°¨t
,
phys
,
z⁄e
->
id
);

78 
	`∑ckë_poﬁ_put
(
poﬁ
,
pkt
);

79 
°¨t
 +
PACKET_SIZE
;

80 
phys
 +
PACKET_SIZE
;

82 
	}
}

85 
	$∑ckë_z⁄e_öô
(
∑ckë_z⁄e
 * 
z⁄e
, 
u64
 
°¨t_Æl
, u64 
phys_Æl
, 
__u64
 
°¨t
, __u64 
phys
, __u64 
size
, 
id
)

87 
z⁄e
->
°¨t_Æl
 = start_all;

88 
z⁄e
->
phys_Æl
 =Öhys_all;

89 
z⁄e
->
°¨t
 = start;

90 
z⁄e
->
phys
 =Öhys;

91 
z⁄e
->
size
 = size;

92 
z⁄e
->
id
 = id;

94 
	`∑ckë_poﬁ_öô
(&(
z⁄e
->
‰ì_∑ckë_poﬁ
));

95 
	`poﬁ_add_∑ckës
(
z⁄e
, &(z⁄e->
‰ì_∑ckë_poﬁ
));

96 
	}
}

108 
∑ckë_z⁄e
 * 
	$∑ckë_moduÀ_öô
–
__u64
 
°¨t
, __u64 
phys
, __u64 
size
, 
≈roc
, 
id
)

110 
i
;

111 
u64
 
tŸÆ_num
, 
num
;

112 
∑ckë_z⁄e
 * 
z
;

113 
∑ckë_poﬁ
 * 
p
;

114 
u64
 
phys_Æl
,
°¨t_Æl
;

116 if(
≈roc
 =0 || 
size
 <0 || 
°¨t
 <0 || 
phys
 <0Ë 
NULL
;

118 
tŸÆ_num
 = 
size
/
PACKET_SIZE
;

119 
num
 = 
tŸÆ_num
/
≈roc
;

121 
size
 = 
num
 * 
PACKET_SIZE
;

122 
phys_Æl
 = 
phys
;

123 
°¨t_Æl
 = 
°¨t
;

125 
°¨t
 +
size
*
id
;

126 
phys
 +
size
*
id
;

128 
z
 = 
	`∑ckë_z⁄e_¸óã
();

130 
	`∑ckë_z⁄e_öô
(
z
,
°¨t_Æl
,
phys_Æl
, 
°¨t
, 
phys
,
size
,
id
);

132  
z
;

133 
	}
}

144 
ölöe
 
	$__∑ckë_öô_p‹t
(
∑ckë
 * 
pkt
, * 
hódî
, 
¥Ÿo
)

146 
t˝hdr
 * 
t˝h
;

147 
udphdr
 * 
udph
;

148 
u16
 
•‹t
,
dp‹t
;

150 if(
¥Ÿo
 =
PROTO_TCP
){

151 
t˝h
 = (
t˝hdr
 *)(
hódî
);

152 
•‹t
 =
t˝h
->
sour˚
 ;

153 
dp‹t
 = 
t˝h
->
de°
;

154 }if(
¥Ÿo
 =
PROTO_UDP
){

155 
udph
 = (
udphdr
 *)(
hódî
);

156 
•‹t
 = 
udph
->
sour˚
 ;

157 
dp‹t
 = 
udph
->
de°
;

159 if(
¥Ÿo
 =
PROTO_ICMP
)

161 
	`DPRINTF
("TODO: init IMCPÖrotocol");

163 if(
¥Ÿo
 =
PROTO_ICMPV6
)

165 
	`DPRINTF
("TODO: init IMCPv6Örotocol");

170 
pkt
->
ßddr
.
p‹t
 = 
•‹t
;

171 
pkt
->
daddr
.
p‹t
 = 
dp‹t
;

174 
	}
}

177 
	$∑ckë_ªcv_öô_¨p
(
∑ckë
 * 
pkt
)

180 
u8
 * 
d©a
 = 
	`∑ckë_d©a
(
pkt
);

181 
ëhhdr
 * 
ï
 = (ëhhd∏*)
d©a
;

182 
¨phdr
 * 
≠
 =(¨phdr*)(
d©a
 + (
ëhhdr
));

184 
pkt
->
Ámûy
 = 
AF_INET
;

185 
pkt
->
¥Ÿocﬁ_ù
 = 
PROTO_NULL
;

188 
pkt
->
ßddr
.
ù
.
Ámûy
 = 
AF_INET
;

189 
pkt
->
daddr
.
ù
.
Ámûy
 = 
AF_INET
;

190 
pkt
->
ßddr
.
ù
.
addr
.
ù4
 = *((
u32
*)(
≠
->
¨_sù
));

191 
pkt
->
daddr
.
ù
.
addr
.
ù4
 = *((
u32
*)(
≠
->
¨_tù
));

193 
pkt
->
å™•‹t_hódî
 = 0;

194 
pkt
->
√tw‹k_hódî
 = (
u8
*)
≠
 - 
d©a
;

195 
pkt
->
mac_hódî
 = (
u8
*)
ï
 - 
d©a
;

199 
	}
}

201 
	$∑ckë_ªcv_öô_ùv4
(
∑ckë
 * 
pkt
)

203 
u8
 * 
d©a
 = 
	`∑ckë_d©a
(
pkt
);

204 
ëhhdr
 * 
ï
 = (ëhhd∏*)
d©a
;

205 
ùhdr
 * 
ù
 ;

206 * 
hódî
 ;

207 
ù
 =(
ùhdr
*)(
d©a
 + (
ëhhdr
));

209 
pkt
->
Ámûy
 = 
AF_INET
;

210 
pkt
->
¥Ÿocﬁ_ù
 = 
ù
->
¥Ÿocﬁ
;

212 
hódî
 = (*)((
u8
*)
ù
 + (
ùhdr
));

214 if(
	`__∑ckë_öô_p‹t
(
pkt
,
hódî
 ,
ù
->
¥Ÿocﬁ
 )==0)

218 
pkt
->
ßddr
.
ù
.
Ámûy
 = 
AF_INET
;

219 
pkt
->
daddr
.
ù
.
Ámûy
 = 
AF_INET
;

220 
pkt
->
ßddr
.
ù
.
addr
.
ù4
 = ip->saddr;

221 
pkt
->
daddr
.
ù
.
addr
.
ù4
 = ip->daddr;

223 
pkt
->
å™•‹t_hódî
 = (
u8
*)
hódî
 - 
d©a
;

224 
pkt
->
√tw‹k_hódî
 = (
u8
*)
ù
 - 
d©a
;

225 
pkt
->
mac_hódî
 = (
u8
*)
ï
 - 
d©a
;

228 
	}
}

232 
	$∑ckë_ªcv_öô_ùv6
(
∑ckë
 * 
pkt
)

234 
u8
 * 
d©a
 = 
	`∑ckë_d©a
(
pkt
);

235 
ëhhdr
 * 
ï
 = (ëhhd∏*)
d©a
;

236 
ùv6hdr
 * 
ù6
 ;

237 * 
hódî
 ;

239 
ù6
 =(
ùv6hdr
*)(
d©a
 + (
ëhhdr
));

241 
pkt
->
Ámûy
 = 
AF_INET6
;

242 
pkt
->
¥Ÿocﬁ_ù
 = 
ù6
->
√xthdr
;

244 
hódî
 = (*)((
u8
 *)
ù6
 + (
ùv6hdr
));

245 if(
	`__∑ckë_öô_p‹t
(
pkt
, 
hódî
,Ökt->
¥Ÿocﬁ_ù
)==0)

248 
pkt
->
ßddr
.
ù
.
Ámûy
 = 
AF_INET6
;

249 
pkt
->
daddr
.
ù
.
Ámûy
 = 
AF_INET6
;

250 
pkt
->
ßddr
.
ù
.
addr
.
ö6
 = 
ù6
->saddr;

251 
pkt
->
daddr
.
ù
.
addr
.
ö6
 = 
ù6
->daddr;

253 
pkt
->
å™•‹t_hódî
 = (
u8
*)
hódî
 - 
d©a
;

254 
pkt
->
√tw‹k_hódî
 = (
u8
*)
ù6
 - 
d©a
;

255 
pkt
->
mac_hódî
 = (
u8
*)
ï
 - 
d©a
;

258 
	}
}

274 
	$__∑ckë_ªcv_öô
(
∑ckë
 * 
pkt
)

276 
ªt
 = 0;

277 
u8
 * 
d©a
 = 
	`∑ckë_d©a
(
pkt
);

278 
ëhhdr
 * 
ï
 = (ëhhd∏*)
d©a
;

279 
ùhdr
 * 
ù
 ;

281 
pkt
->
lfq_°©e
 = 
LFQ_START
;

282 
pkt
->
¥Ÿocﬁ_ëh
 = 
ï
->
h_¥Ÿo
;

284 
ù
 =(
ùhdr
*)(
d©a
 + (
ëhhdr
));

293 if(
	`PACKET_IS_IP
(
pkt
)){

294 if(
ù
->
vîsi⁄
 == 4){

295 
ªt
 = 
	`∑ckë_ªcv_öô_ùv4
(
pkt
);

297 
ªt
 = 
	`∑ckë_ªcv_öô_ùv6
(
pkt
);

300 if(
	`PACKET_IS_ARP
(
pkt
))

302 
ªt
 = 
	`∑ckë_ªcv_öô_¨p
(
pkt
);

305  
ªt
;

306 
	}
}

314 
	$∑ckë_öô_™d_fûãr
(
li°_hód
 * 
hód
, li°_hód * 
dr›_out
 )

316 
∑ckë
 * 
pos
;

317 
∑ckë
 * 
n
;

318 
ªt
;

320 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
√xt
)

322 
ªt
 = 
	`__∑ckë_ªcv_öô
(
pos
);

324 if(
ªt
 == 0)

326 
	`li°_move_èû
(&(
pos
->
√xt
),
dr›_out
);

329 
	}
}

	@src/port_range.c

16 
	~"comm⁄/c⁄fig.h
"

17 
	~"p‹t_ønge.h
"

18 
	~<°dlib.h
>

21 
u16
 
	$p‹t_ønge_gë_p‹t1
(
p‹t_ønge
 *
ønge
)

23 
u16
 
ªt
;

25 i‡(!
ønge
->
avaû
)

27 
ªt
 = 
ønge
->
p‹ts
[ønge->
gë
];

28 
ønge
->
gë
++;

29 i‡(
ønge
->
gë
 >ønge->
size
)

30 
ønge
->
gë
 = 0;

31 
ønge
->
avaû
--;

32  
ªt
;

33 
	}
}

39 
	$p‹t_ønge_put_p‹t
(
p‹t_ønge
 *
ønge
, 
u16
 
p‹t
)

41 i‡(!
p‹t
 || !
ønge
)

44 
ønge
->
p‹ts
[ønge->
put
] = 
p‹t
;

45 
ønge
->
avaû
++;

46 
ønge
->
put
++;

47 i‡(
ønge
->
put
 >ønge->
size
)

48 
ønge
->
put
 = 0;

49 
	}
}

54 
p‹t_ønge
 *
	$p‹t_ønge_¸óã
(
n
)

56 
p‹t_ønge
 *
ªt
;

57 
n
++;

58 
ªt
 = 
	`CALLOC
(1, (
p‹t_ønge
) +

59 
n
 * (((
p‹t_ønge
 *)0)->
p‹ts
[0]));

60 
ªt
->
size
 = 
n
;

61  
ªt
;

62 
	}
}

65 
	$p‹t_ønge_‰ì
(
p‹t_ønge
 * 
ønge
)

67 
	`FREE
(
ønge
);

68 
	}
}

72 
	$p‹t_ønge_öô
(
p‹t_ønge
 * 
ønge
, 
u16
 
p‹t1
, u16 
p‹t2
)

74 
u32
 
i
;

75 
u32
 
up
 = 
p‹t2
;

76 
u32
 
low
 = 
p‹t1
;

78 
i
 = 
low
 ; i <
up
 ; i++)

80 
	`p‹t_ønge_put_p‹t
(
ønge
, 
	`ht⁄s
(
i
));

82 
	}
}

93 
u16
 
	$p‹t_ønge_gë_p‹t2
(
p‹t_ønge
 * 
ønge
, 
u16
 
p‹t
)

95 
i
 = 
ønge
->
gë
;

96 
u16
 
tmp
;

98 if(
	`¡ohs
(
p‹t
Ë> 
RESERVED_PORTS_MAX
)

101 
i
 !
ønge
->
put
)

103 if(
ønge
->
p‹ts
[
i
] =
p‹t
)

106 
tmp
 = 
ønge
->
p‹ts
[ønge->
gë
];

107 
ønge
->
p‹ts
[
i
] = 
tmp
;

108 
	`p‹t_ønge_gë_p‹t1
(
ønge
);

109  
p‹t
;

111 
i
 = (ò+ 1Ë% 
ønge
->
size
;

115 
	}
}

126 
u16
 
	$p‹t_ønge_gë_p‹t
(
p‹t_ønge
 * 
ønge
, 
u16
 
p‹t
)

128 
ªt
;

129 if–
p‹t
 == 0 )

130  
	`p‹t_ønge_gë_p‹t1
(
ønge
);

132  
	`p‹t_ønge_gë_p‹t2
(
ønge
,
p‹t
);

133 
	}
}

	@src/process.c

12 
	#_GNU_SOURCE


	)

13 
	#__USE_GNU


	)

14 
	~<sched.h
>

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~"löux-√t/udp.h
"

19 
	~"löux-√t/t˝.h
"

20 
	~"löux-√t/ùv6.h
"

21 
	~"löux-√t/ù.h
"

22 
	~"löux-√t/if_ëhî.h
"

23 
	~"comm⁄/ty≥s.h
"

24 
	~"comm⁄/debug.h
"

25 
	~"c⁄√˘i⁄.h
"

26 
	~"loˇl_ù.h
"

27 
	~"√t_globÆ.h
"

28 
	~"di•©ch.h
"

29 
	~"drivî.h
"

30 
	~"∑ckë.h
"

31 
	~"¨p.h
"

32 
	~"rouã.h
"

33 
	~"t˝.h
"

34 
	~"∑ckë.h
"

35 
	~"£rvî_poﬁ.h
"

37 
	$¥o˚ss_£t_t˝_p‹t
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
 )

39 
t˝hdr
 * 
t˝
 = 
	`∑ckë_gë_t˝hdr
(
pkt
);

41 if(
is_˛õ¡
)

43 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

45 
t˝
->
sour˚
 = 
˝
->
£lf_p‹t
;

47 
t˝
->
de°
 = 
	`£rvî_gë_p‹t
(
˝
->
£rvî
);

51 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

52 
t˝
->
de°
 = 
˝
->
˛õ¡_p‹t
;

54 
t˝
->
sour˚
 = 
˝
->
vs
->
p‹t
;

56 
	}
}

59 
	$¥o˚ss_£t_udp_p‹t
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
 )

62 
udphdr
 * 
udp
 = 
	`∑ckë_gë_udphdr
(
pkt
);

64 if(
is_˛õ¡
)

66 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

68 
udp
->
sour˚
 = 
˝
->
£lf_p‹t
;

70 
udp
->
de°
 = 
	`£rvî_gë_p‹t
(
˝
->
£rvî
);

74 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

75 
udp
->
de°
 = 
˝
->
˛õ¡_p‹t
;

76 
udp
->
sour˚
 = 
˝
->
vs
->
p‹t
;

78 
	}
}

81 
	$¥o˚ss_£t_p‹t
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
)

83 if(
	`CONNECTION_IS_TCP
(
˝
))

84 
	`¥o˚ss_£t_t˝_p‹t
(
˝
,
pkt
,
is_˛õ¡
 );

86 
	`¥o˚ss_£t_udp_p‹t
(
˝
,
pkt
,
is_˛õ¡
 );

87 
	}
}

89 
	$¥o˚ss_£t_ùv4
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
 )

91 
ùhdr
 * 
ù4
 = 
	`∑ckë_gë_ùhdr
(
pkt
);

94 if(
is_˛õ¡
){

95 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

96 
ù4
->
ßddr
 = 
	`ù_addªss_gë_ùv4
(
	`lù_gë_ù_addªss
(
˝
->
£lf_addr
));

98 
ù4
->
daddr
 = 
	`ù_addªss_gë_ùv4
(
	`£rvî_gë_ù_addªss
(
˝
->
£rvî
));

100 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

101 
ù4
->
daddr
 = 
	`ù_addªss_gë_ùv4
–
	`c⁄√˘i⁄_gë_˛õ¡_ù
(
˝
));

103 
ù4
->
ßddr
 = 
	`ù_addªss_gë_ùv4
(
	`lù_gë_ù_addªss
(
˝
->
vs_addr
));

105 
	}
}

108 
	$¥o˚ss_£t_ùv6
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
 )

110 
ùv6hdr
 * 
ù6
 = 
	`∑ckë_gë_ùv6hdr
(
pkt
);

112 if(
is_˛õ¡
){

113 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

114 
ù6
->
ßddr
 = *((
ö6_addr
*)
	`ù_addªss_gë_ùv6
(
	`lù_gë_ù_addªss
(
˝
->
£lf_addr
)));

116 
ù6
->
daddr
 = *(
ö6_addr
*)
	`ù_addªss_gë_ùv6
(
	`£rvî_gë_ù_addªss
(
˝
->
£rvî
));

118 if(
	`CONNECTION_IS_FULLNAT
(
˝
))

119 
ù6
->
daddr
 = *(
ö6_addr
*)
	`ù_addªss_gë_ùv6
–
	`c⁄√˘i⁄_gë_˛õ¡_ù
(
˝
));

121 
ù6
->
ßddr
 = *(
ö6_addr
*)
	`ù_addªss_gë_ùv6
(
	`lù_gë_ù_addªss
(
˝
->
vs_addr
));

123 
	}
}

126 
	$¥o˚ss_£t_ù
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
)

128 if(
	`PACKET_IS_IPV4
(
pkt
))

129 
	`¥o˚ss_£t_ùv4
(
˝
,
pkt
,
is_˛õ¡
);

131 
	`¥o˚ss_£t_ùv6
(
˝
,
pkt
,
is_˛õ¡
);

132 
	}
}

134 
	$¥o˚ss_£t_mac
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
 )

136 
ëhhdr
 * 
ï
 = 
	`∑ckë_gë_ëhhdr
(
pkt
);

137 
u8
 * 
mac
;

139 if(
is_˛õ¡
)

142 
mac
 = 
	`ng_drivî_gë_mac
(
˝
->
£rvî_ad≠ãr_idx
);

143 
	`mem˝y
(
ï
->
h_sour˚
,
mac
,
ETH_ALEN
);

144 
	`mem˝y
(
ï
->
h_de°
,
˝
->
£rvî
->
mac
,
ETH_ALEN
);

149 
mac
 = 
	`ng_drivî_gë_mac
(
˝
->
˛õ¡_ad≠ãr_idx
);

150 
	`mem˝y
(
ï
->
h_sour˚
,
mac
,
ETH_ALEN
);

151 
	`mem˝y
(
ï
->
h_de°
,
˝
->
˛õ¡_mac
,
ETH_ALEN
);

154 
	}
}

157 
	$¥o˚ss_£t_checksum
(
∑ckë
 * 
pkt
)

159 if(
	`PACKET_IS_IPV4
(
pkt
))

160 
	`checksum_ùv4
(
pkt
);

162 if(
	`PACKET_IS_TCP
(
pkt
))

163 
	`checksum_t˝
(
pkt
);

165 
	`checksum_udp
(
pkt
);

166 
	}
}

190 
	$¥o˚ss_c⁄√˘i⁄
(
c⁄√˘i⁄
 * 
˝
, 
∑ckë
 * 
pkt
, 
is_˛õ¡
)

192 
	`¥o˚ss_£t_p‹t
(
˝
,
pkt
,
is_˛õ¡
);

193 
	`¥o˚ss_£t_ù
(
˝
,
pkt
,
is_˛õ¡
);

194 
	`¥o˚ss_£t_mac
(
˝
,
pkt
,
is_˛õ¡
);

197 if(
is_˛õ¡
)

198 
pkt
->
ad≠ãr_idx
 = 
˝
->
£rvî_ad≠ãr_idx
;

200 
pkt
->
ad≠ãr_idx
 = 
˝
->
˛õ¡_ad≠ãr_idx
;

202 
	`¥o˚ss_£t_checksum
(
pkt
);

208 
	`ng_drivî_put_∑ckë_to_£nd_buf„r
(
pkt
);

210  
PACKET_STOLEN
;

211 
	}
}

232 
	$¥o˚ss_ù_∑ckë
(
∑ckë
 * 
pkt
)

234 
ù_addªss
 * 
sù
;

235 
ù_addªss
 * 
dù
;

236 
u16
 
•‹t
, 
dp‹t
;

237 
loˇl_ù
 * 
lù
 ;

238 
loˇl_ù
 * 
vs_lù
 ;

239 
v£rvî
 * 
vs
;

240 
c⁄√˘i⁄
 * 
˝
 = 
NULL
;

241 
is_˛õ¡
 = 0;

242 
u8
 
¥Ÿo
 = 
	`∑ckë_gë_å™•‹t_¥Ÿocﬁ
(
pkt
);

245 
•‹t
 = 
	`∑ckë_gë_•‹t
(
pkt
);

246 
dp‹t
 = 
	`∑ckë_gë_dp‹t
(
pkt
);

247 
sù
 = 
	`∑ckë_gë_sù
(
pkt
);

248 
dù
 = 
	`∑ckë_gë_dù
(
pkt
);

250 
lù
 = 
	`ng_öãrÁ˚_lookup_vsù
(
dù
);

253 if(
lù
){

254 
is_˛õ¡
 = 1;

255 
vs
 = 
	`v£rvî_lookup
(
dù
, 
dp‹t
, 
¥Ÿo
, &
vs_lù
);

257 
	`DPRINTF
("v†looku∞%lx commög from clõ¡\n",
vs
);

258 if(
vs
){

259 
	`DPRINTF
("Find VS\n");

260 
is_˛õ¡
 = 1;

261 
˝
 = 
	`c⁄√˘i⁄_lookup
(
sù
 ,
•‹t
,
¥Ÿo
,
is_˛õ¡
);

262 if(!
˝
){

263 
˝
 = 
	`c⁄√˘i⁄_¸óã
(
pkt
,
vs
);

264 
	`DPRINTF
("Cª©ög C⁄√˘i⁄ %lx\n",
˝
);

267  
PACKET_DROP
;

269 
lù
 = 
	`ng_öãrÁ˚_lookup_£lfù
(
dù
);

272 if(
lù
 =
NULL
Ë
is_˛õ¡
 = 1;

274 
˝
 = 
	`c⁄√˘i⁄_lookup
(
dù
 ,
dp‹t
,
¥Ÿo
,
is_˛õ¡
);

276 if(
˝
)

277 
	`DPRINTF
("Coming from server\n");

280 if(
˝
){

281 if(
	`¥o˚ss_c⁄√˘i⁄
(
˝
,
pkt
, 
is_˛õ¡
)){

282 if(
	`PACKET_IS_TCP
(
pkt
)){

284 i‡(
	`t˝_ch™ge_°©e
(
pkt
,
˝
Ë=
TCP_CLOSED
){

285 
	`DPRINTF
("Find A TCP Close\n");

286 
	`c⁄√˘i⁄_‰ì
(
˝
);

289  
PACKET_STOLEN
;

291  
PACKET_DROP
;

293  
PACKET_ACCEPT
;

294 
	}
}

304 
	$maö_¥o˚ss_∑ckës
(
∑ckë
 * 
pkt
)

308 if(
	`PACKET_IS_IP
(
pkt
))

311  
	`¥o˚ss_ù_∑ckë
(
pkt
);

313 if(
	`PACKET_IS_ARP
(
pkt
))

315  
	`¨p_h™dÀr
(
pkt
);

318  
PACKET_DROP
;

319 
	}
}

328 
	$¥o˚ss_∑ckës
(
li°_hód
 * 
∑ckë_hód
, li°_hód * 
‰ì_hód
)

330 
∑ckë
 * 
pos
;

331 
∑ckë
 * 
n
;

332 
ªt
;

333 
cou¡
 = 0;

335 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
∑ckë_hód
, 
√xt
){

337 
	`li°_dñ
(&(
pos
->
√xt
));

338 
ªt
 = 
	`maö_¥o˚ss_∑ckës
(
pos
);

340 if(
ªt
 !
PACKET_STOLEN
){

341 
	`li°_add
(&(
pos
->
√xt
),
‰ì_hód
);

344 
	}
}

	@src/route.c

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~"comm⁄/ty≥s.h
"

17 
	~"comm⁄/c⁄fig.h
"

18 
	~"comm⁄/hashèbÀ.h
"

19 
	~"comm⁄/li°.h
"

20 
	~"rouã.h
"

21 
	~"£rvî_poﬁ.h
"

22 
	~"√t_globÆ.h
"

24 
rouã_èbÀ
 * 
	$π_¸óã
()

26 
rouã_èbÀ
 * 
π
 = (rouã_èbÀ *)
	`MALLOC
((route_table));

28 if((
π
->
hashèbÀ
 = 
	`hashèbÀ_Æloc
(
ROUTE_HT_SIZE
)Ë=
NULL
)

30 
	`FREE
(
π
);

31  
NULL
;

35 
	`hashèbÀ_öô
(
π
->
hashèbÀ
,
ROUTE_HT_SIZE
);

37  
π
;

38 
	}
}

41 
	$rouã_èbÀ_‰ì
(
rouã_èbÀ
 * 
π
)

43 
	`¥ötf
("S‹ry,ÇŸÑóŒy fªe:Ñouã_èbÀ_‰ì %lx\n",
π
);

44 
	}
}

47 
ölöe
 
	$π_hashkey
(
ù_addªss
 * 
ù
)

49 
u32
 
h
;

50 
h
 = 
	`ù_addªss_hash
(
ù
);

51  (
h
 & 
ROUTE_HT_MASK
);

52 
	}
}

55 
rouã_íåy
 * 
	$π_íåy_¸óã
()

57  
	`MALLOC
((
rouã_íåy
));

58 
	}
}

60 
	$π_íåy_‰ì
(
rouã_íåy
 * 
ª
)

62 if(
ª
Ë
	`FREE
(re);

63 
	}
}

66 
	$π_íåy_öô
(
rouã_íåy
 * 
ª
, 
ù_addªss
 * 
addr
, 
u32
 
nic_id
)

68 
	`mem˝y
(&(
ª
->
addr
),addr,(
ù_addªss
));

69 
ª
->
nic_id
 =Çic_id;

70 
	`INIT_LIST_HEAD
(&(
ª
->
li°
));

71 
	}
}

80 
rouã_íåy
 * 
	$__π_lookup_º
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
,
º_íabÀ
, 
nic_id
)

82 
idx
 = 
	`π_hashkey
(
ù
);

83 
rouã_íåy
 * 
ª
;

85 
	`li°_f‹_óch_íåy
(
ª
, &
π
->
hashèbÀ
[
idx
], 
li°
) {

86 if(
	`ù_addªss_eq
(&(
ª
->
addr
),
ù
))

88 if(
º_íabÀ
){

89 
	`li°_dñ
(&(
ª
->
li°
));

90 
	`li°_add_èû
(&(
ª
->
li°
), &(
π
->
hashèbÀ
[
idx
]));

93 if(
nic_id
 =-1Ë 
ª
;

94 if(
nic_id
 =
ª
->nic_id) Ñe;

98  
NULL
;

99 
	}
}

102 
rouã_íåy
 * 
	$π_lookup_º
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
)

104  
	`__π_lookup_º
(
π
, 
ù
,1,-1);

105 
	}
}

108 
rouã_íåy
 * 
	$π_lookup
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
)

110  
	`__π_lookup_º
(
π
, 
ù
,0,-1);

111 
	}
}

114 
rouã_íåy
 * 
	$π_lookup_wôh_nic_id
(
rouã_èbÀ
 * 
π
, 
ù_addªss
 * 
ù
, 
nic_id
)

117  
	`__π_lookup_º
(
π
, 
ù
,0,
nic_id
);

118 
	}
}

125 
	$π_add_íåy
(
rouã_èbÀ
 * 
π
, 
rouã_íåy
 * 
ª
)

127 
idx
 ;

129 if(
	`π_lookup
(
π
, &(
ª
->
addr
)))  0;

131 
idx
 = 
	`π_hashkey
(&(
ª
->
addr
));

133 
	`li°_add
(&(
ª
->
li°
),&(
π
->
hashèbÀ
[
idx
]));

136 
	}
}

139 
	$π_dñ_íåy
(
rouã_èbÀ
 * 
π
, 
rouã_íåy
 * 
ª
)

141 
	`li°_dñ
(&(
ª
->
li°
));

144 
	}
}

148 
rouã_èbÀ
 * 
	$π_moduÀ_öô
()

150  
	`π_¸óã
();

151 
	}
}

154 
	$π_föd_£rvî_rouã
()

156 
i
;

157 
£rvî
 * 
§v
;

158 
li°_hód
 * 
hód
 = 
	`£rvî_poﬁ_gë_£rvî_li°
();

159 
ù_addªss
 * 
§v_ù
;

160 
num
 = 
	`ng_drivî_gë_ad≠ãr_num
();

162 
	`f‹_óch_£rvî
(
§v
,
hód
)

164 
§v_ù
 = 
	`£rvî_gë_ù_addªss
(
§v
);

165 
i
 = 0; i < 
num
; i++ )

166 
	`¨p_£nd_ªque°
(
§v_ù
,
i
);

168 
	}
}

	@src/rss.c

15 
	gK
[] =

117 
	$rss_hash_v4
(
ßddr
, 
daddr
, 
•‹t
,
dp‹t
)

119 
i
,
j
,
k
;

120 
tmp
 = 
•‹t
 | (
dp‹t
 << 16);

121 
t
[3];

122 
t
[0] = 
ßddr
;

123 
t
[1] = 
daddr
;

124 
t
[2] = 
tmp
;

125 
öput
;

127 
ªsu…
 = 0;

128 * 
a
 = (* )
t
;

130 
j
 =0;

131 
k
 = 0; k < 12; k ++)

133 
öput
 = 
a
[
k
];

134 
i
 = 0; i < 8; i++)

136 if(
öput
 &0x80)

137 
ªsu…
 ^
K
[
j
];

138 
öput
 = input << 1;

139 
j
++;

142  
ªsu…
;

143 
	}
}

	@src/server_pool.c

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~"comm⁄/c⁄fig.h
"

15 
	~"comm⁄/ty≥s.h
"

16 
	~"comm⁄/li°.h
"

17 
	~"£rvî_poﬁ.h
"

20 
LIST_HEAD
–
£rvî_poﬁ_li°
);

22 
LIST_HEAD
–
£rvî_li°
);

24 
li°_hód
 * 
	$£rvî_poﬁ_gë_£rvî_li°
()

26  &
£rvî_li°
;

27 
	}
}

30 
li°_hód
 * 
	$£rvî_poﬁ_gë_£rvî_poﬁ_li°
()

32  &
£rvî_poﬁ_li°
;

33 
	}
}

36 
£rvî_poﬁ
 * 
	$£rvî_poﬁ_¸óã
()

38 
£rvî_poﬁ
 * 
•
 = (£rvî_poﬁ *Ë
	`MALLOC
((server_pool));

39 if(
•
)

41 
•
->
num
 = 0;

42 
•
->
√xt
 = 0;

43 
•
->
ªf
 = 0;

45 
	`li°_add
(&(
•
->
li°
),&(
£rvî_poﬁ_li°
));

48  
•
;

49 
	}
}

51 
	$£rvî_poﬁ_‰ì
(
£rvî_poﬁ
 * 
p
)

53 
i
;

54 
£rvî
 * 
§v
;

56 
i
 = 0; i < 
p
->
num
; i++)

58 
§v
 = &(
p
->
£rvî_li°
[
i
]);

59 
	`li°_dñ
(&(
§v
->
li°
));

62 
	`li°_dñ
(&(
p
->
li°
));

63 
	`FREE
(
p
);

64 
	}
}

66 
£rvî
 * 
	$£rvî_poﬁ_add_£rvî
(
£rvî_poﬁ
 * 
p
, 
√t_addªss
 * 
addr
)

68 
£rvî
 * 
§v
;

70 if(
p
->
num
 < 
MAX_SERVER
);

72 
§v
 = &(
p
->
£rvî_li°
[p->
num
++]);

73 
§v
->
addr
 = *áddr;

74 
	`li°_add
(&(
§v
->
li°
),&(
£rvî_li°
));

75  
§v
;

78  
NULL
;

79 
	}
}

82 
	$£rvî_poﬁ_add_£rvî_TEST
(
£rvî_poﬁ
 * 
p
, 
u8
 * 
mac
, 
√t_addªss
 * 
addr
)

84 
£rvî
 * 
§v
;

86 if(
p
->
num
 < 
MAX_SERVER
);

88 
§v
 = &(
p
->
£rvî_li°
[p->
num
++]);

89 
	`mem˝y
(
§v
->
mac
,mac,
ETH_ALEN
);

90 
§v
->
addr
 = *áddr;

95 
	}
}

98 
£rvî
 * 
	$£rvî_poﬁ_gë_£rvî
(
£rvî_poﬁ
 * 
p
)

100 
£rvî
 * 
§v
 = 
NULL
;

102 if(
p
->
num
 > 0)

104 
§v
 = & 
p
->
£rvî_li°
[p->
√xt
];

105 
p
->
√xt
 = (p->√xà+ 1)%p->
num
;

108  
§v
;

109 
	}
}

	@src/tcp.c

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"löux-√t/if_ëhî.h
"

16 
	~"löux-√t/ù.h
"

17 
	~"löux-√t/t˝.h
"

18 
	~"t˝.h
"

19 
	~"comm⁄/debug.h
"

20 
	~"∑ckë.h
"

21 
	~"drivî.h
"

22 
	~"rouã.h
"

23 
	~"checksum.h
"

24 
	~"c⁄√˘i⁄.h
"

25 
	~"∑ckë.h
"

29 
	$t˝_°©es
(
∑ckë
 * 
pkt
)

31 
t˝hdr
 * 
t˝
 = 
	`∑ckë_gë_t˝hdr
(
pkt
);

33 
	`¥ötf
("£q %dáck_£q %d\n",
t˝
->
£q
,t˝->
ack_£q
);

34 
	`¥ötf
("res1\tdoff\tfin\tsyn\trst\tpsh\tack\turg\tece\tcwr\n");

35 
	`¥ötf
("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
t˝
->
ªs1
,t˝->
doff
,t˝->
fö
,t˝->
syn
,t˝->
r°
,t˝->
psh
,t˝->
ack
,t˝->
urg
,t˝->
e˚
,t˝->
cwr
);

37 
	}
}

39 
	$t˝_ch™ge_°©e
(
∑ckë
 * 
pkt
,
c⁄√˘i⁄
 * 
˝
)

41 
t˝hdr
 * 
t˝
 = 
	`∑ckë_gë_t˝hdr
(
pkt
);

43 if(
t˝
->
fö
 && 
˝
->
°©e
 =
TCP_INIT
)

44 
˝
->
°©e
 = 
TCP_FIN1
;

46 if(
t˝
->
ack
 && 
˝
->
°©e
 =
TCP_FIN1
)

47 
˝
->
°©e
 = 
TCP_FIN1_ACK
;

49 if(
t˝
->
fö
 && 
˝
->
°©e
 =
TCP_FIN1_ACK
)

50 
˝
->
°©e
 = 
TCP_FIN2
;

52 if(
t˝
->
ack
 && 
˝
->
°©e
 =
TCP_FIN2
)

53 
˝
->
°©e
 = 
TCP_CLOSED
;

55  
˝
->
°©e
;

56 
	}
}

	@src/test.c

1 
	~"drivî.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~"¥o˚ss.h
"

6 
	~"comm⁄/ty≥s.h
"

7 
	~"loˇl_ù.h
"

8 
	~"c⁄√˘i⁄.h
"

9 
	~"v£rvî.h
"

10 
	~"∑ckë.h
"

11 
	~<°rög.h
>

12 
	~"£rvî_poﬁ.h
"

13 
	~"√t_globÆ.h
"

16 
	$°©ic_rouã
(* 
ù_°rög
, 
nic_id
 )

18 
ù_addªss
 
ù
;

19 
u32
 
ù4
 = 
	`öë_addr
(
ù_°rög
);

20 
	`ù_addªss_öô_v4
(&
ù
,
ù4
);

21 
rouã_íåy
 * 
ª
 = 
	`π_íåy_¸óã
();

22 
	`π_íåy_öô
(
ª
, &
ù
 , 
nic_id
);

23 
	`ng_π_add_íåy
(
ª
);

24 
	}
}

26 
	$ã°_¨p
()

28 
loˇl_ù
 * 
lù_vs1
;

29 
loˇl_ù
 * 
lù_vs2
;

31 
	`ng_add_ù
("192.168.2.36",
AF_INET
,0,0);

32 
	`ng_add_ù
("192.168.2.31",
AF_INET
,0,1);

33 
	`ng_add_ù
("192.168.2.32",
AF_INET
,0,2);

34 
	`ng_add_ù
("192.168.2.33",
AF_INET
,0,3);

36 
lù_vs1
 = 
	`ng_add_ù
("192.168.2.34",
AF_INET
,1,0);

37 
lù_vs2
 = 
	`ng_add_ù
("192.168.2.35",
AF_INET
,1,0);

40 
£rvî_poﬁ
 * 
poﬁ
 = 
	`£rvî_poﬁ_¸óã
();

41 
√t_addªss
 
addr
;

42 
	`√t_addªss_öô_v4
(&
addr
,"192.168.2.87", 80);

43 
£rvî
 * 
§v
 = 
	`£rvî_poﬁ_add_£rvî
(
poﬁ
, &
addr
);

44 
u8
 
mac
[10] = {0x00,0x26,0x2D,0x0B,0x79,0x02};

45 
	`£rvî_£t_mac
(
§v
,
mac
);

49 
v£rvî
 * 
vs
 = 
	`v£rvî_¸óã
(
poﬁ
, 
	`ht⁄s
(7788), 
PROTO_TCP
, 1);

51 if(!
	`v£rvî_add_ù
(
vs
,
lù_vs1
))

53 
	`¥ötf
("ERROR:áddÜipÅo vs\n");

54 
	`exô
(-1);

56 
	`v£rvî_add_ù
(
vs
,
lù_vs2
);

62 
	}
}

	@src/timer.c

13 
	~<°dlib.h
>

14 
	~"comm⁄/øndom.h
"

15 
	~"comm⁄/li°.h
"

16 
	~"comm⁄/debug.h
"

17 
	~"comm⁄/c⁄fig.h
"

18 
	~"timî.h
"

21 
˛ock
 * 
	g__˛ock
;

30 
	$CLOCK
()

34 
now
;

35 
_now
[2];

36 } 
t
;

38 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "˜" (
t
.
_now
[0]), "=d" (t._now[1]));

40  (
t
.
now
 >> 20);

41 
	}
}

44 
	$timî_moduÀ_öô
(
£c⁄ds
)

46 
i
;

47 
size
;

48 
t
 = 
	`CLOCK
();

50 if(
£c⁄ds
 < 0)

51 
size
 = 
DEFAULT_SECONDS
;

53 
size
 = 
£c⁄ds
;

55 
__˛ock
 = (
˛ock
 * )
	`CALLOC
(1,(˛ock)+(
li°_hód
)*
size
);

57 if(
__˛ock
 =
NULL
)  0;

59 
__˛ock
->
˝u_‰equícy
 = 
DEFAULT_CPU_FREQUENCY_MHZ
;

60 
__˛ock
->
œ°_expúe
 = __˛ock->
now
 = 
t
;

61 
__˛ock
->
tŸÆ_˛ock_£c⁄ds
 = 
size
;

62 
__˛ock
->
√xt_˛ock_£c⁄d
 = 0;

63 
__˛ock
->
fûl
 = 0;

65 
i
 = 0; i < 
size
; i++)

66 
	`INIT_LIST_HEAD
(&(
__˛ock
->
timî_èbÀ
[
i
]));

69 
	}
}

71 
timî_öô
(
timî
 * 
t
,(*
h™dÀr
)(timer *Å))

73 
	`INIT_LIST_HEAD
(&(
t
->
li°
));

74 
t
->
h™dÀr
 = handler;

75 
	}
}

81 
	$timî_add
(
timî
 * 
t
, 
£c⁄ds
)

83 
id
;

85 if(
£c⁄ds
 > 
__˛ock
->
tŸÆ_˛ock_£c⁄ds
)

86 
£c⁄ds
 = 
__˛ock
->
tŸÆ_˛ock_£c⁄ds
;

87 if(
£c⁄ds
 < 0)

88 
£c⁄ds
 = 1;

90 
id
 = (
__˛ock
->
√xt_˛ock_£c⁄d
 + 
£c⁄ds
Ë% __˛ock->
tŸÆ_˛ock_£c⁄ds
;

92 
	`li°_add
(&(
t
->
li°
), &(
__˛ock
->
timî_èbÀ
[
id
]));

94  
£c⁄ds
;

95 
	}
}

100 
	$timî_dñ
(
timî
 * 
t
)

102 if(!
	`li°_em±y
(&(
t
->
li°
)))

104 
	`li°_dñ
(&(
t
->
li°
));

105 
	`INIT_LIST_HEAD
(&(
t
->
li°
));

107 
	}
}

114 
	$timî_expúe
()

116 
now
 = 
	`CLOCK
();

117 
ñ≠£
;

118 
Êag
 = 0;

119 
timî
 * 
pos
;

120 
timî
 * 
n
;

123 
ñ≠£
 = (
now
 - 
__˛ock
->
œ°_expúe
 + __˛ock->
fûl
);

125 if(
ñ≠£
 > 
__˛ock
->
˝u_‰equícy
)

126 
Êag
 = 1;

128 
ñ≠£
 > 
__˛ock
->
˝u_‰equícy
)

130 
__˛ock
->
√xt_˛ock_£c⁄d
 = ( __clock->next_clock_second + 1);

132 if–
__˛ock
->
√xt_˛ock_£c⁄d
 >__˛ock->
tŸÆ_˛ock_£c⁄ds
)

133 
__˛ock
->
√xt_˛ock_£c⁄d
 = 0 ;

135 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, &(
__˛ock
->
timî_èbÀ
[__˛ock->
√xt_˛ock_£c⁄d
]), 
li°
)

137 
pos
->
	`h™dÀr
(pos);

142 
ñ≠£
 -
__˛ock
->
˝u_‰equícy
;

145 if(
Êag
)

147 
__˛ock
->
fûl
 = 
ñ≠£
;

148 
__˛ock
->
œ°_expúe
 = 
now
;

151 
__˛ock
->
now
 =Çow;

152 
	}
}

	@src/vserver.c

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

15 
	~"comm⁄/c⁄fig.h
"

16 
	~"comm⁄/ty≥s.h
"

17 
	~"comm⁄/hashèbÀ.h
"

18 
	~"comm⁄/jhash.h
"

19 
	~"comm⁄/øndom.h
"

20 
	~"v£rvî.h
"

21 
	~"loˇl_ù.h
"

22 
	~"£rvî_poﬁ.h
"

26 
li°_hód
 
	gvs_li°
;

27 
li°_hód
 * 
	gvs_hashèbÀ
;

29 
	#VS_HT_BITS
 7

	)

30 
	#VS_HT_SIZE
 ( 1 << 
VS_HT_BITS
)

	)

31 
	#VS_HT_MASK
 ( 
VS_HT_SIZE
 - 1)

	)

33 
	$v£rvî_moduÀ_öô
()

35 
	`INIT_LIST_HEAD
(&(
vs_li°
));

36 
vs_hashèbÀ
 = 
	`hashèbÀ_Æloc
(
VS_HT_SIZE
);

37 if(
vs_hashèbÀ
 =
NULL
)  0;

38 
	`hashèbÀ_öô
(
vs_hashèbÀ
,
VS_HT_SIZE
);

41 
	}
}

43 
ölöe
 
	$vs_hashkey
(
ù_addªss
 * 
ù
, 
u16
 
p‹t
,
u8
 
¥Ÿocﬁ
)

46 
u32
 
h
 = 
	`ù_p‹t_¥Ÿo_hash
(
ù
,
p‹t
, 
¥Ÿocﬁ
);

47  (
h
 & 
VS_HT_MASK
);

48 
	}
}

52 
v£rvî
 * 
	$v£rvî_lookup
(
ù_addªss
 * 
ù
, 
u16
 
p‹t
, 
u8
 
¥Ÿocﬁ
, 
loˇl_ù
 ** 
vs_lù
)

54 
idx
 = 
	`vs_hashkey
(
ù
,
p‹t
,
¥Ÿocﬁ
);

56 
vs_lù_node
 * 
node
;

57 
loˇl_ù
 * 
lù
;

58 
v£rvî
 * 
vs
;

60 
	`li°_f‹_óch_íåy
(
node
, &(
vs_hashèbÀ
[
idx
]), 
hash_li°
)

62 
vs
 = 
node
->vs;

63 
lù
 = 
node
->lip;

64 if–
	`ù_addªss_eq
(&(
lù
->
addr
),
ù
Ë&& (
vs
->
p‹t
 =p‹àË&& (vs->
¥Ÿocﬁ
 ==Örotocol))

66 if(
vs_lù
 !
NULL
)

67 *
vs_lù
 = 
lù
;

68  
vs
;

72  
NULL
;

73 
	}
}

81 
	$__vs_lù_add
(
v£rvî
 * 
vs
, 
loˇl_ù
 * 
lù
)

83 
idx
 = 
	`vs_hashkey
(&(
lù
->
addr
),
vs
->
p‹t
,vs->
¥Ÿocﬁ
);

84 
vs_lù_node
 * 
node
 = (vs_lù_nodê*)
	`MALLOC
((vs_lip_node));

86 if(
node
 =
NULL
)  0;

88 
	`li°_add
(&(
node
->
hash_li°
), &(
vs_hashèbÀ
[
idx
]));

89 
	`li°_add
(&(
node
->
√xt
),&(
vs
->
vs_lù_node
));

90 
node
->
vs
 = vs;

91 
node
->
lù
 =Üip;

94 
	}
}

96 
	$__vs_lù_dñ
(
vs_lù_node
 * 
node
)

98 
	`li°_dñ
(&(
node
->
hash_li°
));

99 
	`li°_dñ
(&(
node
->
√xt
));

100 
	`FREE
(
node
);

101 
	}
}

103 
	$__vs_add
(
v£rvî
 * 
vs
)

106 
i
;

109 
i
 = 0; i < 
vs
->
ù_num
; i++)

110 
	`__vs_lù_add
(
vs
,vs->
addr
[
i
]);

112 
	`li°_add
(&(
vs
->
li°
),&(
vs_li°
));

114 
	}
}

117 
	$__vs_dñ
(
v£rvî
 * 
vs
)

120 
i
;

122 
vs_lù_node
 * 
pos
;

123 
vs_lù_node
 * 
n
;

126 
	`li°_f‹_óch_íåy_ß„
(
pos
, 
n
, &(
vs
->
vs_lù_node
), 
√xt
)

128 
	`__vs_lù_dñ
(
pos
);

131 
	`li°_dñ
(&(
vs
->
li°
));

132 
	}
}

136 
v£rvî
 * 
	$v£rvî_¸óã
(
£rvî_poﬁ
 * 
p
, 
u16
 
p‹t
, 
u8
 
¥Ÿocﬁ
, u8 
is_fuŒ«t
)

138 
v£rvî
 * 
vs
 = 
NULL
;

140 
vs
 = (
v£rvî
 *)
	`MALLOC
((vserver));

141 if(
vs
 =
NULL
)  NULL;

143 
vs
->
poﬁ
 = 
p
;

144 
vs
->
p‹t
 =Öort;

145 
vs
->
¥Ÿocﬁ
 =Örotocol;

146 
vs
->
is_fuŒ«t
 = is_fullnat;

147 
vs
->
ù_num
 = 0;

149 
	`INIT_LIST_HEAD
(&(
vs
->
li°
));

150 
	`INIT_LIST_HEAD
(&(
vs
->
vs_lù_node
));

153 
	`__vs_add
(
vs
);

155  
vs
;

156 
	}
}

159 
	$v£rvî_‰ì
(
v£rvî
 * 
vs
)

161 if(
vs
)

163 
	`__vs_dñ
(
vs
);

164 
	`FREE
(
vs
);

166 
	}
}

168 
	$v£rvî_add_ù
(
v£rvî
 * 
vs
, 
loˇl_ù
 * 
lù
 )

170 
ªt
 = 0;

172 if(
vs
->
ù_num
 < 
VS_IP_NUM_MAX
 ){

173 
vs
->
addr
[vs->
ù_num
++] = 
lù
;

174 
ªt
 = 
	`__vs_lù_add
(
vs
, 
lù
);

177  
ªt
;

178 
	}
}

181 
£rvî
 * 
	$v£rvî_gë_£rvî
(
v£rvî
 * 
vs
)

183  
	`£rvî_poﬁ_gë_£rvî
(
vs
->
poﬁ
);

184 
	}
}

	@test/connection_size.c

1 
	~"c⁄√˘i⁄.h
"

2 
	~<°dio.h
>

4 
	$maö
()

6 
size
 = (
c⁄√˘i⁄
);

8 
	`¥ötf
("C⁄√˘i⁄ Sizê%d\n",
size
);

11 
	`¥ötf
("100W C⁄√˘i⁄Çìd %‡Mb\n", (
size
 * 1000000.0)/(1024*1024));

12 
	`¥ötf
("1000W C⁄√˘i⁄Çìd %‡Mb\n", (
size
 * 10000000.0)/(1024*1024));

15 
	}
}

	@test/lf_queue_size.c

1 
	~"../lf_queue.h
"

4 
	$maö
(
¨gc
, * 
¨gv
[])

6 
size
 = (
lf_queue
);

7 
tŸÆ
 = 0;

8 
≈roc
 = 0;

10 if(
¨gc
 !=2 )

12 
	`¥ötf
("./a.outÇproc\n");

17 
≈roc
 = 
	`©oi
(
¨gv
[1]);

18 
tŸÆ
 = 
size
 * 
≈roc
 *Çproc * 2;

20 
	`¥ötf
("sizê%d B 2K = 2048 \n",
size
);

21 
	`¥ötf
("TŸÆ sizê%d %‡KB %‡MB\n",
tŸÆ
,total*1.0/1024,Åotal*1.0/(1024*1024));

24 
	}
}

	@test/mem_pool_test.c

3 
	~<°dio.h
>

4 
	~"../mem_poﬁ.h
"

6 
	~"../mem_poﬁ.c
"

11 * 
	g¨øy
[10240];

14 
	$ã°_Æloc
(
mem_poﬁ
 * 
t
)

16 
i
;

17 * 
p
;

19 
i
 = 0; i < 10240; i++)

21 
p
 = 
	`mem_poﬁ_Æloc
(
t
);

22 
¨øy
[
i
] = 
p
;

23 ((* )
p
)[1] = 
i
;

25 
	}
}

29 
	$ã°_‰ì
(
mem_poﬁ
 * 
t
)

31 
i
;

33 
i
 = 0; i < 10240; i++)

35 
	`mem_poﬁ_‰ì
(
t
,
¨øy
[
i
]);

37 
	}
}

41 
	$maö
()

43 
mem_poﬁ
 * 
t
 = 
	`mem_poﬁ_¸óã
("test", 32);

45 
	`¥ötf
("sizê%d\n", 
t
->
size
);

47 
	`ã°_Æloc
(
t
);

48 
	`ã°_‰ì
(
t
);

49 
	`ã°_Æloc
(
t
);

50 
	`ã°_‰ì
(
t
);

51 
	`ã°_Æloc
(
t
);

52 
	`ã°_‰ì
(
t
);

53 
	`ã°_Æloc
(
t
);

54 
	`ã°_‰ì
(
t
);

58 
	}
}

	@test/packet_size.c

1 
	~<°dio.h
>

2 
	~"∑ckë.h
"

4 
	$maö
()

6 
tŸÆ
 = 1 <<30;

8 
∑ckë_size
 = (1024 *2);

10 
num
 = 
tŸÆ
/
∑ckë_size
;

13 
	`¥ötf
("sizeof(°ru˘ÖackëË%d\n",(
∑ckë
));

15 
	`¥ötf
("1GBÖackë buf„∏havê%‡WÖackë\n", 
num
*1.0/10000);

18 
	}
}

	@test/port_rang_size.c

2 
	~<°dio.h
>

4 
	$maö
()

6 
size
 = (1<<16) * 2 / (1024);

8 
	`¥ötf
("TCP/UDPÖ‹t†sizê%d KB\n", 
size
);

9 
	`¥ötf
("TCPánd UDPÖ‹t†sizê%d KB\n", 
size
 *2);

11 
	`¥ötf
("10 sñ‡IP wôh TCPánd UDPÖ‹t†sizê%‡MB\n", 10 * 
size
 * 2.0/1024);

13 
	`¥ötf
("100 sñ‡IP wôh TCPánd UDPÖ‹t†sizê%‡MB\n", 100 * 
size
 * 2.0/1024);

17 
	}
}

	@test/test_overflow.c

1 
	~"../timî.c
"

4 
	$maö
()

7 
a
,
b
;

9 
a
 = 
	`CLOCK
();

14 
	`¶ìp
(1);

17 
b
 = 
	`CLOCK
();

19 
	`¥ötf
("%lx\n",
b
);

20 if–
a
 > 
b
)

22 
	`¥ötf
("OvîÊow bef‹ê%lxÇow = %lx\n", 
a
,
b
);

28 
	}
}

	@test/timer_overflow.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
tŸÆ
 = 1UL << 33;

7 
mö
 = 
tŸÆ
*1.0 / 60;

8 
hour
 = 
mö
 / 60;

10 
day
 = 
hour
 / 24;

12 
m⁄th
 = 
day
 / 30;

14 
yór
 = 
m⁄th
 / 12;

16 
	`¥ötf
("y %‡m %‡day = %f\¿", 
yór
,
m⁄th
, 
day
);

19 
	}
}

	@tmp/bitmap.c

8 
	~<löux/moduÀ.h
>

9 
	~<löux/˘y≥.h
>

10 
	~<löux/î∫o.h
>

11 
	~<löux/bôm≠.h
>

12 
	~<löux/bô›s.h
>

13 
	~<asm/uac˚ss.h
>

41 
	$__bôm≠_em±y
(c⁄° *
bôm≠
, 
bôs
)

43 
k
, 
lim
 = 
bôs
/
BITS_PER_LONG
;

44 
k
 = 0; k < 
lim
; ++k)

45 i‡(
bôm≠
[
k
])

48 i‡(
bôs
 % 
BITS_PER_LONG
)

49 i‡(
bôm≠
[
k
] & 
	`BITMAP_LAST_WORD_MASK
(
bôs
))

53 
	}
}

54 
EXPORT_SYMBOL
(
__bôm≠_em±y
);

56 
	$__bôm≠_fuŒ
(c⁄° *
bôm≠
, 
bôs
)

58 
k
, 
lim
 = 
bôs
/
BITS_PER_LONG
;

59 
k
 = 0; k < 
lim
; ++k)

60 i‡(~
bôm≠
[
k
])

63 i‡(
bôs
 % 
BITS_PER_LONG
)

64 i‡(~
bôm≠
[
k
] & 
	`BITMAP_LAST_WORD_MASK
(
bôs
))

68 
	}
}

69 
EXPORT_SYMBOL
(
__bôm≠_fuŒ
);

71 
	$__bôm≠_equÆ
(c⁄° *
bôm≠1
,

72 c⁄° *
bôm≠2
, 
bôs
)

74 
k
, 
lim
 = 
bôs
/
BITS_PER_LONG
;

75 
k
 = 0; k < 
lim
; ++k)

76 i‡(
bôm≠1
[
k
] !
bôm≠2
[k])

79 i‡(
bôs
 % 
BITS_PER_LONG
)

80 i‡((
bôm≠1
[
k
] ^ 
bôm≠2
[k]Ë& 
	`BITMAP_LAST_WORD_MASK
(
bôs
))

84 
	}
}

85 
EXPORT_SYMBOL
(
__bôm≠_equÆ
);

87 
	$__bôm≠_com∂emít
(*
d°
, c⁄° *
§c
, 
bôs
)

89 
k
, 
lim
 = 
bôs
/
BITS_PER_LONG
;

90 
k
 = 0; k < 
lim
; ++k)

91 
d°
[
k
] = ~
§c
[k];

93 i‡(
bôs
 % 
BITS_PER_LONG
)

94 
d°
[
k
] = ~
§c
[k] & 
	`BITMAP_LAST_WORD_MASK
(
bôs
);

95 
	}
}

96 
EXPORT_SYMBOL
(
__bôm≠_com∂emít
);

109 
	$__bôm≠_shi·_right
(*
d°
,

110 c⁄° *
§c
, 
shi·
, 
bôs
)

112 
k
, 
lim
 = 
	`BITS_TO_LONGS
(
bôs
), 
À·
 = bô†% 
BITS_PER_LONG
;

113 
off
 = 
shi·
/
BITS_PER_LONG
, 
ªm
 = shift % BITS_PER_LONG;

114 
mask
 = (1UL << 
À·
) - 1;

115 
k
 = 0; 
off
 + k < 
lim
; ++k) {

116 
uµî
, 
lowî
;

122 i‡(!
ªm
 || 
off
 + 
k
 + 1 >
lim
)

123 
uµî
 = 0;

125 
uµî
 = 
§c
[
off
 + 
k
 + 1];

126 i‡(
off
 + 
k
 + 1 =
lim
 - 1 && 
À·
)

127 
uµî
 &
mask
;

129 
lowî
 = 
§c
[
off
 + 
k
];

130 i‡(
À·
 && 
off
 + 
k
 =
lim
 - 1)

131 
lowî
 &
mask
;

132 
d°
[
k
] = 
uµî
 << (
BITS_PER_LONG
 - 
ªm
Ë| 
lowî
 >>Ñem;

133 i‡(
À·
 && 
k
 =
lim
 - 1)

134 
d°
[
k
] &
mask
;

136 i‡(
off
)

137 
	`mem£t
(&
d°
[
lim
 - 
off
], 0, off*());

138 
	}
}

139 
EXPORT_SYMBOL
(
__bôm≠_shi·_right
);

154 
	$__bôm≠_shi·_À·
(*
d°
,

155 c⁄° *
§c
, 
shi·
, 
bôs
)

157 
k
, 
lim
 = 
	`BITS_TO_LONGS
(
bôs
), 
À·
 = bô†% 
BITS_PER_LONG
;

158 
off
 = 
shi·
/
BITS_PER_LONG
, 
ªm
 = shift % BITS_PER_LONG;

159 
k
 = 
lim
 - 
off
 - 1; k >= 0; --k) {

160 
uµî
, 
lowî
;

166 i‡(
ªm
 && 
k
 > 0)

167 
lowî
 = 
§c
[
k
 - 1];

169 
lowî
 = 0;

170 
uµî
 = 
§c
[
k
];

171 i‡(
À·
 && 
k
 =
lim
 - 1)

172 
uµî
 &(1UL << 
À·
) - 1;

173 
d°
[
k
 + 
off
] = 
lowî
 >> (
BITS_PER_LONG
 - 
ªm
Ë| 
uµî
 <<Ñem;

174 i‡(
À·
 && 
k
 + 
off
 =
lim
 - 1)

175 
d°
[
k
 + 
off
] &(1UL << 
À·
) - 1;

177 i‡(
off
)

178 
	`mem£t
(
d°
, 0, 
off
*());

179 
	}
}

180 
EXPORT_SYMBOL
(
__bôm≠_shi·_À·
);

182 
	$__bôm≠_™d
(*
d°
, c⁄° *
bôm≠1
,

183 c⁄° *
bôm≠2
, 
bôs
)

185 
k
;

186 
ƒ
 = 
	`BITS_TO_LONGS
(
bôs
);

187 
ªsu…
 = 0;

189 
k
 = 0; k < 
ƒ
; k++)

190 
ªsu…
 |(
d°
[
k
] = 
bôm≠1
[k] & 
bôm≠2
[k]);

191  
ªsu…
 != 0;

192 
	}
}

193 
EXPORT_SYMBOL
(
__bôm≠_™d
);

195 
	$__bôm≠_‹
(*
d°
, c⁄° *
bôm≠1
,

196 c⁄° *
bôm≠2
, 
bôs
)

198 
k
;

199 
ƒ
 = 
	`BITS_TO_LONGS
(
bôs
);

201 
k
 = 0; k < 
ƒ
; k++)

202 
d°
[
k
] = 
bôm≠1
[k] | 
bôm≠2
[k];

203 
	}
}

204 
EXPORT_SYMBOL
(
__bôm≠_‹
);

206 
	$__bôm≠_x‹
(*
d°
, c⁄° *
bôm≠1
,

207 c⁄° *
bôm≠2
, 
bôs
)

209 
k
;

210 
ƒ
 = 
	`BITS_TO_LONGS
(
bôs
);

212 
k
 = 0; k < 
ƒ
; k++)

213 
d°
[
k
] = 
bôm≠1
[k] ^ 
bôm≠2
[k];

214 
	}
}

215 
EXPORT_SYMBOL
(
__bôm≠_x‹
);

217 
	$__bôm≠_™dnŸ
(*
d°
, c⁄° *
bôm≠1
,

218 c⁄° *
bôm≠2
, 
bôs
)

220 
k
;

221 
ƒ
 = 
	`BITS_TO_LONGS
(
bôs
);

222 
ªsu…
 = 0;

224 
k
 = 0; k < 
ƒ
; k++)

225 
ªsu…
 |(
d°
[
k
] = 
bôm≠1
[k] & ~
bôm≠2
[k]);

226  
ªsu…
 != 0;

227 
	}
}

228 
EXPORT_SYMBOL
(
__bôm≠_™dnŸ
);

230 
	$__bôm≠_öãr£˘s
(c⁄° *
bôm≠1
,

231 c⁄° *
bôm≠2
, 
bôs
)

233 
k
, 
lim
 = 
bôs
/
BITS_PER_LONG
;

234 
k
 = 0; k < 
lim
; ++k)

235 i‡(
bôm≠1
[
k
] & 
bôm≠2
[k])

238 i‡(
bôs
 % 
BITS_PER_LONG
)

239 i‡((
bôm≠1
[
k
] & 
bôm≠2
[k]Ë& 
	`BITMAP_LAST_WORD_MASK
(
bôs
))

242 
	}
}

243 
EXPORT_SYMBOL
(
__bôm≠_öãr£˘s
);

245 
	$__bôm≠_sub£t
(c⁄° *
bôm≠1
,

246 c⁄° *
bôm≠2
, 
bôs
)

248 
k
, 
lim
 = 
bôs
/
BITS_PER_LONG
;

249 
k
 = 0; k < 
lim
; ++k)

250 i‡(
bôm≠1
[
k
] & ~
bôm≠2
[k])

253 i‡(
bôs
 % 
BITS_PER_LONG
)

254 i‡((
bôm≠1
[
k
] & ~
bôm≠2
[k]Ë& 
	`BITMAP_LAST_WORD_MASK
(
bôs
))

257 
	}
}

258 
EXPORT_SYMBOL
(
__bôm≠_sub£t
);

260 
	$__bôm≠_weight
(c⁄° *
bôm≠
, 
bôs
)

262 
k
, 
w
 = 0, 
lim
 = 
bôs
/
BITS_PER_LONG
;

264 
k
 = 0; k < 
lim
; k++)

265 
w
 +
	`hweight_l⁄g
(
bôm≠
[
k
]);

267 i‡(
bôs
 % 
BITS_PER_LONG
)

268 
w
 +
	`hweight_l⁄g
(
bôm≠
[
k
] & 
	`BITMAP_LAST_WORD_MASK
(
bôs
));

270  
w
;

271 
	}
}

272 
EXPORT_SYMBOL
(
__bôm≠_weight
);

274 
	#BITMAP_FIRST_WORD_MASK
(
°¨t
Ë(~0UL << ((°¨tË% 
BITS_PER_LONG
))

	)

276 
	$bôm≠_£t
(*
m≠
, 
°¨t
, 
ƒ
)

278 *
p
 = 
m≠
 + 
	`BIT_WORD
(
°¨t
);

279 c⁄° 
size
 = 
°¨t
 + 
ƒ
;

280 
bôs_to_£t
 = 
BITS_PER_LONG
 - (
°¨t
 % BITS_PER_LONG);

281 
mask_to_£t
 = 
	`BITMAP_FIRST_WORD_MASK
(
°¨t
);

283 
ƒ
 - 
bôs_to_£t
 >= 0) {

284 *
p
 |
mask_to_£t
;

285 
ƒ
 -
bôs_to_£t
;

286 
bôs_to_£t
 = 
BITS_PER_LONG
;

287 
mask_to_£t
 = ~0UL;

288 
p
++;

290 i‡(
ƒ
) {

291 
mask_to_£t
 &
	`BITMAP_LAST_WORD_MASK
(
size
);

292 *
p
 |
mask_to_£t
;

294 
	}
}

295 
EXPORT_SYMBOL
(
bôm≠_£t
);

297 
	$bôm≠_˛ór
(*
m≠
, 
°¨t
, 
ƒ
)

299 *
p
 = 
m≠
 + 
	`BIT_WORD
(
°¨t
);

300 c⁄° 
size
 = 
°¨t
 + 
ƒ
;

301 
bôs_to_˛ór
 = 
BITS_PER_LONG
 - (
°¨t
 % BITS_PER_LONG);

302 
mask_to_˛ór
 = 
	`BITMAP_FIRST_WORD_MASK
(
°¨t
);

304 
ƒ
 - 
bôs_to_˛ór
 >= 0) {

305 *
p
 &~
mask_to_˛ór
;

306 
ƒ
 -
bôs_to_˛ór
;

307 
bôs_to_˛ór
 = 
BITS_PER_LONG
;

308 
mask_to_˛ór
 = ~0UL;

309 
p
++;

311 i‡(
ƒ
) {

312 
mask_to_˛ór
 &
	`BITMAP_LAST_WORD_MASK
(
size
);

313 *
p
 &~
mask_to_˛ór
;

315 
	}
}

316 
EXPORT_SYMBOL
(
bôm≠_˛ór
);

330 
	$bôm≠_föd_√xt_zîo_¨ó
(*
m≠
,

331 
size
,

332 
°¨t
,

333 
ƒ
,

334 
Æign_mask
)

336 
ödex
, 
íd
, 
i
;

337 
agaö
:

338 
ödex
 = 
	`föd_√xt_zîo_bô
(
m≠
, 
size
, 
°¨t
);

341 
ödex
 = 
	`__ALIGN_MASK
(ödex, 
Æign_mask
);

343 
íd
 = 
ödex
 + 
ƒ
;

344 i‡(
íd
 > 
size
)

345  
íd
;

346 
i
 = 
	`föd_√xt_bô
(
m≠
, 
íd
, 
ödex
);

347 i‡(
i
 < 
íd
) {

348 
°¨t
 = 
i
 + 1;

349 
agaö
;

351  
ödex
;

352 
	}
}

353 
EXPORT_SYMBOL
(
bôm≠_föd_√xt_zîo_¨ó
);

360 
	#CHUNKSZ
 32

	)

361 
	#nbôs_to_hﬁd_vÆue
(
vÆ
Ë
	`Ês
(vÆ)

	)

362 
	#unhex
(
c
Ë(
	`isdigô
(cË? (¯- '0'Ë: (
	`touµî
(cË- 'A' + 10))

	)

363 
	#BASEDEC
 10

	)

375 
	$bôm≠_s˙¥ötf
(*
buf
, 
buÊí
,

376 c⁄° *
maskp
, 
nmaskbôs
)

378 
i
, 
w‹d
, 
bô
, 
Àn
 = 0;

379 
vÆ
;

380 c⁄° *
£p
 = "";

381 
chunksz
;

382 
u32
 
chunkmask
;

384 
chunksz
 = 
nmaskbôs
 & (
CHUNKSZ
 - 1);

385 i‡(
chunksz
 == 0)

386 
chunksz
 = 
CHUNKSZ
;

388 
i
 = 
	`ALIGN
(
nmaskbôs
, 
CHUNKSZ
) - CHUNKSZ;

389 ; 
i
 >0; i -
CHUNKSZ
) {

390 
chunkmask
 = ((1ULL << 
chunksz
) - 1);

391 
w‹d
 = 
i
 / 
BITS_PER_LONG
;

392 
bô
 = 
i
 % 
BITS_PER_LONG
;

393 
vÆ
 = (
maskp
[
w‹d
] >> 
bô
Ë& 
chunkmask
;

394 
Àn
 +
	`s˙¥ötf
(
buf
+Àn, 
buÊí
-Àn, "%s%0*lx", 
£p
,

395 (
chunksz
+3)/4, 
vÆ
);

396 
chunksz
 = 
CHUNKSZ
;

397 
£p
 = ",";

399  
Àn
;

400 
	}
}

401 
EXPORT_SYMBOL
(
bôm≠_s˙¥ötf
);

419 
	$__bôm≠_∑r£
(c⁄° *
buf
, 
buÊí
,

420 
is_u£r
, *
maskp
,

421 
nmaskbôs
)

423 
c
, 
ﬁd_c
, 
tŸÆdigôs
, 
ndigôs
, 
nchunks
, 
nbôs
;

424 
u32
 
chunk
;

425 c⁄° 
__u£r
 *
ubuf
 = 
buf
;

427 
	`bôm≠_zîo
(
maskp
, 
nmaskbôs
);

429 
nchunks
 = 
nbôs
 = 
tŸÆdigôs
 = 
c
 = 0;

431 
chunk
 = 
ndigôs
 = 0;

434 
buÊí
) {

435 
ﬁd_c
 = 
c
;

436 i‡(
is_u£r
) {

437 i‡(
	`__gë_u£r
(
c
, 
ubuf
++))

438  -
EFAULT
;

441 
c
 = *
buf
++;

442 
buÊí
--;

443 i‡(
	`is•a˚
(
c
))

451 i‡(
tŸÆdigôs
 && 
c
 && 
	`is•a˚
(
ﬁd_c
))

452  -
EINVAL
;

455 i‡(
c
 == '\0' || c == ',')

458 i‡(!
	`isxdigô
(
c
))

459  -
EINVAL
;

466 i‡(
chunk
 & ~((1UL << (
CHUNKSZ
 - 4)) - 1))

467  -
EOVERFLOW
;

469 
chunk
 = (chunk << 4Ë| 
	`unhex
(
c
);

470 
ndigôs
++; 
tŸÆdigôs
++;

472 i‡(
ndigôs
 == 0)

473  -
EINVAL
;

474 i‡(
nchunks
 =0 && 
chunk
 == 0)

477 
	`__bôm≠_shi·_À·
(
maskp
, maskp, 
CHUNKSZ
, 
nmaskbôs
);

478 *
maskp
 |
chunk
;

479 
nchunks
++;

480 
nbôs
 +(
nchunks
 =1Ë? 
	`nbôs_to_hﬁd_vÆue
(
chunk
Ë: 
CHUNKSZ
;

481 i‡(
nbôs
 > 
nmaskbôs
)

482  -
EOVERFLOW
;

483 } 
buÊí
 && 
c
 == ',');

486 
	}
}

487 
EXPORT_SYMBOL
(
__bôm≠_∑r£
);

504 
	$bôm≠_∑r£_u£r
(c⁄° 
__u£r
 *
ubuf
,

505 
uÀn
, *
maskp
,

506 
nmaskbôs
)

508 i‡(!
	`ac˚ss_ok
(
VERIFY_READ
, 
ubuf
, 
uÀn
))

509  -
EFAULT
;

510  
	`__bôm≠_∑r£
((c⁄° *)
ubuf
, 
uÀn
, 1, 
maskp
, 
nmaskbôs
);

511 
	}
}

512 
EXPORT_SYMBOL
(
bôm≠_∑r£_u£r
);

522 
ölöe
 
	$bs˙l_emô
(*
buf
, 
buÊí
, 
rbŸ
, 
π›
, 
Àn
)

524 i‡(
Àn
 > 0)

525 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
buÊí
 -Üen, ",");

526 i‡(
rbŸ
 =
π›
)

527 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
buÊí
 -Üí, "%d", 
rbŸ
);

529 
Àn
 +
	`s˙¥ötf
(
buf
 +Üí, 
buÊí
 -Üí, "%d-%d", 
rbŸ
, 
π›
);

530  
Àn
;

531 
	}
}

550 
	$bôm≠_s˙li°¥ötf
(*
buf
, 
buÊí
,

551 c⁄° *
maskp
, 
nmaskbôs
)

553 
Àn
 = 0;

555 
cur
, 
rbŸ
, 
π›
;

557 i‡(
buÊí
 == 0)

559 
buf
[0] = 0;

561 
rbŸ
 = 
cur
 = 
	`föd_fú°_bô
(
maskp
, 
nmaskbôs
);

562 
cur
 < 
nmaskbôs
) {

563 
π›
 = 
cur
;

564 
cur
 = 
	`föd_√xt_bô
(
maskp
, 
nmaskbôs
, cur+1);

565 i‡(
cur
 >
nmaskbôs
 || cu∏> 
π›
 + 1) {

566 
Àn
 = 
	`bs˙l_emô
(
buf
, 
buÊí
, 
rbŸ
, 
π›
,Üen);

567 
rbŸ
 = 
cur
;

570  
Àn
;

571 
	}
}

572 
EXPORT_SYMBOL
(
bôm≠_s˙li°¥ötf
);

591 
	$bôm≠_∑r£li°
(c⁄° *
bp
, *
maskp
, 
nmaskbôs
)

593 
a
, 
b
;

595 
	`bôm≠_zîo
(
maskp
, 
nmaskbôs
);

597 i‡(!
	`isdigô
(*
bp
))

598  -
EINVAL
;

599 
b
 = 
a
 = 
	`sim∂e_°πoul
(
bp
, (**)&bp, 
BASEDEC
);

600 i‡(*
bp
 == '-') {

601 
bp
++;

602 i‡(!
	`isdigô
(*
bp
))

603  -
EINVAL
;

604 
b
 = 
	`sim∂e_°πoul
(
bp
, (**)&bp, 
BASEDEC
);

606 i‡(!(
a
 <
b
))

607  -
EINVAL
;

608 i‡(
b
 >
nmaskbôs
)

609  -
ERANGE
;

610 
a
 <
b
) {

611 
	`£t_bô
(
a
, 
maskp
);

612 
a
++;

614 i‡(*
bp
 == ',')

615 
bp
++;

616 } *
bp
 != '\0' && *bp != '\n');

618 
	}
}

619 
EXPORT_SYMBOL
(
bôm≠_∑r£li°
);

639 
	$bôm≠_pos_to_‹d
(c⁄° *
buf
, 
pos
, 
bôs
)

641 
i
, 
‹d
;

643 i‡(
pos
 < 0 ||Öo†>
bôs
 || !
	`ã°_bô
’os, 
buf
))

646 
i
 = 
	`föd_fú°_bô
(
buf
, 
bôs
);

647 
‹d
 = 0;

648 
i
 < 
pos
) {

649 
i
 = 
	`föd_√xt_bô
(
buf
, 
bôs
, i + 1);

650 
‹d
++;

652 
	`BUG_ON
(
i
 !
pos
);

654  
‹d
;

655 
	}
}

675 
	$bôm≠_‹d_to_pos
(c⁄° *
buf
, 
‹d
, 
bôs
)

677 
pos
 = 0;

679 i‡(
‹d
 >0 && ord < 
bôs
) {

680 
i
;

682 
i
 = 
	`föd_fú°_bô
(
buf
, 
bôs
);

683 
i
 < 
bôs
 && 
‹d
 > 0;

684 
i
 = 
	`föd_√xt_bô
(
buf
, 
bôs
, i + 1))

685 
‹d
--;

686 i‡(
i
 < 
bôs
 && 
‹d
 == 0)

687 
pos
 = 
i
;

690  
pos
;

691 
	}
}

725 
	$bôm≠_ªm≠
(*
d°
, c⁄° *
§c
,

726 c⁄° *
ﬁd
, c⁄° *
√w
,

727 
bôs
)

729 
ﬁdbô
, 
w
;

731 i‡(
d°
 =
§c
)

733 
	`bôm≠_zîo
(
d°
, 
bôs
);

735 
w
 = 
	`bôm≠_weight
(
√w
, 
bôs
);

736 
	`f‹_óch_£t_bô
(
ﬁdbô
, 
§c
, 
bôs
) {

737 
n
 = 
	`bôm≠_pos_to_‹d
(
ﬁd
, 
ﬁdbô
, 
bôs
);

739 i‡(
n
 < 0 || 
w
 == 0)

740 
	`£t_bô
(
ﬁdbô
, 
d°
);

742 
	`£t_bô
(
	`bôm≠_‹d_to_pos
(
√w
, 
n
 % 
w
, 
bôs
), 
d°
);

744 
	}
}

745 
EXPORT_SYMBOL
(
bôm≠_ªm≠
);

773 
	$bôm≠_bôªm≠
(
ﬁdbô
, c⁄° *
ﬁd
,

774 c⁄° *
√w
, 
bôs
)

776 
w
 = 
	`bôm≠_weight
(
√w
, 
bôs
);

777 
n
 = 
	`bôm≠_pos_to_‹d
(
ﬁd
, 
ﬁdbô
, 
bôs
);

778 i‡(
n
 < 0 || 
w
 == 0)

779  
ﬁdbô
;

781  
	`bôm≠_‹d_to_pos
(
√w
, 
n
 % 
w
, 
bôs
);

782 
	}
}

783 
EXPORT_SYMBOL
(
bôm≠_bôªm≠
);

885 
	$bôm≠_⁄to
(*
d°
, c⁄° *
‹ig
,

886 c⁄° *
ªlm≠
, 
bôs
)

888 
n
, 
m
;

890 i‡(
d°
 =
‹ig
)

892 
	`bôm≠_zîo
(
d°
, 
bôs
);

904 
m
 = 0;

905 
	`f‹_óch_£t_bô
(
n
, 
ªlm≠
, 
bôs
) {

907 i‡(
	`ã°_bô
(
m
, 
‹ig
))

908 
	`£t_bô
(
n
, 
d°
);

909 
m
++;

911 
	}
}

912 
EXPORT_SYMBOL
(
bôm≠_⁄to
);

925 
	$bôm≠_fﬁd
(*
d°
, c⁄° *
‹ig
,

926 
sz
, 
bôs
)

928 
ﬁdbô
;

930 i‡(
d°
 =
‹ig
)

932 
	`bôm≠_zîo
(
d°
, 
bôs
);

934 
	`f‹_óch_£t_bô
(
ﬁdbô
, 
‹ig
, 
bôs
)

935 
	`£t_bô
(
ﬁdbô
 % 
sz
, 
d°
);

936 
	}
}

937 
EXPORT_SYMBOL
(
bôm≠_fﬁd
);

958 
	mREG_OP_ISFREE
,

959 
	mREG_OP_ALLOC
,

960 
	mREG_OP_RELEASE
,

963 
	$__ªg_›
(*
bôm≠
, 
pos
, 
‹dî
, 
ªg_›
)

965 
nbôs_ªg
;

966 
ödex
;

967 
off£t
;

968 
∆⁄gs_ªg
;

969 
nbôsöl⁄g
;

970 
mask
;

971 
i
;

972 
ªt
 = 0;

978 
nbôs_ªg
 = 1 << 
‹dî
;

979 
ödex
 = 
pos
 / 
BITS_PER_LONG
;

980 
off£t
 = 
pos
 - (
ödex
 * 
BITS_PER_LONG
);

981 
∆⁄gs_ªg
 = 
	`BITS_TO_LONGS
(
nbôs_ªg
);

982 
nbôsöl⁄g
 = 
	`mö
(
nbôs_ªg
, 
BITS_PER_LONG
);

988 
mask
 = (1UL << (
nbôsöl⁄g
 - 1));

989 
mask
 += mask - 1;

990 
mask
 <<
off£t
;

992 
ªg_›
) {

993 
REG_OP_ISFREE
:

994 
i
 = 0; i < 
∆⁄gs_ªg
; i++) {

995 i‡(
bôm≠
[
ödex
 + 
i
] & 
mask
)

996 
d⁄e
;

998 
ªt
 = 1;

1001 
REG_OP_ALLOC
:

1002 
i
 = 0; i < 
∆⁄gs_ªg
; i++)

1003 
bôm≠
[
ödex
 + 
i
] |
mask
;

1006 
REG_OP_RELEASE
:

1007 
i
 = 0; i < 
∆⁄gs_ªg
; i++)

1008 
bôm≠
[
ödex
 + 
i
] &~
mask
;

1011 
d⁄e
:

1012  
ªt
;

1013 
	}
}

1029 
	$bôm≠_föd_‰ì_ªgi⁄
(*
bôm≠
, 
bôs
, 
‹dî
)

1031 
pos
, 
íd
;

1033 
pos
 = 0 ; (
íd
 =Öo†+ (1 << 
‹dî
)Ë<
bôs
;Öos =Énd) {

1034 i‡(!
	`__ªg_›
(
bôm≠
, 
pos
, 
‹dî
, 
REG_OP_ISFREE
))

1036 
	`__ªg_›
(
bôm≠
, 
pos
, 
‹dî
, 
REG_OP_ALLOC
);

1037  
pos
;

1039  -
ENOMEM
;

1040 
	}
}

1041 
EXPORT_SYMBOL
(
bôm≠_föd_‰ì_ªgi⁄
);

1054 
	$bôm≠_ªÀa£_ªgi⁄
(*
bôm≠
, 
pos
, 
‹dî
)

1056 
	`__ªg_›
(
bôm≠
, 
pos
, 
‹dî
, 
REG_OP_RELEASE
);

1057 
	}
}

1058 
EXPORT_SYMBOL
(
bôm≠_ªÀa£_ªgi⁄
);

1071 
	$bôm≠_Æloˇã_ªgi⁄
(*
bôm≠
, 
pos
, 
‹dî
)

1073 i‡(!
	`__ªg_›
(
bôm≠
, 
pos
, 
‹dî
, 
REG_OP_ISFREE
))

1074  -
EBUSY
;

1075 
	`__ªg_›
(
bôm≠
, 
pos
, 
‹dî
, 
REG_OP_ALLOC
);

1077 
	}
}

1078 
EXPORT_SYMBOL
(
bôm≠_Æloˇã_ªgi⁄
);

1088 
	$bôm≠_c›y_À
(*
d°
, c⁄° *
§c
, 
nbôs
)

1090 *
d
 = 
d°
;

1091 
i
;

1093 
i
 = 0; i < 
nbôs
/
BITS_PER_LONG
; i++) {

1094 i‡(
BITS_PER_LONG
 == 64)

1095 
d
[
i
] = 
	`˝u_to_À64
(
§c
[i]);

1097 
d
[
i
] = 
	`˝u_to_À32
(
§c
[i]);

1099 
	}
}

1100 
EXPORT_SYMBOL
(
bôm≠_c›y_À
);

	@tmp/bitmap.h

1 #i‚de‡
__LINUX_BITMAP_H


2 
	#__LINUX_BITMAP_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	~<löux/ty≥s.h
>

7 
	~<löux/bô›s.h
>

8 
	~<löux/°rög.h
>

9 
	~<löux/kî√l.h
>

90 
__bôm≠_em±y
(c⁄° *
bôm≠
, 
bôs
);

91 
__bôm≠_fuŒ
(c⁄° *
bôm≠
, 
bôs
);

92 
__bôm≠_equÆ
(c⁄° *
bôm≠1
,

93 c⁄° *
bôm≠2
, 
bôs
);

94 
__bôm≠_com∂emít
(*
d°
, c⁄° *
§c
,

95 
bôs
);

96 
__bôm≠_shi·_right
(*
d°
,

97 c⁄° *
§c
, 
shi·
, 
bôs
);

98 
__bôm≠_shi·_À·
(*
d°
,

99 c⁄° *
§c
, 
shi·
, 
bôs
);

100 
__bôm≠_™d
(*
d°
, c⁄° *
bôm≠1
,

101 c⁄° *
bôm≠2
, 
bôs
);

102 
__bôm≠_‹
(*
d°
, c⁄° *
bôm≠1
,

103 c⁄° *
bôm≠2
, 
bôs
);

104 
__bôm≠_x‹
(*
d°
, c⁄° *
bôm≠1
,

105 c⁄° *
bôm≠2
, 
bôs
);

106 
__bôm≠_™dnŸ
(*
d°
, c⁄° *
bôm≠1
,

107 c⁄° *
bôm≠2
, 
bôs
);

108 
__bôm≠_öãr£˘s
(c⁄° *
bôm≠1
,

109 c⁄° *
bôm≠2
, 
bôs
);

110 
__bôm≠_sub£t
(c⁄° *
bôm≠1
,

111 c⁄° *
bôm≠2
, 
bôs
);

112 
__bôm≠_weight
(c⁄° *
bôm≠
, 
bôs
);

114 
bôm≠_£t
(*
m≠
, 
i
, 
Àn
);

115 
bôm≠_˛ór
(*
m≠
, 
°¨t
, 
ƒ
);

116 
bôm≠_föd_√xt_zîo_¨ó
(*
m≠
,

117 
size
,

118 
°¨t
,

119 
ƒ
,

120 
Æign_mask
);

122 
bôm≠_s˙¥ötf
(*
buf
, 
Àn
,

123 c⁄° *
§c
, 
nbôs
);

124 
__bôm≠_∑r£
(c⁄° *
buf
, 
buÊí
, 
is_u£r
,

125 *
d°
, 
nbôs
);

126 
bôm≠_∑r£_u£r
(c⁄° 
__u£r
 *
ubuf
, 
uÀn
,

127 *
d°
, 
nbôs
);

128 
bôm≠_s˙li°¥ötf
(*
buf
, 
Àn
,

129 c⁄° *
§c
, 
nbôs
);

130 
bôm≠_∑r£li°
(c⁄° *
buf
, *
maskp
,

131 
nmaskbôs
);

132 
bôm≠_ªm≠
(*
d°
, c⁄° *
§c
,

133 c⁄° *
ﬁd
, c⁄° *
√w
, 
bôs
);

134 
bôm≠_bôªm≠
(
ﬁdbô
,

135 c⁄° *
ﬁd
, c⁄° *
√w
, 
bôs
);

136 
bôm≠_⁄to
(*
d°
, c⁄° *
‹ig
,

137 c⁄° *
ªlm≠
, 
bôs
);

138 
bôm≠_fﬁd
(*
d°
, c⁄° *
‹ig
,

139 
sz
, 
bôs
);

140 
bôm≠_föd_‰ì_ªgi⁄
(*
bôm≠
, 
bôs
, 
‹dî
);

141 
bôm≠_ªÀa£_ªgi⁄
(*
bôm≠
, 
pos
, 
‹dî
);

142 
bôm≠_Æloˇã_ªgi⁄
(*
bôm≠
, 
pos
, 
‹dî
);

143 
bôm≠_c›y_À
(*
d°
, c⁄° *
§c
, 
nbôs
);

145 
	#BITMAP_LAST_WORD_MASK
(
nbôs
) \

147 ((
nbôs
Ë% 
BITS_PER_LONG
) ? \

148 (1UL<<((
nbôs
Ë% 
BITS_PER_LONG
))-1 : ~0UL \

149 )

	)

151 
	#smÆl_c⁄°_nbôs
(
nbôs
) \

152 (
	`__buûtö_c⁄°™t_p
(
nbôs
Ë&& (nbôsË<
BITS_PER_LONG
)

	)

154 
ölöe
 
	$bôm≠_zîo
(*
d°
, 
nbôs
)

156 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

157 *
d°
 = 0UL;

159 
Àn
 = 
	`BITS_TO_LONGS
(
nbôs
) * ();

160 
	`mem£t
(
d°
, 0, 
Àn
);

162 
	}
}

164 
ölöe
 
	$bôm≠_fûl
(*
d°
, 
nbôs
)

166 
size_t
 
∆⁄gs
 = 
	`BITS_TO_LONGS
(
nbôs
);

167 i‡(!
	`smÆl_c⁄°_nbôs
(
nbôs
)) {

168 
Àn
 = (
∆⁄gs
 - 1) * ();

169 
	`mem£t
(
d°
, 0xff, 
Àn
);

171 
d°
[
∆⁄gs
 - 1] = 
	`BITMAP_LAST_WORD_MASK
(
nbôs
);

172 
	}
}

174 
ölöe
 
	$bôm≠_c›y
(*
d°
, c⁄° *
§c
,

175 
nbôs
)

177 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

178 *
d°
 = *
§c
;

180 
Àn
 = 
	`BITS_TO_LONGS
(
nbôs
) * ();

181 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

183 
	}
}

185 
ölöe
 
	$bôm≠_™d
(*
d°
, c⁄° *
§c1
,

186 c⁄° *
§c2
, 
nbôs
)

188 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

189  (*
d°
 = *
§c1
 & *
§c2
) != 0;

190  
	`__bôm≠_™d
(
d°
, 
§c1
, 
§c2
, 
nbôs
);

191 
	}
}

193 
ölöe
 
	$bôm≠_‹
(*
d°
, c⁄° *
§c1
,

194 c⁄° *
§c2
, 
nbôs
)

196 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

197 *
d°
 = *
§c1
 | *
§c2
;

199 
	`__bôm≠_‹
(
d°
, 
§c1
, 
§c2
, 
nbôs
);

200 
	}
}

202 
ölöe
 
	$bôm≠_x‹
(*
d°
, c⁄° *
§c1
,

203 c⁄° *
§c2
, 
nbôs
)

205 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

206 *
d°
 = *
§c1
 ^ *
§c2
;

208 
	`__bôm≠_x‹
(
d°
, 
§c1
, 
§c2
, 
nbôs
);

209 
	}
}

211 
ölöe
 
	$bôm≠_™dnŸ
(*
d°
, c⁄° *
§c1
,

212 c⁄° *
§c2
, 
nbôs
)

214 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

215  (*
d°
 = *
§c1
 & ~(*
§c2
)) != 0;

216  
	`__bôm≠_™dnŸ
(
d°
, 
§c1
, 
§c2
, 
nbôs
);

217 
	}
}

219 
ölöe
 
	$bôm≠_com∂emít
(*
d°
, c⁄° *
§c
,

220 
nbôs
)

222 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

223 *
d°
 = ~(*
§c
Ë& 
	`BITMAP_LAST_WORD_MASK
(
nbôs
);

225 
	`__bôm≠_com∂emít
(
d°
, 
§c
, 
nbôs
);

226 
	}
}

228 
ölöe
 
	$bôm≠_equÆ
(c⁄° *
§c1
,

229 c⁄° *
§c2
, 
nbôs
)

231 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

232  ! ((*
§c1
 ^ *
§c2
Ë& 
	`BITMAP_LAST_WORD_MASK
(
nbôs
));

234  
	`__bôm≠_equÆ
(
§c1
, 
§c2
, 
nbôs
);

235 
	}
}

237 
ölöe
 
	$bôm≠_öãr£˘s
(c⁄° *
§c1
,

238 c⁄° *
§c2
, 
nbôs
)

240 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

241  ((*
§c1
 & *
§c2
Ë& 
	`BITMAP_LAST_WORD_MASK
(
nbôs
)) != 0;

243  
	`__bôm≠_öãr£˘s
(
§c1
, 
§c2
, 
nbôs
);

244 
	}
}

246 
ölöe
 
	$bôm≠_sub£t
(c⁄° *
§c1
,

247 c⁄° *
§c2
, 
nbôs
)

249 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

250  ! ((*
§c1
 & ~(*
§c2
)Ë& 
	`BITMAP_LAST_WORD_MASK
(
nbôs
));

252  
	`__bôm≠_sub£t
(
§c1
, 
§c2
, 
nbôs
);

253 
	}
}

255 
ölöe
 
	$bôm≠_em±y
(c⁄° *
§c
, 
nbôs
)

257 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

258  ! (*
§c
 & 
	`BITMAP_LAST_WORD_MASK
(
nbôs
));

260  
	`__bôm≠_em±y
(
§c
, 
nbôs
);

261 
	}
}

263 
ölöe
 
	$bôm≠_fuŒ
(c⁄° *
§c
, 
nbôs
)

265 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

266  ! (~(*
§c
Ë& 
	`BITMAP_LAST_WORD_MASK
(
nbôs
));

268  
	`__bôm≠_fuŒ
(
§c
, 
nbôs
);

269 
	}
}

271 
ölöe
 
	$bôm≠_weight
(c⁄° *
§c
, 
nbôs
)

273 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

274  
	`hweight_l⁄g
(*
§c
 & 
	`BITMAP_LAST_WORD_MASK
(
nbôs
));

275  
	`__bôm≠_weight
(
§c
, 
nbôs
);

276 
	}
}

278 
ölöe
 
	$bôm≠_shi·_right
(*
d°
,

279 c⁄° *
§c
, 
n
, 
nbôs
)

281 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

282 *
d°
 = *
§c
 >> 
n
;

284 
	`__bôm≠_shi·_right
(
d°
, 
§c
, 
n
, 
nbôs
);

285 
	}
}

287 
ölöe
 
	$bôm≠_shi·_À·
(*
d°
,

288 c⁄° *
§c
, 
n
, 
nbôs
)

290 i‡(
	`smÆl_c⁄°_nbôs
(
nbôs
))

291 *
d°
 = (*
§c
 << 
n
Ë& 
	`BITMAP_LAST_WORD_MASK
(
nbôs
);

293 
	`__bôm≠_shi·_À·
(
d°
, 
§c
, 
n
, 
nbôs
);

294 
	}
}

296 
ölöe
 
	$bôm≠_∑r£
(c⁄° *
buf
, 
buÊí
,

297 *
maskp
, 
nmaskbôs
)

299  
	`__bôm≠_∑r£
(
buf
, 
buÊí
, 0, 
maskp
, 
nmaskbôs
);

300 
	}
}

	@tmp/bitops.h

1 #i‚de‡
_LINUX_BITOPS_H


2 
	#_LINUX_BITOPS_H


	)

3 
	~<asm/ty≥s.h
>

5 #ifdef 
__KERNEL__


6 
	#BIT
(
ƒ
Ë(1UL << (ƒ))

	)

7 
	#BIT_MASK
(
ƒ
Ë(1UL << (“rË% 
BITS_PER_LONG
))

	)

8 
	#BIT_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

9 
	#BITS_PER_BYTE
 8

	)

10 
	#BITS_TO_LONGS
(
ƒ
Ë
	`DIV_ROUND_UP
“r, 
BITS_PER_BYTE
 * ())

	)

13 
__sw_hweight8
(
w
);

14 
__sw_hweight16
(
w
);

15 
__sw_hweight32
(
w
);

16 
__sw_hweight64
(
__u64
 
w
);

22 
	~<asm/bô›s.h
>

24 
	#f‹_óch_£t_bô
(
bô
, 
addr
, 
size
) \

25 (
bô
Ë
	`föd_fú°_bô
((
addr
), (
size
)); \

26 (
bô
Ë< (
size
); \

27 (
bô
Ë
	`föd_√xt_bô
((
addr
), (
size
), (bôË+ 1))

	)

29 
__ölöe__
 
	$gë_bômask_‹dî
(
cou¡
)

31 
‹dî
;

33 
‹dî
 = 
	`Ês
(
cou¡
);

34  
‹dî
;

35 
	}
}

37 
__ölöe__
 
	$gë_cou¡_‹dî
(
cou¡
)

39 
‹dî
;

41 
‹dî
 = 
	`Ês
(
cou¡
) - 1;

42 i‡(
cou¡
 & (count - 1))

43 
‹dî
++;

44  
‹dî
;

45 
	}
}

47 
ölöe
 
	$hweight_l⁄g
(
w
)

49  (
w
Ë=4 ? 
	`hweight32
(wË: 
	`hweight64
(w);

50 
	}
}

57 
ölöe
 
__u32
 
	$rﬁ32
(
__u32
 
w‹d
, 
shi·
)

59  (
w‹d
 << 
shi·
) | (word >> (32 - shift));

60 
	}
}

67 
ölöe
 
__u32
 
	$r‹32
(
__u32
 
w‹d
, 
shi·
)

69  (
w‹d
 >> 
shi·
) | (word << (32 - shift));

70 
	}
}

77 
ölöe
 
__u16
 
	$rﬁ16
(
__u16
 
w‹d
, 
shi·
)

79  (
w‹d
 << 
shi·
) | (word >> (16 - shift));

80 
	}
}

87 
ölöe
 
__u16
 
	$r‹16
(
__u16
 
w‹d
, 
shi·
)

89  (
w‹d
 >> 
shi·
) | (word << (16 - shift));

90 
	}
}

97 
ölöe
 
__u8
 
	$rﬁ8
(
__u8
 
w‹d
, 
shi·
)

99  (
w‹d
 << 
shi·
) | (word >> (8 - shift));

100 
	}
}

107 
ölöe
 
__u8
 
	$r‹8
(
__u8
 
w‹d
, 
shi·
)

109  (
w‹d
 >> 
shi·
) | (word << (8 - shift));

110 
	}
}

112 
ölöe
 
	$Ês_l⁄g
(
l
)

114 i‡((
l
) == 4)

115  
	`Ês
(
l
);

116  
	`Ês64
(
l
);

117 
	}
}

127 
ölöe
 
	$__ffs64
(
u64
 
w‹d
)

129 #i‡
BITS_PER_LONG
 == 32

130 i‡(((
u32
)
w‹d
) == 0UL)

131  
	`__ffs
((
u32
)(
w‹d
 >> 32)) + 32;

132 #ñi‡
BITS_PER_LONG
 != 64

133 #îr‹ 
BITS_PER_LONG
 
nŸ
 32 
‹
 64

135  
	`__ffs
(()
w‹d
);

136 
	}
}

138 #ifde‡
__KERNEL__


139 #ifde‡
CONFIG_GENERIC_FIND_FIRST_BIT


148 
föd_fú°_bô
(c⁄° *
addr
,

149 
size
);

158 
föd_fú°_zîo_bô
(c⁄° *
addr
,

159 
size
);

162 #ifde‡
CONFIG_GENERIC_FIND_LAST_BIT


170 
föd_œ°_bô
(c⁄° *
addr
,

171 
size
);

174 #ifde‡
CONFIG_GENERIC_FIND_NEXT_BIT


182 
föd_√xt_bô
(c⁄° *
addr
,

183 
size
, 
off£t
);

192 
föd_√xt_zîo_bô
(c⁄° *
addr
,

193 
size
,

194 
off£t
);

	@tmp/checksum_64.h

1 #i‚de‡
_ASM_X86_CHECKSUM_64_H


2 
	#_ASM_X86_CHECKSUM_64_H


	)

14 
	~"ty≥s.h
"

15 
	~<löux/ty≥s.h
>

35 
ölöe
 
__sum16
 
	$csum_fﬁd
(
__wsum
 
sum
)

37 
	`asm
("áddl %1,%0\n"

39 : "Ù" (
sum
)

40 : "r" ((
u32
)
sum
 << 16),

41 "0" ((
u32
)
sum
 & 0xffff0000));

42  ( 
__sum16
)(~–
u32
)
sum
 >> 16);

43 
	}
}

57 
ölöe
 
__sum16
 
	$ù_Á°_csum
(c⁄° *
ùh
, 
ihl
)

59 
sum
;

61 
	`asm
(" movl (%1), %0\n"

81 : "Ù" (
sum
), "Ù" (
ùh
), "Ù" (
ihl
)

82 : "1" (
ùh
), "2" (
ihl
)

84  ( 
__sum16
)
sum
;

85 
	}
}

98 
ölöe
 
__wsum


99 
	$csum_t˝udp_nofﬁd
(
__be32
 
ßddr
, __be32 
daddr
, 
Àn
,

100 
¥Ÿo
, 
__wsum
 
sum
)

102 
	`asm
("áddl %1, %0\n"

106 : "Ù" (
sum
)

107 : "g" (
daddr
), "g" (
ßddr
),

108 "g" ((
Àn
 + 
¥Ÿo
)<<8), "0" (
sum
));

109  
sum
;

110 
	}
}

124 
ölöe
 
__sum16
 
	$csum_t˝udp_magic
(
__be32
 
ßddr
, __be32 
daddr
,

125 
Àn
,

126 
¥Ÿo
, 
__wsum
 
sum
)

128  
	`csum_fﬁd
(
	`csum_t˝udp_nofﬁd
(
ßddr
, 
daddr
, 
Àn
, 
¥Ÿo
, 
sum
));

129 
	}
}

141 
__wsum
 
csum_∑πül
(c⁄° *
buff
, 
Àn
, __wsum 
sum
);

143 
	#_HAVE_ARCH_COPY_AND_CSUM_FROM_USER
 1

	)

144 
	#HAVE_CSUM_COPY_USER
 1

	)

148 
__wsum
 
csum_∑πül_c›y_gíîic
(c⁄° *
§c
, c⁄° *
d°
,

149 
Àn
, 
__wsum
 
sum
,

150 *
§c_îr_±r
, *
d°_îr_±r
);

153 
__wsum
 
csum_∑πül_c›y_‰om_u£r
(c⁄° 
__u£r
 *
§c
, *
d°
,

154 
Àn
, 
__wsum
 
isum
, *
îΩ
);

155 
__wsum
 
csum_∑πül_c›y_to_u£r
(c⁄° *
§c
, 
__u£r
 *
d°
,

156 
Àn
, 
__wsum
 
isum
, *
îΩ
);

157 
__wsum
 
csum_∑πül_c›y_nocheck
(c⁄° *
§c
, *
d°
,

158 
Àn
, 
__wsum
 
sum
);

161 
	#csum_™d_c›y_to_u£r
 
csum_∑πül_c›y_to_u£r


	)

162 
	#csum_™d_c›y_‰om_u£r
 
csum_∑πül_c›y_‰om_u£r


	)

172 
__sum16
 
ù_compuã_csum
(c⁄° *
buff
, 
Àn
);

187 
	gö6_addr
;

189 
	#_HAVE_ARCH_IPV6_CSUM
 1

	)

190 
__sum16


191 
csum_ùv6_magic
(c⁄° 
ö6_addr
 *
ßddr
, c⁄° ö6_add∏*
daddr
,

192 
__u32
 
Àn
, 
¥Ÿo
, 
__wsum
 
sum
);

194 
ölöe
 
	$add32_wôh_ˇºy
(
a
, 
b
)

196 
	`asm
("addl %2,%0\n\t"

198 : "Ù" (
a
)

199 : "0" (
a
), "r" (
b
));

200  
a
;

201 
	}
}

	@tmp/driver.c

11 
	#_GNU_SOURCE


	)

12 
	#__USE_GNU


	)

13 
	~<sched.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<f˙é.h
>

16 
	~<°dio.h
>

17 
	~<î∫o.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~<°dlib.h
>

21 
	~<˘y≥.h
>

22 
	~<sys/mm™.h
>

23 
	~<sys/u£r.h
>

27 
	~"c⁄fig.h
"

28 
	~"ty≥s.h
"

29 
	~<löux/ty≥s.h
>

30 
	~<f˙é.h
>

31 
	~<°dio.h
>

32 
	~<î∫o.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<°dlib.h
>

36 
	~<˘y≥.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/u£r.h
>

41 
	~"e1000_82575.h
"

42 
	~"e1000_deföes.h
"

43 
	~"e1000_ªgs.h
"

44 
	~"∑ckë.h
"

45 
	~"drivî.h
"

46 
	~"debug.h
"

47 
	~"if_ëhî.h
"

48 
	~"c⁄fig.h
"

51 
ölöe
 
	$wrôñ
(
d©a
, * 
addr
)

53 
	`wmb
();

54 *((vﬁ©ûê*)
addr
Ë
d©a
;

55 
	}
}

58 
	$rög_öô
(
rög
 * 
r
,
ad≠ãr
 * 
a
, 
u16
 
desc_num
, 
u8
 
id
, u8 
Êag
)

60 
i
;

61 
r
->
a
 =á;

62 
r
->
desc
 = 
NULL
;

63 
r
->
desc_num
 = desc_num;

64 
r
->
desc_size
 = 
DESC_BLOCK_SIZE
;

65 
r
->
hód
 = 0;

66 
r
->
èû
 = 0;

67 
r
->
íabÀ
 = 0;

68 
r
->
queue_ödex
 = 
id
;

69 
r
->
ªg_idx
 = 
id
;

70 
r
->
rx_tx_Êag
 = 
Êag
;

73 
r
->
èû_ªg
 = 
NULL
;

75 
	`∑ckë_poﬁ_öô
(&(
r
->
poﬁ
));

77 
i
 = 0; i < 
r
->
desc_num
; i++)

78 
r
->
buf„r
[
i
] = 
NULL
;

79 
	}
}

81 
ad≠ãr
 * 
	$ad≠ãr_¸óã
(
u8
 
id
, 
u16
 
rög_num
, u16 
desc_num
, u8 * 
mac
)

83 
i
;

84 
ad≠ãr
 * 
a
 =(ad≠ã∏*Ë
	`MALLOC
((adapter));

85 
rög
 * 
r
 = (rög *)
	`MALLOC
((rög)*
rög_num
*2);

87 
i
 = 0; i < 
rög_num
; i++)

89 
	`rög_öô
(
r
,
a
,
desc_num
,
i
,
TX_FLAG
);

90 
a
->
tx_rög
[
i
] = 
r
++;

91 
	`rög_öô
(
r
,
a
,
desc_num
,
i
,
RX_FLAG
);

92 
a
->
rx_rög
[
i
] = 
r
++;

95 
a
->
id
 = id;

96 
a
->
íabÀ
 = 0;

97 
a
->
rög_num
 =Ñing_num;

98 
a
->
desc_num
 = desc_num;

99 
a
->
ªgs_addr
 = 0;

100 
a
->
desc_addr
 = 0;

102 
	`mem˝y
(
a
->
mac
,mac,
ETH_ALEN
);

104  
a
;

105 
	}
}

107 
	$rög_£t_ªsour˚
(
rög
 * 
r
, 
ad≠ãr
 * 
a
)

109 
i
;

110 
__u64
 
ªgs_addr
 = 
a
->regs_addr;

111 
__u64
 
desc_addr
 = 
a
->desc_addr;

112 
u8
 
ªg_idx
 = 
r
->reg_idx;

114 if(
r
->
rx_tx_Êag
 =
RX_FLAG
)

116 
r
->
èû_ªg
 = (
u32
 *)(
ªgs_addr
 + ()
	`E1000_RDT
(
ªg_idx
));

117 
r
->
desc
 = (*)(
desc_addr
 + (
a
->
rög_num
 +Ñ->
queue_ödex
)*r->
desc_size
);

121 
r
->
èû_ªg
 = (
u32
 *)(
ªgs_addr
 + ()
	`E1000_TDT
(
ªg_idx
));

122 
r
->
desc
 = (*)(
desc_addr
 + (r->
queue_ödex
)*r->
desc_size
);

124 
	}
}

129 
	$ad≠ãr_£t_ªsour˚
(
ad≠ãr
 * 
a
, 
u64
 
ªgs
, u64 
desc
)

131 
i
;

133 
a
->
ªgs_addr
 = (
__u64
)
ªgs
;

134 
a
->
desc_addr
 = (
__u64
)
desc
;

137 
i
 = 0 ; i < 
a
->
rög_num
; i++)

139 
	`rög_£t_ªsour˚
(
a
->
rx_rög
[
i
],a);

140 
	`rög_£t_ªsour˚
(
a
->
tx_rög
[
i
],a);

142 
	}
}

151 
	$drivî_öô
(
drivî
 * 
d
)

153 
i
;

154 
˝u_num
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

155 
u16
 
rög_num
 = 8;

157 if(
rög_num
 > 
˝u_num
)Ñing_num = cpu_num;

159 
d
->
fd
 = -1;

160 
d
->
dev
 = "/dev/ukmem";

161 
d
->
ad≠ãr_num
 = 0;

162 
d
->
rög_num
 =Ñing_num;

163 
d
->
desc_num
 = 
DESC_NUM
;

165 
d
->
desc_size
 = 
DESC_BLOCK_SIZE
;

166 
d
->
ªgs_size
 = 
REG_BLOCK_SIZE
;

168 
d
->
desc_tŸÆ_size
 = 0;

169 
d
->
ªgs_tŸÆ_size
 = 0;

170 
d
->
buf„r_tŸÆ_size
 = 0;

172 
d
->
ªgs_addr
 = 0;

173 
d
->
desc_addr
 = 0;

174 
d
->
buf„r_addr
 = 0;

175 
d
->
buf„r_addr_phys
 = 0;

177 
i
 = 0; i < 32; i++)

178 
d
->
ad≠ãrs
[
i
] = 
NULL
;

180 
	}
}

183 
	$drivî_›í
(
drivî
 * 
d
)

186 
ad≠ãr
 * 
a
;

187 
fd
 ;

188 
u64
 
t
[20];

189 
cou¡
;

190 
i
;

191 
u64
 
ªgs
;

192 
u64
 
desc
;

193 vﬁ©ûê* 
addr
;

195 
fd
 = 
	`›í
(
d
->
dev
, 
O_RDWR
);

196 
d
->
fd
 = fd;

199 
cou¡
 = 
	`ªad
(
fd
,
t
,(
u64
)*20);

200 
d
->
buf„r_addr_phys
 = 
t
[0];

201 
d
->
buf„r_tŸÆ_size
 = 
t
[1];

202 
d
->
ad≠ãr_num
 = 
t
[2];

203 
d
->
desc_tŸÆ_size
 = d->
desc_size
 * d->
ad≠ãr_num
 * d->
rög_num
 *2;

204 
d
->
ªgs_tŸÆ_size
 = d->
ªgs_size
 * d->
ad≠ãr_num
 ;

206 
	`¥ötf
("physiˇ»%lx\n",
d
->
buf„r_addr_phys
 );

208 
ªgs
 = 
d
->
ªgs_addr
 = (
u64
)
	`mm≠64
(0,d->
ªgs_tŸÆ_size
,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
fd
,0);

209 
desc
 = 
d
->
desc_addr
 = (
u64
)
	`mm≠64
(0,d->
desc_tŸÆ_size
,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
fd
,0);

210 
d
->
buf„r_addr
 = (
u64
Ë
	`mm≠64
(0, d->
buf„r_tŸÆ_size
 ,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
fd
,0);

213 #ifde‡
__DEBUG


222 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++ )

224 
a
 = 
	`ad≠ãr_¸óã
(
i
,
d
->
rög_num
, d->
desc_num
, (
u8
*)(&
t
[3 + i]));

225 
	`ad≠ãr_£t_ªsour˚
(
a
,
ªgs
,
desc
);

226 
d
->
ad≠ãrs
[
i
] = 
a
;

227 
ªgs
 +
d
->
ªgs_size
;

228 
desc
 +
d
->
desc_size
 * d->
rög_num
 * 2;

230 
	}
}

233 
ölöe
 
e1000_adv_rx_desc
 * 
	$rög_rx_desc
(
rög
 * 
r
, 
i
)

235  ((
e1000_adv_rx_desc
 * )(
r
->
desc
)+
i
);

236 
	}
}

238 
ölöe
 
e1000_adv_tx_desc
 * 
	$rög_tx_desc
(
rög
 * 
r
, 
i
)

240  ((
e1000_adv_tx_desc
 * )(
r
->
desc
)+
i
);

241 
	}
}

248 
	$rög_Æloc_rx_buf„r
(
rög
 * 
r
,
i
, 
∑ckë_poﬁ
 * 
µ
)

250 
∑ckë
 * 
pkt
 = 
	`∑ckë_poﬁ_gë
(
µ
);

251 
e1000_adv_rx_desc
 * 
rx_desc
 = 
	`rög_rx_desc
(
r
,
i
) ;

253 if(
pkt
 =
NULL
)  0;

255 
rx_desc
->
ªad
.
pkt_addr
 = 
pkt
->
phys
;

256 
rx_desc
->
ªad
.
hdr_addr
 = 0;

257 
r
->
buf„r
[
i
] = 
pkt
;

260 
	}
}

271 
	$rög_Æloc_rx_buf„rs
(
rög
 * 
r
, 
∑ckë_poﬁ
 * 
µ
)

273 
i
 = 
r
->
èû
;

274 
cou¡
 = 0;

275 
íd
 = 
r
->
hód
;

276 
size
 = 
r
->
desc_num
;

277 
ªt
;

279  (
i
 + 1)%
size
 !
íd
 )

281 
ªt
 = 
	`rög_Æloc_rx_buf„r
(
r
,
i
, 
µ
);

283 if(
ªt
 == 0) ;

284 
i
 = (ò+ 1Ë% 
size
;

285 
cou¡
++;

288 if(
cou¡
 > 0)

290 
r
->
èû
 = 
i
;

291 
	`wrôñ
(
i
,
r
->
èû_ªg
);

294  
cou¡
;

295 
	}
}

298 
	$ad≠ãr_Æloc_rx_buf„rs
(
ad≠ãr
 * 
a
, 
∑ckë_poﬁ
 * 
µ
)

300 
i
;

302 
i
 = 0; i < 
a
->
rög_num
; i++)

303 
	`rög_Æloc_rx_buf„rs
(
a
->
rx_rög
[
i
],
µ
);

306 
	}
}

311 
	$drivî_Æloc_rx_buf„r
(
drivî
 * 
d
, 
∑ckë_poﬁ
 * 
µ
)

313 
i
;

315 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

316 
	`ad≠ãr_Æloc_rx_buf„rs
(
d
->
ad≠ãrs
[
i
],
µ
);

319 
	}
}

325 
	$drivî_˛o£
(
drivî
 * 
d
)

327 
	`˛o£
(
d
->
fd
);

330 
	}
}

337 
	$rög_ªcv_rx_buf„r
(
rög
 * 
r
,
i
)

339 
∑ckë
 * 
pkt
 = 
r
->
buf„r
[
i
];

340 
e1000_adv_rx_desc
 * 
rx_desc
 = 
	`rög_rx_desc
(
r
,
i
) ;

341 
°©îr
;

342 
Àngth
;

344 
°©îr
 = 
rx_desc
->
wb
.
uµî
.
°©us_îr‹
;

345 if(
°©îr
 & 
E1000_RXD_STAT_DD
)

349 
Àngth
 = 
rx_desc
->
wb
.
uµî
.length;

350 
pkt
->
Àn
 = 
Àngth
;

351 
rx_desc
->
wb
.
uµî
.
°©us_îr‹
 = 0;

352 
r
->
buf„r
[
i
] = 
NULL
;

353 
pkt
->
ad≠ãr_idx
 = 
r
->
a
->
id
;

354 
pkt
->
queue_idx
 = 
r
->
queue_ödex
;

355 
	`∑ckë_poﬁ_put
(&(
r
->
poﬁ
), 
pkt
);

361 
	}
}

363 
	$rög_ªcv
(
rög
 * 
r
)

365 
i
 = 
r
->
hód
;

366 
cou¡
 = 0;

367 
íd
 = 
r
->
èû
;

368 
size
 = 
r
->
desc_num
;

369 
ªt
;

371  
i
 !
íd
 )

373 
ªt
 = 
	`rög_ªcv_rx_buf„r
(
r
,
i
);

374 if(
ªt
 == 0) ;

375 
i
 = (ò+ 1Ë% 
size
;

376 
cou¡
++;

379 if(
cou¡
 > 0)

380 
r
->
hód
 = 
i
;

382  
cou¡
;

383 
	}
}

385 
	$ad≠ãr_ªcv
(
ad≠ãr
 * 
a
)

387 
i
;

388 
cou¡
 = 0;

390 
i
 = 0; i < 
a
->
rög_num
; i++)

391 
cou¡
 +
	`rög_ªcv
(
a
->
rx_rög
[
i
]);

393  
cou¡
;

394 
	}
}

398 
	$drivî_gë_ª˚ived_∑ckës
(
drivî
 * 
d
, 
li°_hód
 * 
hód
)

400 
i
,
j
;

402 
ad≠ãr
 * 
a
;

403 
rög
 * 
r
;

404 
ªt
;

406 
i
 = 0; i < 
d
-> 
ad≠ãr_num
; i++)

408 
a
 = 
d
->
ad≠ãrs
[
i
];

410 
j
 = 0; j < 
a
->
rög_num
; j++)

412 
r
 = 
a
->
rx_rög
[
j
];

413 
	`∑ckë_poﬁ_gë_Æl
(&(
r
->
poﬁ
),
hód
);

418 
	}
}

425 
	$drivî_ªcv
(
drivî
 * 
d
, 
li°_hód
 * 
hód
)

427 
cou¡
 = 0;

428 
i
;

430 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

431 
cou¡
 +
	`ad≠ãr_ªcv
(
d
->
ad≠ãrs
[
i
]);

433 
	`drivî_gë_ª˚ived_∑ckës
(
d
,
hód
);

435  
cou¡
;

436 
	}
}

438 
	$rög_£nd_tx_buf„r
(
rög
 * 
r
,
idx
)

440 
e1000_adv_tx_desc
 * 
tx_desc
 = 
	`rög_tx_desc
(
r
, 
idx
);

441 
∑ckë
 * 
pkt
 = 
	`∑ckë_poﬁ_gë
(&(
r
->
poﬁ
));

442 
ﬁöfo_°©us
 = 0, 
cmd_ty≥_Àn
;

443 
Àn
;

445 if(
pkt
 =
NULL
)  0;

446 
cmd_ty≥_Àn
 = (
E1000_ADVTXD_DTYP_DATA
 | 
E1000_ADVTXD_DCMD_IFCS
 |

447 
E1000_ADVTXD_DCMD_DEXT
)| 
E1000_TXD_CMD_EOP
 | 
E1000_TXD_CMD_RS
;

449 
r
->
buf„r
[
idx
] = 
pkt
;

451 
Àn
 = 
pkt
->len;

452 if(
Àn
 < 60)Üen = 60;

453 
ﬁöfo_°©us
 |((
Àn
Ë<< 
E1000_ADVTXD_PAYLEN_SHIFT
);

455 
tx_desc
->
ªad
.
buf„r_addr
 = 
pkt
->
phys
;

456 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 = cmd_ty≥_À¿| ()
Àn
;

457 
tx_desc
->
ªad
.
ﬁöfo_°©us
 = olinfo_status;

460 
	}
}

463 
	$rög_£nd
(
rög
 * 
r
)

465 
i
 = 
r
->
èû
;

466 
cou¡
 = 0;

467 
íd
 = 
r
->
hód
;

468 
size
 = 
r
->
desc_num
;

469 
ªt
;

471  (
i
 + 1Ë% 
size
 !
íd
 )

473 
ªt
 = 
	`rög_£nd_tx_buf„r
(
r
,
i
);

474 if(
ªt
 == 0) ;

475 
i
 = (ò+ 1Ë% 
size
;

476 
cou¡
++;

479 if(
cou¡
 > 0)

481 
r
->
èû
 = 
i
;

482 
	`wrôñ
(
i
,
r
->
èû_ªg
);

485  
cou¡
;

486 
	}
}

489 
	$ad≠ãr_£nd
(
ad≠ãr
 * 
a
)

491 
i
;

492 
cou¡
 = 0;

494 
i
 = 0; i < 
a
->
rög_num
; i++)

495 
cou¡
 +
	`rög_£nd
(
a
->
tx_rög
[
i
]);

497  
cou¡
;

498 
	}
}

506 
	$drivî_£nd
(
drivî
 * 
d
)

508 
i
;

509 
cou¡
 = 0;

511 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

512 
cou¡
 +
	`ad≠ãr_£nd
(
d
->
ad≠ãrs
[
i
]);

514  
cou¡
;

515 
	}
}

523 
	$rög_ª˛aim_tx_buf„r
(
rög
 * 
r
,
i
, 
li°_hód
 * 
hód
)

525 
ªt
 = 0;

526 
∑ckë
 * 
pkt
;

527 vﬁ©ûê
e1000_adv_tx_desc
 * 
tx_desc
 = 
	`rög_tx_desc
(
r
,
i
) ;

531 if(
tx_desc
->
wb
.
°©us
 & 
E1000_TXD_STAT_DD
)

533 
pkt
 = 
r
->
buf„r
[
i
];

534 
r
->
buf„r
[
i
] = 
NULL
;

535 
tx_desc
->
wb
.
°©us
 = 0;

538 if(
pkt
 =
NULL
)

540 
	`DPRINTF
("ERRORáppear\n");

544 
	`li°_add_èû
(&(
pkt
->
√xt
),
hód
);

545 
ªt
 = 1;

548  
ªt
;

549 
	}
}

555 
	$rög_ª˛aim_tx_buf„rs
(
rög
 * 
r
,
li°_hód
 * 
hód
)

557 
i
 = 
r
->
hód
;

558 
cou¡
 = 0;

559 
íd
 = 
r
->
èû
;

560 
size
 = 
r
->
desc_num
;

561 
ªt
;

563  (
i
 + 1)%
size
 !
íd
 )

565 
ªt
 = 
	`rög_ª˛aim_tx_buf„r
(
r
,
i
,
hód
);

566 if(
ªt
 == 0) ;

567 
i
 = (ò+ 1Ë% 
size
;

568 
cou¡
++;

571 if(
cou¡
 > 0)

572 
r
->
hód
 = 
i
;

574  
cou¡
;

575 
	}
}

578 
	$ad≠ãr_ª˛aim_tx_buf„rs
(
ad≠ãr
 * 
a
,
li°_hód
 * 
hód
)

580 
i
;

581 
cou¡
 = 0;

583 
i
 = 0; i < 
a
->
rög_num
; i++)

584 
cou¡
 +
	`rög_ª˛aim_tx_buf„rs
(
a
->
tx_rög
[
i
], 
hód
);

586  
cou¡
;

587 
	}
}

592 
	$drivî_ª˛aim_tx_buf„r
(
drivî
 * 
d
, 
li°_hód
 * 
hód
)

594 
i
;

595 
cou¡
 = 0;

597 
i
 = 0; i < 
d
->
ad≠ãr_num
; i++)

598 
cou¡
 +
	`ad≠ãr_ª˛aim_tx_buf„rs
(
d
->
ad≠ãrs
[
i
],
hód
);

600  
cou¡
;

601 
	}
}

609 
	$drivî_put_∑ckë_to_£nd_buf„r
(
drivî
 * 
d
, 
∑ckë
 * 
pkt
)

611 
ad≠ãr
 * 
a
 = 
	`drivî_gë_ad≠ãr
(
d
,
pkt
->
ad≠ãr_idx
);

612 
rög
 * 
r
 = 
a
->
tx_rög
[
pkt
->
queue_idx
];

614 
	`DPRINTF
("Puà∑ckë %lxÅÿad≠ã∏%d queuê%d\n",
pkt
,pkt->
ad≠ãr_idx
,Ökt->
queue_idx
);

615 
	`∑ckë_poﬁ_put
(&(
r
->
poﬁ
), 
pkt
);

618 
	}
}

622 
	$drivî_ad≠ãr_queue_assign
(
drivî
 * 
d
)

625 
	}
}

627 
drivî
 * 
	$drivî_moduÀ_öô
()

629 
drivî
 * 
d
 = (drivî * )
	`MALLOC
((driver));

631 if(
d
 =
NULL
)  NULL;

632 
	`drivî_öô
(
d
);

633 
	`drivî_›í
(
d
);

635  
d
;

636 
	}
}

	@tmp/driver2.c

7 
	$rög_£t_ªsour˚
(
rög
 * 
r
, 
ad≠ãr
 * 
a
)

9 
i
;

10 
__u64
 
ªgs_addr
 = 
a
->regs_addr;

11 
__u64
 
desc_addr
 = 
a
->desc_addr;

12 
u8
 
ªg_idx
 = 
r
->reg_idx;

14 if(
r
->
rx_tx_Êag
 =
RX_FLAG
)

16 
r
->
èû_ªg
 = (
u32
 *)(
ªgs_addr
 + ()
	`E1000_RDT
(
ªg_idx
));

17 
r
->
desc
 = (*)(
desc_addr
 + (
a
->
rög_num
 +Ñ->
queue_ödex
)*r->
desc_size
);

21 
r
->
èû_ªg
 = (
u32
 *)(
ªgs_addr
 + ()
	`E1000_TDT
(
ªg_idx
));

22 
r
->
desc
 = (*)(
desc_addr
 + (r->
queue_ödex
)*r->
desc_size
);

24 
	}
}

29 
	$ad≠ãr_£t_ªsour˚
(
ad≠ãr
 * 
a
, 
u64
 
ªgs
, u64 
desc
)

31 
i
;

33 
a
->
ªgs_addr
 = (
__u64
)
ªgs
;

34 
a
->
desc_addr
 = (
__u64
)
desc
;

37 
i
 = 0 ; i < 
a
->
rög_num
; i++)

39 
	`rög_£t_ªsour˚
(
a
->
rx_rög
[
i
],a);

40 
	`rög_£t_ªsour˚
(
a
->
tx_rög
[
i
],a);

42 
	}
}

	@tmp/local_ip.c

11 
	~<°dlib.h
>

12 
	~"c⁄fig.h
"

13 
	~"ty≥s.h
"

14 
	~"p‹t_ønge.h
"

15 
	~"drivî.h
"

16 
	~"li°.h
"

17 
	~"hashèbÀ.h
"

18 
	~"jhash.h
"

19 
	~"øndom.h
"

20 
	~"loˇl_ù.h
"

23 
li°_hód
 * 
	gloˇl_ù_hashèbÀ
 ;

25 
u32
 
	gloˇl_ù_ønd
;

27 
	$loˇl_ù_moduÀ_öô
()

29 
loˇl_ù_hashèbÀ
 = 
	`hashèbÀ_Æloc
(
LOCAL_IP_HT_SIZE
);

31 if(
loˇl_ù_hashèbÀ
 =
NULL
)  0;

33 
	`hashèbÀ_öô
(
loˇl_ù_hashèbÀ
,
LOCAL_IP_HT_SIZE
);

35 
loˇl_ù_ønd
 = 
	`SEED
();

38 
	}
}

41 
ölöe
 
	$loˇl_ù_hashkey
(
u32
 
ù
, 
u8
 
¥Ÿocﬁ
 )

43  (
	`jhash_2w‹d
(
ù
,(
u32
)
¥Ÿocﬁ
,
loˇl_ù_ønd
Ë& 
LOCAL_IP_HT_MASK
);

44 
	}
}

46 
ölöe
 
	$loˇl_ù_hashkey2
(
loˇl_ù
 *
lù
 )

48  
	`loˇl_ù_hashkey
(
lù
->
addr
.
ù4
,Üù->
¥Ÿocﬁ
 )

49 
	}
}

52 
loˇl_ù
 * 
	$loˇl_ù_lookup
(
u32
 
ù
, 
u8
 
¥Ÿocﬁ
)

54 
idx
 = 
	`loˇl_ù_hashkey
(
ù
,
¥Ÿocﬁ
);

55 
loˇl_ù
 * 
lù
;

57 
	`li°_f‹_óch_íåy
(
lù
, &
loˇl_ù_hashèbÀ
[
idx
], 
li°
) {

58 if((
lù
->
addr
.
ù4
 =
ù
Ë&& (lù->
¥Ÿocﬁ
 ==Örotocol)) Üip;

61  
NULL
;

62 
	}
}

65 
	$loˇl_ù_add_vs
(
loˇl_ù
 * 
lù
, 
v£rvî
 * 
vs
, 
is_vsù
)

67 if(
lù
->
vs
)

68 
	`loˇl_ù_dñ_vs
(
lù
)

70 
lù
->
vs
 = vs;

71 
lù
->
is_vsù
 = is_vsip;

73 if(
lù
->
is_vsù
 &&Üù->
vs
)

74 
	`li°_add
(&(
lù
->
vs_li°
),&(
vs
->
vsù_li°
));

75 i‡–(
lù
->
is_vsù
 =0 ) &&Üù->
vs
)

76 
	`li°_add
(&(
lù
->
vs_li°
),&(
vs
->
£lfù_li°
));

78 
	}
}

80 
	$loˇl_ù_dñ_vs
(
loˇl_ù
 * 
lù
)

82 if(
lù
->
is_vsù
 &&Üù->
vs
)

83 
	`li°_add
(&(
lù
->
vs_li°
),&(
vs
->
vsù_li°
));

84 i‡–(
lù
->
is_vsù
 =0 ) &&Üù->
vs
)

85 
	`li°_add
(&(
lù
->
vs_li°
),&(
vs
->
£lfù_li°
));

86 
	}
}

88 
	$loˇl_ù_add
(
loˇl_ù
 * 
lù
, 
v£rvî
 * 
vs
, 
is_vsù
)

90 
idx
 = 
	`loˇl_ù_hashkey2
(
lù
);

91 
	`li°_add
(&(
lù
->
li°
), &(
loˇl_ù_hashèbÀ
[
idx
]));

92 
	`loˇl_ù_add_vs
(
lù
,
vs
,
is_vsù
)

93 
	}
}

97 
	$loˇl_ù_dñ
(
loˇl_ù
 * 
lù
)

99 
	`li°_dñ
(&(
lù
->
li°
));

102 
	`loˇl_ù_dñ_vs
(
lù
);

103 
	}
}

106 
	$loˇl_ù_‰ì
(
loˇl_ù
 * 
lù
)

108 if(
lù
->
ønge
)

109 
	`p‹t_ønge_‰ì
(
lù
->
ønge
);

111 
	`FREE
(
lù
);

112 
	}
}

115 
loˇl_ù
 * 
	$loˇl_ù_¸óã
()

117 
loˇl_ù
 * 
lù
 = (loˇl_ù *)
	`CALLOC
(1,(local_ip));

119 if(
lù
 =
NULL
Ë
îr
;

121 
lù
->
ønge
 = 
	`p‹t_ønge_¸óã
((
MAX_PORT
 - 
MIN_PORT
 + 1));

122 if(
lù
->
ønge
 =
NULL
Ë
îr
;

124  
lù
;

125 
îr
:

126 if(
lù
)

127 
	`loˇl_ù_‰ì
(
lù
);

129  
NULL
;

130 
	}
}

136 
	$loˇl_ù_öô2
(
loˇl_ù
 * 
lù
, 
u32
 
ù
, 
ad≠ãr
 * 
a
, 
u8
 
is_vsù
,u8 
¥Ÿocﬁ
, 
v£rvî
 * 
vs
)

138 
	`INIT_LIST_HEAD
(&(
lù
->
li°
));

139 
	`INIT_LIST_HEAD
(&(
lù
->
vs_li°
));

140 
lù
->
addr
.
ù4
 = 
ù
;

141 
lù
->
is_vsù
 = is_vsip;

142 
lù
->
¥Ÿocﬁ
 =Örotocol;

143 
lù
->
vs
 = vs;

144 
lù
->
a
 =á;

145 
	`p‹t_ønge_öô
(
lù
->
ønge
, 
MIN_PORT
,
MAX_PORT
);

147 
	`loˇl_ù_add
(
lù
, 
vs
,
is_vsù
);

148 
	}
}

151 
	$loˇl_ù_öô
(
loˇl_ù
 * 
lù
, 
u32
 
ù
, 
ad≠ãr
 * 
a
)

153 
	`loˇl_ù_öô2
(
lù
,
ù
,
a
,0,
NULL
);

154 
	}
}

168 
u16
 
	$loˇl_ù_gë_p‹t
(
loˇl_ù
 * 
lù
,
u16
 
p‹t
)

170  
	`p‹t_ønge_gë_p‹t
(
lù
->
ønge
,
p‹t
);

171 
	}
}

173 
	$loˇl_ù_put_p‹t
(
loˇl_ù
 * 
lù
, 
u16
 
p‹t
)

175 
	`p‹t_ønge_put_p‹t
(
lù
->
ønge
,
p‹t
);

176 
	}
}

	@tmp/local_ip.h

12 #i‚de‡
_LOCAL_IP_H


13 
	#_LOCAL_IP_H


	)

15 
	~"c⁄fig.h
"

16 
	~"ty≥s.h
"

17 
	~"drivî.h
"

18 
	~"li°.h
"

19 
	~"hashèbÀ.h
"

38 
	sloˇl_ù


40 
li°_hód
 
	mli°
;

42 
li°_hód
 
	mvs_li°
;

44 
öë_addªss
 
	maddr
;

45 
ad≠ãr
 * 
	ma
;

46 
v£rvî
 * 
	mvs
;

47 
u8
 
	mis_vsù
;

48 
u8
 
	m¥Ÿocﬁ
;

49 
	mu£r
;

50 
p‹t_ønge
 * 
	mønge
;

55 
	#LOCAL_IP_HT_SIZE
 1024

	)

56 
	#LOCAL_IP_HT_MASK
 1023

	)

60 
loˇl_ù_moduÀ_öô
();

62 
loˇl_ù
 * 
loˇl_ù_¸óã
();

66 
loˇl_ù_öô
(
loˇl_ù
 * 
lù
, 
u32
 
ù
, 
ad≠ãr
 * 
a
);

68 
loˇl_ù_öô2
(
loˇl_ù
 * 
lù
, 
u32
 
ù
, 
ad≠ãr
 * 
a
, 
u8
 
is_vsù
,u8 
¥Ÿocﬁ
, 
v£rvî
 * 
vs
);

70 
loˇl_ù_‰ì
(
loˇl_ù
 * 
lù
);

73 
loˇl_ù
 * 
loˇl_ù_lookup
(
u32
 
ù
, 
u8
 
¥Ÿocﬁ
);

76 
loˇl_ù_add
(
loˇl_ù
 * 
lù
);

78 
loˇl_ù_dñ
(
loˇl_ù
 * 
lù
);

81 
u16
 
loˇl_ù_gë_p‹t
(
loˇl_ù
 * 
lù
,u16 
p‹t
);

84 
loˇl_ù_put_p‹t
(
loˇl_ù
 * 
lù
, 
u16
 
p‹t
);

	@tmp/rss.c

2 
	gK
[] =

102 
	$compuã_hash_bôs
(
öput
, 
bnum
,
ªsu…
, 
off£t
)

104 
i
,
j
;

105 
byã
;

107 
i
 = 0; i < 
bnum
/8; i++)

109 
byã
 = (
öput
 &0xff);

110 
j
 = 0; j < 8; j++)

112 if((
byã
 >> 7) == 1)

113 
ªsu…
 ^
K
[
i
*8 + 
j
 +
off£t
];

114 
byã
 = byte << 1;

116 
öput
 = input >> 8;

119  
ªsu…
;

120 
	}
}

126 
	$be°_˝u
(
ßddr
, 
daddr
, 
•‹t
,
dp‹t
)

128 
ªsu…
 = 0;

129 
queue
 = 0;

130 
i
;

131 
Êag
 = 0;

133 
ªsu…
 = 
	`compuã_hash_bôs
(
ßddr
,32,result,0);

134 
ªsu…
 = 
	`compuã_hash_bôs
(
daddr
,32,result,32);

135 
ªsu…
 = 
	`compuã_hash_bôs
(
•‹t
,16,result,64);

136 
queue
 = 
	`compuã_hash_bôs
(
dp‹t
,16,
ªsu…
,80);

138  (
queue
);

139 
	}
}

143 
	$maö
()

146 
a
 = 
	`be°_˝u
(188,299,88,984);

147 
	`¥ötf
("%x\n",
a
);

148 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

35 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

36 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

42 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

43 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

46 
	#__FUNCTION__
 (
__func__
)

	)

49 #ifde‡
CONFIG_NUMA


50 
	#NUMA_BUILD
 1

	)

52 
	#NUMA_BUILD
 0

	)

56 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


57 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

60 
	gmoduÀ
;

62 
m¨k_h¨dw¨e_unsuµ‹ãd
(c⁄° *
msg
);

63 
m¨k_ãch_¥evõw
(c⁄° *
msg
, 
moduÀ
 *
mod
);

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

38 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

39 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

40 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/user.h

19 #i‚de‡
_SYS_USER_H


20 
	#_SYS_USER_H
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 == 64

30 
	su£r_Âªgs_°ru˘


32 
__uöt16_t
 
	mcwd
;

33 
__uöt16_t
 
	mswd
;

34 
__uöt16_t
 
	m·w
;

35 
__uöt16_t
 
	mf›
;

36 
__uöt64_t
 
	mrù
;

37 
__uöt64_t
 
	mrdp
;

38 
__uöt32_t
 
	mmxc§
;

39 
__uöt32_t
 
	mmx¸_mask
;

40 
__uöt32_t
 
	m°_•a˚
[32];

41 
__uöt32_t
 
	mxmm_•a˚
[64];

42 
__uöt32_t
 
	m∑ddög
[24];

45 
	su£r_ªgs_°ru˘


47 
	mr15
;

48 
	mr14
;

49 
	mr13
;

50 
	mr12
;

51 
	mrbp
;

52 
	mrbx
;

53 
	mr11
;

54 
	mr10
;

55 
	mr9
;

56 
	mr8
;

57 
	møx
;

58 
	mrcx
;

59 
	mrdx
;

60 
	mrsi
;

61 
	mrdi
;

62 
	m‹ig_øx
;

63 
	mrù
;

64 
	mcs
;

65 
	meÊags
;

66 
	mr•
;

67 
	mss
;

68 
	mfs_ba£
;

69 
	mgs_ba£
;

70 
	mds
;

71 
	mes
;

72 
	mfs
;

73 
	mgs
;

76 
	su£r


78 
u£r_ªgs_°ru˘
 
	mªgs
;

79 
	mu_ÂvÆid
;

80 
u£r_Âªgs_°ru˘
 
	mi387
;

81 
	mu_tsize
;

82 
	mu_dsize
;

83 
	mu_ssize
;

84 
	m°¨t_code
;

85 
	m°¨t_°ack
;

86 
	msig«l
;

87 
	mª£rved
;

88 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

89 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

90 
	mmagic
;

91 
	mu_comm
 [32];

92 
	mu_debugªg
 [8];

97 
	su£r_Âªgs_°ru˘


99 
	mcwd
;

100 
	mswd
;

101 
	mtwd
;

102 
	mfù
;

103 
	mfcs
;

104 
	mfoo
;

105 
	mfos
;

106 
	m°_•a˚
 [20];

109 
	su£r_Âxªgs_°ru˘


111 
	mcwd
;

112 
	mswd
;

113 
	mtwd
;

114 
	mf›
;

115 
	mfù
;

116 
	mfcs
;

117 
	mfoo
;

118 
	mfos
;

119 
	mmxc§
;

120 
	mª£rved
;

121 
	m°_•a˚
[32];

122 
	mxmm_•a˚
[32];

123 
	m∑ddög
[56];

126 
	su£r_ªgs_°ru˘


128 
	mebx
;

129 
	mecx
;

130 
	medx
;

131 
	mesi
;

132 
	medi
;

133 
	mebp
;

134 
	móx
;

135 
	mxds
;

136 
	mxes
;

137 
	mxfs
;

138 
	mxgs
;

139 
	m‹ig_óx
;

140 
	meù
;

141 
	mxcs
;

142 
	meÊags
;

143 
	me•
;

144 
	mxss
;

147 
	su£r


149 
u£r_ªgs_°ru˘
 
	mªgs
;

150 
	mu_ÂvÆid
;

151 
u£r_Âªgs_°ru˘
 
	mi387
;

152 
	mu_tsize
;

153 
	mu_dsize
;

154 
	mu_ssize
;

155 
	m°¨t_code
;

156 
	m°¨t_°ack
;

157 
	msig«l
;

158 
	mª£rved
;

159 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

160 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

161 
	mmagic
;

162 
	mu_comm
 [32];

163 
	mu_debugªg
 [8];

167 
	#PAGE_SHIFT
 12

	)

168 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

169 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

170 
	#NBPG
 
PAGE_SIZE


	)

171 
	#UPAGES
 1

	)

172 
	#HOST_TEXT_START_ADDR
 (
u
.
°¨t_code
)

	)

173 
	#HOST_STACK_END_ADDR
 (
u
.
°¨t_°ack
 + u.
u_ssize
 * 
NBPG
)

	)

	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

250 
	g__BEGIN_DECLS


252 #ifde‡
__USE_GNU


255 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

256 
__THROW
;

260 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

261 
__Êags
);

265 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

266 
size_t
 
__cou¡
, 
__Êags
);

269 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

270 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

271 
__Êags
);

274 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

275 
__Êags
);

278 #i‚de‡
__USE_FILE_OFFSET64


279 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

281 #ifde‡
__REDIRECT


282 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

283 
__off64_t
 
__Àn
),

284 
ÁŒoˇã64
);

286 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

289 #ifde‡
__USE_LARGEFILE64


290 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
);

295 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HWPOISON
 100

	)

102 #ifde‡
__USE_XOPEN2K


103 
	#POSIX_MADV_NORMAL
 0

	)

104 
	#POSIX_MADV_RANDOM
 1

	)

105 
	#POSIX_MADV_SEQUENTIAL
 2

	)

106 
	#POSIX_MADV_WILLNEED
 3

	)

107 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

235 
	mMSG_WAITFORONE
 = 0x10000,

236 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

238 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

241 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

247 
	smsghdr


249 *
	mmsg_«me
;

250 
sockÀn_t
 
	mmsg_«mñí
;

252 
iovec
 *
	mmsg_iov
;

253 
size_t
 
	mmsg_iovÀn
;

255 *
	mmsg_c⁄åﬁ
;

256 
size_t
 
	mmsg_c⁄åﬁÀn
;

261 
	mmsg_Êags
;

264 #ifde‡
__USE_GNU


266 
	smmsghdr


268 
msghdr
 
	mmsg_hdr
;

269 
	mmsg_Àn
;

274 
	scmsghdr


276 
size_t
 
	mcmsg_Àn
;

281 
	mcmsg_Àvñ
;

282 
	mcmsg_ty≥
;

283 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

284 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

292 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

294 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

295 
	#CMSG_FIRSTHDR
(
mhdr
) \

296 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

297 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

298 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

299 & (
size_t
Ë~( (size_tË- 1))

	)

300 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

301 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

302 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

304 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

305 
cmsghdr
 *
__cmsg
Ë
__THROW
;

306 #ifde‡
__USE_EXTERN_INLINES


307 #i‚de‡
_EXTERN_INLINE


308 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

310 
_EXTERN_INLINE
 
cmsghdr
 *

311 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

313 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

317 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

318 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

319 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


320 + 
__mhdr
->
msg_c⁄åﬁÀn
)

321 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

322 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  
__cmsg
;

326 
	}
}

333 
	mSCM_RIGHTS
 = 0x01

334 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

335 #ifde‡
__USE_GNU


336 , 
	mSCM_CREDENTIALS
 = 0x02

337 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

341 #ifde‡
__USE_GNU


343 
	su¸ed


345 
pid_t
 
	mpid
;

346 
uid_t
 
	muid
;

347 
gid_t
 
	mgid
;

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #i‚de‡
FIOGETOWN


354 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

356 #i‚de‡
FIOSETOWN


357 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

359 #i‚de‡
SIOCATMARK


360 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

362 #i‚de‡
SIOCGPGRP


363 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

365 #i‚de‡
SIOCGSTAMP


366 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

368 #i‚de‡
SIOCGSTAMPNS


369 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

371 #i‚de‡
SIOCSPGRP


372 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

377 
	~<asm/sockë.h
>

379 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


380 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


381 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


382 #unde‡
FIOGETOWN


384 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


385 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


386 #unde‡
FIOSETOWN


388 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


389 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


390 #unde‡
SIOCATMARK


392 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


393 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


394 #unde‡
SIOCGPGRP


396 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


397 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


398 #unde‡
SIOCGSTAMP


400 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


401 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


402 #unde‡
SIOCGSTAMPNS


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


405 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


406 #unde‡
SIOCSPGRP


411 
	slögî


413 
	ml_⁄off
;

414 
	ml_lögî
;

418 
__BEGIN_DECLS


425 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

426 
__vÀn
, 
__Êags
,

427 
__c⁄°
 
time•ec
 *
__tmo
);

429 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__¨ch_swab16


49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #ifde‡
__¨ch_swab32


58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #ifde‡
__¨ch_swab64


67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 
	#__swab16
(
x
) \

100 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

101 
	`___c⁄°™t_swab16
(
x
) : \

102 
	`__fswab16
(
x
))

	)

108 
	#__swab32
(
x
) \

109 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

110 
	`___c⁄°™t_swab32
(
x
) : \

111 
	`__fswab32
(
x
))

	)

117 
	#__swab64
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

119 
	`___c⁄°™t_swab64
(
x
) : \

120 
	`__fswab64
(
x
))

	)

128 
	#__swahw32
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

130 
	`___c⁄°™t_swahw32
(
x
) : \

131 
	`__fswahw32
(
x
))

	)

139 
	#__swahb32
(
x
) \

140 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

141 
	`___c⁄°™t_swahb32
(
x
) : \

142 
	`__fswahb32
(
x
))

	)

148 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

150 #ifde‡
__¨ch_swab16p


151  
	`__¨ch_swab16p
(
p
);

153  
	`__swab16
(*
p
);

155 
	}
}

161 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

163 #ifde‡
__¨ch_swab32p


164  
	`__¨ch_swab32p
(
p
);

166  
	`__swab32
(*
p
);

168 
	}
}

174 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

176 #ifde‡
__¨ch_swab64p


177  
	`__¨ch_swab64p
(
p
);

179  
	`__swab64
(*
p
);

181 
	}
}

189 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahw32p


192  
	`__¨ch_swahw32p
(
p
);

194  
	`__swahw32
(*
p
);

196 
	}
}

204 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

206 #ifde‡
__¨ch_swahb32p


207  
	`__¨ch_swahb32p
(
p
);

209  
	`__swahb32
(*
p
);

211 
	}
}

217 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

219 #ifde‡
__¨ch_swab16s


220 
	`__¨ch_swab16s
(
p
);

222 *
p
 = 
	`__swab16p
(p);

224 
	}
}

229 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

231 #ifde‡
__¨ch_swab32s


232 
	`__¨ch_swab32s
(
p
);

234 *
p
 = 
	`__swab32p
(p);

236 
	}
}

242 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

244 #ifde‡
__¨ch_swab64s


245 
	`__¨ch_swab64s
(
p
);

247 *
p
 = 
	`__swab64p
(p);

249 
	}
}

257 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahw32s


260 
	`__¨ch_swahw32s
(
p
);

262 *
p
 = 
	`__swahw32p
(p);

264 
	}
}

272 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

274 #ifde‡
__¨ch_swahb32s


275 
	`__¨ch_swahb32s
(
p
);

277 *
p
 = 
	`__swahb32p
(p);

279 
	}
}

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 #ifde‡
__i386__


10 #ifde‡
CONFIG_X86_BSWAP


11 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

13 
	`__asm__
("xchgb %b0,%h0\n\t"

16 : "=q" (
vÆ
)

17 : "0" (
vÆ
));

21 
	`__asm__
("bswapl %0"

22 : "Ù" (
vÆ
)

23 : "0" (
vÆ
));

25  
vÆ
;

26 
	}
}

27 
	#__¨ch_swab32
 
__¨ch_swab32


	)

29 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

31 #ifde‡
__i386__


34 
__u32
 
a
;

35 
__u32
 
b
;

36 } 
s
;

37 
__u64
 
u
;

38 } 
v
;

39 
v
.
u
 = 
vÆ
;

40 #ifde‡
CONFIG_X86_BSWAP


41 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

42 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

43 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

45 
v
.
s
.
a
 = 
	`__¨ch_swab32
(v.s.a);

46 
v
.
s
.
b
 = 
	`__¨ch_swab32
(v.s.b);

47 
	`__asm__
("xchgl %0,%1"

48 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

49 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

51  
v
.
u
;

53 
	`__asm__
("bswapq %0"

54 : "Ù" (
vÆ
)

55 : "0" (
vÆ
));

56  
vÆ
;

58 
	}
}

59 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@
1
.
1
/usr/include
202
4783
include/arp.h
include/checksum.h
include/common/comm_defns.h
include/common/config.h
include/common/debug.h
include/common/hashtable.h
include/common/jhash.h
include/common/list.h
include/common/random.h
include/common/types.h
include/connection.h
include/dispatch.h
include/driver.h
include/interface.h
include/lf_queue.h
include/linux-net/e1000_82575.h
include/linux-net/e1000_defines.h
include/linux-net/e1000_regs.h
include/linux-net/icmp.h
include/linux-net/icmpv6.h
include/linux-net/if_arp.h
include/linux-net/if_ether.h
include/linux-net/ip.h
include/linux-net/ipv6.h
include/linux-net/tcp.h
include/linux-net/udp.h
include/local_ip.h
include/mem_pool.h
include/net_global.h
include/packet.h
include/port_range.h
include/process.h
include/route.h
include/rss.h
include/server_pool.h
include/tcp.h
include/test.h
include/timer.h
include/types/connection.h
include/types/dispatch.h
include/types/driver.h
include/types/interface.h
include/types/lf_queue.h
include/types/local_ip.h
include/types/mem_pool.h
include/types/net_global.h
include/types/packet.h
include/types/port_range.h
include/types/route.h
include/types/server_pool.h
include/types/timer.h
include/types/vserver.h
include/vserver.h
src/arp.c
src/checksum.c
src/connection.c
src/debug.c
src/dispatch.c
src/driver.c
src/hashtable.c
src/interface.c
src/lf_queue.c
src/local_ip.c
src/main.c
src/mem_pool.c
src/net_global.c
src/packet.c
src/port_range.c
src/process.c
src/route.c
src/rss.c
src/server_pool.c
src/tcp.c
src/test.c
src/timer.c
src/vserver.c
test/connection_size.c
test/lf_queue_size.c
test/mem_pool_test.c
test/packet_size.c
test/port_rang_size.c
test/test_overflow.c
test/timer_overflow.c
tmp/bitmap.c
tmp/bitmap.h
tmp/bitops.h
tmp/checksum_64.h
tmp/driver.c
tmp/driver2.c
tmp/local_ip.c
tmp/local_ip.h
tmp/rss.c
/usr/include/arpa/inet.h
/usr/include/asm/byteorder.h
/usr/include/asm/types.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/netinet/in.h
/usr/include/sched.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/socket.h
/usr/include/sys/types.h
/usr/include/sys/user.h
/usr/include/sys/wait.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/siginfo.h
/usr/include/bits/sigset.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/posix_types.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/sys/cdefs.h
/usr/include/sys/ucontext.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/socket.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/swab.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/sockios.h
/usr/include/bits/setjmp.h

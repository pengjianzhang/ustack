cscope 15 /home/pencil/workspace_git/ustack/modules               0000484650
	@igb/e1000_82575.c

32 
	~<löux/ty≥s.h
>

33 
	~<löux/if_ëhî.h
>

35 
	~"e1000_mac.h
"

36 
	~"e1000_82575.h
"

38 
s32
 
igb_gë_öv¨ü¡s_82575
(
e1000_hw
 *);

39 
s32
 
igb_acquúe_phy_82575
(
e1000_hw
 *);

40 
igb_ªÀa£_phy_82575
(
e1000_hw
 *);

41 
s32
 
igb_acquúe_nvm_82575
(
e1000_hw
 *);

42 
igb_ªÀa£_nvm_82575
(
e1000_hw
 *);

43 
s32
 
igb_check_f‹_lök_82575
(
e1000_hw
 *);

44 
s32
 
igb_gë_cfg_d⁄e_82575
(
e1000_hw
 *);

45 
s32
 
igb_öô_hw_82575
(
e1000_hw
 *);

46 
s32
 
igb_phy_hw_ª£t_sgmii_82575
(
e1000_hw
 *);

47 
s32
 
igb_ªad_phy_ªg_sgmii_82575
(
e1000_hw
 *, 
u32
, 
u16
 *);

48 
s32
 
igb_ªad_phy_ªg_82580
(
e1000_hw
 *, 
u32
, 
u16
 *);

49 
s32
 
igb_wrôe_phy_ªg_82580
(
e1000_hw
 *, 
u32
, 
u16
);

50 
s32
 
igb_ª£t_hw_82575
(
e1000_hw
 *);

51 
s32
 
igb_ª£t_hw_82580
(
e1000_hw
 *);

52 
s32
 
igb_£t_d0_Õlu_°©e_82575
(
e1000_hw
 *, 
boﬁ
);

53 
s32
 
igb_£tup_c›≥r_lök_82575
(
e1000_hw
 *);

54 
s32
 
igb_£tup_£rdes_lök_82575
(
e1000_hw
 *);

55 
s32
 
igb_wrôe_phy_ªg_sgmii_82575
(
e1000_hw
 *, 
u32
, 
u16
);

56 
igb_˛ór_hw_˙ås_82575
(
e1000_hw
 *);

57 
s32
 
igb_acquúe_swfw_sync_82575
(
e1000_hw
 *, 
u16
);

58 
s32
 
igb_gë_pcs_•ìd_™d_du∂ex_82575
(
e1000_hw
 *, 
u16
 *,

59 
u16
 *);

60 
s32
 
igb_gë_phy_id_82575
(
e1000_hw
 *);

61 
igb_ªÀa£_swfw_sync_82575
(
e1000_hw
 *, 
u16
);

62 
boﬁ
 
igb_sgmii_a˘ive_82575
(
e1000_hw
 *);

63 
s32
 
igb_ª£t_öô_s¸ùt_82575
(
e1000_hw
 *);

64 
s32
 
igb_ªad_mac_addr_82575
(
e1000_hw
 *);

65 
s32
 
igb_£t_pcõ_com∂ëi⁄_timeout
(
e1000_hw
 *
hw
);

67 c⁄° 
u16
 
	ge1000_82580_rxpbs_èbÀ
[] =

70 
	#E1000_82580_RXPBS_TABLE_SIZE
 \

71 ((
e1000_82580_rxpbs_èbÀ
)/(
u16
))

	)

73 
s32
 
	$igb_gë_öv¨ü¡s_82575
(
e1000_hw
 *
hw
)

75 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

76 
e1000_nvm_öfo
 *
nvm
 = &
hw
->nvm;

77 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

78 
e1000_dev_•ec_82575
 * 
dev_•ec
 = &
hw
->dev_•ec.
_82575
;

79 
u32
 
ìcd
;

80 
s32
 
ªt_vÆ
;

81 
u16
 
size
;

82 
u32
 
˘æ_ext
 = 0;

84 
hw
->
devi˚_id
) {

85 
E1000_DEV_ID_82575EB_COPPER
:

86 
E1000_DEV_ID_82575EB_FIBER_SERDES
:

87 
E1000_DEV_ID_82575GB_QUAD_COPPER
:

88 
mac
->
ty≥
 = 
e1000_82575
;

90 
E1000_DEV_ID_82576
:

91 
E1000_DEV_ID_82576_NS
:

92 
E1000_DEV_ID_82576_NS_SERDES
:

93 
E1000_DEV_ID_82576_FIBER
:

94 
E1000_DEV_ID_82576_SERDES
:

95 
E1000_DEV_ID_82576_QUAD_COPPER
:

96 
E1000_DEV_ID_82576_QUAD_COPPER_ET2
:

97 
E1000_DEV_ID_82576_SERDES_QUAD
:

98 
mac
->
ty≥
 = 
e1000_82576
;

100 
E1000_DEV_ID_82580_COPPER
:

101 
E1000_DEV_ID_82580_FIBER
:

102 
E1000_DEV_ID_82580_SERDES
:

103 
E1000_DEV_ID_82580_SGMII
:

104 
E1000_DEV_ID_82580_COPPER_DUAL
:

105 
mac
->
ty≥
 = 
e1000_82580
;

107 
E1000_DEV_ID_I350_COPPER
:

108 
E1000_DEV_ID_I350_FIBER
:

109 
E1000_DEV_ID_I350_SERDES
:

110 
E1000_DEV_ID_I350_SGMII
:

111 
mac
->
ty≥
 = 
e1000_i350
;

114  -
E1000_ERR_MAC_INIT
;

126 
phy
->
medü_ty≥
 = 
e1000_medü_ty≥_c›≥r
;

127 
dev_•ec
->
sgmii_a˘ive
 = 
Ál£
;

129 
˘æ_ext
 = 
	`rd32
(
E1000_CTRL_EXT
);

130 
˘æ_ext
 & 
E1000_CTRL_EXT_LINK_MODE_MASK
) {

131 
E1000_CTRL_EXT_LINK_MODE_SGMII
:

132 
dev_•ec
->
sgmii_a˘ive
 = 
åue
;

133 
˘æ_ext
 |
E1000_CTRL_I2C_ENA
;

135 
E1000_CTRL_EXT_LINK_MODE_1000BASE_KX
:

136 
E1000_CTRL_EXT_LINK_MODE_PCIE_SERDES
:

137 
hw
->
phy
.
medü_ty≥
 = 
e1000_medü_ty≥_öã∫Æ_£rdes
;

138 
˘æ_ext
 |
E1000_CTRL_I2C_ENA
;

141 
˘æ_ext
 &~
E1000_CTRL_I2C_ENA
;

145 
	`wr32
(
E1000_CTRL_EXT
, 
˘æ_ext
);

151 i‡((
˘æ_ext
 & 
E1000_CTRL_I2C_ENA
Ë&& (
hw
->
mac
.
ty≥
 =
e1000_82580
))

152 
	`wr32
(
E1000_MDICNFG
, 0);

155 
mac
->
mè_ªg_cou¡
 = 128;

157 
mac
->
ør_íåy_cou¡
 = 
E1000_RAR_ENTRIES_82575
;

158 i‡(
mac
->
ty≥
 =
e1000_82576
)

159 
mac
->
ør_íåy_cou¡
 = 
E1000_RAR_ENTRIES_82576
;

160 i‡(
mac
->
ty≥
 =
e1000_82580
)

161 
mac
->
ør_íåy_cou¡
 = 
E1000_RAR_ENTRIES_82580
;

162 i‡(
mac
->
ty≥
 =
e1000_i350
)

163 
mac
->
ør_íåy_cou¡
 = 
E1000_RAR_ENTRIES_I350
;

165 i‡(
mac
->
ty≥
 >
e1000_82580
)

166 
mac
->
›s
.
ª£t_hw
 = 
igb_ª£t_hw_82580
;

168 
mac
->
›s
.
ª£t_hw
 = 
igb_ª£t_hw_82575
;

170 
mac
->
asf_fúmw¨e_¥e£¡
 = 
åue
;

172 
mac
->
¨c_subsy°em_vÆid
 =

173 (
	`rd32
(
E1000_FWSM
Ë& 
E1000_FWSM_MODE_MASK
)

174 ? 
åue
 : 
Ál£
;

177 
mac
->
›s
.
£tup_physiˇl_öãrÁ˚
 =

178 (
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
)

179 ? 
igb_£tup_c›≥r_lök_82575


180 : 
igb_£tup_£rdes_lök_82575
;

183 
ìcd
 = 
	`rd32
(
E1000_EECD
);

185 
nvm
->
›code_bôs
 = 8;

186 
nvm
->
dñay_u£c
 = 1;

187 
nvm
->
ovîride
) {

188 
e1000_nvm_ovîride_•i_œrge
:

189 
nvm
->
∑ge_size
 = 32;

190 
nvm
->
addªss_bôs
 = 16;

192 
e1000_nvm_ovîride_•i_smÆl
:

193 
nvm
->
∑ge_size
 = 8;

194 
nvm
->
addªss_bôs
 = 8;

197 
nvm
->
∑ge_size
 = 
ìcd
 & 
E1000_EECD_ADDR_BITS
 ? 32 : 8;

198 
nvm
->
addªss_bôs
 = 
ìcd
 & 
E1000_EECD_ADDR_BITS
 ? 16 : 8;

202 
nvm
->
ty≥
 = 
e1000_nvm_ì¥om_•i
;

204 
size
 = (
u16
)((
ìcd
 & 
E1000_EECD_SIZE_EX_MASK
) >>

205 
E1000_EECD_SIZE_EX_SHIFT
);

211 
size
 +
NVM_WORD_SIZE_BASE_SHIFT
;

214 i‡(
size
 > 14)

215 
size
 = 14;

216 
nvm
->
w‹d_size
 = 1 << 
size
;

219 i‡(
mac
->
ty≥
 =
e1000_82576
)

220 
	`igb_öô_mbx_∑øms_pf
(
hw
);

223 i‡(
phy
->
medü_ty≥
 !
e1000_medü_ty≥_c›≥r
) {

224 
phy
->
ty≥
 = 
e1000_phy_n⁄e
;

228 
phy
->
aut⁄eg_mask
 = 
AUTONEG_ADVERTISE_SPEED_DEFAULT
;

229 
phy
->
ª£t_dñay_us
 = 100;

232 i‡(
	`igb_sgmii_a˘ive_82575
(
hw
)) {

233 
phy
->
›s
.
ª£t
 = 
igb_phy_hw_ª£t_sgmii_82575
;

234 
phy
->
›s
.
ªad_ªg
 = 
igb_ªad_phy_ªg_sgmii_82575
;

235 
phy
->
›s
.
wrôe_ªg
 = 
igb_wrôe_phy_ªg_sgmii_82575
;

236 } i‡(
hw
->
mac
.
ty≥
 >
e1000_82580
) {

237 
phy
->
›s
.
ª£t
 = 
igb_phy_hw_ª£t
;

238 
phy
->
›s
.
ªad_ªg
 = 
igb_ªad_phy_ªg_82580
;

239 
phy
->
›s
.
wrôe_ªg
 = 
igb_wrôe_phy_ªg_82580
;

241 
phy
->
›s
.
ª£t
 = 
igb_phy_hw_ª£t
;

242 
phy
->
›s
.
ªad_ªg
 = 
igb_ªad_phy_ªg_igp
;

243 
phy
->
›s
.
wrôe_ªg
 = 
igb_wrôe_phy_ªg_igp
;

247 
hw
->
bus
.
func
 = (
	`rd32
(
E1000_STATUS
Ë& 
E1000_STATUS_FUNC_MASK
) >>

248 
E1000_STATUS_FUNC_SHIFT
;

251 
ªt_vÆ
 = 
	`igb_gë_phy_id_82575
(
hw
);

252 i‡(
ªt_vÆ
)

253  
ªt_vÆ
;

256 
phy
->
id
) {

257 
M88E1111_I_PHY_ID
:

258 
phy
->
ty≥
 = 
e1000_phy_m88
;

259 
phy
->
›s
.
gë_phy_öfo
 = 
igb_gë_phy_öfo_m88
;

260 
phy
->
›s
.
gë_ˇbÀ_Àngth
 = 
igb_gë_ˇbÀ_Àngth_m88
;

261 
phy
->
›s
.
f‹˚_•ìd_du∂ex
 = 
igb_phy_f‹˚_•ìd_du∂ex_m88
;

263 
IGP03E1000_E_PHY_ID
:

264 
phy
->
ty≥
 = 
e1000_phy_igp_3
;

265 
phy
->
›s
.
gë_phy_öfo
 = 
igb_gë_phy_öfo_igp
;

266 
phy
->
›s
.
gë_ˇbÀ_Àngth
 = 
igb_gë_ˇbÀ_Àngth_igp_2
;

267 
phy
->
›s
.
f‹˚_•ìd_du∂ex
 = 
igb_phy_f‹˚_•ìd_du∂ex_igp
;

268 
phy
->
›s
.
£t_d0_Õlu_°©e
 = 
igb_£t_d0_Õlu_°©e_82575
;

269 
phy
->
›s
.
£t_d3_Õlu_°©e
 = 
igb_£t_d3_Õlu_°©e
;

271 
I82580_I_PHY_ID
:

272 
I350_I_PHY_ID
:

273 
phy
->
ty≥
 = 
e1000_phy_82580
;

274 
phy
->
›s
.
f‹˚_•ìd_du∂ex
 = 
igb_phy_f‹˚_•ìd_du∂ex_82580
;

275 
phy
->
›s
.
gë_ˇbÀ_Àngth
 = 
igb_gë_ˇbÀ_Àngth_82580
;

276 
phy
->
›s
.
gë_phy_öfo
 = 
igb_gë_phy_öfo_82580
;

279  -
E1000_ERR_PHY
;

283 
	}
}

292 
s32
 
	$igb_acquúe_phy_82575
(
e1000_hw
 *
hw
)

294 
u16
 
mask
 = 
E1000_SWFW_PHY0_SM
;

296 i‡(
hw
->
bus
.
func
 =
E1000_FUNC_1
)

297 
mask
 = 
E1000_SWFW_PHY1_SM
;

299  
	`igb_acquúe_swfw_sync_82575
(
hw
, 
mask
);

300 
	}
}

309 
	$igb_ªÀa£_phy_82575
(
e1000_hw
 *
hw
)

311 
u16
 
mask
 = 
E1000_SWFW_PHY0_SM
;

313 i‡(
hw
->
bus
.
func
 =
E1000_FUNC_1
)

314 
mask
 = 
E1000_SWFW_PHY1_SM
;

316 
	`igb_ªÀa£_swfw_sync_82575
(
hw
, 
mask
);

317 
	}
}

328 
s32
 
	$igb_ªad_phy_ªg_sgmii_82575
(
e1000_hw
 *
hw
, 
u32
 
off£t
,

329 
u16
 *
d©a
)

331 
s32
 
ªt_vÆ
 = -
E1000_ERR_PARAM
;

333 i‡(
off£t
 > 
E1000_MAX_SGMII_PHY_REG_ADDR
) {

334 
	`hw_dbg
("PHY Addªs†%u i†ouào‡ønge\n", 
off£t
);

335 
out
;

338 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`acquúe
(hw);

339 i‡(
ªt_vÆ
)

340 
out
;

342 
ªt_vÆ
 = 
	`igb_ªad_phy_ªg_i2c
(
hw
, 
off£t
, 
d©a
);

344 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

346 
out
:

347  
ªt_vÆ
;

348 
	}
}

359 
s32
 
	$igb_wrôe_phy_ªg_sgmii_82575
(
e1000_hw
 *
hw
, 
u32
 
off£t
,

360 
u16
 
d©a
)

362 
s32
 
ªt_vÆ
 = -
E1000_ERR_PARAM
;

365 i‡(
off£t
 > 
E1000_MAX_SGMII_PHY_REG_ADDR
) {

366 
	`hw_dbg
("PHY Addªs†%d i†ouào‡ønge\n", 
off£t
);

367 
out
;

370 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`acquúe
(hw);

371 i‡(
ªt_vÆ
)

372 
out
;

374 
ªt_vÆ
 = 
	`igb_wrôe_phy_ªg_i2c
(
hw
, 
off£t
, 
d©a
);

376 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

378 
out
:

379  
ªt_vÆ
;

380 
	}
}

389 
s32
 
	$igb_gë_phy_id_82575
(
e1000_hw
 *
hw
)

391 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

392 
s32
 
ªt_vÆ
 = 0;

393 
u16
 
phy_id
;

394 
u32
 
˘æ_ext
;

403 i‡(!(
	`igb_sgmii_a˘ive_82575
(
hw
))) {

404 
phy
->
addr
 = 1;

405 
ªt_vÆ
 = 
	`igb_gë_phy_id
(
hw
);

406 
out
;

410 
˘æ_ext
 = 
	`rd32
(
E1000_CTRL_EXT
);

411 
	`wr32
(
E1000_CTRL_EXT
, 
˘æ_ext
 & ~
E1000_CTRL_EXT_SDP3_DATA
);

412 
	`wrÊ
();

413 
	`m¶ìp
(300);

419 
phy
->
addr
 = 1;Öhy->addr < 8;Öhy->addr++) {

420 
ªt_vÆ
 = 
	`igb_ªad_phy_ªg_sgmii_82575
(
hw
, 
PHY_ID1
, &
phy_id
);

421 i‡(
ªt_vÆ
 == 0) {

422 
	`hw_dbg
("Vendor ID 0x%08XÑeadátáddress %u\n",

423 
phy_id
, 
phy
->
addr
);

428 i‡(
phy_id
 =
M88_VENDOR
)

431 
	`hw_dbg
("PHYáddªs†%u wa†uƒódabÀ\n", 
phy
->
addr
);

436 i‡(
phy
->
addr
 == 8) {

437 
phy
->
addr
 = 0;

438 
ªt_vÆ
 = -
E1000_ERR_PHY
;

439 
out
;

441 
ªt_vÆ
 = 
	`igb_gë_phy_id
(
hw
);

445 
	`wr32
(
E1000_CTRL_EXT
, 
˘æ_ext
);

447 
out
:

448  
ªt_vÆ
;

449 
	}
}

457 
s32
 
	$igb_phy_hw_ª£t_sgmii_82575
(
e1000_hw
 *
hw
)

459 
s32
 
ªt_vÆ
;

466 
	`hw_dbg
("SoftÑesetting SGMIIáttached PHY...\n");

472 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1B, 0x8084);

473 i‡(
ªt_vÆ
)

474 
out
;

476 
ªt_vÆ
 = 
	`igb_phy_sw_ª£t
(
hw
);

478 
out
:

479  
ªt_vÆ
;

480 
	}
}

495 
s32
 
	$igb_£t_d0_Õlu_°©e_82575
(
e1000_hw
 *
hw
, 
boﬁ
 
a˘ive
)

497 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

498 
s32
 
ªt_vÆ
;

499 
u16
 
d©a
;

501 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP02E1000_PHY_POWER_MGMT
, &
d©a
);

502 i‡(
ªt_vÆ
)

503 
out
;

505 i‡(
a˘ive
) {

506 
d©a
 |
IGP02E1000_PM_D0_LPLU
;

507 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP02E1000_PHY_POWER_MGMT
,

508 
d©a
);

509 i‡(
ªt_vÆ
)

510 
out
;

513 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CONFIG
,

514 &
d©a
);

515 
d©a
 &~
IGP01E1000_PSCFR_SMART_SPEED
;

516 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CONFIG
,

517 
d©a
);

518 i‡(
ªt_vÆ
)

519 
out
;

521 
d©a
 &~
IGP02E1000_PM_D0_LPLU
;

522 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP02E1000_PHY_POWER_MGMT
,

523 
d©a
);

530 i‡(
phy
->
sm¨t_•ìd
 =
e1000_sm¨t_•ìd_⁄
) {

531 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
,

532 
IGP01E1000_PHY_PORT_CONFIG
, &
d©a
);

533 i‡(
ªt_vÆ
)

534 
out
;

536 
d©a
 |
IGP01E1000_PSCFR_SMART_SPEED
;

537 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

538 
IGP01E1000_PHY_PORT_CONFIG
, 
d©a
);

539 i‡(
ªt_vÆ
)

540 
out
;

541 } i‡(
phy
->
sm¨t_•ìd
 =
e1000_sm¨t_•ìd_off
) {

542 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
,

543 
IGP01E1000_PHY_PORT_CONFIG
, &
d©a
);

544 i‡(
ªt_vÆ
)

545 
out
;

547 
d©a
 &~
IGP01E1000_PSCFR_SMART_SPEED
;

548 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

549 
IGP01E1000_PHY_PORT_CONFIG
, 
d©a
);

550 i‡(
ªt_vÆ
)

551 
out
;

555 
out
:

556  
ªt_vÆ
;

557 
	}
}

568 
s32
 
	$igb_acquúe_nvm_82575
(
e1000_hw
 *
hw
)

570 
s32
 
ªt_vÆ
;

572 
ªt_vÆ
 = 
	`igb_acquúe_swfw_sync_82575
(
hw
, 
E1000_SWFW_EEP_SM
);

573 i‡(
ªt_vÆ
)

574 
out
;

576 
ªt_vÆ
 = 
	`igb_acquúe_nvm
(
hw
);

578 i‡(
ªt_vÆ
)

579 
	`igb_ªÀa£_swfw_sync_82575
(
hw
, 
E1000_SWFW_EEP_SM
);

581 
out
:

582  
ªt_vÆ
;

583 
	}
}

592 
	$igb_ªÀa£_nvm_82575
(
e1000_hw
 *
hw
)

594 
	`igb_ªÀa£_nvm
(
hw
);

595 
	`igb_ªÀa£_swfw_sync_82575
(
hw
, 
E1000_SWFW_EEP_SM
);

596 
	}
}

606 
s32
 
	$igb_acquúe_swfw_sync_82575
(
e1000_hw
 *
hw
, 
u16
 
mask
)

608 
u32
 
swfw_sync
;

609 
u32
 
swmask
 = 
mask
;

610 
u32
 
fwmask
 = 
mask
 << 16;

611 
s32
 
ªt_vÆ
 = 0;

612 
s32
 
i
 = 0, 
timeout
 = 200;

614 
i
 < 
timeout
) {

615 i‡(
	`igb_gë_hw_£m≠h‹e
(
hw
)) {

616 
ªt_vÆ
 = -
E1000_ERR_SWFW_SYNC
;

617 
out
;

620 
swfw_sync
 = 
	`rd32
(
E1000_SW_FW_SYNC
);

621 i‡(!(
swfw_sync
 & (
fwmask
 | 
swmask
)))

628 
	`igb_put_hw_£m≠h‹e
(
hw
);

629 
	`mdñay
(5);

630 
i
++;

633 i‡(
i
 =
timeout
) {

634 
	`hw_dbg
("Driver can'táccessÑesource, SW_FW_SYNCÅimeout.\n");

635 
ªt_vÆ
 = -
E1000_ERR_SWFW_SYNC
;

636 
out
;

639 
swfw_sync
 |
swmask
;

640 
	`wr32
(
E1000_SW_FW_SYNC
, 
swfw_sync
);

642 
	`igb_put_hw_£m≠h‹e
(
hw
);

644 
out
:

645  
ªt_vÆ
;

646 
	}
}

656 
	$igb_ªÀa£_swfw_sync_82575
(
e1000_hw
 *
hw
, 
u16
 
mask
)

658 
u32
 
swfw_sync
;

660 
	`igb_gë_hw_£m≠h‹e
(
hw
) != 0);

663 
swfw_sync
 = 
	`rd32
(
E1000_SW_FW_SYNC
);

664 
swfw_sync
 &~
mask
;

665 
	`wr32
(
E1000_SW_FW_SYNC
, 
swfw_sync
);

667 
	`igb_put_hw_£m≠h‹e
(
hw
);

668 
	}
}

680 
s32
 
	$igb_gë_cfg_d⁄e_82575
(
e1000_hw
 *
hw
)

682 
s32
 
timeout
 = 
PHY_CFG_TIMEOUT
;

683 
s32
 
ªt_vÆ
 = 0;

684 
u32
 
mask
 = 
E1000_NVM_CFG_DONE_PORT_0
;

686 i‡(
hw
->
bus
.
func
 == 1)

687 
mask
 = 
E1000_NVM_CFG_DONE_PORT_1
;

688 i‡(
hw
->
bus
.
func
 =
E1000_FUNC_2
)

689 
mask
 = 
E1000_NVM_CFG_DONE_PORT_2
;

690 i‡(
hw
->
bus
.
func
 =
E1000_FUNC_3
)

691 
mask
 = 
E1000_NVM_CFG_DONE_PORT_3
;

693 
timeout
) {

694 i‡(
	`rd32
(
E1000_EEMNGCTL
Ë& 
mask
)

696 
	`m¶ìp
(1);

697 
timeout
--;

699 i‡(!
timeout
)

700 
	`hw_dbg
("MNG configuration cycle hasÇot completed.\n");

703 i‡(((
	`rd32
(
E1000_EECD
Ë& 
E1000_EECD_PRES
) == 0) &&

704 (
hw
->
phy
.
ty≥
 =
e1000_phy_igp_3
))

705 
	`igb_phy_öô_s¸ùt_igp3
(
hw
);

707  
ªt_vÆ
;

708 
	}
}

717 
s32
 
	$igb_check_f‹_lök_82575
(
e1000_hw
 *
hw
)

719 
s32
 
ªt_vÆ
;

720 
u16
 
•ìd
, 
du∂ex
;

722 i‡(
hw
->
phy
.
medü_ty≥
 !
e1000_medü_ty≥_c›≥r
) {

723 
ªt_vÆ
 = 
	`igb_gë_pcs_•ìd_™d_du∂ex_82575
(
hw
, &
•ìd
,

724 &
du∂ex
);

730 
hw
->
mac
.
gë_lök_°©us
 = !hw->mac.
£rdes_has_lök
;

732 
ªt_vÆ
 = 
	`igb_check_f‹_c›≥r_lök
(
hw
);

735  
ªt_vÆ
;

736 
	}
}

742 
	$igb_powî_up_£rdes_lök_82575
(
e1000_hw
 *
hw
)

744 
u32
 
ªg
;

747 i‡((
hw
->
phy
.
medü_ty≥
 !
e1000_medü_ty≥_öã∫Æ_£rdes
) &&

748 !
	`igb_sgmii_a˘ive_82575
(
hw
))

752 
ªg
 = 
	`rd32
(
E1000_PCS_CFG0
);

753 
ªg
 |
E1000_PCS_CFG_PCS_EN
;

754 
	`wr32
(
E1000_PCS_CFG0
, 
ªg
);

757 
ªg
 = 
	`rd32
(
E1000_CTRL_EXT
);

758 
ªg
 &~
E1000_CTRL_EXT_SDP3_DATA
;

759 
	`wr32
(
E1000_CTRL_EXT
, 
ªg
);

762 
	`wrÊ
();

763 
	`m¶ìp
(1);

764 
	}
}

775 
s32
 
	$igb_gë_pcs_•ìd_™d_du∂ex_82575
(
e1000_hw
 *
hw
, 
u16
 *
•ìd
,

776 
u16
 *
du∂ex
)

778 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

779 
u32
 
pcs
;

782 
mac
->
£rdes_has_lök
 = 
Ál£
;

783 *
•ìd
 = 0;

784 *
du∂ex
 = 0;

791 
pcs
 = 
	`rd32
(
E1000_PCS_LSTAT
);

798 i‡((
pcs
 & 
E1000_PCS_LSTS_LINK_OK
Ë&& (pc†& 
E1000_PCS_LSTS_SYNK_OK
)) {

799 
mac
->
£rdes_has_lök
 = 
åue
;

802 i‡(
pcs
 & 
E1000_PCS_LSTS_SPEED_1000
) {

803 *
•ìd
 = 
SPEED_1000
;

804 } i‡(
pcs
 & 
E1000_PCS_LSTS_SPEED_100
) {

805 *
•ìd
 = 
SPEED_100
;

807 *
•ìd
 = 
SPEED_10
;

811 i‡(
pcs
 & 
E1000_PCS_LSTS_DUPLEX_FULL
) {

812 *
du∂ex
 = 
FULL_DUPLEX
;

814 *
du∂ex
 = 
HALF_DUPLEX
;

819 
	}
}

828 
	$igb_shutdown_£rdes_lök_82575
(
e1000_hw
 *
hw
)

830 
u32
 
ªg
;

832 i‡(
hw
->
phy
.
medü_ty≥
 !
e1000_medü_ty≥_öã∫Æ_£rdes
 &&

833 
	`igb_sgmii_a˘ive_82575
(
hw
))

836 i‡(!
	`igb_íabÀ_mng_∑ss_thru
(
hw
)) {

838 
ªg
 = 
	`rd32
(
E1000_PCS_CFG0
);

839 
ªg
 &~
E1000_PCS_CFG_PCS_EN
;

840 
	`wr32
(
E1000_PCS_CFG0
, 
ªg
);

843 
ªg
 = 
	`rd32
(
E1000_CTRL_EXT
);

844 
ªg
 |
E1000_CTRL_EXT_SDP3_DATA
;

845 
	`wr32
(
E1000_CTRL_EXT
, 
ªg
);

848 
	`wrÊ
();

849 
	`m¶ìp
(1);

851 
	}
}

860 
s32
 
	$igb_ª£t_hw_82575
(
e1000_hw
 *
hw
)

862 
u32
 
˘æ
, 
i¸
;

863 
s32
 
ªt_vÆ
;

869 
ªt_vÆ
 = 
	`igb_dißbÀ_pcõ_ma°î
(
hw
);

870 i‡(
ªt_vÆ
)

871 
	`hw_dbg
("PCI-E Master disableÖolling has failed.\n");

874 
ªt_vÆ
 = 
	`igb_£t_pcõ_com∂ëi⁄_timeout
(
hw
);

875 i‡(
ªt_vÆ
) {

876 
	`hw_dbg
("PCI-E Set completionÅimeout has failed.\n");

879 
	`hw_dbg
("Masking offáll interrupts\n");

880 
	`wr32
(
E1000_IMC
, 0xffffffff);

882 
	`wr32
(
E1000_RCTL
, 0);

883 
	`wr32
(
E1000_TCTL
, 
E1000_TCTL_PSP
);

884 
	`wrÊ
();

886 
	`m¶ìp
(10);

888 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

890 
	`hw_dbg
("Issuingá globalÑesetÅo MAC\n");

891 
	`wr32
(
E1000_CTRL
, 
˘æ
 | 
E1000_CTRL_RST
);

893 
ªt_vÆ
 = 
	`igb_gë_auto_rd_d⁄e
(
hw
);

894 i‡(
ªt_vÆ
) {

900 
	`hw_dbg
("Auto Read Done didÇot complete\n");

904 i‡((
	`rd32
(
E1000_EECD
Ë& 
E1000_EECD_PRES
) == 0)

905 
	`igb_ª£t_öô_s¸ùt_82575
(
hw
);

908 
	`wr32
(
E1000_IMC
, 0xffffffff);

909 
i¸
 = 
	`rd32
(
E1000_ICR
);

912 
ªt_vÆ
 = 
	`igb_check_Æt_mac_addr
(
hw
);

914  
ªt_vÆ
;

915 
	}
}

923 
s32
 
	$igb_öô_hw_82575
(
e1000_hw
 *
hw
)

925 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

926 
s32
 
ªt_vÆ
;

927 
u16
 
i
, 
ør_cou¡
 = 
mac
->
ør_íåy_cou¡
;

930 
ªt_vÆ
 = 
	`igb_id_Àd_öô
(
hw
);

931 i‡(
ªt_vÆ
) {

932 
	`hw_dbg
("Error initializing identification LED\n");

937 
	`hw_dbg
("InitializingÅhe IEEE VLAN\n");

938 
	`igb_˛ór_v·a
(
hw
);

941 
	`igb_öô_rx_addrs
(
hw
, 
ør_cou¡
);

944 
	`hw_dbg
("ZeroingÅhe MTA\n");

945 
i
 = 0; i < 
mac
->
mè_ªg_cou¡
; i++)

946 
	`¨øy_wr32
(
E1000_MTA
, 
i
, 0);

949 
	`hw_dbg
("ZeroingÅhe UTA\n");

950 
i
 = 0; i < 
mac
->
uè_ªg_cou¡
; i++)

951 
	`¨øy_wr32
(
E1000_UTA
, 
i
, 0);

954 
ªt_vÆ
 = 
	`igb_£tup_lök
(
hw
);

962 
	`igb_˛ór_hw_˙ås_82575
(
hw
);

964  
ªt_vÆ
;

965 
	}
}

975 
s32
 
	$igb_£tup_c›≥r_lök_82575
(
e1000_hw
 *
hw
)

977 
u32
 
˘æ
;

978 
s32
 
ªt_vÆ
;

980 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

981 
˘æ
 |
E1000_CTRL_SLU
;

982 
˘æ
 &~(
E1000_CTRL_FRCSPD
 | 
E1000_CTRL_FRCDPX
);

983 
	`wr32
(
E1000_CTRL
, 
˘æ
);

985 
ªt_vÆ
 = 
	`igb_£tup_£rdes_lök_82575
(
hw
);

986 i‡(
ªt_vÆ
)

987 
out
;

989 i‡(
	`igb_sgmii_a˘ive_82575
(
hw
Ë&& !hw->
phy
.
ª£t_dißbÀ
) {

991 
	`m¶ìp
(300);

993 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ª£t
(hw);

994 i‡(
ªt_vÆ
) {

995 
	`hw_dbg
("ErrorÑesettingÅhe PHY.\n");

996 
out
;

999 
hw
->
phy
.
ty≥
) {

1000 
e1000_phy_m88
:

1001 
ªt_vÆ
 = 
	`igb_c›≥r_lök_£tup_m88
(
hw
);

1003 
e1000_phy_igp_3
:

1004 
ªt_vÆ
 = 
	`igb_c›≥r_lök_£tup_igp
(
hw
);

1006 
e1000_phy_82580
:

1007 
ªt_vÆ
 = 
	`igb_c›≥r_lök_£tup_82580
(
hw
);

1010 
ªt_vÆ
 = -
E1000_ERR_PHY
;

1014 i‡(
ªt_vÆ
)

1015 
out
;

1017 
ªt_vÆ
 = 
	`igb_£tup_c›≥r_lök
(
hw
);

1018 
out
:

1019  
ªt_vÆ
;

1020 
	}
}

1031 
s32
 
	$igb_£tup_£rdes_lök_82575
(
e1000_hw
 *
hw
)

1033 
u32
 
˘æ_ext
, 
˘æ_ªg
, 
ªg
;

1034 
boﬁ
 
pcs_aut⁄eg
;

1036 i‡((
hw
->
phy
.
medü_ty≥
 !
e1000_medü_ty≥_öã∫Æ_£rdes
) &&

1037 !
	`igb_sgmii_a˘ive_82575
(
hw
))

1046 
	`wr32
(
E1000_SCTL
, 
E1000_SCTL_DISABLE_SERDES_LOOPBACK
);

1049 
˘æ_ext
 = 
	`rd32
(
E1000_CTRL_EXT
);

1050 
˘æ_ext
 &~
E1000_CTRL_EXT_SDP3_DATA
;

1051 
	`wr32
(
E1000_CTRL_EXT
, 
˘æ_ext
);

1053 
˘æ_ªg
 = 
	`rd32
(
E1000_CTRL
);

1054 
˘æ_ªg
 |
E1000_CTRL_SLU
;

1056 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
 || hw->mac.ty≥ =
e1000_82576
) {

1058 
˘æ_ªg
 |
E1000_CTRL_SWDPIN0
 | 
E1000_CTRL_SWDPIN1
;

1061 
ªg
 = 
	`rd32
(
E1000_CONNSW
);

1062 
ªg
 |
E1000_CONNSW_ENRGSRC
;

1063 
	`wr32
(
E1000_CONNSW
, 
ªg
);

1066 
ªg
 = 
	`rd32
(
E1000_PCS_LCTL
);

1069 
pcs_aut⁄eg
 = 
hw
->
mac
.
aut⁄eg
;

1071 
˘æ_ext
 & 
E1000_CTRL_EXT_LINK_MODE_MASK
) {

1072 
E1000_CTRL_EXT_LINK_MODE_SGMII
:

1074 
pcs_aut⁄eg
 = 
åue
;

1076 
ªg
 &~(
E1000_PCS_LCTL_AN_TIMEOUT
);

1078 
E1000_CTRL_EXT_LINK_MODE_1000BASE_KX
:

1080 
pcs_aut⁄eg
 = 
Ál£
;

1087 
˘æ_ªg
 |
E1000_CTRL_SPD_1000
 | 
E1000_CTRL_FRCSPD
 |

1088 
E1000_CTRL_FD
 | 
E1000_CTRL_FRCDPX
;

1091 
ªg
 |
E1000_PCS_LCTL_FSV_1000
 | 
E1000_PCS_LCTL_FDV_FULL
;

1095 
	`wr32
(
E1000_CTRL
, 
˘æ_ªg
);

1103 
ªg
 &~(
E1000_PCS_LCTL_AN_ENABLE
 | 
E1000_PCS_LCTL_FLV_LINK_UP
 |

1104 
E1000_PCS_LCTL_FSD
 | 
E1000_PCS_LCTL_FORCE_LINK
);

1110 
ªg
 |
E1000_PCS_LCTL_FORCE_FCTRL
;

1112 i‡(
pcs_aut⁄eg
) {

1114 
ªg
 |
E1000_PCS_LCTL_AN_ENABLE
 |

1115 
E1000_PCS_LCTL_AN_RESTART
;

1116 
	`hw_dbg
("C⁄figurög Aut⁄eg:PCS_LCTL=0x%08X\n", 
ªg
);

1119 
ªg
 |
E1000_PCS_LCTL_FSD
;

1121 
	`hw_dbg
("C⁄figurög F‹˚d Lök:PCS_LCTL=0x%08X\n", 
ªg
);

1124 
	`wr32
(
E1000_PCS_LCTL
, 
ªg
);

1126 i‡(!
	`igb_sgmii_a˘ive_82575
(
hw
))

1127 
	`igb_f‹˚_mac_fc
(
hw
);

1130 
	}
}

1140 
boﬁ
 
	$igb_sgmii_a˘ive_82575
(
e1000_hw
 *
hw
)

1142 
e1000_dev_•ec_82575
 *
dev_•ec
 = &
hw
->dev_•ec.
_82575
;

1143  
dev_•ec
->
sgmii_a˘ive
;

1144 
	}
}

1153 
s32
 
	$igb_ª£t_öô_s¸ùt_82575
(
e1000_hw
 *
hw
)

1155 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
) {

1156 
	`hw_dbg
("RunningÑeset init script for 82575\n");

1158 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCTL
, 0x00, 0x0C);

1159 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCTL
, 0x01, 0x78);

1160 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCTL
, 0x1B, 0x23);

1161 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCTL
, 0x23, 0x15);

1164 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_CCMCTL
, 0x14, 0x00);

1165 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_CCMCTL
, 0x10, 0x00);

1168 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_GIOCTL
, 0x00, 0xEC);

1169 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_GIOCTL
, 0x61, 0xDF);

1170 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_GIOCTL
, 0x34, 0x05);

1171 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_GIOCTL
, 0x2F, 0x81);

1174 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCCTL
, 0x02, 0x47);

1175 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCCTL
, 0x14, 0x00);

1176 
	`igb_wrôe_8bô_˘æ_ªg
(
hw
, 
E1000_SCCTL
, 0x10, 0x00);

1180 
	}
}

1186 
s32
 
	$igb_ªad_mac_addr_82575
(
e1000_hw
 *
hw
)

1188 
s32
 
ªt_vÆ
 = 0;

1195 
ªt_vÆ
 = 
	`igb_check_Æt_mac_addr
(
hw
);

1196 i‡(
ªt_vÆ
)

1197 
out
;

1199 
ªt_vÆ
 = 
	`igb_ªad_mac_addr
(
hw
);

1201 
out
:

1202  
ªt_vÆ
;

1203 
	}
}

1212 
	$igb_powî_down_phy_c›≥r_82575
(
e1000_hw
 *
hw
)

1215 i‡(!(
	`igb_íabÀ_mng_∑ss_thru
(
hw
Ë|| 
	`igb_check_ª£t_block
(hw)))

1216 
	`igb_powî_down_phy_c›≥r
(
hw
);

1217 
	}
}

1225 
	$igb_˛ór_hw_˙ås_82575
(
e1000_hw
 *
hw
)

1227 
	`igb_˛ór_hw_˙ås_ba£
(
hw
);

1229 
	`rd32
(
E1000_PRC64
);

1230 
	`rd32
(
E1000_PRC127
);

1231 
	`rd32
(
E1000_PRC255
);

1232 
	`rd32
(
E1000_PRC511
);

1233 
	`rd32
(
E1000_PRC1023
);

1234 
	`rd32
(
E1000_PRC1522
);

1235 
	`rd32
(
E1000_PTC64
);

1236 
	`rd32
(
E1000_PTC127
);

1237 
	`rd32
(
E1000_PTC255
);

1238 
	`rd32
(
E1000_PTC511
);

1239 
	`rd32
(
E1000_PTC1023
);

1240 
	`rd32
(
E1000_PTC1522
);

1242 
	`rd32
(
E1000_ALGNERRC
);

1243 
	`rd32
(
E1000_RXERRC
);

1244 
	`rd32
(
E1000_TNCRS
);

1245 
	`rd32
(
E1000_CEXTERR
);

1246 
	`rd32
(
E1000_TSCTC
);

1247 
	`rd32
(
E1000_TSCTFC
);

1249 
	`rd32
(
E1000_MGTPRC
);

1250 
	`rd32
(
E1000_MGTPDC
);

1251 
	`rd32
(
E1000_MGTPTC
);

1253 
	`rd32
(
E1000_IAC
);

1254 
	`rd32
(
E1000_ICRXOC
);

1256 
	`rd32
(
E1000_ICRXPTC
);

1257 
	`rd32
(
E1000_ICRXATC
);

1258 
	`rd32
(
E1000_ICTXPTC
);

1259 
	`rd32
(
E1000_ICTXATC
);

1260 
	`rd32
(
E1000_ICTXQEC
);

1261 
	`rd32
(
E1000_ICTXQMTC
);

1262 
	`rd32
(
E1000_ICRXDMTC
);

1264 
	`rd32
(
E1000_CBTMPC
);

1265 
	`rd32
(
E1000_HTDPMC
);

1266 
	`rd32
(
E1000_CBRMPC
);

1267 
	`rd32
(
E1000_RPTHC
);

1268 
	`rd32
(
E1000_HGPTC
);

1269 
	`rd32
(
E1000_HTCBDPC
);

1270 
	`rd32
(
E1000_HGORCL
);

1271 
	`rd32
(
E1000_HGORCH
);

1272 
	`rd32
(
E1000_HGOTCL
);

1273 
	`rd32
(
E1000_HGOTCH
);

1274 
	`rd32
(
E1000_LENERRS
);

1277 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_öã∫Æ_£rdes
 ||

1278 
	`igb_sgmii_a˘ive_82575
(
hw
))

1279 
	`rd32
(
E1000_SCVPC
);

1280 
	}
}

1291 
	$igb_rx_fifo_Êush_82575
(
e1000_hw
 *
hw
)

1293 
u32
 
r˘l
, 
æpml
, 
rxd˘l
[4], 
rf˘l
, 
ãmp_r˘l
, 
rx_íabÀd
;

1294 
i
, 
ms_waô
;

1296 i‡(
hw
->
mac
.
ty≥
 !
e1000_82575
 ||

1297 !(
	`rd32
(
E1000_MANC
Ë& 
E1000_MANC_RCV_TCO_EN
))

1301 
i
 = 0; i < 4; i++) {

1302 
rxd˘l
[
i
] = 
	`rd32
(
	`E1000_RXDCTL
(i));

1303 
	`wr32
(
	`E1000_RXDCTL
(
i
),

1304 
rxd˘l
[
i
] & ~
E1000_RXDCTL_QUEUE_ENABLE
);

1307 
ms_waô
 = 0; ms_wait < 10; ms_wait++) {

1308 
	`m¶ìp
(1);

1309 
rx_íabÀd
 = 0;

1310 
i
 = 0; i < 4; i++)

1311 
rx_íabÀd
 |
	`rd32
(
	`E1000_RXDCTL
(
i
));

1312 i‡(!(
rx_íabÀd
 & 
E1000_RXDCTL_QUEUE_ENABLE
))

1316 i‡(
ms_waô
 == 10)

1317 
	`hw_dbg
("Queue disableÅimed outáfter 10ms\n");

1323 
rf˘l
 = 
	`rd32
(
E1000_RFCTL
);

1324 
	`wr32
(
E1000_RFCTL
, 
rf˘l
 & ~
E1000_RFCTL_LEF
);

1326 
æpml
 = 
	`rd32
(
E1000_RLPML
);

1327 
	`wr32
(
E1000_RLPML
, 0);

1329 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

1330 
ãmp_r˘l
 = 
r˘l
 & ~(
E1000_RCTL_EN
 | 
E1000_RCTL_SBP
);

1331 
ãmp_r˘l
 |
E1000_RCTL_LPE
;

1333 
	`wr32
(
E1000_RCTL
, 
ãmp_r˘l
);

1334 
	`wr32
(
E1000_RCTL
, 
ãmp_r˘l
 | 
E1000_RCTL_EN
);

1335 
	`wrÊ
();

1336 
	`m¶ìp
(2);

1341 
i
 = 0; i < 4; i++)

1342 
	`wr32
(
	`E1000_RXDCTL
(
i
), 
rxd˘l
[i]);

1343 
	`wr32
(
E1000_RCTL
, 
r˘l
);

1344 
	`wrÊ
();

1346 
	`wr32
(
E1000_RLPML
, 
æpml
);

1347 
	`wr32
(
E1000_RFCTL
, 
rf˘l
);

1350 
	`rd32
(
E1000_ROC
);

1351 
	`rd32
(
E1000_RNBC
);

1352 
	`rd32
(
E1000_MPC
);

1353 
	}
}

1365 
s32
 
	$igb_£t_pcõ_com∂ëi⁄_timeout
(
e1000_hw
 *
hw
)

1367 
u32
 
g¸
 = 
	`rd32
(
E1000_GCR
);

1368 
s32
 
ªt_vÆ
 = 0;

1369 
u16
 
pcõ_dev˘l2
;

1372 i‡(
g¸
 & 
E1000_GCR_CMPL_TMOUT_MASK
)

1373 
out
;

1379 i‡(!(
g¸
 & 
E1000_GCR_CAP_VER2
)) {

1380 
g¸
 |
E1000_GCR_CMPL_TMOUT_10ms
;

1381 
out
;

1389 
ªt_vÆ
 = 
	`igb_ªad_pcõ_ˇp_ªg
(
hw
, 
PCIE_DEVICE_CONTROL2
,

1390 &
pcõ_dev˘l2
);

1391 i‡(
ªt_vÆ
)

1392 
out
;

1394 
pcõ_dev˘l2
 |
PCIE_DEVICE_CONTROL2_16ms
;

1396 
ªt_vÆ
 = 
	`igb_wrôe_pcõ_ˇp_ªg
(
hw
, 
PCIE_DEVICE_CONTROL2
,

1397 &
pcõ_dev˘l2
);

1398 
out
:

1400 
g¸
 &~
E1000_GCR_CMPL_TMOUT_RESEND
;

1402 
	`wr32
(
E1000_GCR
, 
g¸
);

1403  
ªt_vÆ
;

1404 
	}
}

1413 
	$igb_vmdq_£t_lo›back_pf
(
e1000_hw
 *
hw
, 
boﬁ
 
íabÀ
)

1415 
u32
 
dtxswc
 = 
	`rd32
(
E1000_DTXSWC
);

1417 i‡(
íabÀ
)

1418 
dtxswc
 |
E1000_DTXSWC_VMDQ_LOOPBACK_EN
;

1420 
dtxswc
 &~
E1000_DTXSWC_VMDQ_LOOPBACK_EN
;

1422 
	`wr32
(
E1000_DTXSWC
, 
dtxswc
);

1423 
	}
}

1432 
	$igb_vmdq_£t_ª∂iˇti⁄_pf
(
e1000_hw
 *
hw
, 
boﬁ
 
íabÀ
)

1434 
u32
 
vt_˘l
 = 
	`rd32
(
E1000_VT_CTL
);

1436 i‡(
íabÀ
)

1437 
vt_˘l
 |
E1000_VT_CTL_VM_REPL_EN
;

1439 
vt_˘l
 &~
E1000_VT_CTL_VM_REPL_EN
;

1441 
	`wr32
(
E1000_VT_CTL
, 
vt_˘l
);

1442 
	}
}

1453 
s32
 
	$igb_ªad_phy_ªg_82580
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
)

1455 
s32
 
ªt_vÆ
;

1458 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`acquúe
(hw);

1459 i‡(
ªt_vÆ
)

1460 
out
;

1462 
ªt_vÆ
 = 
	`igb_ªad_phy_ªg_mdic
(
hw
, 
off£t
, 
d©a
);

1464 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

1466 
out
:

1467  
ªt_vÆ
;

1468 
	}
}

1478 
s32
 
	$igb_wrôe_phy_ªg_82580
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
)

1480 
s32
 
ªt_vÆ
;

1483 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`acquúe
(hw);

1484 i‡(
ªt_vÆ
)

1485 
out
;

1487 
ªt_vÆ
 = 
	`igb_wrôe_phy_ªg_mdic
(
hw
, 
off£t
, 
d©a
);

1489 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

1491 
out
:

1492  
ªt_vÆ
;

1493 
	}
}

1502 
s32
 
	$igb_ª£t_hw_82580
(
e1000_hw
 *
hw
)

1504 
s32
 
ªt_vÆ
 = 0;

1506 
u16
 
swmbsw_mask
 = 
E1000_SW_SYNCH_MB
;

1507 
u32
 
˘æ
, 
i¸
;

1508 
boﬁ
 
globÆ_devi˚_ª£t
 = 
hw
->
dev_•ec
.
_82575
.global_device_reset;

1511 
hw
->
dev_•ec
.
_82575
.
globÆ_devi˚_ª£t
 = 
Ál£
;

1514 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

1520 
ªt_vÆ
 = 
	`igb_dißbÀ_pcõ_ma°î
(
hw
);

1521 i‡(
ªt_vÆ
)

1522 
	`hw_dbg
("PCI-E Master disableÖolling has failed.\n");

1524 
	`hw_dbg
("Masking offáll interrupts\n");

1525 
	`wr32
(
E1000_IMC
, 0xffffffff);

1526 
	`wr32
(
E1000_RCTL
, 0);

1527 
	`wr32
(
E1000_TCTL
, 
E1000_TCTL_PSP
);

1528 
	`wrÊ
();

1530 
	`m¶ìp
(10);

1533 i‡(
globÆ_devi˚_ª£t
 &&

1534 
	`igb_acquúe_swfw_sync_82575
(
hw
, 
swmbsw_mask
))

1535 
globÆ_devi˚_ª£t
 = 
Ál£
;

1537 i‡(
globÆ_devi˚_ª£t
 &&

1538 !(
	`rd32
(
E1000_STATUS
Ë& 
E1000_STAT_DEV_RST_SET
))

1539 
˘æ
 |
E1000_CTRL_DEV_RST
;

1541 
˘æ
 |
E1000_CTRL_RST
;

1543 
	`wr32
(
E1000_CTRL
, 
˘æ
);

1546 i‡(
globÆ_devi˚_ª£t
)

1547 
	`m¶ìp
(5);

1549 
ªt_vÆ
 = 
	`igb_gë_auto_rd_d⁄e
(
hw
);

1550 i‡(
ªt_vÆ
) {

1556 
	`hw_dbg
("Auto Read Done didÇot complete\n");

1560 i‡((
	`rd32
(
E1000_EECD
Ë& 
E1000_EECD_PRES
) == 0)

1561 
	`igb_ª£t_öô_s¸ùt_82575
(
hw
);

1564 
	`wr32
(
E1000_STATUS
, 
E1000_STAT_DEV_RST_SET
);

1567 
	`wr32
(
E1000_IMC
, 0xffffffff);

1568 
i¸
 = 
	`rd32
(
E1000_ICR
);

1571 
ªt_vÆ
 = 
	`igb_check_Æt_mac_addr
(
hw
);

1574 i‡(
globÆ_devi˚_ª£t
)

1575 
	`igb_ªÀa£_swfw_sync_82575
(
hw
, 
swmbsw_mask
);

1577  
ªt_vÆ
;

1578 
	}
}

1590 
u16
 
	$igb_rxpbs_adju°_82580
(
u32
 
d©a
)

1592 
u16
 
ªt_vÆ
 = 0;

1594 i‡(
d©a
 < 
E1000_82580_RXPBS_TABLE_SIZE
)

1595 
ªt_vÆ
 = 
e1000_82580_rxpbs_èbÀ
[
d©a
];

1597  
ªt_vÆ
;

1598 
	}
}

1600 
e1000_mac_›î©i⁄s
 
	ge1000_mac_›s_82575
 = {

1601 .
öô_hw
 = 
igb_öô_hw_82575
,

1602 .
	gcheck_f‹_lök
 = 
igb_check_f‹_lök_82575
,

1603 .
	gør_£t
 = 
igb_ør_£t
,

1604 .
	gªad_mac_addr
 = 
igb_ªad_mac_addr_82575
,

1605 .
	ggë_•ìd_™d_du∂ex
 = 
igb_gë_•ìd_™d_du∂ex_c›≥r
,

1608 
e1000_phy_›î©i⁄s
 
	ge1000_phy_›s_82575
 = {

1609 .
acquúe
 = 
igb_acquúe_phy_82575
,

1610 .
	ggë_cfg_d⁄e
 = 
igb_gë_cfg_d⁄e_82575
,

1611 .
	gªÀa£
 = 
igb_ªÀa£_phy_82575
,

1614 
e1000_nvm_›î©i⁄s
 
	ge1000_nvm_›s_82575
 = {

1615 .
acquúe
 = 
igb_acquúe_nvm_82575
,

1616 .
	gªad
 = 
igb_ªad_nvm_ìrd
,

1617 .
	gªÀa£
 = 
igb_ªÀa£_nvm_82575
,

1618 .
	gwrôe
 = 
igb_wrôe_nvm_•i
,

1621 c⁄° 
e1000_öfo
 
	ge1000_82575_öfo
 = {

1622 .
gë_öv¨ü¡s
 = 
igb_gë_öv¨ü¡s_82575
,

1623 .
	gmac_›s
 = &
e1000_mac_›s_82575
,

1624 .
	gphy_›s
 = &
e1000_phy_›s_82575
,

1625 .
	gnvm_›s
 = &
e1000_nvm_›s_82575
,

	@igb/e1000_82575.h

28 #i‚de‡
_E1000_82575_H_


29 
	#_E1000_82575_H_


	)

31 
igb_shutdown_£rdes_lök_82575
(
e1000_hw
 *
hw
);

32 
igb_powî_up_£rdes_lök_82575
(
e1000_hw
 *
hw
);

33 
igb_powî_down_phy_c›≥r_82575
(
e1000_hw
 *
hw
);

34 
igb_rx_fifo_Êush_82575
(
e1000_hw
 *
hw
);

36 
	#ID_LED_DEFAULT_82575_SERDES
 ((
ID_LED_DEF1_DEF2
 << 12) | \

37 (
ID_LED_DEF1_DEF2
 << 8) | \

38 (
ID_LED_DEF1_DEF2
 << 4) | \

39 (
ID_LED_OFF1_ON2
))

	)

41 
	#E1000_RAR_ENTRIES_82575
 16

	)

42 
	#E1000_RAR_ENTRIES_82576
 24

	)

43 
	#E1000_RAR_ENTRIES_82580
 24

	)

44 
	#E1000_RAR_ENTRIES_I350
 32

	)

46 
	#E1000_SW_SYNCH_MB
 0x00000100

	)

47 
	#E1000_STAT_DEV_RST_SET
 0x00100000

	)

48 
	#E1000_CTRL_DEV_RST
 0x20000000

	)

51 
	#E1000_SRRCTL_BSIZEPKT_SHIFT
 10

	)

52 
	#E1000_SRRCTL_BSIZEHDRSIZE_SHIFT
 2

	)

53 
	#E1000_SRRCTL_DESCTYPE_ADV_ONEBUF
 0x02000000

	)

54 
	#E1000_SRRCTL_DESCTYPE_HDR_SPLIT_ALWAYS
 0x0A000000

	)

55 
	#E1000_SRRCTL_DROP_EN
 0x80000000

	)

56 
	#E1000_SRRCTL_TIMESTAMP
 0x40000000

	)

58 
	#E1000_MRQC_ENABLE_RSS_4Q
 0x00000002

	)

59 
	#E1000_MRQC_ENABLE_VMDQ
 0x00000003

	)

60 
	#E1000_MRQC_ENABLE_VMDQ_RSS_2Q
 0x00000005

	)

61 
	#E1000_MRQC_RSS_FIELD_IPV4_UDP
 0x00400000

	)

62 
	#E1000_MRQC_RSS_FIELD_IPV6_UDP
 0x00800000

	)

63 
	#E1000_MRQC_RSS_FIELD_IPV6_UDP_EX
 0x01000000

	)

65 
	#E1000_EICR_TX_QUEUE
 ( \

66 
E1000_EICR_TX_QUEUE0
 | \

67 
E1000_EICR_TX_QUEUE1
 | \

68 
E1000_EICR_TX_QUEUE2
 | \

69 
E1000_EICR_TX_QUEUE3
)

	)

71 
	#E1000_EICR_RX_QUEUE
 ( \

72 
E1000_EICR_RX_QUEUE0
 | \

73 
E1000_EICR_RX_QUEUE1
 | \

74 
E1000_EICR_RX_QUEUE2
 | \

75 
E1000_EICR_RX_QUEUE3
)

	)

78 
	#E1000_IMIREXT_SIZE_BP
 0x00001000

	)

79 
	#E1000_IMIREXT_CTRL_BP
 0x00080000

	)

82 
	ue1000_adv_rx_desc
 {

84 
__À64
 
	mpkt_addr
;

85 
__À64
 
	mhdr_addr
;

86 } 
	mªad
;

90 
__À16
 
	mpkt_öfo
;

91 
__À16
 
	mhdr_öfo
;

93 } 
	mlo_dw‹d
;

95 
__À32
 
	mrss
;

97 
__À16
 
	mù_id
;

98 
__À16
 
	mcsum
;

99 } 
	mcsum_ù
;

100 } 
	mhi_dw‹d
;

101 } 
	mlowî
;

103 
__À32
 
	m°©us_îr‹
;

104 
__À16
 
	mÀngth
;

105 
__À16
 
	mvœn
;

106 } 
	muµî
;

107 } 
	mwb
;

110 
	#E1000_RXDADV_HDRBUFLEN_MASK
 0x7FE0

	)

111 
	#E1000_RXDADV_HDRBUFLEN_SHIFT
 5

	)

112 
	#E1000_RXDADV_STAT_TS
 0x10000

	)

113 
	#E1000_RXDADV_STAT_TSIP
 0x08000

	)

116 
	ue1000_adv_tx_desc
 {

118 
__À64
 
	mbuf„r_addr
;

119 
__À32
 
	mcmd_ty≥_Àn
;

120 
__À32
 
	mﬁöfo_°©us
;

121 } 
	mªad
;

123 
__À64
 
	mrsvd
;

124 
__À32
 
	mnxt£q_£ed
;

125 
__À32
 
	m°©us
;

126 } 
	mwb
;

130 
	#E1000_ADVTXD_MAC_TSTAMP
 0x00080000

	)

131 
	#E1000_ADVTXD_DTYP_CTXT
 0x00200000

	)

132 
	#E1000_ADVTXD_DTYP_DATA
 0x00300000

	)

133 
	#E1000_ADVTXD_DCMD_IFCS
 0x02000000

	)

134 
	#E1000_ADVTXD_DCMD_DEXT
 0x20000000

	)

135 
	#E1000_ADVTXD_DCMD_VLE
 0x40000000

	)

136 
	#E1000_ADVTXD_DCMD_TSE
 0x80000000

	)

137 
	#E1000_ADVTXD_PAYLEN_SHIFT
 14

	)

140 
	se1000_adv_tx_c⁄ãxt_desc
 {

141 
__À32
 
	mvœn_macù_Àns
;

142 
__À32
 
	m£qnum_£ed
;

143 
__À32
 
	mty≥_tucmd_mlhl
;

144 
__À32
 
	mmss_l4Àn_idx
;

147 
	#E1000_ADVTXD_MACLEN_SHIFT
 9

	)

148 
	#E1000_ADVTXD_TUCMD_IPV4
 0x00000400

	)

149 
	#E1000_ADVTXD_TUCMD_L4T_TCP
 0x00000800

	)

150 
	#E1000_ADVTXD_TUCMD_L4T_SCTP
 0x00001000

	)

152 
	#E1000_ADVTXD_L4LEN_SHIFT
 8

	)

153 
	#E1000_ADVTXD_MSS_SHIFT
 16

	)

158 
	#E1000_TXDCTL_QUEUE_ENABLE
 0x02000000

	)

162 
	#E1000_RXDCTL_QUEUE_ENABLE
 0x02000000

	)

165 
	#E1000_DCA_CTRL_DCA_MODE_DISABLE
 0x01

	)

166 
	#E1000_DCA_CTRL_DCA_MODE_CB2
 0x02

	)

168 
	#E1000_DCA_RXCTRL_CPUID_MASK
 0x0000001F

	)

169 
	#E1000_DCA_RXCTRL_DESC_DCA_EN
 (1 << 5Ë

	)

170 
	#E1000_DCA_RXCTRL_HEAD_DCA_EN
 (1 << 6Ë

	)

171 
	#E1000_DCA_RXCTRL_DATA_DCA_EN
 (1 << 7Ë

	)

173 
	#E1000_DCA_TXCTRL_CPUID_MASK
 0x0000001F

	)

174 
	#E1000_DCA_TXCTRL_DESC_DCA_EN
 (1 << 5Ë

	)

175 
	#E1000_DCA_TXCTRL_TX_WB_RO_EN
 (1 << 11Ë

	)

178 
	#E1000_DCA_TXCTRL_CPUID_MASK_82576
 0xFF000000

	)

179 
	#E1000_DCA_RXCTRL_CPUID_MASK_82576
 0xFF000000

	)

180 
	#E1000_DCA_TXCTRL_CPUID_SHIFT
 24

	)

181 
	#E1000_DCA_RXCTRL_CPUID_SHIFT
 24

	)

184 
	#E1000_ETQF_FILTER_ENABLE
 (1 << 26)

	)

185 
	#E1000_ETQF_1588
 (1 << 30)

	)

188 
	#E1000_FTQF_VF_BP
 0x00008000

	)

189 
	#E1000_FTQF_1588_TIME_STAMP
 0x08000000

	)

190 
	#E1000_FTQF_MASK
 0xF0000000

	)

191 
	#E1000_FTQF_MASK_PROTO_BP
 0x10000000

	)

192 
	#E1000_FTQF_MASK_SOURCE_PORT_BP
 0x80000000

	)

194 
	#E1000_NVM_APME_82575
 0x0400

	)

195 
	#MAX_NUM_VFS
 8

	)

197 
	#E1000_DTXSWC_VMDQ_LOOPBACK_EN
 (1 << 31Ë

	)

200 
	#E1000_VT_CTL_DEFAULT_POOL_SHIFT
 7

	)

201 
	#E1000_VT_CTL_DEFAULT_POOL_MASK
 (0x7 << 
E1000_VT_CTL_DEFAULT_POOL_SHIFT
)

	)

204 
	#E1000_VT_CTL_IGNORE_MAC
 (1 << 28)

	)

205 
	#E1000_VT_CTL_DISABLE_DEF_POOL
 (1 << 29)

	)

206 
	#E1000_VT_CTL_VM_REPL_EN
 (1 << 30)

	)

209 
	#E1000_VMOLR_RLPML_MASK
 0x00003FFF

	)

210 
	#E1000_VMOLR_LPE
 0x00010000

	)

211 
	#E1000_VMOLR_RSSE
 0x00020000

	)

212 
	#E1000_VMOLR_AUPE
 0x01000000

	)

213 
	#E1000_VMOLR_ROMPE
 0x02000000

	)

214 
	#E1000_VMOLR_ROPE
 0x04000000

	)

215 
	#E1000_VMOLR_BAM
 0x08000000

	)

216 
	#E1000_VMOLR_MPME
 0x10000000

	)

217 
	#E1000_VMOLR_STRVLAN
 0x40000000

	)

218 
	#E1000_VMOLR_STRCRC
 0x80000000

	)

220 
	#E1000_VLVF_ARRAY_SIZE
 32

	)

221 
	#E1000_VLVF_VLANID_MASK
 0x00000FFF

	)

222 
	#E1000_VLVF_POOLSEL_SHIFT
 12

	)

223 
	#E1000_VLVF_POOLSEL_MASK
 (0xFF << 
E1000_VLVF_POOLSEL_SHIFT
)

	)

224 
	#E1000_VLVF_LVLAN
 0x00100000

	)

225 
	#E1000_VLVF_VLANID_ENABLE
 0x80000000

	)

227 
	#E1000_VMVIR_VLANA_DEFAULT
 0x40000000

	)

228 
	#E1000_VMVIR_VLANA_NEVER
 0x80000000

	)

230 
	#E1000_IOVCTL
 0x05BBC

	)

231 
	#E1000_IOVCTL_REUSE_VFQ
 0x00000001

	)

233 
	#E1000_RPLOLR_STRVLAN
 0x40000000

	)

234 
	#E1000_RPLOLR_STRCRC
 0x80000000

	)

236 
	#E1000_DTXCTL_8023LL
 0x0004

	)

237 
	#E1000_DTXCTL_VLAN_ADDED
 0x0008

	)

238 
	#E1000_DTXCTL_OOS_ENABLE
 0x0010

	)

239 
	#E1000_DTXCTL_MDP_EN
 0x0020

	)

240 
	#E1000_DTXCTL_SPOOF_INT
 0x0040

	)

242 
	#ALL_QUEUES
 0xFFFF

	)

245 
	#E1000_RXPBS_SIZE_MASK_82576
 0x0000007F

	)

246 
igb_vmdq_£t_lo›back_pf
(
e1000_hw
 *, 
boﬁ
);

247 
igb_vmdq_£t_ª∂iˇti⁄_pf
(
e1000_hw
 *, 
boﬁ
);

248 
u16
 
igb_rxpbs_adju°_82580
(
u32
 
d©a
);

	@igb/e1000_defines.h

28 #i‚de‡
_E1000_DEFINES_H_


29 
	#_E1000_DEFINES_H_


	)

32 
	#REQ_TX_DESCRIPTOR_MULTIPLE
 8

	)

33 
	#REQ_RX_DESCRIPTOR_MULTIPLE
 8

	)

37 
	#E1000_WUC_PME_EN
 0x00000002

	)

40 
	#E1000_WUFC_LNKC
 0x00000001

	)

41 
	#E1000_WUFC_MAG
 0x00000002

	)

42 
	#E1000_WUFC_EX
 0x00000004

	)

43 
	#E1000_WUFC_MC
 0x00000008

	)

44 
	#E1000_WUFC_BC
 0x00000010

	)

47 
	#E1000_CTRL_EXT_SDP3_DATA
 0x00000080

	)

49 
	#E1000_CTRL_EXT_PFRSTD
 0x00004000

	)

50 
	#E1000_CTRL_EXT_LINK_MODE_MASK
 0x00C00000

	)

51 
	#E1000_CTRL_EXT_LINK_MODE_PCIE_SERDES
 0x00C00000

	)

52 
	#E1000_CTRL_EXT_LINK_MODE_1000BASE_KX
 0x00400000

	)

53 
	#E1000_CTRL_EXT_LINK_MODE_SGMII
 0x00800000

	)

54 
	#E1000_CTRL_EXT_EIAME
 0x01000000

	)

55 
	#E1000_CTRL_EXT_IRCA
 0x00000001

	)

58 
	#E1000_CTRL_EXT_DRV_LOAD
 0x10000000

	)

63 
	#E1000_CTRL_EXT_PBA_CLR
 0x80000000

	)

64 
	#E1000_I2CCMD_REG_ADDR_SHIFT
 16

	)

65 
	#E1000_I2CCMD_PHY_ADDR_SHIFT
 24

	)

66 
	#E1000_I2CCMD_OPCODE_READ
 0x08000000

	)

67 
	#E1000_I2CCMD_OPCODE_WRITE
 0x00000000

	)

68 
	#E1000_I2CCMD_READY
 0x20000000

	)

69 
	#E1000_I2CCMD_ERROR
 0x80000000

	)

70 
	#E1000_MAX_SGMII_PHY_REG_ADDR
 255

	)

71 
	#E1000_I2CCMD_PHY_TIMEOUT
 200

	)

72 
	#E1000_IVAR_VALID
 0x80

	)

73 
	#E1000_GPIE_NSICR
 0x00000001

	)

74 
	#E1000_GPIE_MSIX_MODE
 0x00000010

	)

75 
	#E1000_GPIE_EIAME
 0x40000000

	)

76 
	#E1000_GPIE_PBA
 0x80000000

	)

79 
	#E1000_RXD_STAT_DD
 0x01

	)

80 
	#E1000_RXD_STAT_EOP
 0x02

	)

81 
	#E1000_RXD_STAT_IXSM
 0x04

	)

82 
	#E1000_RXD_STAT_VP
 0x08

	)

83 
	#E1000_RXD_STAT_UDPCS
 0x10

	)

84 
	#E1000_RXD_STAT_TCPCS
 0x20

	)

85 
	#E1000_RXD_STAT_TS
 0x10000

	)

87 
	#E1000_RXDEXT_STATERR_CE
 0x01000000

	)

88 
	#E1000_RXDEXT_STATERR_SE
 0x02000000

	)

89 
	#E1000_RXDEXT_STATERR_SEQ
 0x04000000

	)

90 
	#E1000_RXDEXT_STATERR_CXE
 0x10000000

	)

91 
	#E1000_RXDEXT_STATERR_TCPE
 0x20000000

	)

92 
	#E1000_RXDEXT_STATERR_IPE
 0x40000000

	)

93 
	#E1000_RXDEXT_STATERR_RXE
 0x80000000

	)

96 
	#E1000_RXDEXT_ERR_FRAME_ERR_MASK
 ( \

97 
E1000_RXDEXT_STATERR_CE
 | \

98 
E1000_RXDEXT_STATERR_SE
 | \

99 
E1000_RXDEXT_STATERR_SEQ
 | \

100 
E1000_RXDEXT_STATERR_CXE
 | \

101 
E1000_RXDEXT_STATERR_RXE
)

	)

103 
	#E1000_MRQC_RSS_FIELD_IPV4_TCP
 0x00010000

	)

104 
	#E1000_MRQC_RSS_FIELD_IPV4
 0x00020000

	)

105 
	#E1000_MRQC_RSS_FIELD_IPV6_TCP_EX
 0x00040000

	)

106 
	#E1000_MRQC_RSS_FIELD_IPV6
 0x00100000

	)

107 
	#E1000_MRQC_RSS_FIELD_IPV6_TCP
 0x00200000

	)

111 
	#E1000_MANC_SMBUS_EN
 0x00000001

	)

112 
	#E1000_MANC_ASF_EN
 0x00000002

	)

114 
	#E1000_MANC_RCV_TCO_EN
 0x00020000

	)

115 
	#E1000_MANC_BLK_PHY_RST_ON_IDE
 0x00040000

	)

117 
	#E1000_MANC_EN_MAC_ADDR_FILTER
 0x00100000

	)

120 
	#E1000_RCTL_EN
 0x00000002

	)

121 
	#E1000_RCTL_SBP
 0x00000004

	)

122 
	#E1000_RCTL_UPE
 0x00000008

	)

123 
	#E1000_RCTL_MPE
 0x00000010

	)

124 
	#E1000_RCTL_LPE
 0x00000020

	)

125 
	#E1000_RCTL_LBM_MAC
 0x00000040

	)

126 
	#E1000_RCTL_LBM_TCVR
 0x000000C0

	)

127 
	#E1000_RCTL_RDMTS_HALF
 0x00000000

	)

128 
	#E1000_RCTL_MO_SHIFT
 12

	)

129 
	#E1000_RCTL_BAM
 0x00008000

	)

130 
	#E1000_RCTL_SZ_512
 0x00020000

	)

131 
	#E1000_RCTL_SZ_256
 0x00030000

	)

132 
	#E1000_RCTL_VFE
 0x00040000

	)

133 
	#E1000_RCTL_CFIEN
 0x00080000

	)

134 
	#E1000_RCTL_SECRC
 0x04000000

	)

153 
	#E1000_PSRCTL_BSIZE0_MASK
 0x0000007F

	)

154 
	#E1000_PSRCTL_BSIZE1_MASK
 0x00003F00

	)

155 
	#E1000_PSRCTL_BSIZE2_MASK
 0x003F0000

	)

156 
	#E1000_PSRCTL_BSIZE3_MASK
 0x3F000000

	)

158 
	#E1000_PSRCTL_BSIZE0_SHIFT
 7

	)

159 
	#E1000_PSRCTL_BSIZE1_SHIFT
 2

	)

160 
	#E1000_PSRCTL_BSIZE2_SHIFT
 6

	)

161 
	#E1000_PSRCTL_BSIZE3_SHIFT
 14

	)

164 
	#E1000_SWFW_EEP_SM
 0x1

	)

165 
	#E1000_SWFW_PHY0_SM
 0x2

	)

166 
	#E1000_SWFW_PHY1_SM
 0x4

	)

170 
	#E1000_CTRL_FD
 0x00000001

	)

171 
	#E1000_CTRL_GIO_MASTER_DISABLE
 0x00000004

	)

172 
	#E1000_CTRL_LRST
 0x00000008

	)

173 
	#E1000_CTRL_ASDE
 0x00000020

	)

174 
	#E1000_CTRL_SLU
 0x00000040

	)

175 
	#E1000_CTRL_ILOS
 0x00000080

	)

176 
	#E1000_CTRL_SPD_SEL
 0x00000300

	)

177 
	#E1000_CTRL_SPD_100
 0x00000100

	)

178 
	#E1000_CTRL_SPD_1000
 0x00000200

	)

179 
	#E1000_CTRL_FRCSPD
 0x00000800

	)

180 
	#E1000_CTRL_FRCDPX
 0x00001000

	)

184 
	#E1000_CTRL_SWDPIN0
 0x00040000

	)

185 
	#E1000_CTRL_SWDPIN1
 0x00080000

	)

186 
	#E1000_CTRL_SWDPIO0
 0x00400000

	)

187 
	#E1000_CTRL_RST
 0x04000000

	)

188 
	#E1000_CTRL_RFCE
 0x08000000

	)

189 
	#E1000_CTRL_TFCE
 0x10000000

	)

190 
	#E1000_CTRL_VME
 0x40000000

	)

191 
	#E1000_CTRL_PHY_RST
 0x80000000

	)

193 
	#E1000_CTRL_I2C_ENA
 0x02000000

	)

199 
	#E1000_CONNSW_ENRGSRC
 0x4

	)

200 
	#E1000_PCS_CFG_PCS_EN
 8

	)

201 
	#E1000_PCS_LCTL_FLV_LINK_UP
 1

	)

202 
	#E1000_PCS_LCTL_FSV_100
 2

	)

203 
	#E1000_PCS_LCTL_FSV_1000
 4

	)

204 
	#E1000_PCS_LCTL_FDV_FULL
 8

	)

205 
	#E1000_PCS_LCTL_FSD
 0x10

	)

206 
	#E1000_PCS_LCTL_FORCE_LINK
 0x20

	)

207 
	#E1000_PCS_LCTL_FORCE_FCTRL
 0x80

	)

208 
	#E1000_PCS_LCTL_AN_ENABLE
 0x10000

	)

209 
	#E1000_PCS_LCTL_AN_RESTART
 0x20000

	)

210 
	#E1000_PCS_LCTL_AN_TIMEOUT
 0x40000

	)

211 
	#E1000_ENABLE_SERDES_LOOPBACK
 0x0410

	)

213 
	#E1000_PCS_LSTS_LINK_OK
 1

	)

214 
	#E1000_PCS_LSTS_SPEED_100
 2

	)

215 
	#E1000_PCS_LSTS_SPEED_1000
 4

	)

216 
	#E1000_PCS_LSTS_DUPLEX_FULL
 8

	)

217 
	#E1000_PCS_LSTS_SYNK_OK
 0x10

	)

220 
	#E1000_STATUS_FD
 0x00000001

	)

221 
	#E1000_STATUS_LU
 0x00000002

	)

222 
	#E1000_STATUS_FUNC_MASK
 0x0000000C

	)

223 
	#E1000_STATUS_FUNC_SHIFT
 2

	)

224 
	#E1000_STATUS_FUNC_1
 0x00000004

	)

225 
	#E1000_STATUS_TXOFF
 0x00000010

	)

226 
	#E1000_STATUS_SPEED_100
 0x00000040

	)

227 
	#E1000_STATUS_SPEED_1000
 0x00000080

	)

230 
	#E1000_STATUS_GIO_MASTER_ENABLE
 0x00080000

	)

235 
	#SPEED_10
 10

	)

236 
	#SPEED_100
 100

	)

237 
	#SPEED_1000
 1000

	)

238 
	#HALF_DUPLEX
 1

	)

239 
	#FULL_DUPLEX
 2

	)

242 
	#ADVERTISE_10_HALF
 0x0001

	)

243 
	#ADVERTISE_10_FULL
 0x0002

	)

244 
	#ADVERTISE_100_HALF
 0x0004

	)

245 
	#ADVERTISE_100_FULL
 0x0008

	)

246 
	#ADVERTISE_1000_HALF
 0x0010

	)

247 
	#ADVERTISE_1000_FULL
 0x0020

	)

250 
	#E1000_ALL_SPEED_DUPLEX
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_10_FULL
 | \

251 
ADVERTISE_100_HALF
 | 
ADVERTISE_100_FULL
 | \

252 
ADVERTISE_1000_FULL
)

	)

253 
	#E1000_ALL_NOT_GIG
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_10_FULL
 | \

254 
ADVERTISE_100_HALF
 | 
ADVERTISE_100_FULL
)

	)

255 
	#E1000_ALL_100_SPEED
 (
ADVERTISE_100_HALF
 | 
ADVERTISE_100_FULL
)

	)

256 
	#E1000_ALL_10_SPEED
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_10_FULL
)

	)

257 
	#E1000_ALL_FULL_DUPLEX
 (
ADVERTISE_10_FULL
 | 
ADVERTISE_100_FULL
 | \

258 
ADVERTISE_1000_FULL
)

	)

259 
	#E1000_ALL_HALF_DUPLEX
 (
ADVERTISE_10_HALF
 | 
ADVERTISE_100_HALF
)

	)

261 
	#AUTONEG_ADVERTISE_SPEED_DEFAULT
 
E1000_ALL_SPEED_DUPLEX


	)

264 
	#E1000_LEDCTL_LED0_MODE_SHIFT
 0

	)

265 
	#E1000_LEDCTL_LED0_BLINK
 0x00000080

	)

267 
	#E1000_LEDCTL_MODE_LED_ON
 0xE

	)

268 
	#E1000_LEDCTL_MODE_LED_OFF
 0xF

	)

271 
	#E1000_TXD_POPTS_IXSM
 0x01

	)

272 
	#E1000_TXD_POPTS_TXSM
 0x02

	)

273 
	#E1000_TXD_CMD_EOP
 0x01000000

	)

274 
	#E1000_TXD_CMD_IFCS
 0x02000000

	)

275 
	#E1000_TXD_CMD_RS
 0x08000000

	)

276 
	#E1000_TXD_CMD_DEXT
 0x20000000

	)

277 
	#E1000_TXD_STAT_DD
 0x00000001

	)

281 
	#E1000_TCTL_EN
 0x00000002

	)

282 
	#E1000_TCTL_PSP
 0x00000008

	)

283 
	#E1000_TCTL_CT
 0x00000ff0

	)

284 
	#E1000_TCTL_COLD
 0x003ff000

	)

285 
	#E1000_TCTL_RTLC
 0x01000000

	)

290 
	#E1000_SCTL_DISABLE_SERDES_LOOPBACK
 0x0400

	)

293 
	#E1000_RXCSUM_IPOFL
 0x00000100

	)

294 
	#E1000_RXCSUM_TUOFL
 0x00000200

	)

295 
	#E1000_RXCSUM_CRCOFL
 0x00000800

	)

296 
	#E1000_RXCSUM_PCSD
 0x00002000

	)

299 
	#E1000_RFCTL_LEF
 0x00040000

	)

302 
	#E1000_COLLISION_THRESHOLD
 15

	)

303 
	#E1000_CT_SHIFT
 4

	)

304 
	#E1000_COLLISION_DISTANCE
 63

	)

305 
	#E1000_COLD_SHIFT
 12

	)

308 
	#ETHERNET_IEEE_VLAN_TYPE
 0x8100

	)

310 
	#MAX_JUMBO_FRAME_SIZE
 0x3F00

	)

313 
	#E1000_PBA_34K
 0x0022

	)

314 
	#E1000_PBA_64K
 0x0040

	)

317 
	#E1000_SWSM_SMBI
 0x00000001

	)

318 
	#E1000_SWSM_SWESMBI
 0x00000002

	)

321 
	#E1000_ICR_TXDW
 0x00000001

	)

322 
	#E1000_ICR_LSC
 0x00000004

	)

323 
	#E1000_ICR_RXSEQ
 0x00000008

	)

324 
	#E1000_ICR_RXDMT0
 0x00000010

	)

325 
	#E1000_ICR_RXT0
 0x00000080

	)

326 
	#E1000_ICR_VMMB
 0x00000100

	)

327 
	#E1000_ICR_DRSTA
 0x40000000

	)

329 
	#E1000_ICR_INT_ASSERTED
 0x80000000

	)

331 
	#E1000_ICR_DOUTSYNC
 0x10000000

	)

334 
	#E1000_EICR_RX_QUEUE0
 0x00000001

	)

335 
	#E1000_EICR_RX_QUEUE1
 0x00000002

	)

336 
	#E1000_EICR_RX_QUEUE2
 0x00000004

	)

337 
	#E1000_EICR_RX_QUEUE3
 0x00000008

	)

338 
	#E1000_EICR_TX_QUEUE0
 0x00000100

	)

339 
	#E1000_EICR_TX_QUEUE1
 0x00000200

	)

340 
	#E1000_EICR_TX_QUEUE2
 0x00000400

	)

341 
	#E1000_EICR_TX_QUEUE3
 0x00000800

	)

342 
	#E1000_EICR_OTHER
 0x80000000

	)

354 
	#IMS_ENABLE_MASK
 ( \

355 
E1000_IMS_RXT0
 | \

356 
E1000_IMS_TXDW
 | \

357 
E1000_IMS_RXDMT0
 | \

358 
E1000_IMS_RXSEQ
 | \

359 
E1000_IMS_LSC
 | \

360 
E1000_IMS_DOUTSYNC
)

	)

363 
	#E1000_IMS_TXDW
 
E1000_ICR_TXDW


	)

364 
	#E1000_IMS_LSC
 
E1000_ICR_LSC


	)

365 
	#E1000_IMS_VMMB
 
E1000_ICR_VMMB


	)

366 
	#E1000_IMS_RXSEQ
 
E1000_ICR_RXSEQ


	)

367 
	#E1000_IMS_RXDMT0
 
E1000_ICR_RXDMT0


	)

368 
	#E1000_IMS_RXT0
 
E1000_ICR_RXT0


	)

369 
	#E1000_IMS_DRSTA
 
E1000_ICR_DRSTA


	)

370 
	#E1000_IMS_DOUTSYNC
 
E1000_ICR_DOUTSYNC


	)

373 
	#E1000_EIMS_OTHER
 
E1000_EICR_OTHER


	)

376 
	#E1000_ICS_LSC
 
E1000_ICR_LSC


	)

377 
	#E1000_ICS_RXDMT0
 
E1000_ICR_RXDMT0


	)

378 
	#E1000_ICS_DRSTA
 
E1000_ICR_DRSTA


	)

386 
	#FLOW_CONTROL_ADDRESS_LOW
 0x00C28001

	)

387 
	#FLOW_CONTROL_ADDRESS_HIGH
 0x00000100

	)

388 
	#FLOW_CONTROL_TYPE
 0x8808

	)

391 
	#VLAN_TAG_SIZE
 4

	)

392 
	#E1000_VLAN_FILTER_TBL_SIZE
 128

	)

402 
	#E1000_RAH_AV
 0x80000000

	)

403 
	#E1000_RAL_MAC_ADDR_LEN
 4

	)

404 
	#E1000_RAH_MAC_ADDR_LEN
 2

	)

405 
	#E1000_RAH_POOL_MASK
 0x03FC0000

	)

406 
	#E1000_RAH_POOL_1
 0x00040000

	)

409 
	#E1000_ERR_NVM
 1

	)

410 
	#E1000_ERR_PHY
 2

	)

411 
	#E1000_ERR_CONFIG
 3

	)

412 
	#E1000_ERR_PARAM
 4

	)

413 
	#E1000_ERR_MAC_INIT
 5

	)

414 
	#E1000_ERR_RESET
 9

	)

415 
	#E1000_ERR_MASTER_REQUESTS_PENDING
 10

	)

416 
	#E1000_BLK_PHY_RESET
 12

	)

417 
	#E1000_ERR_SWFW_SYNC
 13

	)

418 
	#E1000_NOT_IMPLEMENTED
 14

	)

419 
	#E1000_ERR_MBX
 15

	)

422 
	#COPPER_LINK_UP_LIMIT
 10

	)

423 
	#PHY_AUTO_NEG_LIMIT
 45

	)

424 
	#PHY_FORCE_LIMIT
 20

	)

426 
	#MASTER_DISABLE_TIMEOUT
 800

	)

428 
	#PHY_CFG_TIMEOUT
 100

	)

431 
	#AUTO_READ_DONE_TIMEOUT
 10

	)

434 
	#E1000_FCRTL_XONE
 0x80000000

	)

436 
	#E1000_TSYNCTXCTL_VALID
 0x00000001

	)

437 
	#E1000_TSYNCTXCTL_ENABLED
 0x00000010

	)

439 
	#E1000_TSYNCRXCTL_VALID
 0x00000001

	)

440 
	#E1000_TSYNCRXCTL_TYPE_MASK
 0x0000000E

	)

441 
	#E1000_TSYNCRXCTL_TYPE_L2_V2
 0x00

	)

442 
	#E1000_TSYNCRXCTL_TYPE_L4_V1
 0x02

	)

443 
	#E1000_TSYNCRXCTL_TYPE_L2_L4_V2
 0x04

	)

444 
	#E1000_TSYNCRXCTL_TYPE_ALL
 0x08

	)

445 
	#E1000_TSYNCRXCTL_TYPE_EVENT_V2
 0x0A

	)

446 
	#E1000_TSYNCRXCTL_ENABLED
 0x00000010

	)

448 
	#E1000_TSYNCRXCFG_PTP_V1_CTRLT_MASK
 0x000000FF

	)

449 
	#E1000_TSYNCRXCFG_PTP_V1_SYNC_MESSAGE
 0x00

	)

450 
	#E1000_TSYNCRXCFG_PTP_V1_DELAY_REQ_MESSAGE
 0x01

	)

451 
	#E1000_TSYNCRXCFG_PTP_V1_FOLLOWUP_MESSAGE
 0x02

	)

452 
	#E1000_TSYNCRXCFG_PTP_V1_DELAY_RESP_MESSAGE
 0x03

	)

453 
	#E1000_TSYNCRXCFG_PTP_V1_MANAGEMENT_MESSAGE
 0x04

	)

455 
	#E1000_TSYNCRXCFG_PTP_V2_MSGID_MASK
 0x00000F00

	)

456 
	#E1000_TSYNCRXCFG_PTP_V2_SYNC_MESSAGE
 0x0000

	)

457 
	#E1000_TSYNCRXCFG_PTP_V2_DELAY_REQ_MESSAGE
 0x0100

	)

458 
	#E1000_TSYNCRXCFG_PTP_V2_PATH_DELAY_REQ_MESSAGE
 0x0200

	)

459 
	#E1000_TSYNCRXCFG_PTP_V2_PATH_DELAY_RESP_MESSAGE
 0x0300

	)

460 
	#E1000_TSYNCRXCFG_PTP_V2_FOLLOWUP_MESSAGE
 0x0800

	)

461 
	#E1000_TSYNCRXCFG_PTP_V2_DELAY_RESP_MESSAGE
 0x0900

	)

462 
	#E1000_TSYNCRXCFG_PTP_V2_PATH_DELAY_FOLLOWUP_MESSAGE
 0x0A00

	)

463 
	#E1000_TSYNCRXCFG_PTP_V2_ANNOUNCE_MESSAGE
 0x0B00

	)

464 
	#E1000_TSYNCRXCFG_PTP_V2_SIGNALLING_MESSAGE
 0x0C00

	)

465 
	#E1000_TSYNCRXCFG_PTP_V2_MANAGEMENT_MESSAGE
 0x0D00

	)

467 
	#E1000_TIMINCA_16NS_SHIFT
 24

	)

470 
	#E1000_GCR_CMPL_TMOUT_MASK
 0x0000F000

	)

471 
	#E1000_GCR_CMPL_TMOUT_10ms
 0x00001000

	)

472 
	#E1000_GCR_CMPL_TMOUT_RESEND
 0x00010000

	)

473 
	#E1000_GCR_CAP_VER2
 0x00040000

	)

476 
	#MII_CR_FULL_DUPLEX
 0x0100

	)

477 
	#MII_CR_RESTART_AUTO_NEG
 0x0200

	)

478 
	#MII_CR_POWER_DOWN
 0x0800

	)

479 
	#MII_CR_AUTO_NEG_EN
 0x1000

	)

480 
	#MII_CR_LOOPBACK
 0x4000

	)

481 
	#MII_CR_RESET
 0x8000

	)

482 
	#MII_CR_SPEED_1000
 0x0040

	)

483 
	#MII_CR_SPEED_100
 0x2000

	)

484 
	#MII_CR_SPEED_10
 0x0000

	)

487 
	#MII_SR_LINK_STATUS
 0x0004

	)

488 
	#MII_SR_AUTONEG_COMPLETE
 0x0020

	)

491 
	#NWAY_AR_10T_HD_CAPS
 0x0020

	)

492 
	#NWAY_AR_10T_FD_CAPS
 0x0040

	)

493 
	#NWAY_AR_100TX_HD_CAPS
 0x0080

	)

494 
	#NWAY_AR_100TX_FD_CAPS
 0x0100

	)

495 
	#NWAY_AR_PAUSE
 0x0400

	)

496 
	#NWAY_AR_ASM_DIR
 0x0800

	)

499 
	#NWAY_LPAR_PAUSE
 0x0400

	)

500 
	#NWAY_LPAR_ASM_DIR
 0x0800

	)

505 
	#CR_1000T_HD_CAPS
 0x0100

	)

506 
	#CR_1000T_FD_CAPS
 0x0200

	)

507 
	#CR_1000T_MS_VALUE
 0x0800

	)

509 
	#CR_1000T_MS_ENABLE
 0x1000

	)

513 
	#SR_1000T_REMOTE_RX_STATUS
 0x1000

	)

514 
	#SR_1000T_LOCAL_RX_STATUS
 0x2000

	)

519 
	#PHY_CONTROL
 0x00

	)

520 
	#PHY_STATUS
 0x01

	)

521 
	#PHY_ID1
 0x02

	)

522 
	#PHY_ID2
 0x03

	)

523 
	#PHY_AUTONEG_ADV
 0x04

	)

524 
	#PHY_LP_ABILITY
 0x05

	)

525 
	#PHY_1000T_CTRL
 0x09

	)

526 
	#PHY_1000T_STATUS
 0x0A

	)

529 
	#E1000_EECD_SK
 0x00000001

	)

530 
	#E1000_EECD_CS
 0x00000002

	)

531 
	#E1000_EECD_DI
 0x00000004

	)

532 
	#E1000_EECD_DO
 0x00000008

	)

533 
	#E1000_EECD_REQ
 0x00000040

	)

534 
	#E1000_EECD_GNT
 0x00000080

	)

535 
	#E1000_EECD_PRES
 0x00000100

	)

537 
	#E1000_EECD_ADDR_BITS
 0x00000400

	)

538 
	#E1000_NVM_GRANT_ATTEMPTS
 1000

	)

539 
	#E1000_EECD_AUTO_RD
 0x00000200

	)

540 
	#E1000_EECD_SIZE_EX_MASK
 0x00007800

	)

541 
	#E1000_EECD_SIZE_EX_SHIFT
 11

	)

544 
	#E1000_NVM_RW_REG_DATA
 16

	)

545 
	#E1000_NVM_RW_REG_DONE
 2

	)

546 
	#E1000_NVM_RW_REG_START
 1

	)

547 
	#E1000_NVM_RW_ADDR_SHIFT
 2

	)

548 
	#E1000_NVM_POLL_READ
 0

	)

551 
	#NVM_ID_LED_SETTINGS
 0x0004

	)

553 
	#NVM_INIT_CONTROL2_REG
 0x000F

	)

554 
	#NVM_INIT_CONTROL3_PORT_B
 0x0014

	)

555 
	#NVM_INIT_CONTROL3_PORT_A
 0x0024

	)

556 
	#NVM_ALT_MAC_ADDR_PTR
 0x0037

	)

557 
	#NVM_CHECKSUM_REG
 0x003F

	)

559 
	#E1000_NVM_CFG_DONE_PORT_0
 0x040000

	)

560 
	#E1000_NVM_CFG_DONE_PORT_1
 0x080000

	)

561 
	#E1000_NVM_CFG_DONE_PORT_2
 0x100000

	)

562 
	#E1000_NVM_CFG_DONE_PORT_3
 0x200000

	)

564 
	#NVM_82580_LAN_FUNC_OFFSET
(
a
Ë◊ ? (0x40 + (0x40 *á)Ë: 0)

	)

567 
	#NVM_WORD0F_PAUSE_MASK
 0x3000

	)

568 
	#NVM_WORD0F_ASM_DIR
 0x2000

	)

573 
	#NVM_SUM
 0xBABA

	)

575 
	#NVM_PBA_OFFSET_0
 8

	)

576 
	#NVM_PBA_OFFSET_1
 9

	)

577 
	#NVM_WORD_SIZE_BASE_SHIFT
 6

	)

582 
	#NVM_MAX_RETRY_SPI
 5000

	)

583 
	#NVM_WRITE_OPCODE_SPI
 0x02

	)

584 
	#NVM_A8_OPCODE_SPI
 0x08

	)

585 
	#NVM_WREN_OPCODE_SPI
 0x06

	)

586 
	#NVM_RDSR_OPCODE_SPI
 0x05

	)

589 
	#NVM_STATUS_RDY_SPI
 0x01

	)

592 
	#ID_LED_RESERVED_0000
 0x0000

	)

593 
	#ID_LED_RESERVED_FFFF
 0xFFFF

	)

594 
	#ID_LED_DEFAULT
 ((
ID_LED_OFF1_ON2
 << 12) | \

595 (
ID_LED_OFF1_OFF2
 << 8) | \

596 (
ID_LED_DEF1_DEF2
 << 4) | \

597 (
ID_LED_DEF1_DEF2
))

	)

598 
	#ID_LED_DEF1_DEF2
 0x1

	)

599 
	#ID_LED_DEF1_ON2
 0x2

	)

600 
	#ID_LED_DEF1_OFF2
 0x3

	)

601 
	#ID_LED_ON1_DEF2
 0x4

	)

602 
	#ID_LED_ON1_ON2
 0x5

	)

603 
	#ID_LED_ON1_OFF2
 0x6

	)

604 
	#ID_LED_OFF1_DEF2
 0x7

	)

605 
	#ID_LED_OFF1_ON2
 0x8

	)

606 
	#ID_LED_OFF1_OFF2
 0x9

	)

608 
	#IGP_ACTIVITY_LED_MASK
 0xFFFFF0FF

	)

609 
	#IGP_ACTIVITY_LED_ENABLE
 0x0300

	)

610 
	#IGP_LED3_MODE
 0x07000000

	)

613 
	#PCIE_DEVICE_CONTROL2
 0x28

	)

614 
	#PCIE_DEVICE_CONTROL2_16ms
 0x0005

	)

616 
	#PHY_REVISION_MASK
 0xFFFFFFF0

	)

617 
	#MAX_PHY_REG_ADDRESS
 0x1F

	)

618 
	#MAX_PHY_MULTI_PAGE_REG
 0xF

	)

625 
	#M88E1111_I_PHY_ID
 0x01410CC0

	)

626 
	#IGP03E1000_E_PHY_ID
 0x02A80390

	)

627 
	#I82580_I_PHY_ID
 0x015403A0

	)

628 
	#I350_I_PHY_ID
 0x015403B0

	)

629 
	#M88_VENDOR
 0x0141

	)

632 
	#M88E1000_PHY_SPEC_CTRL
 0x10

	)

633 
	#M88E1000_PHY_SPEC_STATUS
 0x11

	)

634 
	#M88E1000_EXT_PHY_SPEC_CTRL
 0x14

	)

636 
	#M88E1000_PHY_PAGE_SELECT
 0x1D

	)

637 
	#M88E1000_PHY_GEN_CONTROL
 0x1E

	)

640 
	#M88E1000_PSCR_POLARITY_REVERSAL
 0x0002

	)

642 
	#M88E1000_PSCR_MDI_MANUAL_MODE
 0x0000

	)

644 
	#M88E1000_PSCR_MDIX_MANUAL_MODE
 0x0020

	)

646 
	#M88E1000_PSCR_AUTO_X_1000T
 0x0040

	)

648 
	#M88E1000_PSCR_AUTO_X_MODE
 0x0060

	)

654 
	#M88E1000_PSCR_ASSERT_CRS_ON_TX
 0x0800

	)

657 
	#M88E1000_PSSR_REV_POLARITY
 0x0002

	)

658 
	#M88E1000_PSSR_DOWNSHIFT
 0x0020

	)

659 
	#M88E1000_PSSR_MDIX
 0x0040

	)

667 
	#M88E1000_PSSR_CABLE_LENGTH
 0x0380

	)

668 
	#M88E1000_PSSR_SPEED
 0xC000

	)

669 
	#M88E1000_PSSR_1000MBS
 0x8000

	)

671 
	#M88E1000_PSSR_CABLE_LENGTH_SHIFT
 7

	)

684 
	#M88E1000_EPSCR_MASTER_DOWNSHIFT_MASK
 0x0C00

	)

685 
	#M88E1000_EPSCR_MASTER_DOWNSHIFT_1X
 0x0000

	)

690 
	#M88E1000_EPSCR_SLAVE_DOWNSHIFT_MASK
 0x0300

	)

691 
	#M88E1000_EPSCR_SLAVE_DOWNSHIFT_1X
 0x0100

	)

692 
	#M88E1000_EPSCR_TX_CLK_25
 0x0070

	)

695 
	#M88EC018_EPSCR_DOWNSHIFT_COUNTER_MASK
 0x0E00

	)

696 
	#M88EC018_EPSCR_DOWNSHIFT_COUNTER_5X
 0x0800

	)

699 
	#E1000_MDIC_REG_SHIFT
 16

	)

700 
	#E1000_MDIC_PHY_SHIFT
 21

	)

701 
	#E1000_MDIC_OP_WRITE
 0x04000000

	)

702 
	#E1000_MDIC_OP_READ
 0x08000000

	)

703 
	#E1000_MDIC_READY
 0x10000000

	)

704 
	#E1000_MDIC_ERROR
 0x40000000

	)

707 
	#E1000_GEN_CTL_READY
 0x80000000

	)

708 
	#E1000_GEN_CTL_ADDRESS_SHIFT
 8

	)

709 
	#E1000_GEN_POLL_TIMEOUT
 640

	)

711 
	#E1000_VFTA_ENTRY_SHIFT
 5

	)

712 
	#E1000_VFTA_ENTRY_MASK
 0x7F

	)

713 
	#E1000_VFTA_ENTRY_BIT_SHIFT_MASK
 0x1F

	)

716 
	#E1000_PCIEMISC_LX_DECISION
 0x00000080

	)

	@igb/e1000_hw.h

28 #i‚de‡
_E1000_HW_H_


29 
	#_E1000_HW_H_


	)

31 
	~<löux/ty≥s.h
>

32 
	~<löux/dñay.h
>

33 
	~<löux/io.h
>

34 
	~<löux/√tdevi˚.h
>

36 
	~"e1000_ªgs.h
"

37 
	~"e1000_deföes.h
"

39 
	ge1000_hw
;

41 
	#E1000_DEV_ID_82576
 0x10C9

	)

42 
	#E1000_DEV_ID_82576_FIBER
 0x10E6

	)

43 
	#E1000_DEV_ID_82576_SERDES
 0x10E7

	)

44 
	#E1000_DEV_ID_82576_QUAD_COPPER
 0x10E8

	)

45 
	#E1000_DEV_ID_82576_QUAD_COPPER_ET2
 0x1526

	)

46 
	#E1000_DEV_ID_82576_NS
 0x150A

	)

47 
	#E1000_DEV_ID_82576_NS_SERDES
 0x1518

	)

48 
	#E1000_DEV_ID_82576_SERDES_QUAD
 0x150D

	)

49 
	#E1000_DEV_ID_82575EB_COPPER
 0x10A7

	)

50 
	#E1000_DEV_ID_82575EB_FIBER_SERDES
 0x10A9

	)

51 
	#E1000_DEV_ID_82575GB_QUAD_COPPER
 0x10D6

	)

52 
	#E1000_DEV_ID_82580_COPPER
 0x150E

	)

53 
	#E1000_DEV_ID_82580_FIBER
 0x150F

	)

54 
	#E1000_DEV_ID_82580_SERDES
 0x1510

	)

55 
	#E1000_DEV_ID_82580_SGMII
 0x1511

	)

56 
	#E1000_DEV_ID_82580_COPPER_DUAL
 0x1516

	)

57 
	#E1000_DEV_ID_I350_COPPER
 0x1521

	)

58 
	#E1000_DEV_ID_I350_FIBER
 0x1522

	)

59 
	#E1000_DEV_ID_I350_SERDES
 0x1523

	)

60 
	#E1000_DEV_ID_I350_SGMII
 0x1524

	)

62 
	#E1000_REVISION_2
 2

	)

63 
	#E1000_REVISION_4
 4

	)

65 
	#E1000_FUNC_0
 0

	)

66 
	#E1000_FUNC_1
 1

	)

67 
	#E1000_FUNC_2
 2

	)

68 
	#E1000_FUNC_3
 3

	)

70 
	#E1000_ALT_MAC_ADDRESS_OFFSET_LAN0
 0

	)

71 
	#E1000_ALT_MAC_ADDRESS_OFFSET_LAN1
 3

	)

72 
	#E1000_ALT_MAC_ADDRESS_OFFSET_LAN2
 6

	)

73 
	#E1000_ALT_MAC_ADDRESS_OFFSET_LAN3
 9

	)

75 
	ee1000_mac_ty≥
 {

76 
	me1000_undeföed
 = 0,

77 
	me1000_82575
,

78 
	me1000_82576
,

79 
	me1000_82580
,

80 
	me1000_i350
,

81 
	me1000_num_macs


84 
	ee1000_medü_ty≥
 {

85 
	me1000_medü_ty≥_unknown
 = 0,

86 
	me1000_medü_ty≥_c›≥r
 = 1,

87 
	me1000_medü_ty≥_öã∫Æ_£rdes
 = 2,

88 
	me1000_num_medü_ty≥s


91 
	ee1000_nvm_ty≥
 {

92 
	me1000_nvm_unknown
 = 0,

93 
	me1000_nvm_n⁄e
,

94 
	me1000_nvm_ì¥om_•i
,

95 
	me1000_nvm_Êash_hw
,

96 
	me1000_nvm_Êash_sw


99 
	ee1000_nvm_ovîride
 {

100 
	me1000_nvm_ovîride_n⁄e
 = 0,

101 
	me1000_nvm_ovîride_•i_smÆl
,

102 
	me1000_nvm_ovîride_•i_œrge
,

105 
	ee1000_phy_ty≥
 {

106 
	me1000_phy_unknown
 = 0,

107 
	me1000_phy_n⁄e
,

108 
	me1000_phy_m88
,

109 
	me1000_phy_igp
,

110 
	me1000_phy_igp_2
,

111 
	me1000_phy_gg82563
,

112 
	me1000_phy_igp_3
,

113 
	me1000_phy_i„
,

114 
	me1000_phy_82580
,

117 
	ee1000_bus_ty≥
 {

118 
	me1000_bus_ty≥_unknown
 = 0,

119 
	me1000_bus_ty≥_pci
,

120 
	me1000_bus_ty≥_pcix
,

121 
	me1000_bus_ty≥_pci_ex¥ess
,

122 
	me1000_bus_ty≥_ª£rved


125 
	ee1000_bus_•ìd
 {

126 
	me1000_bus_•ìd_unknown
 = 0,

127 
	me1000_bus_•ìd_33
,

128 
	me1000_bus_•ìd_66
,

129 
	me1000_bus_•ìd_100
,

130 
	me1000_bus_•ìd_120
,

131 
	me1000_bus_•ìd_133
,

132 
	me1000_bus_•ìd_2500
,

133 
	me1000_bus_•ìd_5000
,

134 
	me1000_bus_•ìd_ª£rved


137 
	ee1000_bus_width
 {

138 
	me1000_bus_width_unknown
 = 0,

139 
	me1000_bus_width_pcõ_x1
,

140 
	me1000_bus_width_pcõ_x2
,

141 
	me1000_bus_width_pcõ_x4
 = 4,

142 
	me1000_bus_width_pcõ_x8
 = 8,

143 
	me1000_bus_width_32
,

144 
	me1000_bus_width_64
,

145 
	me1000_bus_width_ª£rved


148 
	ee1000_1000t_rx_°©us
 {

149 
	me1000_1000t_rx_°©us_nŸ_ok
 = 0,

150 
	me1000_1000t_rx_°©us_ok
,

151 
	me1000_1000t_rx_°©us_undeföed
 = 0xFF

154 
	ee1000_ªv_pﬁ¨ôy
 {

155 
	me1000_ªv_pﬁ¨ôy_n‹mÆ
 = 0,

156 
	me1000_ªv_pﬁ¨ôy_ªvî£d
,

157 
	me1000_ªv_pﬁ¨ôy_undeföed
 = 0xFF

160 
	ee1000_fc_mode
 {

161 
	me1000_fc_n⁄e
 = 0,

162 
	me1000_fc_rx_∑u£
,

163 
	me1000_fc_tx_∑u£
,

164 
	me1000_fc_fuŒ
,

165 
	me1000_fc_deÁu…
 = 0xFF

169 
	se1000_hw_°©s
 {

170 
u64
 
	m¸˚ºs
;

171 
u64
 
	mÆg√ºc
;

172 
u64
 
	msymîrs
;

173 
u64
 
	mrxîrc
;

174 
u64
 
	mmpc
;

175 
u64
 
	mscc
;

176 
u64
 
	mecﬁ
;

177 
u64
 
	mmcc
;

178 
u64
 
	mœãcﬁ
;

179 
u64
 
	mcﬁc
;

180 
u64
 
	mdc
;

181 
u64
 
	mä¸s
;

182 
u64
 
	m£c
;

183 
u64
 
	m˚xãº
;

184 
u64
 
	mæec
;

185 
u64
 
	mx⁄rxc
;

186 
u64
 
	mx⁄txc
;

187 
u64
 
	mxof‰xc
;

188 
u64
 
	mxof·xc
;

189 
u64
 
	mf¸uc
;

190 
u64
 
	m¥c64
;

191 
u64
 
	m¥c127
;

192 
u64
 
	m¥c255
;

193 
u64
 
	m¥c511
;

194 
u64
 
	m¥c1023
;

195 
u64
 
	m¥c1522
;

196 
u64
 
	mg¥c
;

197 
u64
 
	mb¥c
;

198 
u64
 
	mm¥c
;

199 
u64
 
	mg±c
;

200 
u64
 
	mg‹c
;

201 
u64
 
	mgŸc
;

202 
u64
 
	m∫bc
;

203 
u64
 
	mruc
;

204 
u64
 
	mrfc
;

205 
u64
 
	mroc
;

206 
u64
 
	mrjc
;

207 
u64
 
	mmg¥c
;

208 
u64
 
	mmgpdc
;

209 
u64
 
	mmg±c
;

210 
u64
 
	mt‹
;

211 
u64
 
	mtŸ
;

212 
u64
 
	mçr
;

213 
u64
 
	mçt
;

214 
u64
 
	m±c64
;

215 
u64
 
	m±c127
;

216 
u64
 
	m±c255
;

217 
u64
 
	m±c511
;

218 
u64
 
	m±c1023
;

219 
u64
 
	m±c1522
;

220 
u64
 
	mm±c
;

221 
u64
 
	mb±c
;

222 
u64
 
	mts˘c
;

223 
u64
 
	mts˘fc
;

224 
u64
 
	müc
;

225 
u64
 
	mi¸x±c
;

226 
u64
 
	mi¸x©c
;

227 
u64
 
	mi˘x±c
;

228 
u64
 
	mi˘x©c
;

229 
u64
 
	mi˘xqec
;

230 
u64
 
	mi˘xqmtc
;

231 
u64
 
	mi¸xdmtc
;

232 
u64
 
	mi¸xoc
;

233 
u64
 
	mcbtmpc
;

234 
u64
 
	mhtdpmc
;

235 
u64
 
	mcbrdpc
;

236 
u64
 
	mcbrmpc
;

237 
u64
 
	mΩthc
;

238 
u64
 
	mhg±c
;

239 
u64
 
	mhtcbdpc
;

240 
u64
 
	mhg‹c
;

241 
u64
 
	mhgŸc
;

242 
u64
 
	mÀ√ºs
;

243 
u64
 
	mscvpc
;

244 
u64
 
	mhrmpc
;

245 
u64
 
	mdoosync
;

248 
	se1000_phy_°©s
 {

249 
u32
 
	midÀ_îr‹s
;

250 
u32
 
	mª˚ive_îr‹s
;

253 
	se1000_ho°_mng_dh˝_cookõ
 {

254 
u32
 
	msig«tuª
;

255 
u8
 
	m°©us
;

256 
u8
 
	mª£rved0
;

257 
u16
 
	mvœn_id
;

258 
u32
 
	mª£rved1
;

259 
u16
 
	mª£rved2
;

260 
u8
 
	mª£rved3
;

261 
u8
 
	mchecksum
;

265 
	se1000_ho°_comm™d_hódî
 {

266 
u8
 
	mcomm™d_id
;

267 
u8
 
	mcomm™d_Àngth
;

268 
u8
 
	mcomm™d_›ti⁄s
;

269 
u8
 
	mchecksum
;

272 
	#E1000_HI_MAX_DATA_LENGTH
 252

	)

273 
	se1000_ho°_comm™d_öfo
 {

274 
e1000_ho°_comm™d_hódî
 
	mcomm™d_hódî
;

275 
u8
 
	mcomm™d_d©a
[
E1000_HI_MAX_DATA_LENGTH
];

279 
	se1000_ho°_mng_comm™d_hódî
 {

280 
u8
 
	mcomm™d_id
;

281 
u8
 
	mchecksum
;

282 
u16
 
	mª£rved1
;

283 
u16
 
	mª£rved2
;

284 
u16
 
	mcomm™d_Àngth
;

287 
	#E1000_HI_MAX_MNG_DATA_LENGTH
 0x6F8

	)

288 
	se1000_ho°_mng_comm™d_öfo
 {

289 
e1000_ho°_mng_comm™d_hódî
 
	mcomm™d_hódî
;

290 
u8
 
	mcomm™d_d©a
[
E1000_HI_MAX_MNG_DATA_LENGTH
];

293 
	~"e1000_mac.h
"

294 
	~"e1000_phy.h
"

295 
	~"e1000_nvm.h
"

296 
	~"e1000_mbx.h
"

298 
	se1000_mac_›î©i⁄s
 {

299 
s32
 (*
check_f‹_lök
)(
	me1000_hw
 *);

300 
s32
 (*
ª£t_hw
)(
	me1000_hw
 *);

301 
s32
 (*
öô_hw
)(
	me1000_hw
 *);

302 
boﬁ
 (*
check_mng_mode
)(
	me1000_hw
 *);

303 
s32
 (*
£tup_physiˇl_öãrÁ˚
)(
	me1000_hw
 *);

304 (*
	mør_£t
)(
	me1000_hw
 *, 
	mu8
 *, 
	mu32
);

305 
s32
 (*
ªad_mac_addr
)(
	me1000_hw
 *);

306 
s32
 (*
gë_•ìd_™d_du∂ex
)(
	me1000_hw
 *, 
	mu16
 *, u16 *);

309 
	se1000_phy_›î©i⁄s
 {

310 
s32
 (*
acquúe
)(
	me1000_hw
 *);

311 
s32
 (*
check_pﬁ¨ôy
)(
	me1000_hw
 *);

312 
s32
 (*
check_ª£t_block
)(
	me1000_hw
 *);

313 
s32
 (*
f‹˚_•ìd_du∂ex
)(
	me1000_hw
 *);

314 
s32
 (*
gë_cfg_d⁄e
)(
e1000_hw
 *
	mhw
);

315 
s32
 (*
gë_ˇbÀ_Àngth
)(
	me1000_hw
 *);

316 
s32
 (*
gë_phy_öfo
)(
	me1000_hw
 *);

317 
s32
 (*
ªad_ªg
)(
	me1000_hw
 *, 
	mu32
, 
	mu16
 *);

318 (*
	mªÀa£
)(
	me1000_hw
 *);

319 
s32
 (*
ª£t
)(
	me1000_hw
 *);

320 
s32
 (*
£t_d0_Õlu_°©e
)(
	me1000_hw
 *, 
	mboﬁ
);

321 
s32
 (*
£t_d3_Õlu_°©e
)(
	me1000_hw
 *, 
	mboﬁ
);

322 
s32
 (*
wrôe_ªg
)(
	me1000_hw
 *, 
	mu32
, 
	mu16
);

325 
	se1000_nvm_›î©i⁄s
 {

326 
s32
 (*
acquúe
)(
	me1000_hw
 *);

327 
s32
 (*
ªad
)(
	me1000_hw
 *, 
	mu16
, u16, u16 *);

328 (*
	mªÀa£
)(
	me1000_hw
 *);

329 
s32
 (*
wrôe
)(
	me1000_hw
 *, 
	mu16
, u16, u16 *);

332 
	se1000_öfo
 {

333 
s32
 (*
gë_öv¨ü¡s
)(
	me1000_hw
 *);

334 
e1000_mac_›î©i⁄s
 *
	mmac_›s
;

335 
e1000_phy_›î©i⁄s
 *
	mphy_›s
;

336 
e1000_nvm_›î©i⁄s
 *
	mnvm_›s
;

339 c⁄° 
e1000_öfo
 
e1000_82575_öfo
;

341 
	se1000_mac_öfo
 {

342 
e1000_mac_›î©i⁄s
 
	m›s
;

344 
u8
 
	maddr
[6];

345 
u8
 
	m≥rm_addr
[6];

347 
e1000_mac_ty≥
 
	mty≥
;

349 
u32
 
	mÀd˘l_deÁu…
;

350 
u32
 
	mÀd˘l_mode1
;

351 
u32
 
	mÀd˘l_mode2
;

352 
u32
 
	mmc_fûãr_ty≥
;

353 
u32
 
	mtxcw
;

355 
u16
 
	mmè_ªg_cou¡
;

356 
u16
 
	muè_ªg_cou¡
;

359 
	#MAX_MTA_REG
 128

	)

360 
u32
 
	mmè_shadow
[
MAX_MTA_REG
];

361 
u16
 
	mør_íåy_cou¡
;

363 
u8
 
	mf‹˚d_•ìd_du∂ex
;

365 
boﬁ
 
	mad≠tive_ifs
;

366 
boﬁ
 
	m¨c_subsy°em_vÆid
;

367 
boﬁ
 
	masf_fúmw¨e_¥e£¡
;

368 
boﬁ
 
	maut⁄eg
;

369 
boﬁ
 
	maut⁄eg_Áûed
;

370 
boﬁ
 
	mdißbÀ_hw_öô_bôs
;

371 
boﬁ
 
	mgë_lök_°©us
;

372 
boﬁ
 
	mifs_∑øms_f‹˚d
;

373 
boﬁ
 
	mö_ifs_mode
;

374 
boﬁ
 
	mªp‹t_tx_óæy
;

375 
boﬁ
 
	m£rdes_has_lök
;

376 
boﬁ
 
	mtx_pkt_fûãrög
;

379 
	se1000_phy_öfo
 {

380 
e1000_phy_›î©i⁄s
 
	m›s
;

382 
e1000_phy_ty≥
 
	mty≥
;

384 
e1000_1000t_rx_°©us
 
	mloˇl_rx
;

385 
e1000_1000t_rx_°©us
 
	mªmŸe_rx
;

386 
e1000_ms_ty≥
 
	mms_ty≥
;

387 
e1000_ms_ty≥
 
	m‹igöÆ_ms_ty≥
;

388 
e1000_ªv_pﬁ¨ôy
 
	mˇbÀ_pﬁ¨ôy
;

389 
e1000_sm¨t_•ìd
 
	msm¨t_•ìd
;

391 
u32
 
	maddr
;

392 
u32
 
	mid
;

393 
u32
 
	mª£t_dñay_us
;

394 
u32
 
	mªvisi⁄
;

396 
e1000_medü_ty≥
 
	mmedü_ty≥
;

398 
u16
 
	maut⁄eg_advîti£d
;

399 
u16
 
	maut⁄eg_mask
;

400 
u16
 
	mˇbÀ_Àngth
;

401 
u16
 
	mmax_ˇbÀ_Àngth
;

402 
u16
 
	mmö_ˇbÀ_Àngth
;

404 
u8
 
	mmdix
;

406 
boﬁ
 
	mdißbÀ_pﬁ¨ôy_c‹ª˘i⁄
;

407 
boﬁ
 
	mis_mdix
;

408 
boﬁ
 
	mpﬁ¨ôy_c‹ª˘i⁄
;

409 
boﬁ
 
	mª£t_dißbÀ
;

410 
boﬁ
 
	m•ìd_downgøded
;

411 
boﬁ
 
	maut⁄eg_waô_to_com∂ëe
;

414 
	se1000_nvm_öfo
 {

415 
e1000_nvm_›î©i⁄s
 
	m›s
;

417 
e1000_nvm_ty≥
 
	mty≥
;

418 
e1000_nvm_ovîride
 
	movîride
;

420 
u32
 
	mÊash_b™k_size
;

421 
u32
 
	mÊash_ba£_addr
;

423 
u16
 
	mw‹d_size
;

424 
u16
 
	mdñay_u£c
;

425 
u16
 
	maddªss_bôs
;

426 
u16
 
	m›code_bôs
;

427 
u16
 
	m∑ge_size
;

430 
	se1000_bus_öfo
 {

431 
e1000_bus_ty≥
 
	mty≥
;

432 
e1000_bus_•ìd
 
	m•ìd
;

433 
e1000_bus_width
 
	mwidth
;

435 
u32
 
	m¢o›
;

437 
u16
 
	mfunc
;

438 
u16
 
	mpci_cmd_w‹d
;

441 
	se1000_fc_öfo
 {

442 
u32
 
	mhigh_w©î
;

443 
u32
 
	mlow_w©î
;

444 
u16
 
	m∑u£_time
;

445 
boﬁ
 
	m£nd_x⁄
;

446 
boﬁ
 
	m°ri˘_õì
;

447 
e1000_fc_mode
 
	mcuºít_mode
;

448 
e1000_fc_mode
 
	mªque°ed_mode
;

451 
	se1000_mbx_›î©i⁄s
 {

452 
s32
 (*
öô_∑øms
)(
e1000_hw
 *
	mhw
);

453 
s32
 (*
ªad
)(
	me1000_hw
 *, 
	mu32
 *, 
	mu16
, u16);

454 
s32
 (*
wrôe
)(
	me1000_hw
 *, 
	mu32
 *, 
	mu16
, u16);

455 
s32
 (*
ªad_po°ed
)(
	me1000_hw
 *, 
	mu32
 *, 
	mu16
, u16);

456 
s32
 (*
wrôe_po°ed
)(
	me1000_hw
 *, 
	mu32
 *, 
	mu16
, u16);

457 
s32
 (*
check_f‹_msg
)(
	me1000_hw
 *, 
	mu16
);

458 
s32
 (*
check_f‹_ack
)(
	me1000_hw
 *, 
	mu16
);

459 
s32
 (*
check_f‹_r°
)(
	me1000_hw
 *, 
	mu16
);

462 
	se1000_mbx_°©s
 {

463 
u32
 
	mmsgs_tx
;

464 
u32
 
	mmsgs_rx
;

466 
u32
 
	macks
;

467 
u32
 
	mªqs
;

468 
u32
 
	mr°s
;

471 
	se1000_mbx_öfo
 {

472 
e1000_mbx_›î©i⁄s
 
	m›s
;

473 
e1000_mbx_°©s
 
	m°©s
;

474 
u32
 
	mtimeout
;

475 
u32
 
	mu£c_dñay
;

476 
u16
 
	msize
;

479 
	se1000_dev_•ec_82575
 {

480 
boﬁ
 
	msgmii_a˘ive
;

481 
boﬁ
 
	mglobÆ_devi˚_ª£t
;

484 
	se1000_hw
 {

485 *
	mback
;

487 
u8
 
__iomem
 *
	mhw_addr
;

488 
u8
 
__iomem
 *
	mÊash_addªss
;

489 
	mio_ba£
;

491 
e1000_mac_öfo
 
	mmac
;

492 
e1000_fc_öfo
 
	mfc
;

493 
e1000_phy_öfo
 
	mphy
;

494 
e1000_nvm_öfo
 
	mnvm
;

495 
e1000_bus_öfo
 
	mbus
;

496 
e1000_mbx_öfo
 
	mmbx
;

497 
e1000_ho°_mng_dh˝_cookõ
 
	mmng_cookõ
;

500 
e1000_dev_•ec_82575
 
	m_82575
;

501 } 
	mdev_•ec
;

503 
u16
 
	mdevi˚_id
;

504 
u16
 
	msubsy°em_víd‹_id
;

505 
u16
 
	msubsy°em_devi˚_id
;

506 
u16
 
	mvíd‹_id
;

508 
u8
 
	mªvisi⁄_id
;

511 
√t_devi˚
 *
igb_gë_hw_dev
(
e1000_hw
 *
hw
);

512 
	#hw_dbg
(
f‹m©
, 
¨g
...) \

513 
	`√tdev_dbg
(
	`igb_gë_hw_dev
(
hw
), 
f‹m©
, ##
¨g
)

	)

516 
s32
 
igb_ªad_pcõ_ˇp_ªg
(
e1000_hw
 *
hw
, 
u32
 
ªg
, 
u16
 *
vÆue
);

517 
s32
 
igb_wrôe_pcõ_ˇp_ªg
(
e1000_hw
 *
hw
, 
u32
 
ªg
, 
u16
 *
vÆue
);

	@igb/e1000_mac.c

28 
	~<löux/if_ëhî.h
>

29 
	~<löux/dñay.h
>

30 
	~<löux/pci.h
>

31 
	~<löux/√tdevi˚.h
>

33 
	~"e1000_mac.h
"

35 
	~"igb.h
"

37 
s32
 
igb_£t_deÁu…_fc
(
e1000_hw
 *
hw
);

38 
s32
 
igb_£t_fc_w©îm¨ks
(
e1000_hw
 *
hw
);

48 
s32
 
	$igb_gë_bus_öfo_pcõ
(
e1000_hw
 *
hw
)

50 
e1000_bus_öfo
 *
bus
 = &
hw
->bus;

51 
s32
 
ªt_vÆ
;

52 
u32
 
ªg
;

53 
u16
 
pcõ_lök_°©us
;

55 
bus
->
ty≥
 = 
e1000_bus_ty≥_pci_ex¥ess
;

57 
ªt_vÆ
 = 
	`igb_ªad_pcõ_ˇp_ªg
(
hw
,

58 
PCI_EXP_LNKSTA
,

59 &
pcõ_lök_°©us
);

60 i‡(
ªt_vÆ
) {

61 
bus
->
width
 = 
e1000_bus_width_unknown
;

62 
bus
->
•ìd
 = 
e1000_bus_•ìd_unknown
;

64 
pcõ_lök_°©us
 & 
PCI_EXP_LNKSTA_CLS
) {

65 
PCI_EXP_LNKSTA_CLS_2_5GB
:

66 
bus
->
•ìd
 = 
e1000_bus_•ìd_2500
;

68 
PCI_EXP_LNKSTA_CLS_5_0GB
:

69 
bus
->
•ìd
 = 
e1000_bus_•ìd_5000
;

72 
bus
->
•ìd
 = 
e1000_bus_•ìd_unknown
;

76 
bus
->
width
 = (
e1000_bus_width
)((
pcõ_lök_°©us
 &

77 
PCI_EXP_LNKSTA_NLW
) >>

78 
PCI_EXP_LNKSTA_NLW_SHIFT
);

81 
ªg
 = 
	`rd32
(
E1000_STATUS
);

82 
bus
->
func
 = (
ªg
 & 
E1000_STATUS_FUNC_MASK
Ë>> 
E1000_STATUS_FUNC_SHIFT
;

85 
	}
}

94 
	$igb_˛ór_v·a
(
e1000_hw
 *
hw
)

96 
u32
 
off£t
;

98 
off£t
 = 0; off£à< 
E1000_VLAN_FILTER_TBL_SIZE
; offset++) {

99 
	`¨øy_wr32
(
E1000_VFTA
, 
off£t
, 0);

100 
	`wrÊ
();

102 
	}
}

113 
	$igb_wrôe_v·a
(
e1000_hw
 *
hw
, 
u32
 
off£t
, u32 
vÆue
)

115 
	`¨øy_wr32
(
E1000_VFTA
, 
off£t
, 
vÆue
);

116 
	`wrÊ
();

117 
	}
}

128 
	$igb_öô_rx_addrs
(
e1000_hw
 *
hw
, 
u16
 
ør_cou¡
)

130 
u32
 
i
;

131 
u8
 
mac_addr
[
ETH_ALEN
] = {0};

134 
	`hw_dbg
("Programming MAC Address into RAR[0]\n");

136 
hw
->
mac
.
›s
.
	`ør_£t
(hw, hw->mac.
addr
, 0);

139 
	`hw_dbg
("CÀ¨ög RAR[1-%u]\n", 
ør_cou¡
-1);

140 
i
 = 1; i < 
ør_cou¡
; i++)

141 
hw
->
mac
.
›s
.
	`ør_£t
(hw, 
mac_addr
, 
i
);

142 
	}
}

153 
s32
 
	$igb_v·a_£t
(
e1000_hw
 *
hw
, 
u32
 
vid
, 
boﬁ
 
add
)

155 
u32
 
ödex
 = (
vid
 >> 
E1000_VFTA_ENTRY_SHIFT
Ë& 
E1000_VFTA_ENTRY_MASK
;

156 
u32
 
mask
 = 1 << (
vid
 & 
E1000_VFTA_ENTRY_BIT_SHIFT_MASK
);

157 
u32
 
v·a
 = 
	`¨øy_rd32
(
E1000_VFTA
, 
ödex
);

158 
s32
 
ªt_vÆ
 = 0;

161 i‡((!!(
v·a
 & 
mask
)Ë=
add
) {

162 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

164 i‡(
add
)

165 
v·a
 |
mask
;

167 
v·a
 &~
mask
;

170 
	`igb_wrôe_v·a
(
hw
, 
ödex
, 
v·a
);

172  
ªt_vÆ
;

173 
	}
}

186 
s32
 
	$igb_check_Æt_mac_addr
(
e1000_hw
 *
hw
)

188 
u32
 
i
;

189 
s32
 
ªt_vÆ
 = 0;

190 
u16
 
off£t
, 
nvm_Æt_mac_addr_off£t
, 
nvm_d©a
;

191 
u8
 
Æt_mac_addr
[
ETH_ALEN
];

193 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_ALT_MAC_ADDR_PTR
, 1,

194 &
nvm_Æt_mac_addr_off£t
);

195 i‡(
ªt_vÆ
) {

196 
	`hw_dbg
("NVM Read Error\n");

197 
out
;

200 i‡(
nvm_Æt_mac_addr_off£t
 == 0xFFFF) {

202 
out
;

205 i‡(
hw
->
bus
.
func
 =
E1000_FUNC_1
)

206 
nvm_Æt_mac_addr_off£t
 +
E1000_ALT_MAC_ADDRESS_OFFSET_LAN1
;

207 
i
 = 0; i < 
ETH_ALEN
; i += 2) {

208 
off£t
 = 
nvm_Æt_mac_addr_off£t
 + (
i
 >> 1);

209 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
off£t
, 1, &
nvm_d©a
);

210 i‡(
ªt_vÆ
) {

211 
	`hw_dbg
("NVM Read Error\n");

212 
out
;

215 
Æt_mac_addr
[
i
] = (
u8
)(
nvm_d©a
 & 0xFF);

216 
Æt_mac_addr
[
i
 + 1] = (
u8
)(
nvm_d©a
 >> 8);

220 i‡(
Æt_mac_addr
[0] & 0x01) {

221 
	`hw_dbg
("Ignoring Alternate Mac Address with MC bit set\n");

222 
out
;

230 
hw
->
mac
.
›s
.
	`ør_£t
(hw, 
Æt_mac_addr
, 0);

232 
out
:

233  
ªt_vÆ
;

234 
	}
}

245 
	$igb_ør_£t
(
e1000_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
ödex
)

247 
u32
 
ør_low
, 
ør_high
;

253 
ør_low
 = ((
u32
Ë
addr
[0] |

254 ((
u32
Ë
addr
[1] << 8) |

255 ((
u32
Ë
addr
[2] << 16) | ((u32)áddr[3] << 24));

257 
ør_high
 = ((
u32
Ë
addr
[4] | ((u32)áddr[5] << 8));

260 i‡(
ør_low
 || 
ør_high
)

261 
ør_high
 |
E1000_RAH_AV
;

268 
	`wr32
(
	`E1000_RAL
(
ödex
), 
ør_low
);

269 
	`wrÊ
();

270 
	`wr32
(
	`E1000_RAH
(
ödex
), 
ør_high
);

271 
	`wrÊ
();

272 
	}
}

284 
	$igb_mè_£t
(
e1000_hw
 *
hw
, 
u32
 
hash_vÆue
)

286 
u32
 
hash_bô
, 
hash_ªg
, 
mè
;

298 
hash_ªg
 = (
hash_vÆue
 >> 5Ë& (
hw
->
mac
.
mè_ªg_cou¡
 - 1);

299 
hash_bô
 = 
hash_vÆue
 & 0x1F;

301 
mè
 = 
	`¨øy_rd32
(
E1000_MTA
, 
hash_ªg
);

303 
mè
 |(1 << 
hash_bô
);

305 
	`¨øy_wr32
(
E1000_MTA
, 
hash_ªg
, 
mè
);

306 
	`wrÊ
();

307 
	}
}

318 
u32
 
	$igb_hash_mc_addr
(
e1000_hw
 *
hw
, 
u8
 *
mc_addr
)

320 
u32
 
hash_vÆue
, 
hash_mask
;

321 
u8
 
bô_shi·
 = 0;

324 
hash_mask
 = (
hw
->
mac
.
mè_ªg_cou¡
 * 32) - 1;

330 
hash_mask
 >> 
bô_shi·
 != 0xFF)

331 
bô_shi·
++;

359 
hw
->
mac
.
mc_fûãr_ty≥
) {

364 
bô_shi·
 += 1;

367 
bô_shi·
 += 2;

370 
bô_shi·
 += 4;

374 
hash_vÆue
 = 
hash_mask
 & (((
mc_addr
[4] >> (8 - 
bô_shi·
)) |

375 (((
u16
Ë
mc_addr
[5]Ë<< 
bô_shi·
)));

377  
hash_vÆue
;

378 
	}
}

389 
	$igb_upd©e_mc_addr_li°
(
e1000_hw
 *
hw
,

390 
u8
 *
mc_addr_li°
, 
u32
 
mc_addr_cou¡
)

392 
u32
 
hash_vÆue
, 
hash_bô
, 
hash_ªg
;

393 
i
;

396 
	`mem£t
(&
hw
->
mac
.
mè_shadow
, 0, (hw->mac.mta_shadow));

399 
i
 = 0; (
u32
Ëò< 
mc_addr_cou¡
; i++) {

400 
hash_vÆue
 = 
	`igb_hash_mc_addr
(
hw
, 
mc_addr_li°
);

402 
hash_ªg
 = (
hash_vÆue
 >> 5Ë& (
hw
->
mac
.
mè_ªg_cou¡
 - 1);

403 
hash_bô
 = 
hash_vÆue
 & 0x1F;

405 
hw
->
mac
.
mè_shadow
[
hash_ªg
] |(1 << 
hash_bô
);

406 
mc_addr_li°
 +(
ETH_ALEN
);

410 
i
 = 
hw
->
mac
.
mè_ªg_cou¡
 - 1; i >= 0; i--)

411 
	`¨øy_wr32
(
E1000_MTA
, 
i
, 
hw
->
mac
.
mè_shadow
[i]);

412 
	`wrÊ
();

413 
	}
}

421 
	$igb_˛ór_hw_˙ås_ba£
(
e1000_hw
 *
hw
)

423 
	`rd32
(
E1000_CRCERRS
);

424 
	`rd32
(
E1000_SYMERRS
);

425 
	`rd32
(
E1000_MPC
);

426 
	`rd32
(
E1000_SCC
);

427 
	`rd32
(
E1000_ECOL
);

428 
	`rd32
(
E1000_MCC
);

429 
	`rd32
(
E1000_LATECOL
);

430 
	`rd32
(
E1000_COLC
);

431 
	`rd32
(
E1000_DC
);

432 
	`rd32
(
E1000_SEC
);

433 
	`rd32
(
E1000_RLEC
);

434 
	`rd32
(
E1000_XONRXC
);

435 
	`rd32
(
E1000_XONTXC
);

436 
	`rd32
(
E1000_XOFFRXC
);

437 
	`rd32
(
E1000_XOFFTXC
);

438 
	`rd32
(
E1000_FCRUC
);

439 
	`rd32
(
E1000_GPRC
);

440 
	`rd32
(
E1000_BPRC
);

441 
	`rd32
(
E1000_MPRC
);

442 
	`rd32
(
E1000_GPTC
);

443 
	`rd32
(
E1000_GORCL
);

444 
	`rd32
(
E1000_GORCH
);

445 
	`rd32
(
E1000_GOTCL
);

446 
	`rd32
(
E1000_GOTCH
);

447 
	`rd32
(
E1000_RNBC
);

448 
	`rd32
(
E1000_RUC
);

449 
	`rd32
(
E1000_RFC
);

450 
	`rd32
(
E1000_ROC
);

451 
	`rd32
(
E1000_RJC
);

452 
	`rd32
(
E1000_TORL
);

453 
	`rd32
(
E1000_TORH
);

454 
	`rd32
(
E1000_TOTL
);

455 
	`rd32
(
E1000_TOTH
);

456 
	`rd32
(
E1000_TPR
);

457 
	`rd32
(
E1000_TPT
);

458 
	`rd32
(
E1000_MPTC
);

459 
	`rd32
(
E1000_BPTC
);

460 
	}
}

470 
s32
 
	$igb_check_f‹_c›≥r_lök
(
e1000_hw
 *
hw
)

472 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

473 
s32
 
ªt_vÆ
;

474 
boﬁ
 
lök
;

482 i‡(!
mac
->
gë_lök_°©us
) {

483 
ªt_vÆ
 = 0;

484 
out
;

492 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
, 1, 0, &
lök
);

493 i‡(
ªt_vÆ
)

494 
out
;

496 i‡(!
lök
)

497 
out
;

499 
mac
->
gë_lök_°©us
 = 
Ál£
;

505 
	`igb_check_downshi·
(
hw
);

511 i‡(!
mac
->
aut⁄eg
) {

512 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

513 
out
;

521 
	`igb_c⁄fig_cﬁlisi⁄_di°
(
hw
);

529 
ªt_vÆ
 = 
	`igb_c⁄fig_fc_a·î_lök_up
(
hw
);

530 i‡(
ªt_vÆ
)

531 
	`hw_dbg
("Error configuring flow control\n");

533 
out
:

534  
ªt_vÆ
;

535 
	}
}

547 
s32
 
	$igb_£tup_lök
(
e1000_hw
 *
hw
)

549 
s32
 
ªt_vÆ
 = 0;

555 i‡(
	`igb_check_ª£t_block
(
hw
))

556 
out
;

562 i‡(
hw
->
fc
.
ªque°ed_mode
 =
e1000_fc_deÁu…
) {

563 
ªt_vÆ
 = 
	`igb_£t_deÁu…_fc
(
hw
);

564 i‡(
ªt_vÆ
)

565 
out
;

573 
hw
->
fc
.
cuºít_mode
 = hw->fc.
ªque°ed_mode
;

575 
	`hw_dbg
("A·î fix-up†FlowC⁄åﬁ i†now = %x\n", 
hw
->
fc
.
cuºít_mode
);

578 
ªt_vÆ
 = 
hw
->
mac
.
›s
.
	`£tup_physiˇl_öãrÁ˚
(hw);

579 i‡(
ªt_vÆ
)

580 
out
;

588 
	`hw_dbg
("InitializingÅhe Flow Controláddress,ÅypeándÅimerÑegs\n");

589 
	`wr32
(
E1000_FCT
, 
FLOW_CONTROL_TYPE
);

590 
	`wr32
(
E1000_FCAH
, 
FLOW_CONTROL_ADDRESS_HIGH
);

591 
	`wr32
(
E1000_FCAL
, 
FLOW_CONTROL_ADDRESS_LOW
);

593 
	`wr32
(
E1000_FCTTV
, 
hw
->
fc
.
∑u£_time
);

595 
ªt_vÆ
 = 
	`igb_£t_fc_w©îm¨ks
(
hw
);

597 
out
:

598  
ªt_vÆ
;

599 
	}
}

609 
	$igb_c⁄fig_cﬁlisi⁄_di°
(
e1000_hw
 *
hw
)

611 
u32
 
t˘l
;

613 
t˘l
 = 
	`rd32
(
E1000_TCTL
);

615 
t˘l
 &~
E1000_TCTL_COLD
;

616 
t˘l
 |
E1000_COLLISION_DISTANCE
 << 
E1000_COLD_SHIFT
;

618 
	`wr32
(
E1000_TCTL
, 
t˘l
);

619 
	`wrÊ
();

620 
	}
}

630 
s32
 
	$igb_£t_fc_w©îm¨ks
(
e1000_hw
 *
hw
)

632 
s32
 
ªt_vÆ
 = 0;

633 
u32
 
f¸é
 = 0, 
f¸th
 = 0;

642 i‡(
hw
->
fc
.
cuºít_mode
 & 
e1000_fc_tx_∑u£
) {

648 
f¸é
 = 
hw
->
fc
.
low_w©î
;

649 i‡(
hw
->
fc
.
£nd_x⁄
)

650 
f¸é
 |
E1000_FCRTL_XONE
;

652 
f¸th
 = 
hw
->
fc
.
high_w©î
;

654 
	`wr32
(
E1000_FCRTL
, 
f¸é
);

655 
	`wr32
(
E1000_FCRTH
, 
f¸th
);

657  
ªt_vÆ
;

658 
	}
}

667 
s32
 
	$igb_£t_deÁu…_fc
(
e1000_hw
 *
hw
)

669 
s32
 
ªt_vÆ
 = 0;

670 
u16
 
nvm_d©a
;

681 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_INIT_CONTROL2_REG
, 1, &
nvm_d©a
);

683 i‡(
ªt_vÆ
) {

684 
	`hw_dbg
("NVM Read Error\n");

685 
out
;

688 i‡((
nvm_d©a
 & 
NVM_WORD0F_PAUSE_MASK
) == 0)

689 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_n⁄e
;

690 i‡((
nvm_d©a
 & 
NVM_WORD0F_PAUSE_MASK
) ==

691 
NVM_WORD0F_ASM_DIR
)

692 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_tx_∑u£
;

694 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_fuŒ
;

696 
out
:

697  
ªt_vÆ
;

698 
	}
}

710 
s32
 
	$igb_f‹˚_mac_fc
(
e1000_hw
 *
hw
)

712 
u32
 
˘æ
;

713 
s32
 
ªt_vÆ
 = 0;

715 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

735 
	`hw_dbg
("hw->fc.cuºít_modê%u\n", 
hw
->
fc
.
cuºít_mode
);

737 
hw
->
fc
.
cuºít_mode
) {

738 
e1000_fc_n⁄e
:

739 
˘æ
 &(~(
E1000_CTRL_TFCE
 | 
E1000_CTRL_RFCE
));

741 
e1000_fc_rx_∑u£
:

742 
˘æ
 &(~
E1000_CTRL_TFCE
);

743 
˘æ
 |
E1000_CTRL_RFCE
;

745 
e1000_fc_tx_∑u£
:

746 
˘æ
 &(~
E1000_CTRL_RFCE
);

747 
˘æ
 |
E1000_CTRL_TFCE
;

749 
e1000_fc_fuŒ
:

750 
˘æ
 |(
E1000_CTRL_TFCE
 | 
E1000_CTRL_RFCE
);

753 
	`hw_dbg
("Flow controlÖaram set incorrectly\n");

754 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

755 
out
;

758 
	`wr32
(
E1000_CTRL
, 
˘æ
);

760 
out
:

761  
ªt_vÆ
;

762 
	}
}

774 
s32
 
	$igb_c⁄fig_fc_a·î_lök_up
(
e1000_hw
 *
hw
)

776 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

777 
s32
 
ªt_vÆ
 = 0;

778 
u16
 
mii_°©us_ªg
, 
mii_nway_adv_ªg
, 
mii_nway_Õ_abûôy_ªg
;

779 
u16
 
•ìd
, 
du∂ex
;

786 i‡(
mac
->
aut⁄eg_Áûed
) {

787 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_öã∫Æ_£rdes
)

788 
ªt_vÆ
 = 
	`igb_f‹˚_mac_fc
(
hw
);

790 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
)

791 
ªt_vÆ
 = 
	`igb_f‹˚_mac_fc
(
hw
);

794 i‡(
ªt_vÆ
) {

795 
	`hw_dbg
("Error forcing flow control settings\n");

796 
out
;

805 i‡((
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
Ë&& 
mac
->
aut⁄eg
) {

811 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_STATUS
,

812 &
mii_°©us_ªg
);

813 i‡(
ªt_vÆ
)

814 
out
;

815 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_STATUS
,

816 &
mii_°©us_ªg
);

817 i‡(
ªt_vÆ
)

818 
out
;

820 i‡(!(
mii_°©us_ªg
 & 
MII_SR_AUTONEG_COMPLETE
)) {

821 
	`hw_dbg
("Copper PHYánd Auto Neg "

823 
out
;

833 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_AUTONEG_ADV
,

834 &
mii_nway_adv_ªg
);

835 i‡(
ªt_vÆ
)

836 
out
;

837 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_LP_ABILITY
,

838 &
mii_nway_Õ_abûôy_ªg
);

839 i‡(
ªt_vÆ
)

840 
out
;

876 i‡((
mii_nway_adv_ªg
 & 
NWAY_AR_PAUSE
) &&

877 (
mii_nway_Õ_abûôy_ªg
 & 
NWAY_LPAR_PAUSE
)) {

885 i‡(
hw
->
fc
.
ªque°ed_mode
 =
e1000_fc_fuŒ
) {

886 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_fuŒ
;

887 
	`hw_dbg
("Flow Control = FULL.\r\n");

889 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_rx_∑u£
;

890 
	`hw_dbg
("Flow Control = "

902 i‡(!(
mii_nway_adv_ªg
 & 
NWAY_AR_PAUSE
) &&

903 (
mii_nway_adv_ªg
 & 
NWAY_AR_ASM_DIR
) &&

904 (
mii_nway_Õ_abûôy_ªg
 & 
NWAY_LPAR_PAUSE
) &&

905 (
mii_nway_Õ_abûôy_ªg
 & 
NWAY_LPAR_ASM_DIR
)) {

906 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_tx_∑u£
;

907 
	`hw_dbg
("Flow Control = TX PAUSE frames only.\r\n");

917 i‡((
mii_nway_adv_ªg
 & 
NWAY_AR_PAUSE
) &&

918 (
mii_nway_adv_ªg
 & 
NWAY_AR_ASM_DIR
) &&

919 !(
mii_nway_Õ_abûôy_ªg
 & 
NWAY_LPAR_PAUSE
) &&

920 (
mii_nway_Õ_abûôy_ªg
 & 
NWAY_LPAR_ASM_DIR
)) {

921 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_rx_∑u£
;

922 
	`hw_dbg
("Flow Control = RX PAUSE frames only.\r\n");

945 i‡((
hw
->
fc
.
ªque°ed_mode
 =
e1000_fc_n⁄e
 ||

946 
hw
->
fc
.
ªque°ed_mode
 =
e1000_fc_tx_∑u£
) ||

947 
hw
->
fc
.
°ri˘_õì
) {

948 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_n⁄e
;

949 
	`hw_dbg
("Flow Control = NONE.\r\n");

951 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_rx_∑u£
;

952 
	`hw_dbg
("Flow Control = RX PAUSE frames only.\r\n");

960 
ªt_vÆ
 = 
hw
->
mac
.
›s
.
	`gë_•ìd_™d_du∂ex
(hw, &
•ìd
, &
du∂ex
);

961 i‡(
ªt_vÆ
) {

962 
	`hw_dbg
("Error gettingÜink speedánd duplex\n");

963 
out
;

966 i‡(
du∂ex
 =
HALF_DUPLEX
)

967 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_n⁄e
;

973 
ªt_vÆ
 = 
	`igb_f‹˚_mac_fc
(
hw
);

974 i‡(
ªt_vÆ
) {

975 
	`hw_dbg
("Error forcing flow control settings\n");

976 
out
;

980 
out
:

981  
ªt_vÆ
;

982 
	}
}

993 
s32
 
	$igb_gë_•ìd_™d_du∂ex_c›≥r
(
e1000_hw
 *
hw
, 
u16
 *
•ìd
,

994 
u16
 *
du∂ex
)

996 
u32
 
°©us
;

998 
°©us
 = 
	`rd32
(
E1000_STATUS
);

999 i‡(
°©us
 & 
E1000_STATUS_SPEED_1000
) {

1000 *
•ìd
 = 
SPEED_1000
;

1001 
	`hw_dbg
("1000 Mbs, ");

1002 } i‡(
°©us
 & 
E1000_STATUS_SPEED_100
) {

1003 *
•ìd
 = 
SPEED_100
;

1004 
	`hw_dbg
("100 Mbs, ");

1006 *
•ìd
 = 
SPEED_10
;

1007 
	`hw_dbg
("10 Mbs, ");

1010 i‡(
°©us
 & 
E1000_STATUS_FD
) {

1011 *
du∂ex
 = 
FULL_DUPLEX
;

1012 
	`hw_dbg
("Full Duplex\n");

1014 *
du∂ex
 = 
HALF_DUPLEX
;

1015 
	`hw_dbg
("Half Duplex\n");

1019 
	}
}

1027 
s32
 
	$igb_gë_hw_£m≠h‹e
(
e1000_hw
 *
hw
)

1029 
u32
 
swsm
;

1030 
s32
 
ªt_vÆ
 = 0;

1031 
s32
 
timeout
 = 
hw
->
nvm
.
w‹d_size
 + 1;

1032 
s32
 
i
 = 0;

1035 
i
 < 
timeout
) {

1036 
swsm
 = 
	`rd32
(
E1000_SWSM
);

1037 i‡(!(
swsm
 & 
E1000_SWSM_SMBI
))

1040 
	`udñay
(50);

1041 
i
++;

1044 i‡(
i
 =
timeout
) {

1045 
	`hw_dbg
("Driver can'táccess device - SMBI bit is set.\n");

1046 
ªt_vÆ
 = -
E1000_ERR_NVM
;

1047 
out
;

1051 
i
 = 0; i < 
timeout
; i++) {

1052 
swsm
 = 
	`rd32
(
E1000_SWSM
);

1053 
	`wr32
(
E1000_SWSM
, 
swsm
 | 
E1000_SWSM_SWESMBI
);

1056 i‡(
	`rd32
(
E1000_SWSM
Ë& 
E1000_SWSM_SWESMBI
)

1059 
	`udñay
(50);

1062 i‡(
i
 =
timeout
) {

1064 
	`igb_put_hw_£m≠h‹e
(
hw
);

1065 
	`hw_dbg
("Driver can'táccessÅhe NVM\n");

1066 
ªt_vÆ
 = -
E1000_ERR_NVM
;

1067 
out
;

1070 
out
:

1071  
ªt_vÆ
;

1072 
	}
}

1080 
	$igb_put_hw_£m≠h‹e
(
e1000_hw
 *
hw
)

1082 
u32
 
swsm
;

1084 
swsm
 = 
	`rd32
(
E1000_SWSM
);

1086 
swsm
 &~(
E1000_SWSM_SMBI
 | 
E1000_SWSM_SWESMBI
);

1088 
	`wr32
(
E1000_SWSM
, 
swsm
);

1089 
	}
}

1097 
s32
 
	$igb_gë_auto_rd_d⁄e
(
e1000_hw
 *
hw
)

1099 
s32
 
i
 = 0;

1100 
s32
 
ªt_vÆ
 = 0;

1103 
i
 < 
AUTO_READ_DONE_TIMEOUT
) {

1104 i‡(
	`rd32
(
E1000_EECD
Ë& 
E1000_EECD_AUTO_RD
)

1106 
	`m¶ìp
(1);

1107 
i
++;

1110 i‡(
i
 =
AUTO_READ_DONE_TIMEOUT
) {

1111 
	`hw_dbg
("AutoÑead by HW from NVM hasÇot completed.\n");

1112 
ªt_vÆ
 = -
E1000_ERR_RESET
;

1113 
out
;

1116 
out
:

1117  
ªt_vÆ
;

1118 
	}
}

1128 
s32
 
	$igb_vÆid_Àd_deÁu…
(
e1000_hw
 *
hw
, 
u16
 *
d©a
)

1130 
s32
 
ªt_vÆ
;

1132 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_ID_LED_SETTINGS
, 1, 
d©a
);

1133 i‡(
ªt_vÆ
) {

1134 
	`hw_dbg
("NVM Read Error\n");

1135 
out
;

1138 i‡(*
d©a
 =
ID_LED_RESERVED_0000
 || *d©®=
ID_LED_RESERVED_FFFF
) {

1139 
hw
->
phy
.
medü_ty≥
) {

1140 
e1000_medü_ty≥_öã∫Æ_£rdes
:

1141 *
d©a
 = 
ID_LED_DEFAULT_82575_SERDES
;

1143 
e1000_medü_ty≥_c›≥r
:

1145 *
d©a
 = 
ID_LED_DEFAULT
;

1149 
out
:

1150  
ªt_vÆ
;

1151 
	}
}

1158 
s32
 
	$igb_id_Àd_öô
(
e1000_hw
 *
hw
)

1160 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

1161 
s32
 
ªt_vÆ
;

1162 c⁄° 
u32
 
Àd˘l_mask
 = 0x000000FF;

1163 c⁄° 
u32
 
Àd˘l_⁄
 = 
E1000_LEDCTL_MODE_LED_ON
;

1164 c⁄° 
u32
 
Àd˘l_off
 = 
E1000_LEDCTL_MODE_LED_OFF
;

1165 
u16
 
d©a
, 
i
, 
ãmp
;

1166 c⁄° 
u16
 
Àd_mask
 = 0x0F;

1168 
ªt_vÆ
 = 
	`igb_vÆid_Àd_deÁu…
(
hw
, &
d©a
);

1169 i‡(
ªt_vÆ
)

1170 
out
;

1172 
mac
->
Àd˘l_deÁu…
 = 
	`rd32
(
E1000_LEDCTL
);

1173 
mac
->
Àd˘l_mode1
 = mac->
Àd˘l_deÁu…
;

1174 
mac
->
Àd˘l_mode2
 = mac->
Àd˘l_deÁu…
;

1176 
i
 = 0; i < 4; i++) {

1177 
ãmp
 = (
d©a
 >> (
i
 << 2)Ë& 
Àd_mask
;

1178 
ãmp
) {

1179 
ID_LED_ON1_DEF2
:

1180 
ID_LED_ON1_ON2
:

1181 
ID_LED_ON1_OFF2
:

1182 
mac
->
Àd˘l_mode1
 &~(
Àd˘l_mask
 << (
i
 << 3));

1183 
mac
->
Àd˘l_mode1
 |
Àd˘l_⁄
 << (
i
 << 3);

1185 
ID_LED_OFF1_DEF2
:

1186 
ID_LED_OFF1_ON2
:

1187 
ID_LED_OFF1_OFF2
:

1188 
mac
->
Àd˘l_mode1
 &~(
Àd˘l_mask
 << (
i
 << 3));

1189 
mac
->
Àd˘l_mode1
 |
Àd˘l_off
 << (
i
 << 3);

1195 
ãmp
) {

1196 
ID_LED_DEF1_ON2
:

1197 
ID_LED_ON1_ON2
:

1198 
ID_LED_OFF1_ON2
:

1199 
mac
->
Àd˘l_mode2
 &~(
Àd˘l_mask
 << (
i
 << 3));

1200 
mac
->
Àd˘l_mode2
 |
Àd˘l_⁄
 << (
i
 << 3);

1202 
ID_LED_DEF1_OFF2
:

1203 
ID_LED_ON1_OFF2
:

1204 
ID_LED_OFF1_OFF2
:

1205 
mac
->
Àd˘l_mode2
 &~(
Àd˘l_mask
 << (
i
 << 3));

1206 
mac
->
Àd˘l_mode2
 |
Àd˘l_off
 << (
i
 << 3);

1214 
out
:

1215  
ªt_vÆ
;

1216 
	}
}

1225 
s32
 
	$igb_˛ónup_Àd
(
e1000_hw
 *
hw
)

1227 
	`wr32
(
E1000_LEDCTL
, 
hw
->
mac
.
Àd˘l_deÁu…
);

1229 
	}
}

1237 
s32
 
	$igb_blök_Àd
(
e1000_hw
 *
hw
)

1239 
u32
 
Àd˘l_blök
 = 0;

1240 
u32
 
i
;

1246 
Àd˘l_blök
 = 
hw
->
mac
.
Àd˘l_mode2
;

1247 
i
 = 0; i < 4; i++)

1248 i‡(((
hw
->
mac
.
Àd˘l_mode2
 >> (
i
 * 8)) & 0xFF) ==

1249 
E1000_LEDCTL_MODE_LED_ON
)

1250 
Àd˘l_blök
 |(
E1000_LEDCTL_LED0_BLINK
 <<

1251 (
i
 * 8));

1253 
	`wr32
(
E1000_LEDCTL
, 
Àd˘l_blök
);

1256 
	}
}

1264 
s32
 
	$igb_Àd_off
(
e1000_hw
 *
hw
)

1266 
hw
->
phy
.
medü_ty≥
) {

1267 
e1000_medü_ty≥_c›≥r
:

1268 
	`wr32
(
E1000_LEDCTL
, 
hw
->
mac
.
Àd˘l_mode1
);

1275 
	}
}

1288 
s32
 
	$igb_dißbÀ_pcõ_ma°î
(
e1000_hw
 *
hw
)

1290 
u32
 
˘æ
;

1291 
s32
 
timeout
 = 
MASTER_DISABLE_TIMEOUT
;

1292 
s32
 
ªt_vÆ
 = 0;

1294 i‡(
hw
->
bus
.
ty≥
 !
e1000_bus_ty≥_pci_ex¥ess
)

1295 
out
;

1297 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

1298 
˘æ
 |
E1000_CTRL_GIO_MASTER_DISABLE
;

1299 
	`wr32
(
E1000_CTRL
, 
˘æ
);

1301 
timeout
) {

1302 i‡(!(
	`rd32
(
E1000_STATUS
) &

1303 
E1000_STATUS_GIO_MASTER_ENABLE
))

1305 
	`udñay
(100);

1306 
timeout
--;

1309 i‡(!
timeout
) {

1310 
	`hw_dbg
("MasterÑequestsáreÖending.\n");

1311 
ªt_vÆ
 = -
E1000_ERR_MASTER_REQUESTS_PENDING
;

1312 
out
;

1315 
out
:

1316  
ªt_vÆ
;

1317 
	}
}

1326 
s32
 
	$igb_vÆid©e_mdi_£âög
(
e1000_hw
 *
hw
)

1328 
s32
 
ªt_vÆ
 = 0;

1330 i‡(!
hw
->
mac
.
aut⁄eg
 && (hw->
phy
.
mdix
 == 0 || hw->phy.mdix == 3)) {

1331 
	`hw_dbg
("Invalid MDI setting detected\n");

1332 
hw
->
phy
.
mdix
 = 1;

1333 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

1334 
out
;

1337 
out
:

1338  
ªt_vÆ
;

1339 
	}
}

1352 
s32
 
	$igb_wrôe_8bô_˘æ_ªg
(
e1000_hw
 *
hw
, 
u32
 
ªg
,

1353 
u32
 
off£t
, 
u8
 
d©a
)

1355 
u32
 
i
, 
ªgvÆue
 = 0;

1356 
s32
 
ªt_vÆ
 = 0;

1359 
ªgvÆue
 = ((
u32
)
d©a
Ë| (
off£t
 << 
E1000_GEN_CTL_ADDRESS_SHIFT
);

1360 
	`wr32
(
ªg
, 
ªgvÆue
);

1363 
i
 = 0; i < 
E1000_GEN_POLL_TIMEOUT
; i++) {

1364 
	`udñay
(5);

1365 
ªgvÆue
 = 
	`rd32
(
ªg
);

1366 i‡(
ªgvÆue
 & 
E1000_GEN_CTL_READY
)

1369 i‡(!(
ªgvÆue
 & 
E1000_GEN_CTL_READY
)) {

1370 
	`hw_dbg
("Reg %08x didÇŸ indiˇãÑódy\n", 
ªg
);

1371 
ªt_vÆ
 = -
E1000_ERR_PHY
;

1372 
out
;

1375 
out
:

1376  
ªt_vÆ
;

1377 
	}
}

1386 
boﬁ
 
	$igb_íabÀ_mng_∑ss_thru
(
e1000_hw
 *
hw
)

1388 
u32
 
m™c
;

1389 
u32
 
fwsm
, 
Á˘ps
;

1390 
boﬁ
 
ªt_vÆ
 = 
Ál£
;

1392 i‡(!
hw
->
mac
.
asf_fúmw¨e_¥e£¡
)

1393 
out
;

1395 
m™c
 = 
	`rd32
(
E1000_MANC
);

1397 i‡(!(
m™c
 & 
E1000_MANC_RCV_TCO_EN
))

1398 
out
;

1400 i‡(
hw
->
mac
.
¨c_subsy°em_vÆid
) {

1401 
fwsm
 = 
	`rd32
(
E1000_FWSM
);

1402 
Á˘ps
 = 
	`rd32
(
E1000_FACTPS
);

1404 i‡(!(
Á˘ps
 & 
E1000_FACTPS_MNGCG
) &&

1405 ((
fwsm
 & 
E1000_FWSM_MODE_MASK
) ==

1406 (
e1000_mng_mode_±
 << 
E1000_FWSM_MODE_SHIFT
))) {

1407 
ªt_vÆ
 = 
åue
;

1408 
out
;

1411 i‡((
m™c
 & 
E1000_MANC_SMBUS_EN
) &&

1412 !(
m™c
 & 
E1000_MANC_ASF_EN
)) {

1413 
ªt_vÆ
 = 
åue
;

1414 
out
;

1418 
out
:

1419  
ªt_vÆ
;

1420 
	}
}

	@igb/e1000_mac.h

28 #i‚de‡
_E1000_MAC_H_


29 
	#_E1000_MAC_H_


	)

31 
	~"e1000_hw.h
"

33 
	~"e1000_phy.h
"

34 
	~"e1000_nvm.h
"

35 
	~"e1000_deföes.h
"

41 
s32
 
igb_blök_Àd
(
e1000_hw
 *
hw
);

42 
s32
 
igb_check_f‹_c›≥r_lök
(
e1000_hw
 *
hw
);

43 
s32
 
igb_˛ónup_Àd
(
e1000_hw
 *
hw
);

44 
s32
 
igb_c⁄fig_fc_a·î_lök_up
(
e1000_hw
 *
hw
);

45 
s32
 
igb_dißbÀ_pcõ_ma°î
(
e1000_hw
 *
hw
);

46 
s32
 
igb_f‹˚_mac_fc
(
e1000_hw
 *
hw
);

47 
s32
 
igb_gë_auto_rd_d⁄e
(
e1000_hw
 *
hw
);

48 
s32
 
igb_gë_bus_öfo_pcõ
(
e1000_hw
 *
hw
);

49 
s32
 
igb_gë_hw_£m≠h‹e
(
e1000_hw
 *
hw
);

50 
s32
 
igb_gë_•ìd_™d_du∂ex_c›≥r
(
e1000_hw
 *
hw
, 
u16
 *
•ìd
,

51 
u16
 *
du∂ex
);

52 
s32
 
igb_id_Àd_öô
(
e1000_hw
 *
hw
);

53 
s32
 
igb_Àd_off
(
e1000_hw
 *
hw
);

54 
igb_upd©e_mc_addr_li°
(
e1000_hw
 *
hw
,

55 
u8
 *
mc_addr_li°
, 
u32
 
mc_addr_cou¡
);

56 
s32
 
igb_£tup_lök
(
e1000_hw
 *
hw
);

57 
s32
 
igb_vÆid©e_mdi_£âög
(
e1000_hw
 *
hw
);

58 
s32
 
igb_wrôe_8bô_˘æ_ªg
(
e1000_hw
 *
hw
, 
u32
 
ªg
,

59 
u32
 
off£t
, 
u8
 
d©a
);

61 
igb_˛ór_hw_˙ås_ba£
(
e1000_hw
 *
hw
);

62 
igb_˛ór_v·a
(
e1000_hw
 *
hw
);

63 
s32
 
igb_v·a_£t
(
e1000_hw
 *
hw
, 
u32
 
vid
, 
boﬁ
 
add
);

64 
igb_c⁄fig_cﬁlisi⁄_di°
(
e1000_hw
 *
hw
);

65 
igb_öô_rx_addrs
(
e1000_hw
 *
hw
, 
u16
 
ør_cou¡
);

66 
igb_mè_£t
(
e1000_hw
 *
hw
, 
u32
 
hash_vÆue
);

67 
igb_put_hw_£m≠h‹e
(
e1000_hw
 *
hw
);

68 
igb_ør_£t
(
e1000_hw
 *
hw
, 
u8
 *
addr
, 
u32
 
ödex
);

69 
s32
 
igb_check_Æt_mac_addr
(
e1000_hw
 *
hw
);

71 
boﬁ
 
igb_íabÀ_mng_∑ss_thru
(
e1000_hw
 *
hw
);

73 
	ee1000_mng_mode
 {

74 
	me1000_mng_mode_n⁄e
 = 0,

75 
	me1000_mng_mode_asf
,

76 
	me1000_mng_mode_±
,

77 
	me1000_mng_mode_ùmi
,

78 
	me1000_mng_mode_ho°_if_⁄ly


81 
	#E1000_FACTPS_MNGCG
 0x20000000

	)

83 
	#E1000_FWSM_MODE_MASK
 0xE

	)

84 
	#E1000_FWSM_MODE_SHIFT
 1

	)

86 
	#E1000_MNG_DHCP_COOKIE_STATUS_VLAN
 0x2

	)

88 
e1000_öô_fun˘i⁄_poöãrs_82575
(
e1000_hw
 *
hw
);

	@igb/e1000_mbx.c

28 
	~"e1000_mbx.h
"

39 
s32
 
	$igb_ªad_mbx
(
e1000_hw
 *
hw
, 
u32
 *
msg
, 
u16
 
size
, u16 
mbx_id
)

41 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

42 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

45 i‡(
size
 > 
mbx
->size)

46 
size
 = 
mbx
->size;

48 i‡(
mbx
->
›s
.
ªad
)

49 
ªt_vÆ
 = 
mbx
->
›s
.
	`ªad
(
hw
, 
msg
, 
size
, 
mbx_id
);

51  
ªt_vÆ
;

52 
	}
}

63 
s32
 
	$igb_wrôe_mbx
(
e1000_hw
 *
hw
, 
u32
 *
msg
, 
u16
 
size
, u16 
mbx_id
)

65 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

66 
s32
 
ªt_vÆ
 = 0;

68 i‡(
size
 > 
mbx
->size)

69 
ªt_vÆ
 = -
E1000_ERR_MBX
;

71 i‡(
mbx
->
›s
.
wrôe
)

72 
ªt_vÆ
 = 
mbx
->
›s
.
	`wrôe
(
hw
, 
msg
, 
size
, 
mbx_id
);

74  
ªt_vÆ
;

75 
	}
}

84 
s32
 
	$igb_check_f‹_msg
(
e1000_hw
 *
hw
, 
u16
 
mbx_id
)

86 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

87 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

89 i‡(
mbx
->
›s
.
check_f‹_msg
)

90 
ªt_vÆ
 = 
mbx
->
›s
.
	`check_f‹_msg
(
hw
, 
mbx_id
);

92  
ªt_vÆ
;

93 
	}
}

102 
s32
 
	$igb_check_f‹_ack
(
e1000_hw
 *
hw
, 
u16
 
mbx_id
)

104 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

105 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

107 i‡(
mbx
->
›s
.
check_f‹_ack
)

108 
ªt_vÆ
 = 
mbx
->
›s
.
	`check_f‹_ack
(
hw
, 
mbx_id
);

110  
ªt_vÆ
;

111 
	}
}

120 
s32
 
	$igb_check_f‹_r°
(
e1000_hw
 *
hw
, 
u16
 
mbx_id
)

122 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

123 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

125 i‡(
mbx
->
›s
.
check_f‹_r°
)

126 
ªt_vÆ
 = 
mbx
->
›s
.
	`check_f‹_r°
(
hw
, 
mbx_id
);

128  
ªt_vÆ
;

129 
	}
}

138 
s32
 
	$igb_pﬁl_f‹_msg
(
e1000_hw
 *
hw
, 
u16
 
mbx_id
)

140 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

141 
cou¡down
 = 
mbx
->
timeout
;

143 i‡(!
cou¡down
 || !
mbx
->
›s
.
check_f‹_msg
)

144 
out
;

146 
cou¡down
 && 
mbx
->
›s
.
	`check_f‹_msg
(
hw
, 
mbx_id
)) {

147 
cou¡down
--;

148 i‡(!
cou¡down
)

150 
	`udñay
(
mbx
->
u£c_dñay
);

154 i‡(!
cou¡down
)

155 
mbx
->
timeout
 = 0;

156 
out
:

157  
cou¡down
 ? 0 : -
E1000_ERR_MBX
;

158 
	}
}

167 
s32
 
	$igb_pﬁl_f‹_ack
(
e1000_hw
 *
hw
, 
u16
 
mbx_id
)

169 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

170 
cou¡down
 = 
mbx
->
timeout
;

172 i‡(!
cou¡down
 || !
mbx
->
›s
.
check_f‹_ack
)

173 
out
;

175 
cou¡down
 && 
mbx
->
›s
.
	`check_f‹_ack
(
hw
, 
mbx_id
)) {

176 
cou¡down
--;

177 i‡(!
cou¡down
)

179 
	`udñay
(
mbx
->
u£c_dñay
);

183 i‡(!
cou¡down
)

184 
mbx
->
timeout
 = 0;

185 
out
:

186  
cou¡down
 ? 0 : -
E1000_ERR_MBX
;

187 
	}
}

199 
s32
 
	$igb_ªad_po°ed_mbx
(
e1000_hw
 *
hw
, 
u32
 *
msg
, 
u16
 
size
, u16 
mbx_id
)

201 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

202 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

204 i‡(!
mbx
->
›s
.
ªad
)

205 
out
;

207 
ªt_vÆ
 = 
	`igb_pﬁl_f‹_msg
(
hw
, 
mbx_id
);

209 i‡(!
ªt_vÆ
)

210 
ªt_vÆ
 = 
mbx
->
›s
.
	`ªad
(
hw
, 
msg
, 
size
, 
mbx_id
);

211 
out
:

212  
ªt_vÆ
;

213 
	}
}

225 
s32
 
	$igb_wrôe_po°ed_mbx
(
e1000_hw
 *
hw
, 
u32
 *
msg
, 
u16
 
size
, u16 
mbx_id
)

227 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

228 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

231 i‡(!
mbx
->
›s
.
wrôe
 || !mbx->
timeout
)

232 
out
;

235 
ªt_vÆ
 = 
mbx
->
›s
.
	`wrôe
(
hw
, 
msg
, 
size
, 
mbx_id
);

238 i‡(!
ªt_vÆ
)

239 
ªt_vÆ
 = 
	`igb_pﬁl_f‹_ack
(
hw
, 
mbx_id
);

240 
out
:

241  
ªt_vÆ
;

242 
	}
}

244 
s32
 
	$igb_check_f‹_bô_pf
(
e1000_hw
 *
hw
, 
u32
 
mask
)

246 
u32
 
mbvfi¸
 = 
	`rd32
(
E1000_MBVFICR
);

247 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

249 i‡(
mbvfi¸
 & 
mask
) {

250 
ªt_vÆ
 = 0;

251 
	`wr32
(
E1000_MBVFICR
, 
mask
);

254  
ªt_vÆ
;

255 
	}
}

264 
s32
 
	$igb_check_f‹_msg_pf
(
e1000_hw
 *
hw
, 
u16
 
vf_numbî
)

266 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

268 i‡(!
	`igb_check_f‹_bô_pf
(
hw
, 
E1000_MBVFICR_VFREQ_VF1
 << 
vf_numbî
)) {

269 
ªt_vÆ
 = 0;

270 
hw
->
mbx
.
°©s
.
ªqs
++;

273  
ªt_vÆ
;

274 
	}
}

283 
s32
 
	$igb_check_f‹_ack_pf
(
e1000_hw
 *
hw
, 
u16
 
vf_numbî
)

285 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

287 i‡(!
	`igb_check_f‹_bô_pf
(
hw
, 
E1000_MBVFICR_VFACK_VF1
 << 
vf_numbî
)) {

288 
ªt_vÆ
 = 0;

289 
hw
->
mbx
.
°©s
.
acks
++;

292  
ªt_vÆ
;

293 
	}
}

302 
s32
 
	$igb_check_f‹_r°_pf
(
e1000_hw
 *
hw
, 
u16
 
vf_numbî
)

304 
u32
 
vÊª
 = 
	`rd32
(
E1000_VFLRE
);

305 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

307 i‡(
vÊª
 & (1 << 
vf_numbî
)) {

308 
ªt_vÆ
 = 0;

309 
	`wr32
(
E1000_VFLRE
, (1 << 
vf_numbî
));

310 
hw
->
mbx
.
°©s
.
r°s
++;

313  
ªt_vÆ
;

314 
	}
}

323 
s32
 
	$igb_obèö_mbx_lock_pf
(
e1000_hw
 *
hw
, 
u16
 
vf_numbî
)

325 
s32
 
ªt_vÆ
 = -
E1000_ERR_MBX
;

326 
u32
 
p2v_maûbox
;

330 
	`wr32
(
	`E1000_P2VMAILBOX
(
vf_numbî
), 
E1000_P2VMAILBOX_PFU
);

333 
p2v_maûbox
 = 
	`rd32
(
	`E1000_P2VMAILBOX
(
vf_numbî
));

334 i‡(
p2v_maûbox
 & 
E1000_P2VMAILBOX_PFU
)

335 
ªt_vÆ
 = 0;

337  
ªt_vÆ
;

338 
	}
}

349 
s32
 
	$igb_wrôe_mbx_pf
(
e1000_hw
 *
hw
, 
u32
 *
msg
, 
u16
 
size
,

350 
u16
 
vf_numbî
)

352 
s32
 
ªt_vÆ
;

353 
u16
 
i
;

356 
ªt_vÆ
 = 
	`igb_obèö_mbx_lock_pf
(
hw
, 
vf_numbî
);

357 i‡(
ªt_vÆ
)

358 
out_no_wrôe
;

361 
	`igb_check_f‹_msg_pf
(
hw
, 
vf_numbî
);

362 
	`igb_check_f‹_ack_pf
(
hw
, 
vf_numbî
);

365 
i
 = 0; i < 
size
; i++)

366 
	`¨øy_wr32
(
	`E1000_VMBMEM
(
vf_numbî
), 
i
, 
msg
[i]);

369 
	`wr32
(
	`E1000_P2VMAILBOX
(
vf_numbî
), 
E1000_P2VMAILBOX_STS
);

372 
hw
->
mbx
.
°©s
.
msgs_tx
++;

374 
out_no_wrôe
:

375  
ªt_vÆ
;

377 
	}
}

390 
s32
 
	$igb_ªad_mbx_pf
(
e1000_hw
 *
hw
, 
u32
 *
msg
, 
u16
 
size
,

391 
u16
 
vf_numbî
)

393 
s32
 
ªt_vÆ
;

394 
u16
 
i
;

397 
ªt_vÆ
 = 
	`igb_obèö_mbx_lock_pf
(
hw
, 
vf_numbî
);

398 i‡(
ªt_vÆ
)

399 
out_no_ªad
;

402 
i
 = 0; i < 
size
; i++)

403 
msg
[
i
] = 
	`¨øy_rd32
(
	`E1000_VMBMEM
(
vf_numbî
), i);

406 
	`wr32
(
	`E1000_P2VMAILBOX
(
vf_numbî
), 
E1000_P2VMAILBOX_ACK
);

409 
hw
->
mbx
.
°©s
.
msgs_rx
++;

411 
out_no_ªad
:

412  
ªt_vÆ
;

413 
	}
}

421 
s32
 
	$igb_öô_mbx_∑øms_pf
(
e1000_hw
 *
hw
)

423 
e1000_mbx_öfo
 *
mbx
 = &
hw
->mbx;

425 i‡(
hw
->
mac
.
ty≥
 =
e1000_82576
) {

426 
mbx
->
timeout
 = 0;

427 
mbx
->
u£c_dñay
 = 0;

429 
mbx
->
size
 = 
E1000_VFMAILBOX_SIZE
;

431 
mbx
->
›s
.
ªad
 = 
igb_ªad_mbx_pf
;

432 
mbx
->
›s
.
wrôe
 = 
igb_wrôe_mbx_pf
;

433 
mbx
->
›s
.
ªad_po°ed
 = 
igb_ªad_po°ed_mbx
;

434 
mbx
->
›s
.
wrôe_po°ed
 = 
igb_wrôe_po°ed_mbx
;

435 
mbx
->
›s
.
check_f‹_msg
 = 
igb_check_f‹_msg_pf
;

436 
mbx
->
›s
.
check_f‹_ack
 = 
igb_check_f‹_ack_pf
;

437 
mbx
->
›s
.
check_f‹_r°
 = 
igb_check_f‹_r°_pf
;

439 
mbx
->
°©s
.
msgs_tx
 = 0;

440 
mbx
->
°©s
.
msgs_rx
 = 0;

441 
mbx
->
°©s
.
ªqs
 = 0;

442 
mbx
->
°©s
.
acks
 = 0;

443 
mbx
->
°©s
.
r°s
 = 0;

447 
	}
}

	@igb/e1000_mbx.h

28 #i‚de‡
_E1000_MBX_H_


29 
	#_E1000_MBX_H_


	)

31 
	~"e1000_hw.h
"

33 
	#E1000_P2VMAILBOX_STS
 0x00000001

	)

34 
	#E1000_P2VMAILBOX_ACK
 0x00000002

	)

35 
	#E1000_P2VMAILBOX_VFU
 0x00000004

	)

36 
	#E1000_P2VMAILBOX_PFU
 0x00000008

	)

37 
	#E1000_P2VMAILBOX_RVFU
 0x00000010

	)

39 
	#E1000_MBVFICR_VFREQ_MASK
 0x000000FF

	)

40 
	#E1000_MBVFICR_VFREQ_VF1
 0x00000001

	)

41 
	#E1000_MBVFICR_VFACK_MASK
 0x00FF0000

	)

42 
	#E1000_MBVFICR_VFACK_VF1
 0x00010000

	)

44 
	#E1000_VFMAILBOX_SIZE
 16

	)

50 
	#E1000_VT_MSGTYPE_ACK
 0x80000000

	)

52 
	#E1000_VT_MSGTYPE_NACK
 0x40000000

	)

54 
	#E1000_VT_MSGTYPE_CTS
 0x20000000

	)

56 
	#E1000_VT_MSGINFO_SHIFT
 16

	)

58 
	#E1000_VT_MSGINFO_MASK
 (0xFF << 
E1000_VT_MSGINFO_SHIFT
)

	)

60 
	#E1000_VF_RESET
 0x01

	)

61 
	#E1000_VF_SET_MAC_ADDR
 0x02

	)

62 
	#E1000_VF_SET_MULTICAST
 0x03

	)

63 
	#E1000_VF_SET_VLAN
 0x04

	)

64 
	#E1000_VF_SET_LPE
 0x05

	)

65 
	#E1000_VF_SET_PROMISC
 0x06

	)

66 
	#E1000_VF_SET_PROMISC_MULTICAST
 (0x02 << 
E1000_VT_MSGINFO_SHIFT
)

	)

68 
	#E1000_PF_CONTROL_MSG
 0x0100

	)

70 
s32
 
igb_ªad_mbx
(
e1000_hw
 *, 
u32
 *, 
u16
, u16);

71 
s32
 
igb_wrôe_mbx
(
e1000_hw
 *, 
u32
 *, 
u16
, u16);

72 
s32
 
igb_check_f‹_msg
(
e1000_hw
 *, 
u16
);

73 
s32
 
igb_check_f‹_ack
(
e1000_hw
 *, 
u16
);

74 
s32
 
igb_check_f‹_r°
(
e1000_hw
 *, 
u16
);

75 
s32
 
igb_öô_mbx_∑øms_pf
(
e1000_hw
 *);

	@igb/e1000_nvm.c

28 
	~<löux/if_ëhî.h
>

29 
	~<löux/dñay.h
>

31 
	~"e1000_mac.h
"

32 
	~"e1000_nvm.h
"

41 
	$igb_øi£_ìc_˛k
(
e1000_hw
 *
hw
, 
u32
 *
ìcd
)

43 *
ìcd
 = *ìcd | 
E1000_EECD_SK
;

44 
	`wr32
(
E1000_EECD
, *
ìcd
);

45 
	`wrÊ
();

46 
	`udñay
(
hw
->
nvm
.
dñay_u£c
);

47 
	}
}

56 
	$igb_lowî_ìc_˛k
(
e1000_hw
 *
hw
, 
u32
 *
ìcd
)

58 *
ìcd
 = *ìcd & ~
E1000_EECD_SK
;

59 
	`wr32
(
E1000_EECD
, *
ìcd
);

60 
	`wrÊ
();

61 
	`udñay
(
hw
->
nvm
.
dñay_u£c
);

62 
	}
}

74 
	$igb_shi·_out_ìc_bôs
(
e1000_hw
 *
hw
, 
u16
 
d©a
, u16 
cou¡
)

76 
e1000_nvm_öfo
 *
nvm
 = &
hw
->nvm;

77 
u32
 
ìcd
 = 
	`rd32
(
E1000_EECD
);

78 
u32
 
mask
;

80 
mask
 = 0x01 << (
cou¡
 - 1);

81 i‡(
nvm
->
ty≥
 =
e1000_nvm_ì¥om_•i
)

82 
ìcd
 |
E1000_EECD_DO
;

85 
ìcd
 &~
E1000_EECD_DI
;

87 i‡(
d©a
 & 
mask
)

88 
ìcd
 |
E1000_EECD_DI
;

90 
	`wr32
(
E1000_EECD
, 
ìcd
);

91 
	`wrÊ
();

93 
	`udñay
(
nvm
->
dñay_u£c
);

95 
	`igb_øi£_ìc_˛k
(
hw
, &
ìcd
);

96 
	`igb_lowî_ìc_˛k
(
hw
, &
ìcd
);

98 
mask
 >>= 1;

99 } 
mask
);

101 
ìcd
 &~
E1000_EECD_DI
;

102 
	`wr32
(
E1000_EECD
, 
ìcd
);

103 
	}
}

116 
u16
 
	$igb_shi·_ö_ìc_bôs
(
e1000_hw
 *
hw
, 
u16
 
cou¡
)

118 
u32
 
ìcd
;

119 
u32
 
i
;

120 
u16
 
d©a
;

122 
ìcd
 = 
	`rd32
(
E1000_EECD
);

124 
ìcd
 &~(
E1000_EECD_DO
 | 
E1000_EECD_DI
);

125 
d©a
 = 0;

127 
i
 = 0; i < 
cou¡
; i++) {

128 
d©a
 <<= 1;

129 
	`igb_øi£_ìc_˛k
(
hw
, &
ìcd
);

131 
ìcd
 = 
	`rd32
(
E1000_EECD
);

133 
ìcd
 &~
E1000_EECD_DI
;

134 i‡(
ìcd
 & 
E1000_EECD_DO
)

135 
d©a
 |= 1;

137 
	`igb_lowî_ìc_˛k
(
hw
, &
ìcd
);

140  
d©a
;

141 
	}
}

151 
s32
 
	$igb_pﬁl_ìrd_ìwr_d⁄e
(
e1000_hw
 *
hw
, 
ì_ªg
)

153 
u32
 
©ãm±s
 = 100000;

154 
u32
 
i
, 
ªg
 = 0;

155 
s32
 
ªt_vÆ
 = -
E1000_ERR_NVM
;

157 
i
 = 0; i < 
©ãm±s
; i++) {

158 i‡(
ì_ªg
 =
E1000_NVM_POLL_READ
)

159 
ªg
 = 
	`rd32
(
E1000_EERD
);

161 
ªg
 = 
	`rd32
(
E1000_EEWR
);

163 i‡(
ªg
 & 
E1000_NVM_RW_REG_DONE
) {

164 
ªt_vÆ
 = 0;

168 
	`udñay
(5);

171  
ªt_vÆ
;

172 
	}
}

182 
s32
 
	$igb_acquúe_nvm
(
e1000_hw
 *
hw
)

184 
u32
 
ìcd
 = 
	`rd32
(
E1000_EECD
);

185 
s32
 
timeout
 = 
E1000_NVM_GRANT_ATTEMPTS
;

186 
s32
 
ªt_vÆ
 = 0;

189 
	`wr32
(
E1000_EECD
, 
ìcd
 | 
E1000_EECD_REQ
);

190 
ìcd
 = 
	`rd32
(
E1000_EECD
);

192 
timeout
) {

193 i‡(
ìcd
 & 
E1000_EECD_GNT
)

195 
	`udñay
(5);

196 
ìcd
 = 
	`rd32
(
E1000_EECD
);

197 
timeout
--;

200 i‡(!
timeout
) {

201 
ìcd
 &~
E1000_EECD_REQ
;

202 
	`wr32
(
E1000_EECD
, 
ìcd
);

203 
	`hw_dbg
("CouldÇotácquire NVM grant\n");

204 
ªt_vÆ
 = -
E1000_ERR_NVM
;

207  
ªt_vÆ
;

208 
	}
}

216 
	$igb_°™dby_nvm
(
e1000_hw
 *
hw
)

218 
e1000_nvm_öfo
 *
nvm
 = &
hw
->nvm;

219 
u32
 
ìcd
 = 
	`rd32
(
E1000_EECD
);

221 i‡(
nvm
->
ty≥
 =
e1000_nvm_ì¥om_•i
) {

223 
ìcd
 |
E1000_EECD_CS
;

224 
	`wr32
(
E1000_EECD
, 
ìcd
);

225 
	`wrÊ
();

226 
	`udñay
(
nvm
->
dñay_u£c
);

227 
ìcd
 &~
E1000_EECD_CS
;

228 
	`wr32
(
E1000_EECD
, 
ìcd
);

229 
	`wrÊ
();

230 
	`udñay
(
nvm
->
dñay_u£c
);

232 
	}
}

240 
	$e1000_°›_nvm
(
e1000_hw
 *
hw
)

242 
u32
 
ìcd
;

244 
ìcd
 = 
	`rd32
(
E1000_EECD
);

245 i‡(
hw
->
nvm
.
ty≥
 =
e1000_nvm_ì¥om_•i
) {

247 
ìcd
 |
E1000_EECD_CS
;

248 
	`igb_lowî_ìc_˛k
(
hw
, &
ìcd
);

250 
	}
}

258 
	$igb_ªÀa£_nvm
(
e1000_hw
 *
hw
)

260 
u32
 
ìcd
;

262 
	`e1000_°›_nvm
(
hw
);

264 
ìcd
 = 
	`rd32
(
E1000_EECD
);

265 
ìcd
 &~
E1000_EECD_REQ
;

266 
	`wr32
(
E1000_EECD
, 
ìcd
);

267 
	}
}

275 
s32
 
	$igb_ªady_nvm_ì¥om
(
e1000_hw
 *
hw
)

277 
e1000_nvm_öfo
 *
nvm
 = &
hw
->nvm;

278 
u32
 
ìcd
 = 
	`rd32
(
E1000_EECD
);

279 
s32
 
ªt_vÆ
 = 0;

280 
u16
 
timeout
 = 0;

281 
u8
 
•i_°©_ªg
;

284 i‡(
nvm
->
ty≥
 =
e1000_nvm_ì¥om_•i
) {

286 
ìcd
 &~(
E1000_EECD_CS
 | 
E1000_EECD_SK
);

287 
	`wr32
(
E1000_EECD
, 
ìcd
);

288 
	`udñay
(1);

289 
timeout
 = 
NVM_MAX_RETRY_SPI
;

297 
timeout
) {

298 
	`igb_shi·_out_ìc_bôs
(
hw
, 
NVM_RDSR_OPCODE_SPI
,

299 
hw
->
nvm
.
›code_bôs
);

300 
•i_°©_ªg
 = (
u8
)
	`igb_shi·_ö_ìc_bôs
(
hw
, 8);

301 i‡(!(
•i_°©_ªg
 & 
NVM_STATUS_RDY_SPI
))

304 
	`udñay
(5);

305 
	`igb_°™dby_nvm
(
hw
);

306 
timeout
--;

309 i‡(!
timeout
) {

310 
	`hw_dbg
("SPI NVM StatusÉrror\n");

311 
ªt_vÆ
 = -
E1000_ERR_NVM
;

312 
out
;

316 
out
:

317  
ªt_vÆ
;

318 
	}
}

329 
s32
 
	$igb_ªad_nvm_ìrd
(
e1000_hw
 *
hw
, 
u16
 
off£t
, u16 
w‹ds
, u16 *
d©a
)

331 
e1000_nvm_öfo
 *
nvm
 = &
hw
->nvm;

332 
u32
 
i
, 
ìrd
 = 0;

333 
s32
 
ªt_vÆ
 = 0;

339 i‡((
off£t
 >
nvm
->
w‹d_size
Ë|| (
w‹ds
 > (nvm->word_size - offset)) ||

340 (
w‹ds
 == 0)) {

341 
	`hw_dbg
("nvmÖarameter(s) out of bounds\n");

342 
ªt_vÆ
 = -
E1000_ERR_NVM
;

343 
out
;

346 
i
 = 0; i < 
w‹ds
; i++) {

347 
ìrd
 = ((
off£t
+
i
Ë<< 
E1000_NVM_RW_ADDR_SHIFT
) +

348 
E1000_NVM_RW_REG_START
;

350 
	`wr32
(
E1000_EERD
, 
ìrd
);

351 
ªt_vÆ
 = 
	`igb_pﬁl_ìrd_ìwr_d⁄e
(
hw
, 
E1000_NVM_POLL_READ
);

352 i‡(
ªt_vÆ
)

355 
d©a
[
i
] = (
	`rd32
(
E1000_EERD
) >>

356 
E1000_NVM_RW_REG_DATA
);

359 
out
:

360  
ªt_vÆ
;

361 
	}
}

375 
s32
 
	$igb_wrôe_nvm_•i
(
e1000_hw
 *
hw
, 
u16
 
off£t
, u16 
w‹ds
, u16 *
d©a
)

377 
e1000_nvm_öfo
 *
nvm
 = &
hw
->nvm;

378 
s32
 
ªt_vÆ
;

379 
u16
 
widx
 = 0;

385 i‡((
off£t
 >
nvm
->
w‹d_size
Ë|| (
w‹ds
 > (nvm->word_size - offset)) ||

386 (
w‹ds
 == 0)) {

387 
	`hw_dbg
("nvmÖarameter(s) out of bounds\n");

388 
ªt_vÆ
 = -
E1000_ERR_NVM
;

389 
out
;

392 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`acquúe
(hw);

393 i‡(
ªt_vÆ
)

394 
out
;

396 
	`m¶ìp
(10);

398 
widx
 < 
w‹ds
) {

399 
u8
 
wrôe_›code
 = 
NVM_WRITE_OPCODE_SPI
;

401 
ªt_vÆ
 = 
	`igb_ªady_nvm_ì¥om
(
hw
);

402 i‡(
ªt_vÆ
)

403 
ªÀa£
;

405 
	`igb_°™dby_nvm
(
hw
);

408 
	`igb_shi·_out_ìc_bôs
(
hw
, 
NVM_WREN_OPCODE_SPI
,

409 
nvm
->
›code_bôs
);

411 
	`igb_°™dby_nvm
(
hw
);

417 i‡((
nvm
->
addªss_bôs
 =8Ë&& (
off£t
 >= 128))

418 
wrôe_›code
 |
NVM_A8_OPCODE_SPI
;

421 
	`igb_shi·_out_ìc_bôs
(
hw
, 
wrôe_›code
, 
nvm
->
›code_bôs
);

422 
	`igb_shi·_out_ìc_bôs
(
hw
, (
u16
)((
off£t
 + 
widx
) * 2),

423 
nvm
->
addªss_bôs
);

426 
widx
 < 
w‹ds
) {

427 
u16
 
w‹d_out
 = 
d©a
[
widx
];

428 
w‹d_out
 = (word_out >> 8) | (word_out << 8);

429 
	`igb_shi·_out_ìc_bôs
(
hw
, 
w‹d_out
, 16);

430 
widx
++;

432 i‡((((
off£t
 + 
widx
Ë* 2Ë% 
nvm
->
∑ge_size
) == 0) {

433 
	`igb_°™dby_nvm
(
hw
);

439 
	`m¶ìp
(10);

440 
ªÀa£
:

441 
hw
->
nvm
.
›s
.
	`ªÀa£
(hw);

443 
out
:

444  
ªt_vÆ
;

445 
	}
}

455 
s32
 
	$igb_ªad_∑π_num
(
e1000_hw
 *
hw
, 
u32
 *
∑π_num
)

457 
s32
 
ªt_vÆ
;

458 
u16
 
nvm_d©a
;

460 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_PBA_OFFSET_0
, 1, &
nvm_d©a
);

461 i‡(
ªt_vÆ
) {

462 
	`hw_dbg
("NVM Read Error\n");

463 
out
;

465 *
∑π_num
 = (
u32
)(
nvm_d©a
 << 16);

467 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_PBA_OFFSET_1
, 1, &
nvm_d©a
);

468 i‡(
ªt_vÆ
) {

469 
	`hw_dbg
("NVM Read Error\n");

470 
out
;

472 *
∑π_num
 |
nvm_d©a
;

474 
out
:

475  
ªt_vÆ
;

476 
	}
}

486 
s32
 
	$igb_ªad_mac_addr
(
e1000_hw
 *
hw
)

488 
u32
 
ør_high
;

489 
u32
 
ør_low
;

490 
u16
 
i
;

492 
ør_high
 = 
	`rd32
(
	`E1000_RAH
(0));

493 
ør_low
 = 
	`rd32
(
	`E1000_RAL
(0));

495 
i
 = 0; i < 
E1000_RAL_MAC_ADDR_LEN
; i++)

496 
hw
->
mac
.
≥rm_addr
[
i
] = (
u8
)(
ør_low
 >> (i*8));

498 
i
 = 0; i < 
E1000_RAH_MAC_ADDR_LEN
; i++)

499 
hw
->
mac
.
≥rm_addr
[
i
+4] = (
u8
)(
ør_high
 >> (i*8));

501 
i
 = 0; i < 
ETH_ALEN
; i++)

502 
hw
->
mac
.
addr
[
i
] = hw->mac.
≥rm_addr
[i];

505 
	}
}

514 
s32
 
	$igb_vÆid©e_nvm_checksum
(
e1000_hw
 *
hw
)

516 
s32
 
ªt_vÆ
 = 0;

517 
u16
 
checksum
 = 0;

518 
u16
 
i
, 
nvm_d©a
;

520 
i
 = 0; i < (
NVM_CHECKSUM_REG
 + 1); i++) {

521 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
i
, 1, &
nvm_d©a
);

522 i‡(
ªt_vÆ
) {

523 
	`hw_dbg
("NVM Read Error\n");

524 
out
;

526 
checksum
 +
nvm_d©a
;

529 i‡(
checksum
 !(
u16
Ë
NVM_SUM
) {

530 
	`hw_dbg
("NVM Checksum Invalid\n");

531 
ªt_vÆ
 = -
E1000_ERR_NVM
;

532 
out
;

535 
out
:

536  
ªt_vÆ
;

537 
	}
}

547 
s32
 
	$igb_upd©e_nvm_checksum
(
e1000_hw
 *
hw
)

549 
s32
 
ªt_vÆ
;

550 
u16
 
checksum
 = 0;

551 
u16
 
i
, 
nvm_d©a
;

553 
i
 = 0; i < 
NVM_CHECKSUM_REG
; i++) {

554 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
i
, 1, &
nvm_d©a
);

555 i‡(
ªt_vÆ
) {

556 
	`hw_dbg
("NVM Read Error while updating checksum.\n");

557 
out
;

559 
checksum
 +
nvm_d©a
;

561 
checksum
 = (
u16
Ë
NVM_SUM
 - checksum;

562 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`wrôe
(hw, 
NVM_CHECKSUM_REG
, 1, &
checksum
);

563 i‡(
ªt_vÆ
)

564 
	`hw_dbg
("NVM Write Error while updating checksum.\n");

566 
out
:

567  
ªt_vÆ
;

568 
	}
}

	@igb/e1000_nvm.h

28 #i‚de‡
_E1000_NVM_H_


29 
	#_E1000_NVM_H_


	)

31 
s32
 
igb_acquúe_nvm
(
e1000_hw
 *
hw
);

32 
igb_ªÀa£_nvm
(
e1000_hw
 *
hw
);

33 
s32
 
igb_ªad_mac_addr
(
e1000_hw
 *
hw
);

34 
s32
 
igb_ªad_∑π_num
(
e1000_hw
 *
hw
, 
u32
 *
∑π_num
);

35 
s32
 
igb_ªad_nvm_ìrd
(
e1000_hw
 *
hw
, 
u16
 
off£t
, u16 
w‹ds
, u16 *
d©a
);

36 
s32
 
igb_wrôe_nvm_•i
(
e1000_hw
 *
hw
, 
u16
 
off£t
, u16 
w‹ds
, u16 *
d©a
);

37 
s32
 
igb_vÆid©e_nvm_checksum
(
e1000_hw
 *
hw
);

38 
s32
 
igb_upd©e_nvm_checksum
(
e1000_hw
 *
hw
);

	@igb/e1000_phy.c

28 
	~<löux/if_ëhî.h
>

29 
	~<löux/dñay.h
>

31 
	~"e1000_mac.h
"

32 
	~"e1000_phy.h
"

34 
s32
 
igb_phy_£tup_aut⁄eg
(
e1000_hw
 *
hw
);

35 
igb_phy_f‹˚_•ìd_du∂ex_£tup
(
e1000_hw
 *
hw
,

36 
u16
 *
phy_˘æ
);

37 
s32
 
igb_waô_aut⁄eg
(
e1000_hw
 *
hw
);

40 c⁄° 
u16
 
	ge1000_m88_ˇbÀ_Àngth_èbÀ
[] =

41 { 0, 50, 80, 110, 140, 140, 
E1000_CABLE_LENGTH_UNDEFINED
 };

42 
	#M88E1000_CABLE_LENGTH_TABLE_SIZE
 \

43 ((
e1000_m88_ˇbÀ_Àngth_èbÀ
) / \

44 (
e1000_m88_ˇbÀ_Àngth_èbÀ
[0]))

	)

46 c⁄° 
u16
 
	ge1000_igp_2_ˇbÀ_Àngth_èbÀ
[] =

55 
	#IGP02E1000_CABLE_LENGTH_TABLE_SIZE
 \

56 ((
e1000_igp_2_ˇbÀ_Àngth_èbÀ
) / \

57 (
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[0]))

	)

67 
s32
 
	$igb_check_ª£t_block
(
e1000_hw
 *
hw
)

69 
u32
 
m™c
;

71 
m™c
 = 
	`rd32
(
E1000_MANC
);

73  (
m™c
 & 
E1000_MANC_BLK_PHY_RST_ON_IDE
) ?

74 
E1000_BLK_PHY_RESET
 : 0;

75 
	}
}

84 
s32
 
	$igb_gë_phy_id
(
e1000_hw
 *
hw
)

86 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

87 
s32
 
ªt_vÆ
 = 0;

88 
u16
 
phy_id
;

90 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_ID1
, &
phy_id
);

91 i‡(
ªt_vÆ
)

92 
out
;

94 
phy
->
id
 = (
u32
)(
phy_id
 << 16);

95 
	`udñay
(20);

96 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_ID2
, &
phy_id
);

97 i‡(
ªt_vÆ
)

98 
out
;

100 
phy
->
id
 |(
u32
)(
phy_id
 & 
PHY_REVISION_MASK
);

101 
phy
->
ªvisi⁄
 = (
u32
)(
phy_id
 & ~
PHY_REVISION_MASK
);

103 
out
:

104  
ªt_vÆ
;

105 
	}
}

113 
s32
 
	$igb_phy_ª£t_d•
(
e1000_hw
 *
hw
)

115 
s32
 
ªt_vÆ
 = 0;

117 i‡(!(
hw
->
phy
.
›s
.
wrôe_ªg
))

118 
out
;

120 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
M88E1000_PHY_GEN_CONTROL
, 0xC1);

121 i‡(
ªt_vÆ
)

122 
out
;

124 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
M88E1000_PHY_GEN_CONTROL
, 0);

126 
out
:

127  
ªt_vÆ
;

128 
	}
}

139 
s32
 
	$igb_ªad_phy_ªg_mdic
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
)

141 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

142 
u32
 
i
, 
mdic
 = 0;

143 
s32
 
ªt_vÆ
 = 0;

145 i‡(
off£t
 > 
MAX_PHY_REG_ADDRESS
) {

146 
	`hw_dbg
("PHY Addªs†%d i†ouào‡ønge\n", 
off£t
);

147 
ªt_vÆ
 = -
E1000_ERR_PARAM
;

148 
out
;

156 
mdic
 = ((
off£t
 << 
E1000_MDIC_REG_SHIFT
) |

157 (
phy
->
addr
 << 
E1000_MDIC_PHY_SHIFT
) |

158 (
E1000_MDIC_OP_READ
));

160 
	`wr32
(
E1000_MDIC
, 
mdic
);

167 
i
 = 0; i < (
E1000_GEN_POLL_TIMEOUT
 * 3); i++) {

168 
	`udñay
(50);

169 
mdic
 = 
	`rd32
(
E1000_MDIC
);

170 i‡(
mdic
 & 
E1000_MDIC_READY
)

173 i‡(!(
mdic
 & 
E1000_MDIC_READY
)) {

174 
	`hw_dbg
("MDI Read didÇot complete\n");

175 
ªt_vÆ
 = -
E1000_ERR_PHY
;

176 
out
;

178 i‡(
mdic
 & 
E1000_MDIC_ERROR
) {

179 
	`hw_dbg
("MDI Error\n");

180 
ªt_vÆ
 = -
E1000_ERR_PHY
;

181 
out
;

183 *
d©a
 = (
u16
Ë
mdic
;

185 
out
:

186  
ªt_vÆ
;

187 
	}
}

197 
s32
 
	$igb_wrôe_phy_ªg_mdic
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
)

199 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

200 
u32
 
i
, 
mdic
 = 0;

201 
s32
 
ªt_vÆ
 = 0;

203 i‡(
off£t
 > 
MAX_PHY_REG_ADDRESS
) {

204 
	`hw_dbg
("PHY Addªs†%d i†ouào‡ønge\n", 
off£t
);

205 
ªt_vÆ
 = -
E1000_ERR_PARAM
;

206 
out
;

214 
mdic
 = (((
u32
)
d©a
) |

215 (
off£t
 << 
E1000_MDIC_REG_SHIFT
) |

216 (
phy
->
addr
 << 
E1000_MDIC_PHY_SHIFT
) |

217 (
E1000_MDIC_OP_WRITE
));

219 
	`wr32
(
E1000_MDIC
, 
mdic
);

226 
i
 = 0; i < (
E1000_GEN_POLL_TIMEOUT
 * 3); i++) {

227 
	`udñay
(50);

228 
mdic
 = 
	`rd32
(
E1000_MDIC
);

229 i‡(
mdic
 & 
E1000_MDIC_READY
)

232 i‡(!(
mdic
 & 
E1000_MDIC_READY
)) {

233 
	`hw_dbg
("MDI Write didÇot complete\n");

234 
ªt_vÆ
 = -
E1000_ERR_PHY
;

235 
out
;

237 i‡(
mdic
 & 
E1000_MDIC_ERROR
) {

238 
	`hw_dbg
("MDI Error\n");

239 
ªt_vÆ
 = -
E1000_ERR_PHY
;

240 
out
;

243 
out
:

244  
ªt_vÆ
;

245 
	}
}

256 
s32
 
	$igb_ªad_phy_ªg_i2c
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
)

258 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

259 
u32
 
i
, 
i2ccmd
 = 0;

267 
i2ccmd
 = ((
off£t
 << 
E1000_I2CCMD_REG_ADDR_SHIFT
) |

268 (
phy
->
addr
 << 
E1000_I2CCMD_PHY_ADDR_SHIFT
) |

269 (
E1000_I2CCMD_OPCODE_READ
));

271 
	`wr32
(
E1000_I2CCMD
, 
i2ccmd
);

274 
i
 = 0; i < 
E1000_I2CCMD_PHY_TIMEOUT
; i++) {

275 
	`udñay
(50);

276 
i2ccmd
 = 
	`rd32
(
E1000_I2CCMD
);

277 i‡(
i2ccmd
 & 
E1000_I2CCMD_READY
)

280 i‡(!(
i2ccmd
 & 
E1000_I2CCMD_READY
)) {

281 
	`hw_dbg
("I2CCMD Read didÇot complete\n");

282  -
E1000_ERR_PHY
;

284 i‡(
i2ccmd
 & 
E1000_I2CCMD_ERROR
) {

285 
	`hw_dbg
("I2CCMD Error bit set\n");

286  -
E1000_ERR_PHY
;

290 *
d©a
 = ((
i2ccmd
 >> 8) & 0x00FF) | ((i2ccmd << 8) & 0xFF00);

293 
	}
}

303 
s32
 
	$igb_wrôe_phy_ªg_i2c
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
)

305 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

306 
u32
 
i
, 
i2ccmd
 = 0;

307 
u16
 
phy_d©a_sw≠≥d
;

311 
phy_d©a_sw≠≥d
 = ((
d©a
 >> 8) & 0x00FF) | ((data << 8) & 0xFF00);

318 
i2ccmd
 = ((
off£t
 << 
E1000_I2CCMD_REG_ADDR_SHIFT
) |

319 (
phy
->
addr
 << 
E1000_I2CCMD_PHY_ADDR_SHIFT
) |

320 
E1000_I2CCMD_OPCODE_WRITE
 |

321 
phy_d©a_sw≠≥d
);

323 
	`wr32
(
E1000_I2CCMD
, 
i2ccmd
);

326 
i
 = 0; i < 
E1000_I2CCMD_PHY_TIMEOUT
; i++) {

327 
	`udñay
(50);

328 
i2ccmd
 = 
	`rd32
(
E1000_I2CCMD
);

329 i‡(
i2ccmd
 & 
E1000_I2CCMD_READY
)

332 i‡(!(
i2ccmd
 & 
E1000_I2CCMD_READY
)) {

333 
	`hw_dbg
("I2CCMD Write didÇot complete\n");

334  -
E1000_ERR_PHY
;

336 i‡(
i2ccmd
 & 
E1000_I2CCMD_ERROR
) {

337 
	`hw_dbg
("I2CCMD Error bit set\n");

338  -
E1000_ERR_PHY
;

342 
	}
}

354 
s32
 
	$igb_ªad_phy_ªg_igp
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
)

356 
s32
 
ªt_vÆ
 = 0;

358 i‡(!(
hw
->
phy
.
›s
.
acquúe
))

359 
out
;

361 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`acquúe
(hw);

362 i‡(
ªt_vÆ
)

363 
out
;

365 i‡(
off£t
 > 
MAX_PHY_MULTI_PAGE_REG
) {

366 
ªt_vÆ
 = 
	`igb_wrôe_phy_ªg_mdic
(
hw
,

367 
IGP01E1000_PHY_PAGE_SELECT
,

368 (
u16
)
off£t
);

369 i‡(
ªt_vÆ
) {

370 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

371 
out
;

375 
ªt_vÆ
 = 
	`igb_ªad_phy_ªg_mdic
(
hw
, 
MAX_PHY_REG_ADDRESS
 & 
off£t
,

376 
d©a
);

378 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

380 
out
:

381  
ªt_vÆ
;

382 
	}
}

393 
s32
 
	$igb_wrôe_phy_ªg_igp
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
)

395 
s32
 
ªt_vÆ
 = 0;

397 i‡(!(
hw
->
phy
.
›s
.
acquúe
))

398 
out
;

400 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`acquúe
(hw);

401 i‡(
ªt_vÆ
)

402 
out
;

404 i‡(
off£t
 > 
MAX_PHY_MULTI_PAGE_REG
) {

405 
ªt_vÆ
 = 
	`igb_wrôe_phy_ªg_mdic
(
hw
,

406 
IGP01E1000_PHY_PAGE_SELECT
,

407 (
u16
)
off£t
);

408 i‡(
ªt_vÆ
) {

409 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

410 
out
;

414 
ªt_vÆ
 = 
	`igb_wrôe_phy_ªg_mdic
(
hw
, 
MAX_PHY_REG_ADDRESS
 & 
off£t
,

415 
d©a
);

417 
hw
->
phy
.
›s
.
	`ªÀa£
(hw);

419 
out
:

420  
ªt_vÆ
;

421 
	}
}

429 
s32
 
	$igb_c›≥r_lök_£tup_82580
(
e1000_hw
 *
hw
)

431 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

432 
s32
 
ªt_vÆ
;

433 
u16
 
phy_d©a
;

436 i‡(
phy
->
ª£t_dißbÀ
) {

437 
ªt_vÆ
 = 0;

438 
out
;

441 i‡(
phy
->
ty≥
 =
e1000_phy_82580
) {

442 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ª£t
(hw);

443 i‡(
ªt_vÆ
) {

444 
	`hw_dbg
("ErrorÑesettingÅhe PHY.\n");

445 
out
;

450 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
I82580_CFG_REG
, &
phy_d©a
);

451 i‡(
ªt_vÆ
)

452 
out
;

454 
phy_d©a
 |
I82580_CFG_ASSERT_CRS_ON_TX
;

457 
phy_d©a
 |
I82580_CFG_ENABLE_DOWNSHIFT
;

459 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
I82580_CFG_REG
, 
phy_d©a
);

461 
out
:

462  
ªt_vÆ
;

463 
	}
}

472 
s32
 
	$igb_c›≥r_lök_£tup_m88
(
e1000_hw
 *
hw
)

474 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

475 
s32
 
ªt_vÆ
;

476 
u16
 
phy_d©a
;

478 i‡(
phy
->
ª£t_dißbÀ
) {

479 
ªt_vÆ
 = 0;

480 
out
;

484 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, &
phy_d©a
);

485 i‡(
ªt_vÆ
)

486 
out
;

488 
phy_d©a
 |
M88E1000_PSCR_ASSERT_CRS_ON_TX
;

498 
phy_d©a
 &~
M88E1000_PSCR_AUTO_X_MODE
;

500 
phy
->
mdix
) {

502 
phy_d©a
 |
M88E1000_PSCR_MDI_MANUAL_MODE
;

505 
phy_d©a
 |
M88E1000_PSCR_MDIX_MANUAL_MODE
;

508 
phy_d©a
 |
M88E1000_PSCR_AUTO_X_1000T
;

512 
phy_d©a
 |
M88E1000_PSCR_AUTO_X_MODE
;

523 
phy_d©a
 &~
M88E1000_PSCR_POLARITY_REVERSAL
;

524 i‡(
phy
->
dißbÀ_pﬁ¨ôy_c‹ª˘i⁄
 == 1)

525 
phy_d©a
 |
M88E1000_PSCR_POLARITY_REVERSAL
;

527 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, 
phy_d©a
);

528 i‡(
ªt_vÆ
)

529 
out
;

531 i‡(
phy
->
ªvisi⁄
 < 
E1000_REVISION_4
) {

536 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_EXT_PHY_SPEC_CTRL
,

537 &
phy_d©a
);

538 i‡(
ªt_vÆ
)

539 
out
;

541 
phy_d©a
 |
M88E1000_EPSCR_TX_CLK_25
;

543 i‡((
phy
->
ªvisi⁄
 =
E1000_REVISION_2
) &&

544 (
phy
->
id
 =
M88E1111_I_PHY_ID
)) {

546 
phy_d©a
 &~
M88EC018_EPSCR_DOWNSHIFT_COUNTER_MASK
;

547 
phy_d©a
 |
M88EC018_EPSCR_DOWNSHIFT_COUNTER_5X
;

550 
phy_d©a
 &~(
M88E1000_EPSCR_MASTER_DOWNSHIFT_MASK
 |

551 
M88E1000_EPSCR_SLAVE_DOWNSHIFT_MASK
);

552 
phy_d©a
 |(
M88E1000_EPSCR_MASTER_DOWNSHIFT_1X
 |

553 
M88E1000_EPSCR_SLAVE_DOWNSHIFT_1X
);

555 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
M88E1000_EXT_PHY_SPEC_CTRL
,

556 
phy_d©a
);

557 i‡(
ªt_vÆ
)

558 
out
;

562 
ªt_vÆ
 = 
	`igb_phy_sw_ª£t
(
hw
);

563 i‡(
ªt_vÆ
) {

564 
	`hw_dbg
("Error committingÅhe PHY changes\n");

565 
out
;

568 
out
:

569  
ªt_vÆ
;

570 
	}
}

579 
s32
 
	$igb_c›≥r_lök_£tup_igp
(
e1000_hw
 *
hw
)

581 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

582 
s32
 
ªt_vÆ
;

583 
u16
 
d©a
;

585 i‡(
phy
->
ª£t_dißbÀ
) {

586 
ªt_vÆ
 = 0;

587 
out
;

590 
ªt_vÆ
 = 
phy
->
›s
.
	`ª£t
(
hw
);

591 i‡(
ªt_vÆ
) {

592 
	`hw_dbg
("ErrorÑesettingÅhe PHY.\n");

593 
out
;

600 
	`m¶ìp
(100);

606 i‡(
phy
->
ty≥
 =
e1000_phy_igp
) {

608 i‡(
phy
->
›s
.
£t_d3_Õlu_°©e
)

609 
ªt_vÆ
 = 
phy
->
›s
.
	`£t_d3_Õlu_°©e
(
hw
, 
Ál£
);

610 i‡(
ªt_vÆ
) {

611 
	`hw_dbg
("Error Disabling LPLU D3\n");

612 
out
;

617 
ªt_vÆ
 = 
phy
->
›s
.
	`£t_d0_Õlu_°©e
(
hw
, 
Ál£
);

618 i‡(
ªt_vÆ
) {

619 
	`hw_dbg
("Error Disabling LPLU D0\n");

620 
out
;

623 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CTRL
, &
d©a
);

624 i‡(
ªt_vÆ
)

625 
out
;

627 
d©a
 &~
IGP01E1000_PSCR_AUTO_MDIX
;

629 
phy
->
mdix
) {

631 
d©a
 &~
IGP01E1000_PSCR_FORCE_MDI_MDIX
;

634 
d©a
 |
IGP01E1000_PSCR_FORCE_MDI_MDIX
;

638 
d©a
 |
IGP01E1000_PSCR_AUTO_MDIX
;

641 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CTRL
, 
d©a
);

642 i‡(
ªt_vÆ
)

643 
out
;

646 i‡(
hw
->
mac
.
aut⁄eg
) {

652 i‡(
phy
->
aut⁄eg_advîti£d
 =
ADVERTISE_1000_FULL
) {

654 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
,

655 
IGP01E1000_PHY_PORT_CONFIG
,

656 &
d©a
);

657 i‡(
ªt_vÆ
)

658 
out
;

660 
d©a
 &~
IGP01E1000_PSCFR_SMART_SPEED
;

661 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

662 
IGP01E1000_PHY_PORT_CONFIG
,

663 
d©a
);

664 i‡(
ªt_vÆ
)

665 
out
;

668 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_1000T_CTRL
, &
d©a
);

669 i‡(
ªt_vÆ
)

670 
out
;

672 
d©a
 &~
CR_1000T_MS_ENABLE
;

673 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_1000T_CTRL
, 
d©a
);

674 i‡(
ªt_vÆ
)

675 
out
;

678 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_1000T_CTRL
, &
d©a
);

679 i‡(
ªt_vÆ
)

680 
out
;

683 
phy
->
‹igöÆ_ms_ty≥
 = (
d©a
 & 
CR_1000T_MS_ENABLE
) ?

684 ((
d©a
 & 
CR_1000T_MS_VALUE
) ?

685 
e1000_ms_f‹˚_ma°î
 :

686 
e1000_ms_f‹˚_¶ave
) :

687 
e1000_ms_auto
;

689 
phy
->
ms_ty≥
) {

690 
e1000_ms_f‹˚_ma°î
:

691 
d©a
 |(
CR_1000T_MS_ENABLE
 | 
CR_1000T_MS_VALUE
);

693 
e1000_ms_f‹˚_¶ave
:

694 
d©a
 |
CR_1000T_MS_ENABLE
;

695 
d©a
 &~(
CR_1000T_MS_VALUE
);

697 
e1000_ms_auto
:

698 
d©a
 &~
CR_1000T_MS_ENABLE
;

702 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_1000T_CTRL
, 
d©a
);

703 i‡(
ªt_vÆ
)

704 
out
;

707 
out
:

708  
ªt_vÆ
;

709 
	}
}

720 
s32
 
	$igb_c›≥r_lök_aut⁄eg
(
e1000_hw
 *
hw
)

722 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

723 
s32
 
ªt_vÆ
;

724 
u16
 
phy_˘æ
;

730 
phy
->
aut⁄eg_advîti£d
 &phy->
aut⁄eg_mask
;

736 i‡(
phy
->
aut⁄eg_advîti£d
 == 0)

737 
phy
->
aut⁄eg_advîti£d
 =Öhy->
aut⁄eg_mask
;

739 
	`hw_dbg
("Reconfiguringáuto-negádvertisementÖarams\n");

740 
ªt_vÆ
 = 
	`igb_phy_£tup_aut⁄eg
(
hw
);

741 i‡(
ªt_vÆ
) {

742 
	`hw_dbg
("Error Setting up Auto-Negotiation\n");

743 
out
;

745 
	`hw_dbg
("Restarting Auto-Neg\n");

751 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_CONTROL
, &
phy_˘æ
);

752 i‡(
ªt_vÆ
)

753 
out
;

755 
phy_˘æ
 |(
MII_CR_AUTO_NEG_EN
 | 
MII_CR_RESTART_AUTO_NEG
);

756 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_CONTROL
, 
phy_˘æ
);

757 i‡(
ªt_vÆ
)

758 
out
;

764 i‡(
phy
->
aut⁄eg_waô_to_com∂ëe
) {

765 
ªt_vÆ
 = 
	`igb_waô_aut⁄eg
(
hw
);

766 i‡(
ªt_vÆ
) {

767 
	`hw_dbg
("Error while waiting for "

769 
out
;

773 
hw
->
mac
.
gë_lök_°©us
 = 
åue
;

775 
out
:

776  
ªt_vÆ
;

777 
	}
}

788 
s32
 
	$igb_phy_£tup_aut⁄eg
(
e1000_hw
 *
hw
)

790 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

791 
s32
 
ªt_vÆ
;

792 
u16
 
mii_aut⁄eg_adv_ªg
;

793 
u16
 
mii_1000t_˘æ_ªg
 = 0;

795 
phy
->
aut⁄eg_advîti£d
 &phy->
aut⁄eg_mask
;

798 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_AUTONEG_ADV
, &
mii_aut⁄eg_adv_ªg
);

799 i‡(
ªt_vÆ
)

800 
out
;

802 i‡(
phy
->
aut⁄eg_mask
 & 
ADVERTISE_1000_FULL
) {

804 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_1000T_CTRL
,

805 &
mii_1000t_˘æ_ªg
);

806 i‡(
ªt_vÆ
)

807 
out
;

823 
mii_aut⁄eg_adv_ªg
 &~(
NWAY_AR_100TX_FD_CAPS
 |

824 
NWAY_AR_100TX_HD_CAPS
 |

825 
NWAY_AR_10T_FD_CAPS
 |

826 
NWAY_AR_10T_HD_CAPS
);

827 
mii_1000t_˘æ_ªg
 &~(
CR_1000T_HD_CAPS
 | 
CR_1000T_FD_CAPS
);

829 
	`hw_dbg
("aut⁄eg_advîti£d %x\n", 
phy
->
aut⁄eg_advîti£d
);

832 i‡(
phy
->
aut⁄eg_advîti£d
 & 
ADVERTISE_10_HALF
) {

833 
	`hw_dbg
("Advertise 10mb Half duplex\n");

834 
mii_aut⁄eg_adv_ªg
 |
NWAY_AR_10T_HD_CAPS
;

838 i‡(
phy
->
aut⁄eg_advîti£d
 & 
ADVERTISE_10_FULL
) {

839 
	`hw_dbg
("Advertise 10mb Full duplex\n");

840 
mii_aut⁄eg_adv_ªg
 |
NWAY_AR_10T_FD_CAPS
;

844 i‡(
phy
->
aut⁄eg_advîti£d
 & 
ADVERTISE_100_HALF
) {

845 
	`hw_dbg
("Advertise 100mb Half duplex\n");

846 
mii_aut⁄eg_adv_ªg
 |
NWAY_AR_100TX_HD_CAPS
;

850 i‡(
phy
->
aut⁄eg_advîti£d
 & 
ADVERTISE_100_FULL
) {

851 
	`hw_dbg
("Advertise 100mb Full duplex\n");

852 
mii_aut⁄eg_adv_ªg
 |
NWAY_AR_100TX_FD_CAPS
;

856 i‡(
phy
->
aut⁄eg_advîti£d
 & 
ADVERTISE_1000_HALF
)

857 
	`hw_dbg
("Advertise 1000mb Half duplexÑequest denied!\n");

860 i‡(
phy
->
aut⁄eg_advîti£d
 & 
ADVERTISE_1000_FULL
) {

861 
	`hw_dbg
("Advertise 1000mb Full duplex\n");

862 
mii_1000t_˘æ_ªg
 |
CR_1000T_FD_CAPS
;

883 
hw
->
fc
.
cuºít_mode
) {

884 
e1000_fc_n⁄e
:

889 
mii_aut⁄eg_adv_ªg
 &~(
NWAY_AR_ASM_DIR
 | 
NWAY_AR_PAUSE
);

891 
e1000_fc_rx_∑u£
:

902 
mii_aut⁄eg_adv_ªg
 |(
NWAY_AR_ASM_DIR
 | 
NWAY_AR_PAUSE
);

904 
e1000_fc_tx_∑u£
:

909 
mii_aut⁄eg_adv_ªg
 |
NWAY_AR_ASM_DIR
;

910 
mii_aut⁄eg_adv_ªg
 &~
NWAY_AR_PAUSE
;

912 
e1000_fc_fuŒ
:

917 
mii_aut⁄eg_adv_ªg
 |(
NWAY_AR_ASM_DIR
 | 
NWAY_AR_PAUSE
);

920 
	`hw_dbg
("Flow controlÖaram set incorrectly\n");

921 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

922 
out
;

925 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_AUTONEG_ADV
, 
mii_aut⁄eg_adv_ªg
);

926 i‡(
ªt_vÆ
)

927 
out
;

929 
	`hw_dbg
("Auto-Neg Advîtisög %x\n", 
mii_aut⁄eg_adv_ªg
);

931 i‡(
phy
->
aut⁄eg_mask
 & 
ADVERTISE_1000_FULL
) {

932 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

933 
PHY_1000T_CTRL
,

934 
mii_1000t_˘æ_ªg
);

935 i‡(
ªt_vÆ
)

936 
out
;

939 
out
:

940  
ªt_vÆ
;

941 
	}
}

952 
s32
 
	$igb_£tup_c›≥r_lök
(
e1000_hw
 *
hw
)

954 
s32
 
ªt_vÆ
;

955 
boﬁ
 
lök
;

958 i‡(
hw
->
mac
.
aut⁄eg
) {

963 
ªt_vÆ
 = 
	`igb_c›≥r_lök_aut⁄eg
(
hw
);

964 i‡(
ªt_vÆ
)

965 
out
;

971 
	`hw_dbg
("Forcing Speedánd Duplex\n");

972 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`f‹˚_•ìd_du∂ex
(hw);

973 i‡(
ªt_vÆ
) {

974 
	`hw_dbg
("Error Forcing Speedánd Duplex\n");

975 
out
;

983 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
,

984 
COPPER_LINK_UP_LIMIT
,

986 &
lök
);

987 i‡(
ªt_vÆ
)

988 
out
;

990 i‡(
lök
) {

991 
	`hw_dbg
("ValidÜinkÉstablished!!!\n");

992 
	`igb_c⁄fig_cﬁlisi⁄_di°
(
hw
);

993 
ªt_vÆ
 = 
	`igb_c⁄fig_fc_a·î_lök_up
(
hw
);

995 
	`hw_dbg
("UnableÅoÉstablishÜink!!!\n");

998 
out
:

999  
ªt_vÆ
;

1000 
	}
}

1010 
s32
 
	$igb_phy_f‹˚_•ìd_du∂ex_igp
(
e1000_hw
 *
hw
)

1012 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1013 
s32
 
ªt_vÆ
;

1014 
u16
 
phy_d©a
;

1015 
boﬁ
 
lök
;

1017 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_CONTROL
, &
phy_d©a
);

1018 i‡(
ªt_vÆ
)

1019 
out
;

1021 
	`igb_phy_f‹˚_•ìd_du∂ex_£tup
(
hw
, &
phy_d©a
);

1023 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_CONTROL
, 
phy_d©a
);

1024 i‡(
ªt_vÆ
)

1025 
out
;

1031 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CTRL
, &
phy_d©a
);

1032 i‡(
ªt_vÆ
)

1033 
out
;

1035 
phy_d©a
 &~
IGP01E1000_PSCR_AUTO_MDIX
;

1036 
phy_d©a
 &~
IGP01E1000_PSCR_FORCE_MDI_MDIX
;

1038 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CTRL
, 
phy_d©a
);

1039 i‡(
ªt_vÆ
)

1040 
out
;

1042 
	`hw_dbg
("IGP PSCR: %X\n", 
phy_d©a
);

1044 
	`udñay
(1);

1046 i‡(
phy
->
aut⁄eg_waô_to_com∂ëe
) {

1047 
	`hw_dbg
("Waiting for forced speed/duplexÜink on IGPÖhy.\n");

1049 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
,

1050 
PHY_FORCE_LIMIT
,

1052 &
lök
);

1053 i‡(
ªt_vÆ
)

1054 
out
;

1056 i‡(!
lök
)

1057 
	`hw_dbg
("LinkÅakingÜongerÅhanÉxpected.\n");

1060 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
,

1061 
PHY_FORCE_LIMIT
,

1063 &
lök
);

1064 i‡(
ªt_vÆ
)

1065 
out
;

1068 
out
:

1069  
ªt_vÆ
;

1070 
	}
}

1082 
s32
 
	$igb_phy_f‹˚_•ìd_du∂ex_m88
(
e1000_hw
 *
hw
)

1084 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1085 
s32
 
ªt_vÆ
;

1086 
u16
 
phy_d©a
;

1087 
boﬁ
 
lök
;

1093 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, &
phy_d©a
);

1094 i‡(
ªt_vÆ
)

1095 
out
;

1097 
phy_d©a
 &~
M88E1000_PSCR_AUTO_X_MODE
;

1098 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, 
phy_d©a
);

1099 i‡(
ªt_vÆ
)

1100 
out
;

1102 
	`hw_dbg
("M88E1000 PSCR: %X\n", 
phy_d©a
);

1104 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_CONTROL
, &
phy_d©a
);

1105 i‡(
ªt_vÆ
)

1106 
out
;

1108 
	`igb_phy_f‹˚_•ìd_du∂ex_£tup
(
hw
, &
phy_d©a
);

1110 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_CONTROL
, 
phy_d©a
);

1111 i‡(
ªt_vÆ
)

1112 
out
;

1115 
ªt_vÆ
 = 
	`igb_phy_sw_ª£t
(
hw
);

1116 i‡(
ªt_vÆ
)

1117 
out
;

1119 i‡(
phy
->
aut⁄eg_waô_to_com∂ëe
) {

1120 
	`hw_dbg
("Waiting for forced speed/duplexÜink on M88Öhy.\n");

1122 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
, 
PHY_FORCE_LIMIT
, 100000, &
lök
);

1123 i‡(
ªt_vÆ
)

1124 
out
;

1126 i‡(!
lök
) {

1131 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

1132 
M88E1000_PHY_PAGE_SELECT
,

1134 i‡(
ªt_vÆ
)

1135 
out
;

1136 
ªt_vÆ
 = 
	`igb_phy_ª£t_d•
(
hw
);

1137 i‡(
ªt_vÆ
)

1138 
out
;

1142 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
, 
PHY_FORCE_LIMIT
,

1143 100000, &
lök
);

1144 i‡(
ªt_vÆ
)

1145 
out
;

1148 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_EXT_PHY_SPEC_CTRL
, &
phy_d©a
);

1149 i‡(
ªt_vÆ
)

1150 
out
;

1157 
phy_d©a
 |
M88E1000_EPSCR_TX_CLK_25
;

1158 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
M88E1000_EXT_PHY_SPEC_CTRL
, 
phy_d©a
);

1159 i‡(
ªt_vÆ
)

1160 
out
;

1166 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, &
phy_d©a
);

1167 i‡(
ªt_vÆ
)

1168 
out
;

1170 
phy_d©a
 |
M88E1000_PSCR_ASSERT_CRS_ON_TX
;

1171 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, 
phy_d©a
);

1173 
out
:

1174  
ªt_vÆ
;

1175 
	}
}

1189 
	$igb_phy_f‹˚_•ìd_du∂ex_£tup
(
e1000_hw
 *
hw
,

1190 
u16
 *
phy_˘æ
)

1192 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

1193 
u32
 
˘æ
;

1196 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_n⁄e
;

1199 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

1200 
˘æ
 |(
E1000_CTRL_FRCSPD
 | 
E1000_CTRL_FRCDPX
);

1201 
˘æ
 &~
E1000_CTRL_SPD_SEL
;

1204 
˘æ
 &~
E1000_CTRL_ASDE
;

1207 *
phy_˘æ
 &~
MII_CR_AUTO_NEG_EN
;

1210 i‡(
mac
->
f‹˚d_•ìd_du∂ex
 & 
E1000_ALL_HALF_DUPLEX
) {

1211 
˘æ
 &~
E1000_CTRL_FD
;

1212 *
phy_˘æ
 &~
MII_CR_FULL_DUPLEX
;

1213 
	`hw_dbg
("Half Duplex\n");

1215 
˘æ
 |
E1000_CTRL_FD
;

1216 *
phy_˘æ
 |
MII_CR_FULL_DUPLEX
;

1217 
	`hw_dbg
("Full Duplex\n");

1221 i‡(
mac
->
f‹˚d_•ìd_du∂ex
 & 
E1000_ALL_100_SPEED
) {

1222 
˘æ
 |
E1000_CTRL_SPD_100
;

1223 *
phy_˘æ
 |
MII_CR_SPEED_100
;

1224 *
phy_˘æ
 &~(
MII_CR_SPEED_1000
 | 
MII_CR_SPEED_10
);

1225 
	`hw_dbg
("Forcing 100mb\n");

1227 
˘æ
 &~(
E1000_CTRL_SPD_1000
 | 
E1000_CTRL_SPD_100
);

1228 *
phy_˘æ
 |
MII_CR_SPEED_10
;

1229 *
phy_˘æ
 &~(
MII_CR_SPEED_1000
 | 
MII_CR_SPEED_100
);

1230 
	`hw_dbg
("Forcing 10mb\n");

1233 
	`igb_c⁄fig_cﬁlisi⁄_di°
(
hw
);

1235 
	`wr32
(
E1000_CTRL
, 
˘æ
);

1236 
	}
}

1252 
s32
 
	$igb_£t_d3_Õlu_°©e
(
e1000_hw
 *
hw
, 
boﬁ
 
a˘ive
)

1254 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1255 
s32
 
ªt_vÆ
 = 0;

1256 
u16
 
d©a
;

1258 i‡(!(
hw
->
phy
.
›s
.
ªad_ªg
))

1259 
out
;

1261 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP02E1000_PHY_POWER_MGMT
, &
d©a
);

1262 i‡(
ªt_vÆ
)

1263 
out
;

1265 i‡(!
a˘ive
) {

1266 
d©a
 &~
IGP02E1000_PM_D3_LPLU
;

1267 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP02E1000_PHY_POWER_MGMT
,

1268 
d©a
);

1269 i‡(
ªt_vÆ
)

1270 
out
;

1277 i‡(
phy
->
sm¨t_•ìd
 =
e1000_sm¨t_•ìd_⁄
) {

1278 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
,

1279 
IGP01E1000_PHY_PORT_CONFIG
,

1280 &
d©a
);

1281 i‡(
ªt_vÆ
)

1282 
out
;

1284 
d©a
 |
IGP01E1000_PSCFR_SMART_SPEED
;

1285 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

1286 
IGP01E1000_PHY_PORT_CONFIG
,

1287 
d©a
);

1288 i‡(
ªt_vÆ
)

1289 
out
;

1290 } i‡(
phy
->
sm¨t_•ìd
 =
e1000_sm¨t_•ìd_off
) {

1291 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
,

1292 
IGP01E1000_PHY_PORT_CONFIG
,

1293 &
d©a
);

1294 i‡(
ªt_vÆ
)

1295 
out
;

1297 
d©a
 &~
IGP01E1000_PSCFR_SMART_SPEED
;

1298 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
,

1299 
IGP01E1000_PHY_PORT_CONFIG
,

1300 
d©a
);

1301 i‡(
ªt_vÆ
)

1302 
out
;

1304 } i‡((
phy
->
aut⁄eg_advîti£d
 =
E1000_ALL_SPEED_DUPLEX
) ||

1305 (
phy
->
aut⁄eg_advîti£d
 =
E1000_ALL_NOT_GIG
) ||

1306 (
phy
->
aut⁄eg_advîti£d
 =
E1000_ALL_10_SPEED
)) {

1307 
d©a
 |
IGP02E1000_PM_D3_LPLU
;

1308 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP02E1000_PHY_POWER_MGMT
,

1309 
d©a
);

1310 i‡(
ªt_vÆ
)

1311 
out
;

1314 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CONFIG
,

1315 &
d©a
);

1316 i‡(
ªt_vÆ
)

1317 
out
;

1319 
d©a
 &~
IGP01E1000_PSCFR_SMART_SPEED
;

1320 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
IGP01E1000_PHY_PORT_CONFIG
,

1321 
d©a
);

1324 
out
:

1325  
ªt_vÆ
;

1326 
	}
}

1336 
s32
 
	$igb_check_downshi·
(
e1000_hw
 *
hw
)

1338 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1339 
s32
 
ªt_vÆ
;

1340 
u16
 
phy_d©a
, 
off£t
, 
mask
;

1342 
phy
->
ty≥
) {

1343 
e1000_phy_m88
:

1344 
e1000_phy_gg82563
:

1345 
off£t
 = 
M88E1000_PHY_SPEC_STATUS
;

1346 
mask
 = 
M88E1000_PSSR_DOWNSHIFT
;

1348 
e1000_phy_igp_2
:

1349 
e1000_phy_igp
:

1350 
e1000_phy_igp_3
:

1351 
off£t
 = 
IGP01E1000_PHY_LINK_HEALTH
;

1352 
mask
 = 
IGP01E1000_PLHR_SS_DOWNGRADE
;

1356 
phy
->
•ìd_downgøded
 = 
Ál£
;

1357 
ªt_vÆ
 = 0;

1358 
out
;

1361 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
off£t
, &
phy_d©a
);

1363 i‡(!
ªt_vÆ
)

1364 
phy
->
•ìd_downgøded
 = (
phy_d©a
 & 
mask
Ë? 
åue
 : 
Ál£
;

1366 
out
:

1367  
ªt_vÆ
;

1368 
	}
}

1378 
s32
 
	$igb_check_pﬁ¨ôy_m88
(
e1000_hw
 *
hw
)

1380 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1381 
s32
 
ªt_vÆ
;

1382 
u16
 
d©a
;

1384 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_STATUS
, &
d©a
);

1386 i‡(!
ªt_vÆ
)

1387 
phy
->
ˇbÀ_pﬁ¨ôy
 = (
d©a
 & 
M88E1000_PSSR_REV_POLARITY
)

1388 ? 
e1000_ªv_pﬁ¨ôy_ªvî£d


1389 : 
e1000_ªv_pﬁ¨ôy_n‹mÆ
;

1391  
ªt_vÆ
;

1392 
	}
}

1403 
s32
 
	$igb_check_pﬁ¨ôy_igp
(
e1000_hw
 *
hw
)

1405 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1406 
s32
 
ªt_vÆ
;

1407 
u16
 
d©a
, 
off£t
, 
mask
;

1413 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP01E1000_PHY_PORT_STATUS
, &
d©a
);

1414 i‡(
ªt_vÆ
)

1415 
out
;

1417 i‡((
d©a
 & 
IGP01E1000_PSSR_SPEED_MASK
) ==

1418 
IGP01E1000_PSSR_SPEED_1000MBPS
) {

1419 
off£t
 = 
IGP01E1000_PHY_PCS_INIT_REG
;

1420 
mask
 = 
IGP01E1000_PHY_POLARITY_MASK
;

1426 
off£t
 = 
IGP01E1000_PHY_PORT_STATUS
;

1427 
mask
 = 
IGP01E1000_PSSR_POLARITY_REVERSED
;

1430 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
off£t
, &
d©a
);

1432 i‡(!
ªt_vÆ
)

1433 
phy
->
ˇbÀ_pﬁ¨ôy
 = (
d©a
 & 
mask
)

1434 ? 
e1000_ªv_pﬁ¨ôy_ªvî£d


1435 : 
e1000_ªv_pﬁ¨ôy_n‹mÆ
;

1437 
out
:

1438  
ªt_vÆ
;

1439 
	}
}

1448 
s32
 
	$igb_waô_aut⁄eg
(
e1000_hw
 *
hw
)

1450 
s32
 
ªt_vÆ
 = 0;

1451 
u16
 
i
, 
phy_°©us
;

1454 
i
 = 
PHY_AUTO_NEG_LIMIT
; i > 0; i--) {

1455 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_STATUS
, &
phy_°©us
);

1456 i‡(
ªt_vÆ
)

1458 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_STATUS
, &
phy_°©us
);

1459 i‡(
ªt_vÆ
)

1461 i‡(
phy_°©us
 & 
MII_SR_AUTONEG_COMPLETE
)

1463 
	`m¶ìp
(100);

1470  
ªt_vÆ
;

1471 
	}
}

1482 
s32
 
	$igb_phy_has_lök
(
e1000_hw
 *
hw
, 
u32
 
ôî©i⁄s
,

1483 
u32
 
u£c_öãrvÆ
, 
boﬁ
 *
suc˚ss
)

1485 
s32
 
ªt_vÆ
 = 0;

1486 
u16
 
i
, 
phy_°©us
;

1488 
i
 = 0; i < 
ôî©i⁄s
; i++) {

1494 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_STATUS
, &
phy_°©us
);

1495 i‡(
ªt_vÆ
) {

1501 
	`udñay
(
u£c_öãrvÆ
);

1503 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_STATUS
, &
phy_°©us
);

1504 i‡(
ªt_vÆ
)

1506 i‡(
phy_°©us
 & 
MII_SR_LINK_STATUS
)

1508 i‡(
u£c_öãrvÆ
 >= 1000)

1509 
	`mdñay
(
u£c_öãrvÆ
/1000);

1511 
	`udñay
(
u£c_öãrvÆ
);

1514 *
suc˚ss
 = (
i
 < 
ôî©i⁄s
Ë? 
åue
 : 
Ál£
;

1516  
ªt_vÆ
;

1517 
	}
}

1534 
s32
 
	$igb_gë_ˇbÀ_Àngth_m88
(
e1000_hw
 *
hw
)

1536 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1537 
s32
 
ªt_vÆ
;

1538 
u16
 
phy_d©a
, 
ödex
;

1540 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_STATUS
, &
phy_d©a
);

1541 i‡(
ªt_vÆ
)

1542 
out
;

1544 
ödex
 = (
phy_d©a
 & 
M88E1000_PSSR_CABLE_LENGTH
) >>

1545 
M88E1000_PSSR_CABLE_LENGTH_SHIFT
;

1546 i‡(
ödex
 >
M88E1000_CABLE_LENGTH_TABLE_SIZE
 - 1) {

1547 
ªt_vÆ
 = -
E1000_ERR_PHY
;

1548 
out
;

1551 
phy
->
mö_ˇbÀ_Àngth
 = 
e1000_m88_ˇbÀ_Àngth_èbÀ
[
ödex
];

1552 
phy
->
max_ˇbÀ_Àngth
 = 
e1000_m88_ˇbÀ_Àngth_èbÀ
[
ödex
 + 1];

1554 
phy
->
ˇbÀ_Àngth
 = (phy->
mö_ˇbÀ_Àngth
 +Öhy->
max_ˇbÀ_Àngth
) / 2;

1556 
out
:

1557  
ªt_vÆ
;

1558 
	}
}

1571 
s32
 
	$igb_gë_ˇbÀ_Àngth_igp_2
(
e1000_hw
 *
hw
)

1573 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1574 
s32
 
ªt_vÆ
 = 0;

1575 
u16
 
phy_d©a
, 
i
, 
agc_vÆue
 = 0;

1576 
u16
 
cur_agc_ödex
, 
max_agc_ödex
 = 0;

1577 
u16
 
mö_agc_ödex
 = 
IGP02E1000_CABLE_LENGTH_TABLE_SIZE
 - 1;

1578 
u16
 
agc_ªg_¨øy
[
IGP02E1000_PHY_CHANNEL_NUM
] =

1579 {
IGP02E1000_PHY_AGC_A
,

1580 
IGP02E1000_PHY_AGC_B
,

1581 
IGP02E1000_PHY_AGC_C
,

1582 
IGP02E1000_PHY_AGC_D
};

1585 
i
 = 0; i < 
IGP02E1000_PHY_CHANNEL_NUM
; i++) {

1586 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
agc_ªg_¨øy
[
i
], &
phy_d©a
);

1587 i‡(
ªt_vÆ
)

1588 
out
;

1596 
cur_agc_ödex
 = (
phy_d©a
 >> 
IGP02E1000_AGC_LENGTH_SHIFT
) &

1597 
IGP02E1000_AGC_LENGTH_MASK
;

1600 i‡((
cur_agc_ödex
 >
IGP02E1000_CABLE_LENGTH_TABLE_SIZE
) ||

1601 (
cur_agc_ödex
 == 0)) {

1602 
ªt_vÆ
 = -
E1000_ERR_PHY
;

1603 
out
;

1607 i‡(
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
mö_agc_ödex
] >

1608 
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
cur_agc_ödex
])

1609 
mö_agc_ödex
 = 
cur_agc_ödex
;

1610 i‡(
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
max_agc_ödex
] <

1611 
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
cur_agc_ödex
])

1612 
max_agc_ödex
 = 
cur_agc_ödex
;

1614 
agc_vÆue
 +
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
cur_agc_ödex
];

1617 
agc_vÆue
 -(
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
mö_agc_ödex
] +

1618 
e1000_igp_2_ˇbÀ_Àngth_èbÀ
[
max_agc_ödex
]);

1619 
agc_vÆue
 /(
IGP02E1000_PHY_CHANNEL_NUM
 - 2);

1622 
phy
->
mö_ˇbÀ_Àngth
 = ((
agc_vÆue
 - 
IGP02E1000_AGC_RANGE
) > 0) ?

1623 (
agc_vÆue
 - 
IGP02E1000_AGC_RANGE
) : 0;

1624 
phy
->
max_ˇbÀ_Àngth
 = 
agc_vÆue
 + 
IGP02E1000_AGC_RANGE
;

1626 
phy
->
ˇbÀ_Àngth
 = (phy->
mö_ˇbÀ_Àngth
 +Öhy->
max_ˇbÀ_Àngth
) / 2;

1628 
out
:

1629  
ªt_vÆ
;

1630 
	}
}

1642 
s32
 
	$igb_gë_phy_öfo_m88
(
e1000_hw
 *
hw
)

1644 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1645 
s32
 
ªt_vÆ
;

1646 
u16
 
phy_d©a
;

1647 
boﬁ
 
lök
;

1649 i‡(
phy
->
medü_ty≥
 !
e1000_medü_ty≥_c›≥r
) {

1650 
	`hw_dbg
("Phy info is only valid for copper media\n");

1651 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

1652 
out
;

1655 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
, 1, 0, &
lök
);

1656 i‡(
ªt_vÆ
)

1657 
out
;

1659 i‡(!
lök
) {

1660 
	`hw_dbg
("Phy info is only valid ifÜink is up\n");

1661 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

1662 
out
;

1665 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, &
phy_d©a
);

1666 i‡(
ªt_vÆ
)

1667 
out
;

1669 
phy
->
pﬁ¨ôy_c‹ª˘i⁄
 = (
phy_d©a
 & 
M88E1000_PSCR_POLARITY_REVERSAL
)

1670 ? 
åue
 : 
Ál£
;

1672 
ªt_vÆ
 = 
	`igb_check_pﬁ¨ôy_m88
(
hw
);

1673 i‡(
ªt_vÆ
)

1674 
out
;

1676 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
M88E1000_PHY_SPEC_STATUS
, &
phy_d©a
);

1677 i‡(
ªt_vÆ
)

1678 
out
;

1680 
phy
->
is_mdix
 = (
phy_d©a
 & 
M88E1000_PSSR_MDIX
Ë? 
åue
 : 
Ál£
;

1682 i‡((
phy_d©a
 & 
M88E1000_PSSR_SPEED
Ë=
M88E1000_PSSR_1000MBS
) {

1683 
ªt_vÆ
 = 
phy
->
›s
.
	`gë_ˇbÀ_Àngth
(
hw
);

1684 i‡(
ªt_vÆ
)

1685 
out
;

1687 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_1000T_STATUS
, &
phy_d©a
);

1688 i‡(
ªt_vÆ
)

1689 
out
;

1691 
phy
->
loˇl_rx
 = (
phy_d©a
 & 
SR_1000T_LOCAL_RX_STATUS
)

1692 ? 
e1000_1000t_rx_°©us_ok


1693 : 
e1000_1000t_rx_°©us_nŸ_ok
;

1695 
phy
->
ªmŸe_rx
 = (
phy_d©a
 & 
SR_1000T_REMOTE_RX_STATUS
)

1696 ? 
e1000_1000t_rx_°©us_ok


1697 : 
e1000_1000t_rx_°©us_nŸ_ok
;

1700 
phy
->
ˇbÀ_Àngth
 = 
E1000_CABLE_LENGTH_UNDEFINED
;

1701 
phy
->
loˇl_rx
 = 
e1000_1000t_rx_°©us_undeföed
;

1702 
phy
->
ªmŸe_rx
 = 
e1000_1000t_rx_°©us_undeföed
;

1705 
out
:

1706  
ªt_vÆ
;

1707 
	}
}

1718 
s32
 
	$igb_gë_phy_öfo_igp
(
e1000_hw
 *
hw
)

1720 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1721 
s32
 
ªt_vÆ
;

1722 
u16
 
d©a
;

1723 
boﬁ
 
lök
;

1725 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
, 1, 0, &
lök
);

1726 i‡(
ªt_vÆ
)

1727 
out
;

1729 i‡(!
lök
) {

1730 
	`hw_dbg
("Phy info is only valid ifÜink is up\n");

1731 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

1732 
out
;

1735 
phy
->
pﬁ¨ôy_c‹ª˘i⁄
 = 
åue
;

1737 
ªt_vÆ
 = 
	`igb_check_pﬁ¨ôy_igp
(
hw
);

1738 i‡(
ªt_vÆ
)

1739 
out
;

1741 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
IGP01E1000_PHY_PORT_STATUS
, &
d©a
);

1742 i‡(
ªt_vÆ
)

1743 
out
;

1745 
phy
->
is_mdix
 = (
d©a
 & 
IGP01E1000_PSSR_MDIX
Ë? 
åue
 : 
Ál£
;

1747 i‡((
d©a
 & 
IGP01E1000_PSSR_SPEED_MASK
) ==

1748 
IGP01E1000_PSSR_SPEED_1000MBPS
) {

1749 
ªt_vÆ
 = 
phy
->
›s
.
	`gë_ˇbÀ_Àngth
(
hw
);

1750 i‡(
ªt_vÆ
)

1751 
out
;

1753 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_1000T_STATUS
, &
d©a
);

1754 i‡(
ªt_vÆ
)

1755 
out
;

1757 
phy
->
loˇl_rx
 = (
d©a
 & 
SR_1000T_LOCAL_RX_STATUS
)

1758 ? 
e1000_1000t_rx_°©us_ok


1759 : 
e1000_1000t_rx_°©us_nŸ_ok
;

1761 
phy
->
ªmŸe_rx
 = (
d©a
 & 
SR_1000T_REMOTE_RX_STATUS
)

1762 ? 
e1000_1000t_rx_°©us_ok


1763 : 
e1000_1000t_rx_°©us_nŸ_ok
;

1765 
phy
->
ˇbÀ_Àngth
 = 
E1000_CABLE_LENGTH_UNDEFINED
;

1766 
phy
->
loˇl_rx
 = 
e1000_1000t_rx_°©us_undeföed
;

1767 
phy
->
ªmŸe_rx
 = 
e1000_1000t_rx_°©us_undeföed
;

1770 
out
:

1771  
ªt_vÆ
;

1772 
	}
}

1781 
s32
 
	$igb_phy_sw_ª£t
(
e1000_hw
 *
hw
)

1783 
s32
 
ªt_vÆ
 = 0;

1784 
u16
 
phy_˘æ
;

1786 i‡(!(
hw
->
phy
.
›s
.
ªad_ªg
))

1787 
out
;

1789 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_CONTROL
, &
phy_˘æ
);

1790 i‡(
ªt_vÆ
)

1791 
out
;

1793 
phy_˘æ
 |
MII_CR_RESET
;

1794 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
PHY_CONTROL
, 
phy_˘æ
);

1795 i‡(
ªt_vÆ
)

1796 
out
;

1798 
	`udñay
(1);

1800 
out
:

1801  
ªt_vÆ
;

1802 
	}
}

1813 
s32
 
	$igb_phy_hw_ª£t
(
e1000_hw
 *
hw
)

1815 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1816 
s32
 
ªt_vÆ
;

1817 
u32
 
˘æ
;

1819 
ªt_vÆ
 = 
	`igb_check_ª£t_block
(
hw
);

1820 i‡(
ªt_vÆ
) {

1821 
ªt_vÆ
 = 0;

1822 
out
;

1825 
ªt_vÆ
 = 
phy
->
›s
.
	`acquúe
(
hw
);

1826 i‡(
ªt_vÆ
)

1827 
out
;

1829 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

1830 
	`wr32
(
E1000_CTRL
, 
˘æ
 | 
E1000_CTRL_PHY_RST
);

1831 
	`wrÊ
();

1833 
	`udñay
(
phy
->
ª£t_dñay_us
);

1835 
	`wr32
(
E1000_CTRL
, 
˘æ
);

1836 
	`wrÊ
();

1838 
	`udñay
(150);

1840 
phy
->
›s
.
	`ªÀa£
(
hw
);

1842 
ªt_vÆ
 = 
phy
->
›s
.
	`gë_cfg_d⁄e
(
hw
);

1844 
out
:

1845  
ªt_vÆ
;

1846 
	}
}

1854 
s32
 
	$igb_phy_öô_s¸ùt_igp3
(
e1000_hw
 *
hw
)

1856 
	`hw_dbg
("Running IGP 3 PHY init script\n");

1860 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2F5B, 0x9018);

1862 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2F52, 0x0000);

1864 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2FB1, 0x8B24);

1866 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2FB2, 0xF8F0);

1868 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2010, 0x10B0);

1870 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2011, 0x0000);

1872 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x20DD, 0x249A);

1874 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x20DE, 0x00D3);

1876 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x28B4, 0x04CE);

1878 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x2F70, 0x29E4);

1880 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x0000, 0x0140);

1882 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F30, 0x1606);

1884 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F31, 0xB814);

1886 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F35, 0x002A);

1888 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F3E, 0x0067);

1890 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F54, 0x0065);

1892 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F55, 0x002A);

1894 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F56, 0x002A);

1896 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F72, 0x3FB0);

1898 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F76, 0xC0FF);

1900 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F77, 0x1DEC);

1902 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F78, 0xF9EF);

1904 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1F79, 0x0210);

1906 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1895, 0x0003);

1908 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1796, 0x0008);

1910 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1798, 0xD008);

1915 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x1898, 0xD918);

1917 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x187A, 0x0800);

1922 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x0019, 0x008D);

1924 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x001B, 0x2080);

1926 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x0014, 0x0045);

1928 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 0x0000, 0x1340);

1931 
	}
}

1940 
	$igb_powî_up_phy_c›≥r
(
e1000_hw
 *
hw
)

1942 
u16
 
mii_ªg
 = 0;

1945 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_CONTROL
, &
mii_ªg
);

1946 
mii_ªg
 &~
MII_CR_POWER_DOWN
;

1947 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
PHY_CONTROL
, 
mii_ªg
);

1948 
	}
}

1957 
	$igb_powî_down_phy_c›≥r
(
e1000_hw
 *
hw
)

1959 
u16
 
mii_ªg
 = 0;

1962 
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
PHY_CONTROL
, &
mii_ªg
);

1963 
mii_ªg
 |
MII_CR_POWER_DOWN
;

1964 
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
PHY_CONTROL
, 
mii_ªg
);

1965 
	`m¶ìp
(1);

1966 
	}
}

1976 
s32
 
	$igb_check_pﬁ¨ôy_82580
(
e1000_hw
 *
hw
)

1978 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

1979 
s32
 
ªt_vÆ
;

1980 
u16
 
d©a
;

1983 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
I82580_PHY_STATUS_2
, &
d©a
);

1985 i‡(!
ªt_vÆ
)

1986 
phy
->
ˇbÀ_pﬁ¨ôy
 = (
d©a
 & 
I82580_PHY_STATUS2_REV_POLARITY
)

1987 ? 
e1000_ªv_pﬁ¨ôy_ªvî£d


1988 : 
e1000_ªv_pﬁ¨ôy_n‹mÆ
;

1990  
ªt_vÆ
;

1991 
	}
}

2001 
s32
 
	$igb_phy_f‹˚_•ìd_du∂ex_82580
(
e1000_hw
 *
hw
)

2003 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

2004 
s32
 
ªt_vÆ
;

2005 
u16
 
phy_d©a
;

2006 
boﬁ
 
lök
;

2009 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_CONTROL
, &
phy_d©a
);

2010 i‡(
ªt_vÆ
)

2011 
out
;

2013 
	`igb_phy_f‹˚_•ìd_du∂ex_£tup
(
hw
, &
phy_d©a
);

2015 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
PHY_CONTROL
, 
phy_d©a
);

2016 i‡(
ªt_vÆ
)

2017 
out
;

2023 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
I82580_PHY_CTRL_2
, &
phy_d©a
);

2024 i‡(
ªt_vÆ
)

2025 
out
;

2027 
phy_d©a
 &~
I82580_PHY_CTRL2_AUTO_MDIX
;

2028 
phy_d©a
 &~
I82580_PHY_CTRL2_FORCE_MDI_MDIX
;

2030 
ªt_vÆ
 = 
phy
->
›s
.
	`wrôe_ªg
(
hw
, 
I82580_PHY_CTRL_2
, 
phy_d©a
);

2031 i‡(
ªt_vÆ
)

2032 
out
;

2034 
	`hw_dbg
("I82580_PHY_CTRL_2: %X\n", 
phy_d©a
);

2036 
	`udñay
(1);

2038 i‡(
phy
->
aut⁄eg_waô_to_com∂ëe
) {

2039 
	`hw_dbg
("Waiting for forced speed/duplexÜink on 82580Öhy\n");

2041 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
,

2042 
PHY_FORCE_LIMIT
,

2044 &
lök
);

2045 i‡(
ªt_vÆ
)

2046 
out
;

2048 i‡(!
lök
)

2049 
	`hw_dbg
("LinkÅakingÜongerÅhanÉxpected.\n");

2052 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
,

2053 
PHY_FORCE_LIMIT
,

2055 &
lök
);

2056 i‡(
ªt_vÆ
)

2057 
out
;

2060 
out
:

2061  
ªt_vÆ
;

2062 
	}
}

2073 
s32
 
	$igb_gë_phy_öfo_82580
(
e1000_hw
 *
hw
)

2075 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

2076 
s32
 
ªt_vÆ
;

2077 
u16
 
d©a
;

2078 
boﬁ
 
lök
;

2081 
ªt_vÆ
 = 
	`igb_phy_has_lök
(
hw
, 1, 0, &
lök
);

2082 i‡(
ªt_vÆ
)

2083 
out
;

2085 i‡(!
lök
) {

2086 
	`hw_dbg
("Phy info is only valid ifÜink is up\n");

2087 
ªt_vÆ
 = -
E1000_ERR_CONFIG
;

2088 
out
;

2091 
phy
->
pﬁ¨ôy_c‹ª˘i⁄
 = 
åue
;

2093 
ªt_vÆ
 = 
	`igb_check_pﬁ¨ôy_82580
(
hw
);

2094 i‡(
ªt_vÆ
)

2095 
out
;

2097 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
I82580_PHY_STATUS_2
, &
d©a
);

2098 i‡(
ªt_vÆ
)

2099 
out
;

2101 
phy
->
is_mdix
 = (
d©a
 & 
I82580_PHY_STATUS2_MDIX
Ë? 
åue
 : 
Ál£
;

2103 i‡((
d©a
 & 
I82580_PHY_STATUS2_SPEED_MASK
) ==

2104 
I82580_PHY_STATUS2_SPEED_1000MBPS
) {

2105 
ªt_vÆ
 = 
hw
->
phy
.
›s
.
	`gë_ˇbÀ_Àngth
(hw);

2106 i‡(
ªt_vÆ
)

2107 
out
;

2109 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
PHY_1000T_STATUS
, &
d©a
);

2110 i‡(
ªt_vÆ
)

2111 
out
;

2113 
phy
->
loˇl_rx
 = (
d©a
 & 
SR_1000T_LOCAL_RX_STATUS
)

2114 ? 
e1000_1000t_rx_°©us_ok


2115 : 
e1000_1000t_rx_°©us_nŸ_ok
;

2117 
phy
->
ªmŸe_rx
 = (
d©a
 & 
SR_1000T_REMOTE_RX_STATUS
)

2118 ? 
e1000_1000t_rx_°©us_ok


2119 : 
e1000_1000t_rx_°©us_nŸ_ok
;

2121 
phy
->
ˇbÀ_Àngth
 = 
E1000_CABLE_LENGTH_UNDEFINED
;

2122 
phy
->
loˇl_rx
 = 
e1000_1000t_rx_°©us_undeföed
;

2123 
phy
->
ªmŸe_rx
 = 
e1000_1000t_rx_°©us_undeföed
;

2126 
out
:

2127  
ªt_vÆ
;

2128 
	}
}

2137 
s32
 
	$igb_gë_ˇbÀ_Àngth_82580
(
e1000_hw
 *
hw
)

2139 
e1000_phy_öfo
 *
phy
 = &
hw
->phy;

2140 
s32
 
ªt_vÆ
;

2141 
u16
 
phy_d©a
, 
Àngth
;

2144 
ªt_vÆ
 = 
phy
->
›s
.
	`ªad_ªg
(
hw
, 
I82580_PHY_DIAG_STATUS
, &
phy_d©a
);

2145 i‡(
ªt_vÆ
)

2146 
out
;

2148 
Àngth
 = (
phy_d©a
 & 
I82580_DSTATUS_CABLE_LENGTH
) >>

2149 
I82580_DSTATUS_CABLE_LENGTH_SHIFT
;

2151 i‡(
Àngth
 =
E1000_CABLE_LENGTH_UNDEFINED
)

2152 
ªt_vÆ
 = -
E1000_ERR_PHY
;

2154 
phy
->
ˇbÀ_Àngth
 = 
Àngth
;

2156 
out
:

2157  
ªt_vÆ
;

2158 
	}
}

	@igb/e1000_phy.h

28 #i‚de‡
_E1000_PHY_H_


29 
	#_E1000_PHY_H_


	)

31 
	ee1000_ms_ty≥
 {

32 
	me1000_ms_hw_deÁu…
 = 0,

33 
	me1000_ms_f‹˚_ma°î
,

34 
	me1000_ms_f‹˚_¶ave
,

35 
	me1000_ms_auto


38 
	ee1000_sm¨t_•ìd
 {

39 
	me1000_sm¨t_•ìd_deÁu…
 = 0,

40 
	me1000_sm¨t_•ìd_⁄
,

41 
	me1000_sm¨t_•ìd_off


44 
s32
 
igb_check_downshi·
(
e1000_hw
 *
hw
);

45 
s32
 
igb_check_ª£t_block
(
e1000_hw
 *
hw
);

46 
s32
 
igb_c›≥r_lök_£tup_igp
(
e1000_hw
 *
hw
);

47 
s32
 
igb_c›≥r_lök_£tup_m88
(
e1000_hw
 *
hw
);

48 
s32
 
igb_phy_f‹˚_•ìd_du∂ex_igp
(
e1000_hw
 *
hw
);

49 
s32
 
igb_phy_f‹˚_•ìd_du∂ex_m88
(
e1000_hw
 *
hw
);

50 
s32
 
igb_gë_ˇbÀ_Àngth_m88
(
e1000_hw
 *
hw
);

51 
s32
 
igb_gë_ˇbÀ_Àngth_igp_2
(
e1000_hw
 *
hw
);

52 
s32
 
igb_gë_phy_id
(
e1000_hw
 *
hw
);

53 
s32
 
igb_gë_phy_öfo_igp
(
e1000_hw
 *
hw
);

54 
s32
 
igb_gë_phy_öfo_m88
(
e1000_hw
 *
hw
);

55 
s32
 
igb_phy_sw_ª£t
(
e1000_hw
 *
hw
);

56 
s32
 
igb_phy_hw_ª£t
(
e1000_hw
 *
hw
);

57 
s32
 
igb_ªad_phy_ªg_igp
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
);

58 
s32
 
igb_£t_d3_Õlu_°©e
(
e1000_hw
 *
hw
, 
boﬁ
 
a˘ive
);

59 
s32
 
igb_£tup_c›≥r_lök
(
e1000_hw
 *
hw
);

60 
s32
 
igb_wrôe_phy_ªg_igp
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
);

61 
s32
 
igb_phy_has_lök
(
e1000_hw
 *
hw
, 
u32
 
ôî©i⁄s
,

62 
u32
 
u£c_öãrvÆ
, 
boﬁ
 *
suc˚ss
);

63 
igb_powî_up_phy_c›≥r
(
e1000_hw
 *
hw
);

64 
igb_powî_down_phy_c›≥r
(
e1000_hw
 *
hw
);

65 
s32
 
igb_phy_öô_s¸ùt_igp3
(
e1000_hw
 *
hw
);

66 
s32
 
igb_ªad_phy_ªg_mdic
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
);

67 
s32
 
igb_wrôe_phy_ªg_mdic
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
);

68 
s32
 
igb_ªad_phy_ªg_i2c
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
);

69 
s32
 
igb_wrôe_phy_ªg_i2c
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
);

70 
s32
 
igb_c›≥r_lök_£tup_82580
(
e1000_hw
 *
hw
);

71 
s32
 
igb_gë_phy_öfo_82580
(
e1000_hw
 *
hw
);

72 
s32
 
igb_phy_f‹˚_•ìd_du∂ex_82580
(
e1000_hw
 *
hw
);

73 
s32
 
igb_gë_ˇbÀ_Àngth_82580
(
e1000_hw
 *
hw
);

76 
	#IGP01E1000_PHY_PORT_CONFIG
 0x10

	)

77 
	#IGP01E1000_PHY_PORT_STATUS
 0x11

	)

78 
	#IGP01E1000_PHY_PORT_CTRL
 0x12

	)

79 
	#IGP01E1000_PHY_LINK_HEALTH
 0x13

	)

80 
	#IGP02E1000_PHY_POWER_MGMT
 0x19

	)

81 
	#IGP01E1000_PHY_PAGE_SELECT
 0x1F

	)

82 
	#IGP01E1000_PHY_PCS_INIT_REG
 0x00B4

	)

83 
	#IGP01E1000_PHY_POLARITY_MASK
 0x0078

	)

84 
	#IGP01E1000_PSCR_AUTO_MDIX
 0x1000

	)

85 
	#IGP01E1000_PSCR_FORCE_MDI_MDIX
 0x2000

	)

86 
	#IGP01E1000_PSCFR_SMART_SPEED
 0x0080

	)

88 
	#I82580_ADDR_REG
 16

	)

89 
	#I82580_CFG_REG
 22

	)

90 
	#I82580_CFG_ASSERT_CRS_ON_TX
 (1 << 15)

	)

91 
	#I82580_CFG_ENABLE_DOWNSHIFT
 (3 << 10Ë

	)

92 
	#I82580_CTRL_REG
 23

	)

93 
	#I82580_CTRL_DOWNSHIFT_MASK
 (7 << 10)

	)

96 
	#I82580_PHY_CTRL_2
 18

	)

97 
	#I82580_PHY_LBK_CTRL
 19

	)

98 
	#I82580_PHY_STATUS_2
 26

	)

99 
	#I82580_PHY_DIAG_STATUS
 31

	)

102 
	#I82580_PHY_STATUS2_REV_POLARITY
 0x0400

	)

103 
	#I82580_PHY_STATUS2_MDIX
 0x0800

	)

104 
	#I82580_PHY_STATUS2_SPEED_MASK
 0x0300

	)

105 
	#I82580_PHY_STATUS2_SPEED_1000MBPS
 0x0200

	)

106 
	#I82580_PHY_STATUS2_SPEED_100MBPS
 0x0100

	)

109 
	#I82580_PHY_CTRL2_AUTO_MDIX
 0x0400

	)

110 
	#I82580_PHY_CTRL2_FORCE_MDI_MDIX
 0x0200

	)

113 
	#I82580_DSTATUS_CABLE_LENGTH
 0x03FC

	)

114 
	#I82580_DSTATUS_CABLE_LENGTH_SHIFT
 2

	)

116 
	#IGP02E1000_PM_D0_LPLU
 0x0002

	)

117 
	#IGP02E1000_PM_D3_LPLU
 0x0004

	)

118 
	#IGP01E1000_PLHR_SS_DOWNGRADE
 0x8000

	)

119 
	#IGP01E1000_PSSR_POLARITY_REVERSED
 0x0002

	)

120 
	#IGP01E1000_PSSR_MDIX
 0x0800

	)

121 
	#IGP01E1000_PSSR_SPEED_MASK
 0xC000

	)

122 
	#IGP01E1000_PSSR_SPEED_1000MBPS
 0xC000

	)

123 
	#IGP02E1000_PHY_CHANNEL_NUM
 4

	)

124 
	#IGP02E1000_PHY_AGC_A
 0x11B1

	)

125 
	#IGP02E1000_PHY_AGC_B
 0x12B1

	)

126 
	#IGP02E1000_PHY_AGC_C
 0x14B1

	)

127 
	#IGP02E1000_PHY_AGC_D
 0x18B1

	)

128 
	#IGP02E1000_AGC_LENGTH_SHIFT
 9

	)

129 
	#IGP02E1000_AGC_LENGTH_MASK
 0x7F

	)

130 
	#IGP02E1000_AGC_RANGE
 15

	)

132 
	#E1000_CABLE_LENGTH_UNDEFINED
 0xFF

	)

	@igb/e1000_regs.h

28 #i‚de‡
_E1000_REGS_H_


29 
	#_E1000_REGS_H_


	)

31 
	#E1000_CTRL
 0x00000

	)

32 
	#E1000_STATUS
 0x00008

	)

33 
	#E1000_EECD
 0x00010

	)

34 
	#E1000_EERD
 0x00014

	)

35 
	#E1000_CTRL_EXT
 0x00018

	)

36 
	#E1000_MDIC
 0x00020

	)

37 
	#E1000_MDICNFG
 0x00E04

	)

38 
	#E1000_SCTL
 0x00024

	)

39 
	#E1000_FCAL
 0x00028

	)

40 
	#E1000_FCAH
 0x0002C

	)

41 
	#E1000_FCT
 0x00030

	)

42 
	#E1000_CONNSW
 0x00034

	)

43 
	#E1000_VET
 0x00038

	)

44 
	#E1000_ICR
 0x000C0

	)

45 
	#E1000_ITR
 0x000C4

	)

46 
	#E1000_ICS
 0x000C8

	)

47 
	#E1000_IMS
 0x000D0

	)

48 
	#E1000_IMC
 0x000D8

	)

49 
	#E1000_IAM
 0x000E0

	)

50 
	#E1000_RCTL
 0x00100

	)

51 
	#E1000_FCTTV
 0x00170

	)

52 
	#E1000_TXCW
 0x00178

	)

53 
	#E1000_EICR
 0x01580

	)

54 
	#E1000_EITR
(
_n
Ë(0x01680 + (0x4 * (_n)))

	)

55 
	#E1000_EICS
 0x01520

	)

56 
	#E1000_EIMS
 0x01524

	)

57 
	#E1000_EIMC
 0x01528

	)

58 
	#E1000_EIAC
 0x0152C

	)

59 
	#E1000_EIAM
 0x01530

	)

60 
	#E1000_GPIE
 0x01514

	)

61 
	#E1000_IVAR0
 0x01700

	)

62 
	#E1000_IVAR_MISC
 0x01740

	)

63 
	#E1000_TCTL
 0x00400

	)

64 
	#E1000_TCTL_EXT
 0x00404

	)

65 
	#E1000_TIPG
 0x00410

	)

66 
	#E1000_AIT
 0x00458

	)

67 
	#E1000_LEDCTL
 0x00E00

	)

68 
	#E1000_PBA
 0x01000

	)

69 
	#E1000_PBS
 0x01008

	)

70 
	#E1000_EEMNGCTL
 0x01010

	)

71 
	#E1000_EEWR
 0x0102C

	)

72 
	#E1000_I2CCMD
 0x01028

	)

73 
	#E1000_FRTIMER
 0x01048

	)

74 
	#E1000_TCPTIMER
 0x0104C

	)

75 
	#E1000_FCRTL
 0x02160

	)

76 
	#E1000_FCRTH
 0x02168

	)

77 
	#E1000_FCRTV
 0x02460

	)

80 
	#E1000_TSYNCRXCTL
 0x0B620

	)

81 
	#E1000_TSYNCTXCTL
 0x0B614

	)

82 
	#E1000_TSYNCRXCFG
 0x05F50

	)

83 
	#E1000_RXSTMPL
 0x0B624

	)

84 
	#E1000_RXSTMPH
 0x0B628

	)

85 
	#E1000_RXSATRL
 0x0B62C

	)

86 
	#E1000_RXSATRH
 0x0B630

	)

87 
	#E1000_TXSTMPL
 0x0B618

	)

88 
	#E1000_TXSTMPH
 0x0B61C

	)

89 
	#E1000_SYSTIML
 0x0B600

	)

90 
	#E1000_SYSTIMH
 0x0B604

	)

91 
	#E1000_TIMINCA
 0x0B608

	)

92 
	#E1000_TSAUXC
 0x0B640

	)

93 
	#E1000_SYSTIMR
 0x0B6F8

	)

96 
	#E1000_SAQF
(
_n
Ë(0x5980 + 4 * (_n))

	)

97 
	#E1000_DAQF
(
_n
Ë(0x59A0 + 4 * (_n))

	)

98 
	#E1000_SPQF
(
_n
Ë(0x59C0 + 4 * (_n))

	)

99 
	#E1000_FTQF
(
_n
Ë(0x59E0 + 4 * (_n))

	)

100 
	#E1000_SAQF0
 
	`E1000_SAQF
(0)

	)

101 
	#E1000_DAQF0
 
	`E1000_DAQF
(0)

	)

102 
	#E1000_SPQF0
 
	`E1000_SPQF
(0)

	)

103 
	#E1000_FTQF0
 
	`E1000_FTQF
(0)

	)

104 
	#E1000_SYNQF
(
_n
Ë(0x055FC + (4 * (_n))Ë

	)

105 
	#E1000_ETQF
(
_n
Ë(0x05CB0 + (4 * (_n))Ë

	)

107 
	#E1000_RQDPC
(
_n
Ë(0x0C030 + ((_nË* 0x40))

	)

110 
	#E1000_RXPBS
 0x02404

	)

119 
	#E1000_RDBAL
(
_n
) ((_n) < 4 ? (0x02800 + ((_n) * 0x100)) \

120 : (0x0C000 + ((
_n
Ë* 0x40)))

	)

121 
	#E1000_RDBAH
(
_n
) ((_n) < 4 ? (0x02804 + ((_n) * 0x100)) \

122 : (0x0C004 + ((
_n
Ë* 0x40)))

	)

123 
	#E1000_RDLEN
(
_n
) ((_n) < 4 ? (0x02808 + ((_n) * 0x100)) \

124 : (0x0C008 + ((
_n
Ë* 0x40)))

	)

125 
	#E1000_SRRCTL
(
_n
) ((_n) < 4 ? (0x0280C + ((_n) * 0x100)) \

126 : (0x0C00C + ((
_n
Ë* 0x40)))

	)

127 
	#E1000_RDH
(
_n
) ((_n) < 4 ? (0x02810 + ((_n) * 0x100)) \

128 : (0x0C010 + ((
_n
Ë* 0x40)))

	)

129 
	#E1000_RDT
(
_n
) ((_n) < 4 ? (0x02818 + ((_n) * 0x100)) \

130 : (0x0C018 + ((
_n
Ë* 0x40)))

	)

131 
	#E1000_RXDCTL
(
_n
) ((_n) < 4 ? (0x02828 + ((_n) * 0x100)) \

132 : (0x0C028 + ((
_n
Ë* 0x40)))

	)

133 
	#E1000_TDBAL
(
_n
) ((_n) < 4 ? (0x03800 + ((_n) * 0x100)) \

134 : (0x0E000 + ((
_n
Ë* 0x40)))

	)

135 
	#E1000_TDBAH
(
_n
) ((_n) < 4 ? (0x03804 + ((_n) * 0x100)) \

136 : (0x0E004 + ((
_n
Ë* 0x40)))

	)

137 
	#E1000_TDLEN
(
_n
) ((_n) < 4 ? (0x03808 + ((_n) * 0x100)) \

138 : (0x0E008 + ((
_n
Ë* 0x40)))

	)

139 
	#E1000_TDH
(
_n
) ((_n) < 4 ? (0x03810 + ((_n) * 0x100)) \

140 : (0x0E010 + ((
_n
Ë* 0x40)))

	)

141 
	#E1000_TDT
(
_n
) ((_n) < 4 ? (0x03818 + ((_n) * 0x100)) \

142 : (0x0E018 + ((
_n
Ë* 0x40)))

	)

143 
	#E1000_TXDCTL
(
_n
) ((_n) < 4 ? (0x03828 + ((_n) * 0x100)) \

144 : (0x0E028 + ((
_n
Ë* 0x40)))

	)

145 
	#E1000_DCA_TXCTRL
(
_n
Ë(0x03814 + (_¿<< 8))

	)

146 
	#E1000_DCA_RXCTRL
(
_n
Ë(0x02814 + (_¿<< 8))

	)

147 
	#E1000_TDWBAL
(
_n
) ((_n) < 4 ? (0x03838 + ((_n) * 0x100)) \

148 : (0x0E038 + ((
_n
Ë* 0x40)))

	)

149 
	#E1000_TDWBAH
(
_n
) ((_n) < 4 ? (0x0383C + ((_n) * 0x100)) \

150 : (0x0E03C + ((
_n
Ë* 0x40)))

	)

151 
	#E1000_TDFH
 0x03410

	)

152 
	#E1000_TDFT
 0x03418

	)

153 
	#E1000_TDFHS
 0x03420

	)

154 
	#E1000_TDFPC
 0x03430

	)

155 
	#E1000_DTXCTL
 0x03590

	)

156 
	#E1000_CRCERRS
 0x04000

	)

157 
	#E1000_ALGNERRC
 0x04004

	)

158 
	#E1000_SYMERRS
 0x04008

	)

159 
	#E1000_RXERRC
 0x0400C

	)

160 
	#E1000_MPC
 0x04010

	)

161 
	#E1000_SCC
 0x04014

	)

162 
	#E1000_ECOL
 0x04018

	)

163 
	#E1000_MCC
 0x0401C

	)

164 
	#E1000_LATECOL
 0x04020

	)

165 
	#E1000_COLC
 0x04028

	)

166 
	#E1000_DC
 0x04030

	)

167 
	#E1000_TNCRS
 0x04034

	)

168 
	#E1000_SEC
 0x04038

	)

169 
	#E1000_CEXTERR
 0x0403C

	)

170 
	#E1000_RLEC
 0x04040

	)

171 
	#E1000_XONRXC
 0x04048

	)

172 
	#E1000_XONTXC
 0x0404C

	)

173 
	#E1000_XOFFRXC
 0x04050

	)

174 
	#E1000_XOFFTXC
 0x04054

	)

175 
	#E1000_FCRUC
 0x04058

	)

176 
	#E1000_PRC64
 0x0405C

	)

177 
	#E1000_PRC127
 0x04060

	)

178 
	#E1000_PRC255
 0x04064

	)

179 
	#E1000_PRC511
 0x04068

	)

180 
	#E1000_PRC1023
 0x0406C

	)

181 
	#E1000_PRC1522
 0x04070

	)

182 
	#E1000_GPRC
 0x04074

	)

183 
	#E1000_BPRC
 0x04078

	)

184 
	#E1000_MPRC
 0x0407C

	)

185 
	#E1000_GPTC
 0x04080

	)

186 
	#E1000_GORCL
 0x04088

	)

187 
	#E1000_GORCH
 0x0408C

	)

188 
	#E1000_GOTCL
 0x04090

	)

189 
	#E1000_GOTCH
 0x04094

	)

190 
	#E1000_RNBC
 0x040A0

	)

191 
	#E1000_RUC
 0x040A4

	)

192 
	#E1000_RFC
 0x040A8

	)

193 
	#E1000_ROC
 0x040AC

	)

194 
	#E1000_RJC
 0x040B0

	)

195 
	#E1000_MGTPRC
 0x040B4

	)

196 
	#E1000_MGTPDC
 0x040B8

	)

197 
	#E1000_MGTPTC
 0x040BC

	)

198 
	#E1000_TORL
 0x040C0

	)

199 
	#E1000_TORH
 0x040C4

	)

200 
	#E1000_TOTL
 0x040C8

	)

201 
	#E1000_TOTH
 0x040CC

	)

202 
	#E1000_TPR
 0x040D0

	)

203 
	#E1000_TPT
 0x040D4

	)

204 
	#E1000_PTC64
 0x040D8

	)

205 
	#E1000_PTC127
 0x040DC

	)

206 
	#E1000_PTC255
 0x040E0

	)

207 
	#E1000_PTC511
 0x040E4

	)

208 
	#E1000_PTC1023
 0x040E8

	)

209 
	#E1000_PTC1522
 0x040EC

	)

210 
	#E1000_MPTC
 0x040F0

	)

211 
	#E1000_BPTC
 0x040F4

	)

212 
	#E1000_TSCTC
 0x040F8

	)

213 
	#E1000_TSCTFC
 0x040FC

	)

214 
	#E1000_IAC
 0x04100

	)

216 
	#E1000_ICRXPTC
 0x04104

	)

218 
	#E1000_ICRXATC
 0x04108

	)

220 
	#E1000_ICTXPTC
 0x0410C

	)

222 
	#E1000_ICTXATC
 0x04110

	)

224 
	#E1000_ICTXQEC
 0x04118

	)

226 
	#E1000_ICTXQMTC
 0x0411C

	)

228 
	#E1000_ICRXDMTC
 0x04120

	)

229 
	#E1000_ICRXOC
 0x04124

	)

230 
	#E1000_PCS_CFG0
 0x04200

	)

231 
	#E1000_PCS_LCTL
 0x04208

	)

232 
	#E1000_PCS_LSTAT
 0x0420C

	)

233 
	#E1000_CBTMPC
 0x0402C

	)

234 
	#E1000_HTDPMC
 0x0403C

	)

235 
	#E1000_CBRMPC
 0x040FC

	)

236 
	#E1000_RPTHC
 0x04104

	)

237 
	#E1000_HGPTC
 0x04118

	)

238 
	#E1000_HTCBDPC
 0x04124

	)

239 
	#E1000_HGORCL
 0x04128

	)

240 
	#E1000_HGORCH
 0x0412C

	)

241 
	#E1000_HGOTCL
 0x04130

	)

242 
	#E1000_HGOTCH
 0x04134

	)

243 
	#E1000_LENERRS
 0x04138

	)

244 
	#E1000_SCVPC
 0x04228

	)

245 
	#E1000_PCS_ANADV
 0x04218

	)

246 
	#E1000_PCS_LPAB
 0x0421C

	)

247 
	#E1000_PCS_NPTX
 0x04220

	)

248 
	#E1000_PCS_LPABNP
 0x04224

	)

249 
	#E1000_RXCSUM
 0x05000

	)

250 
	#E1000_RLPML
 0x05004

	)

251 
	#E1000_RFCTL
 0x05008

	)

252 
	#E1000_MTA
 0x05200

	)

253 
	#E1000_RA
 0x05400

	)

254 
	#E1000_RA2
 0x054E0

	)

255 
	#E1000_PSRTYPE
(
_i
Ë(0x05480 + ((_iË* 4))

	)

256 
	#E1000_RAL
(
_i
) (((_i) <= 15) ? (0x05400 + ((_i) * 8)) : \

257 (0x054E0 + ((
_i
 - 16Ë* 8)))

	)

258 
	#E1000_RAH
(
_i
) (((_i) <= 15) ? (0x05404 + ((_i) * 8)) : \

259 (0x054E4 + ((
_i
 - 16Ë* 8)))

	)

260 
	#E1000_IP4AT_REG
(
_i
Ë(0x05840 + ((_iË* 8))

	)

261 
	#E1000_IP6AT_REG
(
_i
Ë(0x05880 + ((_iË* 4))

	)

262 
	#E1000_WUPM_REG
(
_i
Ë(0x05A00 + ((_iË* 4))

	)

263 
	#E1000_FFMT_REG
(
_i
Ë(0x09000 + ((_iË* 8))

	)

264 
	#E1000_FFVT_REG
(
_i
Ë(0x09800 + ((_iË* 8))

	)

265 
	#E1000_FFLT_REG
(
_i
Ë(0x05F00 + ((_iË* 8))

	)

266 
	#E1000_VFTA
 0x05600

	)

267 
	#E1000_VT_CTL
 0x0581C

	)

268 
	#E1000_WUC
 0x05800

	)

269 
	#E1000_WUFC
 0x05808

	)

270 
	#E1000_WUS
 0x05810

	)

271 
	#E1000_MANC
 0x05820

	)

272 
	#E1000_IPAV
 0x05838

	)

273 
	#E1000_WUPL
 0x05900

	)

275 
	#E1000_SW_FW_SYNC
 0x05B5C

	)

276 
	#E1000_CCMCTL
 0x05B48

	)

277 
	#E1000_GIOCTL
 0x05B44

	)

278 
	#E1000_SCCTL
 0x05B4C

	)

279 
	#E1000_GCR
 0x05B00

	)

280 
	#E1000_FACTPS
 0x05B30

	)

281 
	#E1000_SWSM
 0x05B50

	)

282 
	#E1000_FWSM
 0x05B54

	)

283 
	#E1000_DCA_CTRL
 0x05B74

	)

286 
	#E1000_MRQC
 0x05818

	)

287 
	#E1000_IMIR
(
_i
Ë(0x05A80 + ((_iË* 4)Ë

	)

288 
	#E1000_IMIREXT
(
_i
Ë(0x05AA0 + ((_iË* 4)Ë

	)

289 
	#E1000_IMIRVP
 0x05AC0

	)

291 
	#E1000_MSIXBM
(
_i
Ë(0x01600 + ((_iË* 4))

	)

293 
	#E1000_RETA
(
_i
Ë(0x05C00 + ((_iË* 4))

	)

294 
	#E1000_RSSRK
(
_i
Ë(0x05C80 + ((_iË* 4)Ë

	)

297 
	#E1000_MBVFICR
 0x00C80

	)

298 
	#E1000_MBVFIMR
 0x00C84

	)

299 
	#E1000_VFLRE
 0x00C88

	)

300 
	#E1000_VFRE
 0x00C8C

	)

301 
	#E1000_VFTE
 0x00C90

	)

302 
	#E1000_QDE
 0x02408

	)

303 
	#E1000_DTXSWC
 0x03500

	)

304 
	#E1000_RPLOLR
 0x05AF0

	)

305 
	#E1000_UTA
 0x0A000

	)

306 
	#E1000_IOVTCL
 0x05BBC

	)

308 
	#E1000_P2VMAILBOX
(
_n
Ë(0x00C00 + (4 * (_n)))

	)

309 
	#E1000_VMBMEM
(
_n
Ë(0x00800 + (64 * (_n)))

	)

310 
	#E1000_VMOLR
(
_n
Ë(0x05AD0 + (4 * (_n)))

	)

311 
	#E1000_VLVF
(
_n
Ë(0x05D00 + (4 * (_n))Ë

	)

313 
	#E1000_VMVIR
(
_n
Ë(0x03700 + (4 * (_n)))

	)

315 
	#wr32
(
ªg
, 
vÆue
Ë(
	`wrôñ
(vÆue, 
hw
->
hw_addr
 +Ñeg))

	)

316 
	#rd32
(
ªg
Ë(
	`ªadl
(
hw
->
hw_addr
 +Ñeg))

	)

317 
	#wrÊ
(Ë(()
	`rd32
(
E1000_STATUS
))

	)

319 
	#¨øy_wr32
(
ªg
, 
off£t
, 
vÆue
) \

320 (
	`wrôñ
(
vÆue
, 
hw
->
hw_addr
 + 
ªg
 + ((
off£t
Ë<< 2)))

	)

321 
	#¨øy_rd32
(
ªg
, 
off£t
) \

322 (
	`ªadl
(
hw
->
hw_addr
 + 
ªg
 + ((
off£t
Ë<< 2)))

	)

325 
	#E1000_PCIEMISC
 0x05BB8

	)

	@igb/igb.h

31 #i‚de‡
_IGB_H_


32 
	#_IGB_H_


	)

35 
	#CONFIG_IGB_DISABLE_PACKET_SPLIT
 1

	)

38 
	~"e1000_mac.h
"

39 
	~"e1000_82575.h
"

41 
	~<löux/˛ocksour˚.h
>

42 
	~<löux/timecom∑ª.h
>

43 
	~<löux/√t_t°amp.h
>

45 
	gigb_ad≠ãr
;

48 
	#IGB_START_ITR
 648

	)

51 
	#IGB_DEFAULT_TXD
 256

	)

52 
	#IGB_MIN_TXD
 80

	)

53 
	#IGB_MAX_TXD
 4096

	)

55 
	#IGB_DEFAULT_RXD
 256

	)

56 
	#IGB_MIN_RXD
 80

	)

57 
	#IGB_MAX_RXD
 4096

	)

59 
	#IGB_DEFAULT_ITR
 3

	)

60 
	#IGB_MAX_ITR_USECS
 10000

	)

61 
	#IGB_MIN_ITR_USECS
 10

	)

62 
	#NON_Q_VECTORS
 1

	)

63 
	#MAX_Q_VECTORS
 8

	)

66 
	#IGB_MAX_RX_QUEUES
 (
ad≠ãr
->
vfs_Æloˇãd_cou¡
 ? 2 : \

67 (
hw
->
mac
.
ty≥
 > 
e1000_82575
 ? 8 : 4))

	)

68 
	#IGB_ABS_MAX_TX_QUEUES
 8

	)

69 
	#IGB_MAX_TX_QUEUES
 
IGB_MAX_RX_QUEUES


	)

71 
	#IGB_MAX_VF_MC_ENTRIES
 30

	)

72 
	#IGB_MAX_VF_FUNCTIONS
 8

	)

73 
	#IGB_MAX_VFTA_ENTRIES
 128

	)

75 
	svf_d©a_°‹age
 {

76 
	mvf_mac_addªs£s
[
ETH_ALEN
];

77 
u16
 
	mvf_mc_hashes
[
IGB_MAX_VF_MC_ENTRIES
];

78 
u16
 
	mnum_vf_mc_hashes
;

79 
u16
 
	mvœns_íabÀd
;

80 
u32
 
	mÊags
;

81 
	mœ°_«ck
;

82 
u16
 
	mpf_vœn
;

83 
u16
 
	mpf_qos
;

86 
	#IGB_VF_FLAG_CTS
 0x00000001

	)

87 
	#IGB_VF_FLAG_UNI_PROMISC
 0x00000002

	)

88 
	#IGB_VF_FLAG_MULTI_PROMISC
 0x00000004

	)

89 
	#IGB_VF_FLAG_PF_SET_MAC
 0x00000008

	)

102 
	#IGB_RX_PTHRESH
 8

	)

103 
	#IGB_RX_HTHRESH
 8

	)

104 
	#IGB_RX_WTHRESH
 1

	)

105 
	#IGB_TX_PTHRESH
 8

	)

106 
	#IGB_TX_HTHRESH
 1

	)

107 
	#IGB_TX_WTHRESH
 ((
hw
->
mac
.
ty≥
 =
e1000_82576
 && \

108 
ad≠ãr
->
msix_íåõs
Ë? 1 : 16)

	)

111 
	#MAXIMUM_ETHERNET_VLAN_SIZE
 1522

	)

114 
	#IGB_RXBUFFER_64
 64

	)

115 
	#IGB_RXBUFFER_128
 128

	)

116 
	#IGB_RXBUFFER_1024
 1024

	)

117 
	#IGB_RXBUFFER_2048
 2048

	)

118 
	#IGB_RXBUFFER_16384
 16384

	)

120 
	#MAX_STD_JUMBO_FRAME_SIZE
 9234

	)

123 
	#IGB_TX_QUEUE_WAKE
 16

	)

125 
	#IGB_RX_BUFFER_WRITE
 16

	)

127 
	#AUTO_ALL_MODES
 0

	)

128 
	#IGB_EEPROM_APME
 0x0400

	)

130 #i‚de‡
IGB_MASTER_SLAVE


132 
	#IGB_MASTER_SLAVE
 
e1000_ms_hw_deÁu…


	)

135 
	#IGB_MNG_VLAN_NONE
 -1

	)

139 
	sigb_buf„r
 {

140 
sk_buff
 *
	mskb
;

141 
dma_addr_t
 
	mdma
;

145 
	mtime_°amp
;

146 
u16
 
	mÀngth
;

147 
u16
 
	m√xt_to_w©ch
;

148 
	mbyãcou¡
;

149 
u16
 
	mgso_£gs
;

150 
skb_sh¨ed_tx
 
	mshtx
;

151 
u8
 
	mm≠≥d_as_∑ge
;

155 
∑ge
 *
	m∑ge
;

156 
dma_addr_t
 
	m∑ge_dma
;

157 
u16
 
	m∑ge_off£t
;

162 
	sigb_tx_queue_°©s
 {

163 
u64
 
	m∑ckës
;

164 
u64
 
	mbyãs
;

165 
u64
 
	mª°¨t_queue
;

168 
	sigb_rx_queue_°©s
 {

169 
u64
 
	m∑ckës
;

170 
u64
 
	mbyãs
;

171 
u64
 
	mdr›s
;

172 
u64
 
	mcsum_îr
;

173 
u64
 
	mÆloc_Áûed
;

176 
	sigb_q_ve˘‹
 {

177 
igb_ad≠ãr
 *
	mad≠ãr
;

178 
igb_rög
 *
	mrx_rög
;

179 
igb_rög
 *
	mtx_rög
;

180 
«pi_°ru˘
 
	m«pi
;

182 
u32
 
	meims_vÆue
;

183 
u16
 
	m˝u
;

185 
u16
 
	môr_vÆ
;

186 
u8
 
	m£t_ôr
;

187 
__iomem
 *
	môr_ªgi°î
;

189 
	m«me
[
IFNAMSIZ
 + 9];

192 
	sigb_rög
 {

193 
igb_q_ve˘‹
 *
	mq_ve˘‹
;

194 
√t_devi˚
 *
	m√tdev
;

195 
devi˚
 *
	mdev
;

196 
dma_addr_t
 
	mdma
;

197 *
	mdesc
;

198 
	msize
;

199 
u16
 
	mcou¡
;

200 
u16
 
	m√xt_to_u£
;

201 
u16
 
	m√xt_to_˛ón
;

202 
u8
 
	mqueue_ödex
;

203 
u8
 
	mªg_idx
;

204 
__iomem
 *
	mhód
;

205 
__iomem
 *
	mèû
;

206 
igb_buf„r
 *
	mbuf„r_öfo
;

208 
	mtŸÆ_byãs
;

209 
	mtŸÆ_∑ckës
;

211 
u32
 
	mÊags
;

216 
igb_tx_queue_°©s
 
	mtx_°©s
;

217 
boﬁ
 
	mdëe˘_tx_hung
;

221 
igb_rx_queue_°©s
 
	mrx_°©s
;

222 
u32
 
	mrx_buf„r_Àn
;

227 
	#IGB_RING_FLAG_RX_CSUM
 0x00000001

	)

228 
	#IGB_RING_FLAG_RX_SCTP_CSUM
 0x00000002

	)

230 
	#IGB_RING_FLAG_TX_CTX_IDX
 0x00000001

	)

232 
	#IGB_ADVTXD_DCMD
 (
E1000_TXD_CMD_EOP
 | 
E1000_TXD_CMD_RS
)

	)

234 
	#E1000_RX_DESC_ADV
(
R
, 
i
) \

235 (&(((
e1000_adv_rx_desc
 *)((
R
).
desc
))[
i
]))

	)

236 
	#E1000_TX_DESC_ADV
(
R
, 
i
) \

237 (&(((
e1000_adv_tx_desc
 *)((
R
).
desc
))[
i
]))

	)

238 
	#E1000_TX_CTXTDESC_ADV
(
R
, 
i
) \

239 (&(((
e1000_adv_tx_c⁄ãxt_desc
 *)((
R
).
desc
))[
i
]))

	)

242 
ölöe
 
	$igb_desc_unu£d
(
igb_rög
 *
rög
)

244 i‡(
rög
->
√xt_to_˛ón
 >Ñög->
√xt_to_u£
)

245  
rög
->
√xt_to_˛ón
 -Ñög->
√xt_to_u£
 - 1;

247  
rög
->
cou¡
 +Ñög->
√xt_to_˛ón
 -Ñög->
√xt_to_u£
 - 1;

248 
	}
}

251 
	sigb_ad≠ãr
 {

252 
timî_li°
 
	mw©chdog_timî
;

253 
timî_li°
 
	mphy_öfo_timî
;

254 
vœn_group
 *
	mvlgΩ
;

255 
u16
 
	mmng_vœn_id
;

256 
u32
 
	mbd_numbî
;

257 
u32
 
	mwﬁ
;

258 
u32
 
	mí_mng_±
;

259 
u16
 
	mlök_•ìd
;

260 
u16
 
	mlök_du∂ex
;

263 
u32
 
	mrx_ôr_£âög
;

264 
u32
 
	mtx_ôr_£âög
;

265 
u16
 
	mtx_ôr
;

266 
u16
 
	mrx_ôr
;

268 
w‹k_°ru˘
 
	mª£t_èsk
;

269 
w‹k_°ru˘
 
	mw©chdog_èsk
;

270 
boﬁ
 
	mfc_aut⁄eg
;

271 
u8
 
	mtx_timeout_Á˘‹
;

272 
timî_li°
 
	mblök_timî
;

273 
	mÀd_°©us
;

276 
igb_rög
 *
	mtx_rög
[16];

277 
u32
 
	mtx_timeout_cou¡
;

280 
igb_rög
 *
	mrx_rög
[16];

281 
	mnum_tx_queues
;

282 
	mnum_rx_queues
;

284 
u32
 
	mmax_‰ame_size
;

285 
u32
 
	mmö_‰ame_size
;

288 
√t_devi˚
 *
	m√tdev
;

289 
pci_dev
 *
	mpdev
;

290 
cy˛ecou¡î
 
	mcy˛es
;

291 
timecou¡î
 
	m˛ock
;

292 
timecom∑ª
 
	mcom∑ª
;

293 
hwt°amp_c⁄fig
 
	mhwt°amp_c⁄fig
;

296 
e1000_hw
 
	mhw
;

297 
e1000_hw_°©s
 
	m°©s
;

298 
e1000_phy_öfo
 
	mphy_öfo
;

299 
e1000_phy_°©s
 
	mphy_°©s
;

301 
u32
 
	mã°_i¸
;

302 
igb_rög
 
	mã°_tx_rög
;

303 
igb_rög
 
	mã°_rx_rög
;

305 
	mmsg_íabÀ
;

307 
	mnum_q_ve˘‹s
;

308 
igb_q_ve˘‹
 *
	mq_ve˘‹
[
MAX_Q_VECTORS
];

309 
msix_íåy
 *
	mmsix_íåõs
;

310 
u32
 
	meims_íabÀ_mask
;

311 
u32
 
	meims_Ÿhî
;

314 
	m°©e
;

315 
	mÊags
;

316 
u32
 
	mì¥om_wﬁ
;

318 
igb_rög
 *
	mmu…i_tx_èbÀ
[
IGB_ABS_MAX_TX_QUEUES
];

319 
u16
 
	mtx_rög_cou¡
;

320 
u16
 
	mrx_rög_cou¡
;

321 
	mvfs_Æloˇãd_cou¡
;

322 
vf_d©a_°‹age
 *
	mvf_d©a
;

323 
u32
 
	mrss_queues
;

326 
	#IGB_FLAG_HAS_MSI
 (1 << 0)

	)

327 
	#IGB_FLAG_DCA_ENABLED
 (1 << 1)

	)

328 
	#IGB_FLAG_QUAD_PORT_A
 (1 << 2)

	)

329 
	#IGB_FLAG_QUEUE_PAIRS
 (1 << 3)

	)

331 
	#IGB_82576_TSYNC_SHIFT
 19

	)

332 
	#IGB_82580_TSYNC_SHIFT
 24

	)

333 
	#IGB_TS_HDR_LEN
 16

	)

334 
	ee1000_°©e_t
 {

335 
	m__IGB_TESTING
,

336 
	m__IGB_RESETTING
,

337 
	m__IGB_DOWN


340 
	eigb_bﬂrds
 {

341 
	mbﬂrd_82575
,

344 
igb_drivî_«me
[];

345 
igb_drivî_vîsi⁄
[];

347 
igb_up
(
igb_ad≠ãr
 *);

348 
igb_down
(
igb_ad≠ãr
 *);

349 
igb_ªöô_locked
(
igb_ad≠ãr
 *);

350 
igb_ª£t
(
igb_ad≠ãr
 *);

351 
igb_£t_•d_d∂x
(
igb_ad≠ãr
 *, 
u16
);

352 
igb_£tup_tx_ªsour˚s
(
igb_rög
 *);

353 
igb_£tup_rx_ªsour˚s
(
igb_rög
 *);

354 
igb_‰ì_tx_ªsour˚s
(
igb_rög
 *);

355 
igb_‰ì_rx_ªsour˚s
(
igb_rög
 *);

356 
igb_c⁄figuª_tx_rög
(
igb_ad≠ãr
 *, 
igb_rög
 *);

357 
igb_c⁄figuª_rx_rög
(
igb_ad≠ãr
 *, 
igb_rög
 *);

358 
igb_£tup_t˘l
(
igb_ad≠ãr
 *);

359 
igb_£tup_r˘l
(
igb_ad≠ãr
 *);

360 
√tdev_tx_t
 
igb_xmô_‰ame_rög_adv
(
sk_buff
 *, 
igb_rög
 *);

361 
igb_unm≠_™d_‰ì_tx_ªsour˚
(
igb_rög
 *,

362 
igb_buf„r
 *);

363 
igb_Æloc_rx_buf„rs_adv
(
igb_rög
 *, );

364 
igb_upd©e_°©s
(
igb_ad≠ãr
 *);

365 
boﬁ
 
igb_has_lök
(
igb_ad≠ãr
 *
ad≠ãr
);

366 
igb_£t_ëhtoﬁ_›s
(
√t_devi˚
 *);

367 
igb_powî_up_lök
(
igb_ad≠ãr
 *);

369 
ölöe
 
s32
 
	$igb_ª£t_phy
(
e1000_hw
 *
hw
)

371 i‡(
hw
->
phy
.
›s
.
ª£t
)

372  
hw
->
phy
.
›s
.
	`ª£t
(hw);

375 
	}
}

377 
ölöe
 
s32
 
	$igb_ªad_phy_ªg
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 *
d©a
)

379 i‡(
hw
->
phy
.
›s
.
ªad_ªg
)

380  
hw
->
phy
.
›s
.
	`ªad_ªg
(hw, 
off£t
, 
d©a
);

383 
	}
}

385 
ölöe
 
s32
 
	$igb_wrôe_phy_ªg
(
e1000_hw
 *
hw
, 
u32
 
off£t
, 
u16
 
d©a
)

387 i‡(
hw
->
phy
.
›s
.
wrôe_ªg
)

388  
hw
->
phy
.
›s
.
	`wrôe_ªg
(hw, 
off£t
, 
d©a
);

391 
	}
}

393 
ölöe
 
s32
 
	$igb_gë_phy_öfo
(
e1000_hw
 *
hw
)

395 i‡(
hw
->
phy
.
›s
.
gë_phy_öfo
)

396  
hw
->
phy
.
›s
.
	`gë_phy_öfo
(hw);

399 
	}
}

	@igb/igb_ethtool.c

30 
	~<löux/vmÆloc.h
>

31 
	~<löux/√tdevi˚.h
>

32 
	~<löux/pci.h
>

33 
	~<löux/dñay.h
>

34 
	~<löux/öãºu±.h
>

35 
	~<löux/if_ëhî.h
>

36 
	~<löux/ëhtoﬁ.h
>

37 
	~<löux/sched.h
>

38 
	~<löux/¶ab.h
>

40 
	~"igb.h
"

44 
sk_buff
 * 
ukmem_skb_Æloc
(
size
);

46 
	sigb_°©s
 {

47 
	m°©_°rög
[
ETH_GSTRING_LEN
];

48 
	msizeof_°©
;

49 
	m°©_off£t
;

52 
	#IGB_STAT
(
_«me
, 
_°©
) { \

53 .
°©_°rög
 = 
_«me
, \

54 .
sizeof_°©
 = 
	`FIELD_SIZEOF
(
igb_ad≠ãr
, 
_°©
), \

55 .
°©_off£t
 = 
	`off£tof
(
igb_ad≠ãr
, 
_°©
) \

56 }

	)

57 c⁄° 
igb_°©s
 
	gigb_g°rögs_°©s
[] = {

58 
IGB_STAT
("rx_∑ckës", 
°©s
.
g¥c
),

59 
IGB_STAT
("tx_∑ckës", 
°©s
.
g±c
),

60 
IGB_STAT
("rx_byãs", 
°©s
.
g‹c
),

61 
IGB_STAT
("tx_byãs", 
°©s
.
gŸc
),

62 
IGB_STAT
("rx_brﬂdˇ°", 
°©s
.
b¥c
),

63 
IGB_STAT
("tx_brﬂdˇ°", 
°©s
.
b±c
),

64 
IGB_STAT
("rx_mu…iˇ°", 
°©s
.
m¥c
),

65 
IGB_STAT
("tx_mu…iˇ°", 
°©s
.
m±c
),

66 
IGB_STAT
("mu…iˇ°", 
°©s
.
m¥c
),

67 
IGB_STAT
("cﬁlisi⁄s", 
°©s
.
cﬁc
),

68 
IGB_STAT
("rx_¸c_îr‹s", 
°©s
.
¸˚ºs
),

69 
IGB_STAT
("rx_no_buf„r_cou¡", 
°©s
.
∫bc
),

70 
IGB_STAT
("rx_mis£d_îr‹s", 
°©s
.
mpc
),

71 
IGB_STAT
("tx_ab‹ãd_îr‹s", 
°©s
.
ecﬁ
),

72 
IGB_STAT
("tx_ˇºõr_îr‹s", 
°©s
.
ä¸s
),

73 
IGB_STAT
("tx_wödow_îr‹s", 
°©s
.
œãcﬁ
),

74 
IGB_STAT
("tx_ab‹t_œã_cﬁl", 
°©s
.
œãcﬁ
),

75 
IGB_STAT
("tx_de„ºed_ok", 
°©s
.
dc
),

76 
IGB_STAT
("tx_sögÀ_cﬁl_ok", 
°©s
.
scc
),

77 
IGB_STAT
("tx_mu…i_cﬁl_ok", 
°©s
.
mcc
),

78 
IGB_STAT
("tx_timeout_cou¡", 
tx_timeout_cou¡
),

79 
IGB_STAT
("rx_l⁄g_Àngth_îr‹s", 
°©s
.
roc
),

80 
IGB_STAT
("rx_sh‹t_Àngth_îr‹s", 
°©s
.
ruc
),

81 
IGB_STAT
("rx_Æign_îr‹s", 
°©s
.
Æg√ºc
),

82 
IGB_STAT
("tx_t˝_£g_good", 
°©s
.
ts˘c
),

83 
IGB_STAT
("tx_t˝_£g_Áûed", 
°©s
.
ts˘fc
),

84 
IGB_STAT
("rx_Êow_c⁄åﬁ_x⁄", 
°©s
.
x⁄rxc
),

85 
IGB_STAT
("rx_Êow_c⁄åﬁ_xoff", 
°©s
.
xof‰xc
),

86 
IGB_STAT
("tx_Êow_c⁄åﬁ_x⁄", 
°©s
.
x⁄txc
),

87 
IGB_STAT
("tx_Êow_c⁄åﬁ_xoff", 
°©s
.
xof·xc
),

88 
IGB_STAT
("rx_l⁄g_byã_cou¡", 
°©s
.
g‹c
),

89 
IGB_STAT
("tx_dma_out_of_sync", 
°©s
.
doosync
),

90 
IGB_STAT
("tx_smbus", 
°©s
.
mg±c
),

91 
IGB_STAT
("rx_smbus", 
°©s
.
mg¥c
),

92 
IGB_STAT
("dr›≥d_smbus", 
°©s
.
mgpdc
),

95 
	#IGB_NETDEV_STAT
(
_√t_°©
) { \

96 .
°©_°rög
 = 
	`__°rögify
(
_√t_°©
), \

97 .
sizeof_°©
 = 
	`FIELD_SIZEOF
(
√t_devi˚_°©s
, 
_√t_°©
), \

98 .
°©_off£t
 = 
	`off£tof
(
√t_devi˚_°©s
, 
_√t_°©
) \

99 }

	)

100 c⁄° 
igb_°©s
 
	gigb_g°rögs_√t_°©s
[] = {

101 
IGB_NETDEV_STAT
(
rx_îr‹s
),

102 
IGB_NETDEV_STAT
(
tx_îr‹s
),

103 
IGB_NETDEV_STAT
(
tx_dr›≥d
),

104 
IGB_NETDEV_STAT
(
rx_Àngth_îr‹s
),

105 
IGB_NETDEV_STAT
(
rx_ovî_îr‹s
),

106 
IGB_NETDEV_STAT
(
rx_‰ame_îr‹s
),

107 
IGB_NETDEV_STAT
(
rx_fifo_îr‹s
),

108 
IGB_NETDEV_STAT
(
tx_fifo_îr‹s
),

109 
IGB_NETDEV_STAT
(
tx_hóπbót_îr‹s
)

112 
	#IGB_GLOBAL_STATS_LEN
 \

113 ((
igb_g°rögs_°©s
Ë/ (
igb_°©s
))

	)

114 
	#IGB_NETDEV_STATS_LEN
 \

115 ((
igb_g°rögs_√t_°©s
Ë/ (
igb_°©s
))

	)

116 
	#IGB_RX_QUEUE_STATS_LEN
 \

117 ((
igb_rx_queue_°©s
Ë/ (
u64
))

	)

118 
	#IGB_TX_QUEUE_STATS_LEN
 \

119 ((
igb_tx_queue_°©s
Ë/ (
u64
))

	)

120 
	#IGB_QUEUE_STATS_LEN
 \

121 ((((
igb_ad≠ãr
 *)
	`√tdev_¥iv
(
√tdev
))->
num_rx_queues
 * \

122 
IGB_RX_QUEUE_STATS_LEN
) + \

123 (((
igb_ad≠ãr
 *)
	`√tdev_¥iv
(
√tdev
))->
num_tx_queues
 * \

124 
IGB_TX_QUEUE_STATS_LEN
))

	)

125 
	#IGB_STATS_LEN
 \

126 (
IGB_GLOBAL_STATS_LEN
 + 
IGB_NETDEV_STATS_LEN
 + 
IGB_QUEUE_STATS_LEN
)

	)

128 c⁄° 
	gigb_g°rögs_ã°
[][
ETH_GSTRING_LEN
] = {

133 
	#IGB_TEST_LEN
 ((
igb_g°rögs_ã°
Ë/ 
ETH_GSTRING_LEN
)

	)

135 
	$igb_gë_£âögs
(
√t_devi˚
 *
√tdev
, 
ëhtoﬁ_cmd
 *
ecmd
)

137 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

138 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

139 
u32
 
°©us
;

141 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
) {

143 
ecmd
->
suµ‹ãd
 = (
SUPPORTED_10ba£T_HÆf
 |

144 
SUPPORTED_10ba£T_FuŒ
 |

145 
SUPPORTED_100ba£T_HÆf
 |

146 
SUPPORTED_100ba£T_FuŒ
 |

147 
SUPPORTED_1000ba£T_FuŒ
|

148 
SUPPORTED_Aut⁄eg
 |

149 
SUPPORTED_TP
);

150 
ecmd
->
advîtisög
 = 
ADVERTISED_TP
;

152 i‡(
hw
->
mac
.
aut⁄eg
 == 1) {

153 
ecmd
->
advîtisög
 |
ADVERTISED_Aut⁄eg
;

155 
ecmd
->
advîtisög
 |
hw
->
phy
.
aut⁄eg_advîti£d
;

158 
ecmd
->
p‹t
 = 
PORT_TP
;

159 
ecmd
->
phy_addªss
 = 
hw
->
phy
.
addr
;

161 
ecmd
->
suµ‹ãd
 = (
SUPPORTED_1000ba£T_FuŒ
 |

162 
SUPPORTED_FIBRE
 |

163 
SUPPORTED_Aut⁄eg
);

165 
ecmd
->
advîtisög
 = (
ADVERTISED_1000ba£T_FuŒ
 |

166 
ADVERTISED_FIBRE
 |

167 
ADVERTISED_Aut⁄eg
);

169 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

172 
ecmd
->
å™s˚ivî
 = 
XCVR_INTERNAL
;

174 
°©us
 = 
	`rd32
(
E1000_STATUS
);

176 i‡(
°©us
 & 
E1000_STATUS_LU
) {

178 i‡((
°©us
 & 
E1000_STATUS_SPEED_1000
) ||

179 
hw
->
phy
.
medü_ty≥
 !
e1000_medü_ty≥_c›≥r
)

180 
ecmd
->
•ìd
 = 
SPEED_1000
;

181 i‡(
°©us
 & 
E1000_STATUS_SPEED_100
)

182 
ecmd
->
•ìd
 = 
SPEED_100
;

184 
ecmd
->
•ìd
 = 
SPEED_10
;

186 i‡((
°©us
 & 
E1000_STATUS_FD
) ||

187 
hw
->
phy
.
medü_ty≥
 !
e1000_medü_ty≥_c›≥r
)

188 
ecmd
->
du∂ex
 = 
DUPLEX_FULL
;

190 
ecmd
->
du∂ex
 = 
DUPLEX_HALF
;

192 
ecmd
->
•ìd
 = -1;

193 
ecmd
->
du∂ex
 = -1;

196 
ecmd
->
aut⁄eg
 = 
hw
->
mac
.aut⁄eg ? 
AUTONEG_ENABLE
 : 
AUTONEG_DISABLE
;

198 
	}
}

200 
	$igb_£t_£âögs
(
√t_devi˚
 *
√tdev
, 
ëhtoﬁ_cmd
 *
ecmd
)

202 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

203 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

207 i‡(
	`igb_check_ª£t_block
(
hw
)) {

208 
	`dev_îr
(&
ad≠ãr
->
pdev
->
dev
, "Cannot changeÜink "

210  -
EINVAL
;

213 
	`ã°_™d_£t_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
))

214 
	`m¶ìp
(1);

216 i‡(
ecmd
->
aut⁄eg
 =
AUTONEG_ENABLE
) {

217 
hw
->
mac
.
aut⁄eg
 = 1;

218 
hw
->
phy
.
aut⁄eg_advîti£d
 = 
ecmd
->
advîtisög
 |

219 
ADVERTISED_TP
 |

220 
ADVERTISED_Aut⁄eg
;

221 
ecmd
->
advîtisög
 = 
hw
->
phy
.
aut⁄eg_advîti£d
;

222 i‡(
ad≠ãr
->
fc_aut⁄eg
)

223 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_deÁu…
;

225 i‡(
	`igb_£t_•d_d∂x
(
ad≠ãr
, 
ecmd
->
•ìd
 +Écmd->
du∂ex
)) {

226 
	`˛ór_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
);

227  -
EINVAL
;

232 i‡(
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
)) {

233 
	`igb_down
(
ad≠ãr
);

234 
	`igb_up
(
ad≠ãr
);

236 
	`igb_ª£t
(
ad≠ãr
);

238 
	`˛ór_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
);

240 
	}
}

242 
u32
 
	$igb_gë_lök
(
√t_devi˚
 *
√tdev
)

244 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

245 
e1000_mac_öfo
 *
mac
 = &
ad≠ãr
->
hw
.mac;

254 i‡(!
	`√tif_ˇºõr_ok
(
√tdev
))

255 
mac
->
gë_lök_°©us
 = 1;

257  
	`igb_has_lök
(
ad≠ãr
);

258 
	}
}

260 
	$igb_gë_∑u£∑øm
(
√t_devi˚
 *
√tdev
,

261 
ëhtoﬁ_∑u£∑øm
 *
∑u£
)

263 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

264 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

266 
∑u£
->
aut⁄eg
 =

267 (
ad≠ãr
->
fc_aut⁄eg
 ? 
AUTONEG_ENABLE
 : 
AUTONEG_DISABLE
);

269 i‡(
hw
->
fc
.
cuºít_mode
 =
e1000_fc_rx_∑u£
)

270 
∑u£
->
rx_∑u£
 = 1;

271 i‡(
hw
->
fc
.
cuºít_mode
 =
e1000_fc_tx_∑u£
)

272 
∑u£
->
tx_∑u£
 = 1;

273 i‡(
hw
->
fc
.
cuºít_mode
 =
e1000_fc_fuŒ
) {

274 
∑u£
->
rx_∑u£
 = 1;

275 
∑u£
->
tx_∑u£
 = 1;

277 
	}
}

279 
	$igb_£t_∑u£∑øm
(
√t_devi˚
 *
√tdev
,

280 
ëhtoﬁ_∑u£∑øm
 *
∑u£
)

282 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

283 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

284 
ªtvÆ
 = 0;

286 
ad≠ãr
->
fc_aut⁄eg
 = 
∑u£
->
aut⁄eg
;

288 
	`ã°_™d_£t_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
))

289 
	`m¶ìp
(1);

291 i‡(
ad≠ãr
->
fc_aut⁄eg
 =
AUTONEG_ENABLE
) {

292 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_deÁu…
;

293 i‡(
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
)) {

294 
	`igb_down
(
ad≠ãr
);

295 
	`igb_up
(
ad≠ãr
);

297 
	`igb_ª£t
(
ad≠ãr
);

300 i‡(
∑u£
->
rx_∑u£
 &&Öau£->
tx_∑u£
)

301 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_fuŒ
;

302 i‡(
∑u£
->
rx_∑u£
 && !∑u£->
tx_∑u£
)

303 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_rx_∑u£
;

304 i‡(!
∑u£
->
rx_∑u£
 &&Öau£->
tx_∑u£
)

305 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_tx_∑u£
;

306 i‡(!
∑u£
->
rx_∑u£
 && !∑u£->
tx_∑u£
)

307 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_n⁄e
;

309 
hw
->
fc
.
cuºít_mode
 = hw->fc.
ªque°ed_mode
;

311 
ªtvÆ
 = ((
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
) ?

312 
	`igb_f‹˚_mac_fc
(
hw
Ë: 
	`igb_£tup_lök
(hw));

315 
	`˛ór_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
);

316  
ªtvÆ
;

317 
	}
}

319 
u32
 
	$igb_gë_rx_csum
(
√t_devi˚
 *
√tdev
)

321 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

322  !!(
ad≠ãr
->
rx_rög
[0]->
Êags
 & 
IGB_RING_FLAG_RX_CSUM
);

323 
	}
}

325 
	$igb_£t_rx_csum
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

327 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

328 
i
;

330 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

331 i‡(
d©a
)

332 
ad≠ãr
->
rx_rög
[
i
]->
Êags
 |
IGB_RING_FLAG_RX_CSUM
;

334 
ad≠ãr
->
rx_rög
[
i
]->
Êags
 &~
IGB_RING_FLAG_RX_CSUM
;

338 
	}
}

340 
u32
 
	$igb_gë_tx_csum
(
√t_devi˚
 *
√tdev
)

342  (
√tdev
->
„©uªs
 & 
NETIF_F_IP_CSUM
) != 0;

343 
	}
}

345 
	$igb_£t_tx_csum
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

347 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

349 i‡(
d©a
) {

350 
√tdev
->
„©uªs
 |(
NETIF_F_IP_CSUM
 | 
NETIF_F_IPV6_CSUM
);

351 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 >
e1000_82576
)

352 
√tdev
->
„©uªs
 |
NETIF_F_SCTP_CSUM
;

354 
√tdev
->
„©uªs
 &~(
NETIF_F_IP_CSUM
 | 
NETIF_F_IPV6_CSUM
 |

355 
NETIF_F_SCTP_CSUM
);

359 
	}
}

361 
	$igb_£t_tso
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

363 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

365 i‡(
d©a
) {

366 
√tdev
->
„©uªs
 |
NETIF_F_TSO
;

367 
√tdev
->
„©uªs
 |
NETIF_F_TSO6
;

369 
√tdev
->
„©uªs
 &~
NETIF_F_TSO
;

370 
√tdev
->
„©uªs
 &~
NETIF_F_TSO6
;

373 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "TSO is %s\n",

374 
d©a
 ? "Enabled" : "Disabled");

376 
	}
}

378 
u32
 
	$igb_gë_msgÀvñ
(
√t_devi˚
 *
√tdev
)

380 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

381  
ad≠ãr
->
msg_íabÀ
;

382 
	}
}

384 
	$igb_£t_msgÀvñ
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

386 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

387 
ad≠ãr
->
msg_íabÀ
 = 
d©a
;

388 
	}
}

390 
	$igb_gë_ªgs_Àn
(
√t_devi˚
 *
√tdev
)

392 
	#IGB_REGS_LEN
 551

	)

393  
IGB_REGS_LEN
 * (
u32
);

394 
	}
}

396 
	$igb_gë_ªgs
(
√t_devi˚
 *
√tdev
,

397 
ëhtoﬁ_ªgs
 *
ªgs
, *
p
)

399 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

400 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

401 
u32
 *
ªgs_buff
 = 
p
;

402 
u8
 
i
;

404 
	`mem£t
(
p
, 0, 
IGB_REGS_LEN
 * (
u32
));

406 
ªgs
->
vîsi⁄
 = (1 << 24Ë| (
hw
->
ªvisi⁄_id
 << 16Ë| hw->
devi˚_id
;

409 
ªgs_buff
[0] = 
	`rd32
(
E1000_CTRL
);

410 
ªgs_buff
[1] = 
	`rd32
(
E1000_STATUS
);

411 
ªgs_buff
[2] = 
	`rd32
(
E1000_CTRL_EXT
);

412 
ªgs_buff
[3] = 
	`rd32
(
E1000_MDIC
);

413 
ªgs_buff
[4] = 
	`rd32
(
E1000_SCTL
);

414 
ªgs_buff
[5] = 
	`rd32
(
E1000_CONNSW
);

415 
ªgs_buff
[6] = 
	`rd32
(
E1000_VET
);

416 
ªgs_buff
[7] = 
	`rd32
(
E1000_LEDCTL
);

417 
ªgs_buff
[8] = 
	`rd32
(
E1000_PBA
);

418 
ªgs_buff
[9] = 
	`rd32
(
E1000_PBS
);

419 
ªgs_buff
[10] = 
	`rd32
(
E1000_FRTIMER
);

420 
ªgs_buff
[11] = 
	`rd32
(
E1000_TCPTIMER
);

423 
ªgs_buff
[12] = 
	`rd32
(
E1000_EECD
);

428 
ªgs_buff
[13] = 
	`rd32
(
E1000_EICS
);

429 
ªgs_buff
[14] = 
	`rd32
(
E1000_EICS
);

430 
ªgs_buff
[15] = 
	`rd32
(
E1000_EIMS
);

431 
ªgs_buff
[16] = 
	`rd32
(
E1000_EIMC
);

432 
ªgs_buff
[17] = 
	`rd32
(
E1000_EIAC
);

433 
ªgs_buff
[18] = 
	`rd32
(
E1000_EIAM
);

436 
ªgs_buff
[19] = 
	`rd32
(
E1000_ICS
);

437 
ªgs_buff
[20] = 
	`rd32
(
E1000_ICS
);

438 
ªgs_buff
[21] = 
	`rd32
(
E1000_IMS
);

439 
ªgs_buff
[22] = 
	`rd32
(
E1000_IMC
);

440 
ªgs_buff
[23] = 
	`rd32
(
E1000_IAC
);

441 
ªgs_buff
[24] = 
	`rd32
(
E1000_IAM
);

442 
ªgs_buff
[25] = 
	`rd32
(
E1000_IMIRVP
);

445 
ªgs_buff
[26] = 
	`rd32
(
E1000_FCAL
);

446 
ªgs_buff
[27] = 
	`rd32
(
E1000_FCAH
);

447 
ªgs_buff
[28] = 
	`rd32
(
E1000_FCTTV
);

448 
ªgs_buff
[29] = 
	`rd32
(
E1000_FCRTL
);

449 
ªgs_buff
[30] = 
	`rd32
(
E1000_FCRTH
);

450 
ªgs_buff
[31] = 
	`rd32
(
E1000_FCRTV
);

453 
ªgs_buff
[32] = 
	`rd32
(
E1000_RCTL
);

454 
ªgs_buff
[33] = 
	`rd32
(
E1000_RXCSUM
);

455 
ªgs_buff
[34] = 
	`rd32
(
E1000_RLPML
);

456 
ªgs_buff
[35] = 
	`rd32
(
E1000_RFCTL
);

457 
ªgs_buff
[36] = 
	`rd32
(
E1000_MRQC
);

458 
ªgs_buff
[37] = 
	`rd32
(
E1000_VT_CTL
);

461 
ªgs_buff
[38] = 
	`rd32
(
E1000_TCTL
);

462 
ªgs_buff
[39] = 
	`rd32
(
E1000_TCTL_EXT
);

463 
ªgs_buff
[40] = 
	`rd32
(
E1000_TIPG
);

464 
ªgs_buff
[41] = 
	`rd32
(
E1000_DTXCTL
);

467 
ªgs_buff
[42] = 
	`rd32
(
E1000_WUC
);

468 
ªgs_buff
[43] = 
	`rd32
(
E1000_WUFC
);

469 
ªgs_buff
[44] = 
	`rd32
(
E1000_WUS
);

470 
ªgs_buff
[45] = 
	`rd32
(
E1000_IPAV
);

471 
ªgs_buff
[46] = 
	`rd32
(
E1000_WUPL
);

474 
ªgs_buff
[47] = 
	`rd32
(
E1000_PCS_CFG0
);

475 
ªgs_buff
[48] = 
	`rd32
(
E1000_PCS_LCTL
);

476 
ªgs_buff
[49] = 
	`rd32
(
E1000_PCS_LSTAT
);

477 
ªgs_buff
[50] = 
	`rd32
(
E1000_PCS_ANADV
);

478 
ªgs_buff
[51] = 
	`rd32
(
E1000_PCS_LPAB
);

479 
ªgs_buff
[52] = 
	`rd32
(
E1000_PCS_NPTX
);

480 
ªgs_buff
[53] = 
	`rd32
(
E1000_PCS_LPABNP
);

483 
ªgs_buff
[54] = 
ad≠ãr
->
°©s
.
¸˚ºs
;

484 
ªgs_buff
[55] = 
ad≠ãr
->
°©s
.
Æg√ºc
;

485 
ªgs_buff
[56] = 
ad≠ãr
->
°©s
.
symîrs
;

486 
ªgs_buff
[57] = 
ad≠ãr
->
°©s
.
rxîrc
;

487 
ªgs_buff
[58] = 
ad≠ãr
->
°©s
.
mpc
;

488 
ªgs_buff
[59] = 
ad≠ãr
->
°©s
.
scc
;

489 
ªgs_buff
[60] = 
ad≠ãr
->
°©s
.
ecﬁ
;

490 
ªgs_buff
[61] = 
ad≠ãr
->
°©s
.
mcc
;

491 
ªgs_buff
[62] = 
ad≠ãr
->
°©s
.
œãcﬁ
;

492 
ªgs_buff
[63] = 
ad≠ãr
->
°©s
.
cﬁc
;

493 
ªgs_buff
[64] = 
ad≠ãr
->
°©s
.
dc
;

494 
ªgs_buff
[65] = 
ad≠ãr
->
°©s
.
ä¸s
;

495 
ªgs_buff
[66] = 
ad≠ãr
->
°©s
.
£c
;

496 
ªgs_buff
[67] = 
ad≠ãr
->
°©s
.
htdpmc
;

497 
ªgs_buff
[68] = 
ad≠ãr
->
°©s
.
æec
;

498 
ªgs_buff
[69] = 
ad≠ãr
->
°©s
.
x⁄rxc
;

499 
ªgs_buff
[70] = 
ad≠ãr
->
°©s
.
x⁄txc
;

500 
ªgs_buff
[71] = 
ad≠ãr
->
°©s
.
xof‰xc
;

501 
ªgs_buff
[72] = 
ad≠ãr
->
°©s
.
xof·xc
;

502 
ªgs_buff
[73] = 
ad≠ãr
->
°©s
.
f¸uc
;

503 
ªgs_buff
[74] = 
ad≠ãr
->
°©s
.
¥c64
;

504 
ªgs_buff
[75] = 
ad≠ãr
->
°©s
.
¥c127
;

505 
ªgs_buff
[76] = 
ad≠ãr
->
°©s
.
¥c255
;

506 
ªgs_buff
[77] = 
ad≠ãr
->
°©s
.
¥c511
;

507 
ªgs_buff
[78] = 
ad≠ãr
->
°©s
.
¥c1023
;

508 
ªgs_buff
[79] = 
ad≠ãr
->
°©s
.
¥c1522
;

509 
ªgs_buff
[80] = 
ad≠ãr
->
°©s
.
g¥c
;

510 
ªgs_buff
[81] = 
ad≠ãr
->
°©s
.
b¥c
;

511 
ªgs_buff
[82] = 
ad≠ãr
->
°©s
.
m¥c
;

512 
ªgs_buff
[83] = 
ad≠ãr
->
°©s
.
g±c
;

513 
ªgs_buff
[84] = 
ad≠ãr
->
°©s
.
g‹c
;

514 
ªgs_buff
[86] = 
ad≠ãr
->
°©s
.
gŸc
;

515 
ªgs_buff
[88] = 
ad≠ãr
->
°©s
.
∫bc
;

516 
ªgs_buff
[89] = 
ad≠ãr
->
°©s
.
ruc
;

517 
ªgs_buff
[90] = 
ad≠ãr
->
°©s
.
rfc
;

518 
ªgs_buff
[91] = 
ad≠ãr
->
°©s
.
roc
;

519 
ªgs_buff
[92] = 
ad≠ãr
->
°©s
.
rjc
;

520 
ªgs_buff
[93] = 
ad≠ãr
->
°©s
.
mg¥c
;

521 
ªgs_buff
[94] = 
ad≠ãr
->
°©s
.
mgpdc
;

522 
ªgs_buff
[95] = 
ad≠ãr
->
°©s
.
mg±c
;

523 
ªgs_buff
[96] = 
ad≠ãr
->
°©s
.
t‹
;

524 
ªgs_buff
[98] = 
ad≠ãr
->
°©s
.
tŸ
;

525 
ªgs_buff
[100] = 
ad≠ãr
->
°©s
.
çr
;

526 
ªgs_buff
[101] = 
ad≠ãr
->
°©s
.
çt
;

527 
ªgs_buff
[102] = 
ad≠ãr
->
°©s
.
±c64
;

528 
ªgs_buff
[103] = 
ad≠ãr
->
°©s
.
±c127
;

529 
ªgs_buff
[104] = 
ad≠ãr
->
°©s
.
±c255
;

530 
ªgs_buff
[105] = 
ad≠ãr
->
°©s
.
±c511
;

531 
ªgs_buff
[106] = 
ad≠ãr
->
°©s
.
±c1023
;

532 
ªgs_buff
[107] = 
ad≠ãr
->
°©s
.
±c1522
;

533 
ªgs_buff
[108] = 
ad≠ãr
->
°©s
.
m±c
;

534 
ªgs_buff
[109] = 
ad≠ãr
->
°©s
.
b±c
;

535 
ªgs_buff
[110] = 
ad≠ãr
->
°©s
.
ts˘c
;

536 
ªgs_buff
[111] = 
ad≠ãr
->
°©s
.
üc
;

537 
ªgs_buff
[112] = 
ad≠ãr
->
°©s
.
Ωthc
;

538 
ªgs_buff
[113] = 
ad≠ãr
->
°©s
.
hg±c
;

539 
ªgs_buff
[114] = 
ad≠ãr
->
°©s
.
hg‹c
;

540 
ªgs_buff
[116] = 
ad≠ãr
->
°©s
.
hgŸc
;

541 
ªgs_buff
[118] = 
ad≠ãr
->
°©s
.
À√ºs
;

542 
ªgs_buff
[119] = 
ad≠ãr
->
°©s
.
scvpc
;

543 
ªgs_buff
[120] = 
ad≠ãr
->
°©s
.
hrmpc
;

545 
i
 = 0; i < 4; i++)

546 
ªgs_buff
[121 + 
i
] = 
	`rd32
(
	`E1000_SRRCTL
(i));

547 
i
 = 0; i < 4; i++)

548 
ªgs_buff
[125 + 
i
] = 
	`rd32
(
	`E1000_PSRTYPE
(i));

549 
i
 = 0; i < 4; i++)

550 
ªgs_buff
[129 + 
i
] = 
	`rd32
(
	`E1000_RDBAL
(i));

551 
i
 = 0; i < 4; i++)

552 
ªgs_buff
[133 + 
i
] = 
	`rd32
(
	`E1000_RDBAH
(i));

553 
i
 = 0; i < 4; i++)

554 
ªgs_buff
[137 + 
i
] = 
	`rd32
(
	`E1000_RDLEN
(i));

555 
i
 = 0; i < 4; i++)

556 
ªgs_buff
[141 + 
i
] = 
	`rd32
(
	`E1000_RDH
(i));

557 
i
 = 0; i < 4; i++)

558 
ªgs_buff
[145 + 
i
] = 
	`rd32
(
	`E1000_RDT
(i));

559 
i
 = 0; i < 4; i++)

560 
ªgs_buff
[149 + 
i
] = 
	`rd32
(
	`E1000_RXDCTL
(i));

562 
i
 = 0; i < 10; i++)

563 
ªgs_buff
[153 + 
i
] = 
	`rd32
(
	`E1000_EITR
(i));

564 
i
 = 0; i < 8; i++)

565 
ªgs_buff
[163 + 
i
] = 
	`rd32
(
	`E1000_IMIR
(i));

566 
i
 = 0; i < 8; i++)

567 
ªgs_buff
[171 + 
i
] = 
	`rd32
(
	`E1000_IMIREXT
(i));

568 
i
 = 0; i < 16; i++)

569 
ªgs_buff
[179 + 
i
] = 
	`rd32
(
	`E1000_RAL
(i));

570 
i
 = 0; i < 16; i++)

571 
ªgs_buff
[195 + 
i
] = 
	`rd32
(
	`E1000_RAH
(i));

573 
i
 = 0; i < 4; i++)

574 
ªgs_buff
[211 + 
i
] = 
	`rd32
(
	`E1000_TDBAL
(i));

575 
i
 = 0; i < 4; i++)

576 
ªgs_buff
[215 + 
i
] = 
	`rd32
(
	`E1000_TDBAH
(i));

577 
i
 = 0; i < 4; i++)

578 
ªgs_buff
[219 + 
i
] = 
	`rd32
(
	`E1000_TDLEN
(i));

579 
i
 = 0; i < 4; i++)

580 
ªgs_buff
[223 + 
i
] = 
	`rd32
(
	`E1000_TDH
(i));

581 
i
 = 0; i < 4; i++)

582 
ªgs_buff
[227 + 
i
] = 
	`rd32
(
	`E1000_TDT
(i));

583 
i
 = 0; i < 4; i++)

584 
ªgs_buff
[231 + 
i
] = 
	`rd32
(
	`E1000_TXDCTL
(i));

585 
i
 = 0; i < 4; i++)

586 
ªgs_buff
[235 + 
i
] = 
	`rd32
(
	`E1000_TDWBAL
(i));

587 
i
 = 0; i < 4; i++)

588 
ªgs_buff
[239 + 
i
] = 
	`rd32
(
	`E1000_TDWBAH
(i));

589 
i
 = 0; i < 4; i++)

590 
ªgs_buff
[243 + 
i
] = 
	`rd32
(
	`E1000_DCA_TXCTRL
(i));

592 
i
 = 0; i < 4; i++)

593 
ªgs_buff
[247 + 
i
] = 
	`rd32
(
	`E1000_IP4AT_REG
(i));

594 
i
 = 0; i < 4; i++)

595 
ªgs_buff
[251 + 
i
] = 
	`rd32
(
	`E1000_IP6AT_REG
(i));

596 
i
 = 0; i < 32; i++)

597 
ªgs_buff
[255 + 
i
] = 
	`rd32
(
	`E1000_WUPM_REG
(i));

598 
i
 = 0; i < 128; i++)

599 
ªgs_buff
[287 + 
i
] = 
	`rd32
(
	`E1000_FFMT_REG
(i));

600 
i
 = 0; i < 128; i++)

601 
ªgs_buff
[415 + 
i
] = 
	`rd32
(
	`E1000_FFVT_REG
(i));

602 
i
 = 0; i < 4; i++)

603 
ªgs_buff
[543 + 
i
] = 
	`rd32
(
	`E1000_FFLT_REG
(i));

605 
ªgs_buff
[547] = 
	`rd32
(
E1000_TDFH
);

606 
ªgs_buff
[548] = 
	`rd32
(
E1000_TDFT
);

607 
ªgs_buff
[549] = 
	`rd32
(
E1000_TDFHS
);

608 
ªgs_buff
[550] = 
	`rd32
(
E1000_TDFPC
);

610 
	}
}

612 
	$igb_gë_ì¥om_Àn
(
√t_devi˚
 *
√tdev
)

614 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

615  
ad≠ãr
->
hw
.
nvm
.
w‹d_size
 * 2;

616 
	}
}

618 
	$igb_gë_ì¥om
(
√t_devi˚
 *
√tdev
,

619 
ëhtoﬁ_ì¥om
 *
ì¥om
, 
u8
 *
byãs
)

621 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

622 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

623 
u16
 *
ì¥om_buff
;

624 
fú°_w‹d
, 
œ°_w‹d
;

625 
ªt_vÆ
 = 0;

626 
u16
 
i
;

628 i‡(
ì¥om
->
Àn
 == 0)

629  -
EINVAL
;

631 
ì¥om
->
magic
 = 
hw
->
víd‹_id
 | (hw->
devi˚_id
 << 16);

633 
fú°_w‹d
 = 
ì¥om
->
off£t
 >> 1;

634 
œ°_w‹d
 = (
ì¥om
->
off£t
 +Éïrom->
Àn
 - 1) >> 1;

636 
ì¥om_buff
 = 
	`kmÆloc
((
u16
) *

637 (
œ°_w‹d
 - 
fú°_w‹d
 + 1), 
GFP_KERNEL
);

638 i‡(!
ì¥om_buff
)

639  -
ENOMEM
;

641 i‡(
hw
->
nvm
.
ty≥
 =
e1000_nvm_ì¥om_•i
)

642 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
fú°_w‹d
,

643 
œ°_w‹d
 - 
fú°_w‹d
 + 1,

644 
ì¥om_buff
);

646 
i
 = 0; i < 
œ°_w‹d
 - 
fú°_w‹d
 + 1; i++) {

647 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
fú°_w‹d
 + 
i
, 1,

648 &
ì¥om_buff
[
i
]);

649 i‡(
ªt_vÆ
)

655 
i
 = 0; i < 
œ°_w‹d
 - 
fú°_w‹d
 + 1; i++)

656 
	`À16_to_˝us
(&
ì¥om_buff
[
i
]);

658 
	`mem˝y
(
byãs
, (
u8
 *)
ì¥om_buff
 + (
ì¥om
->
off£t
 & 1),

659 
ì¥om
->
Àn
);

660 
	`k‰ì
(
ì¥om_buff
);

662  
ªt_vÆ
;

663 
	}
}

665 
	$igb_£t_ì¥om
(
√t_devi˚
 *
√tdev
,

666 
ëhtoﬁ_ì¥om
 *
ì¥om
, 
u8
 *
byãs
)

668 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

669 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

670 
u16
 *
ì¥om_buff
;

671 *
±r
;

672 
max_Àn
, 
fú°_w‹d
, 
œ°_w‹d
, 
ªt_vÆ
 = 0;

673 
u16
 
i
;

675 i‡(
ì¥om
->
Àn
 == 0)

676  -
EOPNOTSUPP
;

678 i‡(
ì¥om
->
magic
 !(
hw
->
víd‹_id
 | (hw->
devi˚_id
 << 16)))

679  -
EFAULT
;

681 
max_Àn
 = 
hw
->
nvm
.
w‹d_size
 * 2;

683 
fú°_w‹d
 = 
ì¥om
->
off£t
 >> 1;

684 
œ°_w‹d
 = (
ì¥om
->
off£t
 +Éïrom->
Àn
 - 1) >> 1;

685 
ì¥om_buff
 = 
	`kmÆloc
(
max_Àn
, 
GFP_KERNEL
);

686 i‡(!
ì¥om_buff
)

687  -
ENOMEM
;

689 
±r
 = (*)
ì¥om_buff
;

691 i‡(
ì¥om
->
off£t
 & 1) {

694 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
fú°_w‹d
, 1,

695 &
ì¥om_buff
[0]);

696 
±r
++;

698 i‡(((
ì¥om
->
off£t
 +Éïrom->
Àn
Ë& 1Ë&& (
ªt_vÆ
 == 0)) {

701 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
œ°_w‹d
, 1,

702 &
ì¥om_buff
[
œ°_w‹d
 - 
fú°_w‹d
]);

706 
i
 = 0; i < 
œ°_w‹d
 - 
fú°_w‹d
 + 1; i++)

707 
	`À16_to_˝us
(&
ì¥om_buff
[
i
]);

709 
	`mem˝y
(
±r
, 
byãs
, 
ì¥om
->
Àn
);

711 
i
 = 0; i < 
œ°_w‹d
 - 
fú°_w‹d
 + 1; i++)

712 
ì¥om_buff
[
i
] = 
	`˝u_to_À16
(eeprom_buff[i]);

714 
ªt_vÆ
 = 
hw
->
nvm
.
›s
.
	`wrôe
(hw, 
fú°_w‹d
,

715 
œ°_w‹d
 - 
fú°_w‹d
 + 1, 
ì¥om_buff
);

719 i‡((
ªt_vÆ
 =0Ë&& ((
fú°_w‹d
 <
NVM_CHECKSUM_REG
)))

720 
	`igb_upd©e_nvm_checksum
(
hw
);

722 
	`k‰ì
(
ì¥om_buff
);

723  
ªt_vÆ
;

724 
	}
}

726 
	$igb_gë_drvöfo
(
√t_devi˚
 *
√tdev
,

727 
ëhtoﬁ_drvöfo
 *
drvöfo
)

729 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

730 
fúmw¨e_vîsi⁄
[32];

731 
u16
 
ì¥om_d©a
;

733 
	`°∫˝y
(
drvöfo
->
drivî
, 
igb_drivî_«me
, 32);

734 
	`°∫˝y
(
drvöfo
->
vîsi⁄
, 
igb_drivî_vîsi⁄
, 32);

738 
ad≠ãr
->
hw
.
nvm
.
›s
.
	`ªad
(&ad≠ãr->hw, 5, 1, &
ì¥om_d©a
);

739 
	`•rötf
(
fúmw¨e_vîsi⁄
, "%d.%d-%d",

740 (
ì¥om_d©a
 & 0xF000) >> 12,

741 (
ì¥om_d©a
 & 0x0FF0) >> 4,

742 
ì¥om_d©a
 & 0x000F);

744 
	`°∫˝y
(
drvöfo
->
fw_vîsi⁄
, 
fúmw¨e_vîsi⁄
, 32);

745 
	`°∫˝y
(
drvöfo
->
bus_öfo
, 
	`pci_«me
(
ad≠ãr
->
pdev
), 32);

746 
drvöfo
->
n_°©s
 = 
IGB_STATS_LEN
;

747 
drvöfo
->
ã°öfo_Àn
 = 
IGB_TEST_LEN
;

748 
drvöfo
->
ªgdump_Àn
 = 
	`igb_gë_ªgs_Àn
(
√tdev
);

749 
drvöfo
->
ìdump_Àn
 = 
	`igb_gë_ì¥om_Àn
(
√tdev
);

750 
	}
}

752 
	$igb_gë_rög∑øm
(
√t_devi˚
 *
√tdev
,

753 
ëhtoﬁ_rög∑øm
 *
rög
)

755 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

757 
rög
->
rx_max_≥ndög
 = 
IGB_MAX_RXD
;

758 
rög
->
tx_max_≥ndög
 = 
IGB_MAX_TXD
;

759 
rög
->
rx_möi_max_≥ndög
 = 0;

760 
rög
->
rx_jumbo_max_≥ndög
 = 0;

761 
rög
->
rx_≥ndög
 = 
ad≠ãr
->
rx_rög_cou¡
;

762 
rög
->
tx_≥ndög
 = 
ad≠ãr
->
tx_rög_cou¡
;

763 
rög
->
rx_möi_≥ndög
 = 0;

764 
rög
->
rx_jumbo_≥ndög
 = 0;

765 
	}
}

767 
	$igb_£t_rög∑øm
(
√t_devi˚
 *
√tdev
,

768 
ëhtoﬁ_rög∑øm
 *
rög
)

770 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

771 
igb_rög
 *
ãmp_rög
;

772 
i
, 
îr
 = 0;

773 
u16
 
√w_rx_cou¡
, 
√w_tx_cou¡
;

775 i‡((
rög
->
rx_möi_≥ndög
Ë|| (rög->
rx_jumbo_≥ndög
))

776  -
EINVAL
;

778 
√w_rx_cou¡
 = 
	`mö_t
(
u32
, 
rög
->
rx_≥ndög
, 
IGB_MAX_RXD
);

779 
√w_rx_cou¡
 = 
	`max_t
(
u16
,Çew_rx_cou¡, 
IGB_MIN_RXD
);

780 
√w_rx_cou¡
 = 
	`ALIGN
“ew_rx_cou¡, 
REQ_RX_DESCRIPTOR_MULTIPLE
);

782 
√w_tx_cou¡
 = 
	`mö_t
(
u32
, 
rög
->
tx_≥ndög
, 
IGB_MAX_TXD
);

783 
√w_tx_cou¡
 = 
	`max_t
(
u16
,Çew_tx_cou¡, 
IGB_MIN_TXD
);

784 
√w_tx_cou¡
 = 
	`ALIGN
“ew_tx_cou¡, 
REQ_TX_DESCRIPTOR_MULTIPLE
);

786 i‡((
√w_tx_cou¡
 =
ad≠ãr
->
tx_rög_cou¡
) &&

787 (
√w_rx_cou¡
 =
ad≠ãr
->
rx_rög_cou¡
)) {

792 
	`ã°_™d_£t_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
))

793 
	`m¶ìp
(1);

795 i‡(!
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
)) {

796 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

797 
ad≠ãr
->
tx_rög
[
i
]->
cou¡
 = 
√w_tx_cou¡
;

798 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

799 
ad≠ãr
->
rx_rög
[
i
]->
cou¡
 = 
√w_rx_cou¡
;

800 
ad≠ãr
->
tx_rög_cou¡
 = 
√w_tx_cou¡
;

801 
ad≠ãr
->
rx_rög_cou¡
 = 
√w_rx_cou¡
;

802 
˛ór_ª£t
;

805 i‡(
ad≠ãr
->
num_tx_queues
 >ád≠ãr->
num_rx_queues
)

806 
ãmp_rög
 = 
	`vmÆloc
(
ad≠ãr
->
num_tx_queues
 * (
igb_rög
));

808 
ãmp_rög
 = 
	`vmÆloc
(
ad≠ãr
->
num_rx_queues
 * (
igb_rög
));

810 i‡(!
ãmp_rög
) {

811 
îr
 = -
ENOMEM
;

812 
˛ór_ª£t
;

815 
	`igb_down
(
ad≠ãr
);

822 i‡(
√w_tx_cou¡
 !
ad≠ãr
->
tx_rög_cou¡
) {

823 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

824 
	`mem˝y
(&
ãmp_rög
[
i
], 
ad≠ãr
->
tx_rög
[i],

825 (
igb_rög
));

827 
ãmp_rög
[
i
].
cou¡
 = 
√w_tx_cou¡
;

828 
îr
 = 
	`igb_£tup_tx_ªsour˚s
(&
ãmp_rög
[
i
]);

829 i‡(
îr
) {

830 
i
) {

831 
i
--;

832 
	`igb_‰ì_tx_ªsour˚s
(&
ãmp_rög
[
i
]);

834 
îr_£tup
;

838 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

839 
	`igb_‰ì_tx_ªsour˚s
(
ad≠ãr
->
tx_rög
[
i
]);

841 
	`mem˝y
(
ad≠ãr
->
tx_rög
[
i
], &
ãmp_rög
[i],

842 (
igb_rög
));

845 
ad≠ãr
->
tx_rög_cou¡
 = 
√w_tx_cou¡
;

848 i‡(
√w_rx_cou¡
 !
ad≠ãr
->
rx_rög_cou¡
) {

849 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

850 
	`mem˝y
(&
ãmp_rög
[
i
], 
ad≠ãr
->
rx_rög
[i],

851 (
igb_rög
));

853 
ãmp_rög
[
i
].
cou¡
 = 
√w_rx_cou¡
;

854 
îr
 = 
	`igb_£tup_rx_ªsour˚s
(&
ãmp_rög
[
i
]);

855 i‡(
îr
) {

856 
i
) {

857 
i
--;

858 
	`igb_‰ì_rx_ªsour˚s
(&
ãmp_rög
[
i
]);

860 
îr_£tup
;

865 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

866 
	`igb_‰ì_rx_ªsour˚s
(
ad≠ãr
->
rx_rög
[
i
]);

868 
	`mem˝y
(
ad≠ãr
->
rx_rög
[
i
], &
ãmp_rög
[i],

869 (
igb_rög
));

872 
ad≠ãr
->
rx_rög_cou¡
 = 
√w_rx_cou¡
;

874 
îr_£tup
:

875 
	`igb_up
(
ad≠ãr
);

876 
	`v‰ì
(
ãmp_rög
);

877 
˛ór_ª£t
:

878 
	`˛ór_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
);

879  
îr
;

880 
	}
}

883 
	sigb_ªg_ã°
 {

884 
u16
 
	mªg
;

885 
u16
 
	mªg_off£t
;

886 
u16
 
	m¨øy_Àn
;

887 
u16
 
	mã°_ty≥
;

888 
u32
 
	mmask
;

889 
u32
 
	mwrôe
;

902 
	#PATTERN_TEST
 1

	)

903 
	#SET_READ_TEST
 2

	)

904 
	#WRITE_NO_TEST
 3

	)

905 
	#TABLE32_TEST
 4

	)

906 
	#TABLE64_TEST_LO
 5

	)

907 
	#TABLE64_TEST_HI
 6

	)

910 
igb_ªg_ã°
 
	gªg_ã°_i350
[] = {

911 { 
E1000_FCAL
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

912 { 
E1000_FCAH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

913 { 
E1000_FCT
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

914 { 
E1000_VET
, 0x100, 1, 
PATTERN_TEST
, 0xFFFF0000, 0xFFFF0000 },

915 { 
E1000_RDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

916 { 
E1000_RDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

917 { 
E1000_RDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

918 { 
E1000_RDBAL
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

919 { 
E1000_RDBAH
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

920 { 
E1000_RDLEN
(4), 0x40, 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

922 { 
E1000_RDT
(0), 0x100, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

923 { 
E1000_RDT
(4), 0x40, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

924 { 
E1000_FCRTH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFF0, 0x0000FFF0 },

925 { 
E1000_FCTTV
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

926 { 
E1000_TIPG
, 0x100, 1, 
PATTERN_TEST
, 0x3FFFFFFF, 0x3FFFFFFF },

927 { 
E1000_TDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

928 { 
E1000_TDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

929 { 
E1000_TDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

930 { 
E1000_TDBAL
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

931 { 
E1000_TDBAH
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

932 { 
E1000_TDLEN
(4), 0x40, 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

933 { 
E1000_TDT
(0), 0x100, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

934 { 
E1000_TDT
(4), 0x40, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

935 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

936 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB0FE, 0x003FFFFB },

937 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB0FE, 0xFFFFFFFF },

938 { 
E1000_TCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

939 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_LO
,

941 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_HI
,

943 { 
E1000_RA2
, 0, 16, 
TABLE64_TEST_LO
,

945 { 
E1000_RA2
, 0, 16, 
TABLE64_TEST_HI
,

947 { 
E1000_MTA
, 0, 128, 
TABLE32_TEST
,

953 
igb_ªg_ã°
 
	gªg_ã°_82580
[] = {

954 { 
E1000_FCAL
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

955 { 
E1000_FCAH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

956 { 
E1000_FCT
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

957 { 
E1000_VET
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

958 { 
E1000_RDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

959 { 
E1000_RDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

960 { 
E1000_RDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

961 { 
E1000_RDBAL
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

962 { 
E1000_RDBAH
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

963 { 
E1000_RDLEN
(4), 0x40, 4, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

965 { 
E1000_RDT
(0), 0x100, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

966 { 
E1000_RDT
(4), 0x40, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

967 { 
E1000_FCRTH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFF0, 0x0000FFF0 },

968 { 
E1000_FCTTV
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

969 { 
E1000_TIPG
, 0x100, 1, 
PATTERN_TEST
, 0x3FFFFFFF, 0x3FFFFFFF },

970 { 
E1000_TDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

971 { 
E1000_TDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

972 { 
E1000_TDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

973 { 
E1000_TDBAL
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

974 { 
E1000_TDBAH
(4), 0x40, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

975 { 
E1000_TDLEN
(4), 0x40, 4, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

976 { 
E1000_TDT
(0), 0x100, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

977 { 
E1000_TDT
(4), 0x40, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

978 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

979 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB0FE, 0x003FFFFB },

980 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB0FE, 0xFFFFFFFF },

981 { 
E1000_TCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

982 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_LO
,

984 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_HI
,

986 { 
E1000_RA2
, 0, 8, 
TABLE64_TEST_LO
,

988 { 
E1000_RA2
, 0, 8, 
TABLE64_TEST_HI
,

990 { 
E1000_MTA
, 0, 128, 
TABLE32_TEST
,

996 
igb_ªg_ã°
 
	gªg_ã°_82576
[] = {

997 { 
E1000_FCAL
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

998 { 
E1000_FCAH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

999 { 
E1000_FCT
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

1000 { 
E1000_VET
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1001 { 
E1000_RDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1002 { 
E1000_RDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1003 { 
E1000_RDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

1004 { 
E1000_RDBAL
(4), 0x40, 12, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1005 { 
E1000_RDBAH
(4), 0x40, 12, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1006 { 
E1000_RDLEN
(4), 0x40, 12, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

1008 { 
E1000_RXDCTL
(0), 0x100, 4, 
WRITE_NO_TEST
, 0, 
E1000_RXDCTL_QUEUE_ENABLE
 },

1009 { 
E1000_RXDCTL
(4), 0x40, 12, 
WRITE_NO_TEST
, 0, 
E1000_RXDCTL_QUEUE_ENABLE
 },

1011 { 
E1000_RDT
(0), 0x100, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1012 { 
E1000_RDT
(4), 0x40, 12, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1013 { 
E1000_RXDCTL
(0), 0x100, 4, 
WRITE_NO_TEST
, 0, 0 },

1014 { 
E1000_RXDCTL
(4), 0x40, 12, 
WRITE_NO_TEST
, 0, 0 },

1015 { 
E1000_FCRTH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFF0, 0x0000FFF0 },

1016 { 
E1000_FCTTV
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1017 { 
E1000_TIPG
, 0x100, 1, 
PATTERN_TEST
, 0x3FFFFFFF, 0x3FFFFFFF },

1018 { 
E1000_TDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1019 { 
E1000_TDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1020 { 
E1000_TDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

1021 { 
E1000_TDBAL
(4), 0x40, 12, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1022 { 
E1000_TDBAH
(4), 0x40, 12, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1023 { 
E1000_TDLEN
(4), 0x40, 12, 
PATTERN_TEST
, 0x000FFFF0, 0x000FFFFF },

1024 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

1025 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB0FE, 0x003FFFFB },

1026 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB0FE, 0xFFFFFFFF },

1027 { 
E1000_TCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

1028 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_LO
, 0xFFFFFFFF, 0xFFFFFFFF },

1029 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_HI
, 0x83FFFFFF, 0xFFFFFFFF },

1030 { 
E1000_RA2
, 0, 8, 
TABLE64_TEST_LO
, 0xFFFFFFFF, 0xFFFFFFFF },

1031 { 
E1000_RA2
, 0, 8, 
TABLE64_TEST_HI
, 0x83FFFFFF, 0xFFFFFFFF },

1032 { 
E1000_MTA
, 0, 128,
TABLE32_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1037 
igb_ªg_ã°
 
	gªg_ã°_82575
[] = {

1038 { 
E1000_FCAL
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1039 { 
E1000_FCAH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

1040 { 
E1000_FCT
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0xFFFFFFFF },

1041 { 
E1000_VET
, 0x100, 1, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1042 { 
E1000_RDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1043 { 
E1000_RDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1044 { 
E1000_RDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

1046 { 
E1000_RXDCTL
(0), 0x100, 4, 
WRITE_NO_TEST
, 0, 
E1000_RXDCTL_QUEUE_ENABLE
 },

1048 { 
E1000_RDT
(0), 0x100, 4, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1049 { 
E1000_RXDCTL
(0), 0x100, 4, 
WRITE_NO_TEST
, 0, 0 },

1050 { 
E1000_FCRTH
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFF0, 0x0000FFF0 },

1051 { 
E1000_FCTTV
, 0x100, 1, 
PATTERN_TEST
, 0x0000FFFF, 0x0000FFFF },

1052 { 
E1000_TIPG
, 0x100, 1, 
PATTERN_TEST
, 0x3FFFFFFF, 0x3FFFFFFF },

1053 { 
E1000_TDBAL
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFF80, 0xFFFFFFFF },

1054 { 
E1000_TDBAH
(0), 0x100, 4, 
PATTERN_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1055 { 
E1000_TDLEN
(0), 0x100, 4, 
PATTERN_TEST
, 0x000FFF80, 0x000FFFFF },

1056 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

1057 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB3FE, 0x003FFFFB },

1058 { 
E1000_RCTL
, 0x100, 1, 
SET_READ_TEST
, 0x04CFB3FE, 0xFFFFFFFF },

1059 { 
E1000_TCTL
, 0x100, 1, 
SET_READ_TEST
, 0xFFFFFFFF, 0x00000000 },

1060 { 
E1000_TXCW
, 0x100, 1, 
PATTERN_TEST
, 0xC000FFFF, 0x0000FFFF },

1061 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_LO
, 0xFFFFFFFF, 0xFFFFFFFF },

1062 { 
E1000_RA
, 0, 16, 
TABLE64_TEST_HI
, 0x800FFFFF, 0xFFFFFFFF },

1063 { 
E1000_MTA
, 0, 128, 
TABLE32_TEST
, 0xFFFFFFFF, 0xFFFFFFFF },

1067 
boﬁ
 
	$ªg_∑âîn_ã°
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
,

1068 
ªg
, 
u32
 
mask
, u32 
wrôe
)

1070 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1071 
u32
 
∑t
, 
vÆ
;

1072 c⁄° 
u32
 
_ã°
[] =

1074 
∑t
 = 0;Ö© < 
	`ARRAY_SIZE
(
_ã°
);Öat++) {

1075 
	`wr32
(
ªg
, (
_ã°
[
∑t
] & 
wrôe
));

1076 
vÆ
 = 
	`rd32
(
ªg
);

1077 i‡(
vÆ
 !(
_ã°
[
∑t
] & 
wrôe
 & 
mask
)) {

1078 
	`dev_îr
(&
ad≠ãr
->
pdev
->
dev
, "patternÅestÑeg %04X "

1080 
ªg
, 
vÆ
, (
_ã°
[
∑t
] & 
wrôe
 & 
mask
));

1081 *
d©a
 = 
ªg
;

1087 
	}
}

1089 
boﬁ
 
	$ªg_£t_™d_check
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
,

1090 
ªg
, 
u32
 
mask
, u32 
wrôe
)

1092 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1093 
u32
 
vÆ
;

1094 
	`wr32
(
ªg
, 
wrôe
 & 
mask
);

1095 
vÆ
 = 
	`rd32
(
ªg
);

1096 i‡((
wrôe
 & 
mask
Ë!(
vÆ
 & mask)) {

1097 
	`dev_îr
(&
ad≠ãr
->
pdev
->
dev
, "set/checkÑeg %04XÅest failed:"

1098 " gŸ 0x%08XÉx≥˘ed 0x%08X\n", 
ªg
,

1099 (
vÆ
 & 
mask
), (
wrôe
 & mask));

1100 *
d©a
 = 
ªg
;

1105 
	}
}

1107 
	#REG_PATTERN_TEST
(
ªg
, 
mask
, 
wrôe
) \

1109 i‡(
	`ªg_∑âîn_ã°
(
ad≠ãr
, 
d©a
, 
ªg
, 
mask
, 
wrôe
)) \

1111 } 0)

	)

1113 
	#REG_SET_AND_CHECK
(
ªg
, 
mask
, 
wrôe
) \

1115 i‡(
	`ªg_£t_™d_check
(
ad≠ãr
, 
d©a
, 
ªg
, 
mask
, 
wrôe
)) \

1117 } 0)

	)

1119 
	$igb_ªg_ã°
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1121 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1122 
igb_ªg_ã°
 *
ã°
;

1123 
u32
 
vÆue
, 
bef‹e
, 
a·î
;

1124 
u32
 
i
, 
toggÀ
;

1126 
ad≠ãr
->
hw
.
mac
.
ty≥
) {

1127 
e1000_i350
:

1128 
ã°
 = 
ªg_ã°_i350
;

1129 
toggÀ
 = 0x7FEFF3FF;

1131 
e1000_82580
:

1132 
ã°
 = 
ªg_ã°_82580
;

1133 
toggÀ
 = 0x7FEFF3FF;

1135 
e1000_82576
:

1136 
ã°
 = 
ªg_ã°_82576
;

1137 
toggÀ
 = 0x7FFFF3FF;

1140 
ã°
 = 
ªg_ã°_82575
;

1141 
toggÀ
 = 0x7FFFF3FF;

1150 
bef‹e
 = 
	`rd32
(
E1000_STATUS
);

1151 
vÆue
 = (
	`rd32
(
E1000_STATUS
Ë& 
toggÀ
);

1152 
	`wr32
(
E1000_STATUS
, 
toggÀ
);

1153 
a·î
 = 
	`rd32
(
E1000_STATUS
Ë& 
toggÀ
;

1154 i‡(
vÆue
 !
a·î
) {

1155 
	`dev_îr
(&
ad≠ãr
->
pdev
->
dev
, "failed STATUSÑegisterÅest "

1156 "gŸ: 0x%08XÉx≥˘ed: 0x%08X\n", 
a·î
, 
vÆue
);

1157 *
d©a
 = 1;

1161 
	`wr32
(
E1000_STATUS
, 
bef‹e
);

1166 
ã°
->
ªg
) {

1167 
i
 = 0; i < 
ã°
->
¨øy_Àn
; i++) {

1168 
ã°
->
ã°_ty≥
) {

1169 
PATTERN_TEST
:

1170 
	`REG_PATTERN_TEST
(
ã°
->
ªg
 +

1171 (
i
 * 
ã°
->
ªg_off£t
),

1172 
ã°
->
mask
,

1173 
ã°
->
wrôe
);

1175 
SET_READ_TEST
:

1176 
	`REG_SET_AND_CHECK
(
ã°
->
ªg
 +

1177 (
i
 * 
ã°
->
ªg_off£t
),

1178 
ã°
->
mask
,

1179 
ã°
->
wrôe
);

1181 
WRITE_NO_TEST
:

1182 
	`wrôñ
(
ã°
->
wrôe
,

1183 (
ad≠ãr
->
hw
.
hw_addr
 + 
ã°
->
ªg
)

1184 + (
i
 * 
ã°
->
ªg_off£t
));

1186 
TABLE32_TEST
:

1187 
	`REG_PATTERN_TEST
(
ã°
->
ªg
 + (
i
 * 4),

1188 
ã°
->
mask
,

1189 
ã°
->
wrôe
);

1191 
TABLE64_TEST_LO
:

1192 
	`REG_PATTERN_TEST
(
ã°
->
ªg
 + (
i
 * 8),

1193 
ã°
->
mask
,

1194 
ã°
->
wrôe
);

1196 
TABLE64_TEST_HI
:

1197 
	`REG_PATTERN_TEST
((
ã°
->
ªg
 + 4Ë+ (
i
 * 8),

1198 
ã°
->
mask
,

1199 
ã°
->
wrôe
);

1203 
ã°
++;

1206 *
d©a
 = 0;

1208 
	}
}

1210 
	$igb_ì¥om_ã°
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1212 
u16
 
ãmp
;

1213 
u16
 
checksum
 = 0;

1214 
u16
 
i
;

1216 *
d©a
 = 0;

1218 
i
 = 0; i < (
NVM_CHECKSUM_REG
 + 1); i++) {

1219 i‡((
ad≠ãr
->
hw
.
nvm
.
›s
.
	`ªad
(&ad≠ãr->hw, 
i
, 1, &
ãmp
)) < 0) {

1220 *
d©a
 = 1;

1223 
checksum
 +
ãmp
;

1227 i‡((
checksum
 !(
u16
Ë
NVM_SUM
Ë&& !(*
d©a
))

1228 *
d©a
 = 2;

1230  *
d©a
;

1231 
	}
}

1233 
úqªtu∫_t
 
	$igb_ã°_öå
(
úq
, *
d©a
)

1235 
igb_ad≠ãr
 *
ad≠ãr
 = (igb_ad≠ã∏*Ë
d©a
;

1236 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1238 
ad≠ãr
->
ã°_i¸
 |
	`rd32
(
E1000_ICR
);

1240  
IRQ_HANDLED
;

1241 
	}
}

1243 
	$igb_öå_ã°
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1245 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1246 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

1247 
u32
 
mask
, 
ics_mask
, 
i
 = 0, 
sh¨ed_öt
 = 
åue
;

1248 
u32
 
úq
 = 
ad≠ãr
->
pdev
->irq;

1250 *
d©a
 = 0;

1253 i‡(
ad≠ãr
->
msix_íåõs
) {

1254 i‡(
	`ªque°_úq
(
ad≠ãr
->
msix_íåõs
[0].
ve˘‹
,

1255 
igb_ã°_öå
, 0, 
√tdev
->
«me
, 
ad≠ãr
)) {

1256 *
d©a
 = 1;

1259 } i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_HAS_MSI
) {

1260 
sh¨ed_öt
 = 
Ál£
;

1261 i‡(
	`ªque°_úq
(
úq
,

1262 
igb_ã°_öå
, 0, 
√tdev
->
«me
, 
ad≠ãr
)) {

1263 *
d©a
 = 1;

1266 } i‡(!
	`ªque°_úq
(
úq
, 
igb_ã°_öå
, 
IRQF_PROBE_SHARED
,

1267 
√tdev
->
«me
, 
ad≠ãr
)) {

1268 
sh¨ed_öt
 = 
Ál£
;

1269 } i‡(
	`ªque°_úq
(
úq
, 
igb_ã°_öå
, 
IRQF_SHARED
,

1270 
√tdev
->
«me
, 
ad≠ãr
)) {

1271 *
d©a
 = 1;

1274 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "testing %s interrupt\n",

1275 (
sh¨ed_öt
 ? "shared" : "unshared"));

1278 
	`wr32
(
E1000_IMC
, ~0);

1279 
	`m¶ìp
(10);

1282 
hw
->
mac
.
ty≥
) {

1283 
e1000_82575
:

1284 
ics_mask
 = 0x37F47EDD;

1286 
e1000_82576
:

1287 
ics_mask
 = 0x77D4FBFD;

1289 
e1000_82580
:

1290 
ics_mask
 = 0x77DCFED5;

1292 
e1000_i350
:

1293 
ics_mask
 = 0x77DCFED5;

1296 
ics_mask
 = 0x7FFFFFFF;

1301 ; 
i
 < 31; i++) {

1303 
mask
 = 1 << 
i
;

1305 i‡(!(
mask
 & 
ics_mask
))

1308 i‡(!
sh¨ed_öt
) {

1315 
ad≠ãr
->
ã°_i¸
 = 0;

1318 
	`wr32
(
E1000_ICR
, ~0);

1320 
	`wr32
(
E1000_IMC
, 
mask
);

1321 
	`wr32
(
E1000_ICS
, 
mask
);

1322 
	`m¶ìp
(10);

1324 i‡(
ad≠ãr
->
ã°_i¸
 & 
mask
) {

1325 *
d©a
 = 3;

1336 
ad≠ãr
->
ã°_i¸
 = 0;

1339 
	`wr32
(
E1000_ICR
, ~0);

1341 
	`wr32
(
E1000_IMS
, 
mask
);

1342 
	`wr32
(
E1000_ICS
, 
mask
);

1343 
	`m¶ìp
(10);

1345 i‡(!(
ad≠ãr
->
ã°_i¸
 & 
mask
)) {

1346 *
d©a
 = 4;

1350 i‡(!
sh¨ed_öt
) {

1357 
ad≠ãr
->
ã°_i¸
 = 0;

1360 
	`wr32
(
E1000_ICR
, ~0);

1362 
	`wr32
(
E1000_IMC
, ~
mask
);

1363 
	`wr32
(
E1000_ICS
, ~
mask
);

1364 
	`m¶ìp
(10);

1366 i‡(
ad≠ãr
->
ã°_i¸
 & 
mask
) {

1367 *
d©a
 = 5;

1374 
	`wr32
(
E1000_IMC
, ~0);

1375 
	`m¶ìp
(10);

1378 i‡(
ad≠ãr
->
msix_íåõs
)

1379 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[0].
ve˘‹
,ádapter);

1381 
	`‰ì_úq
(
úq
, 
ad≠ãr
);

1383  *
d©a
;

1384 
	}
}

1386 
	$igb_‰ì_desc_rögs
(
igb_ad≠ãr
 *
ad≠ãr
)

1388 
	`igb_‰ì_tx_ªsour˚s
(&
ad≠ãr
->
ã°_tx_rög
);

1389 
	`igb_‰ì_rx_ªsour˚s
(&
ad≠ãr
->
ã°_rx_rög
);

1390 
	}
}

1392 
	$igb_£tup_desc_rögs
(
igb_ad≠ãr
 *
ad≠ãr
)

1394 
igb_rög
 *
tx_rög
 = &
ad≠ãr
->
ã°_tx_rög
;

1395 
igb_rög
 *
rx_rög
 = &
ad≠ãr
->
ã°_rx_rög
;

1396 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1397 
ªt_vÆ
;

1400 
tx_rög
->
cou¡
 = 
IGB_DEFAULT_TXD
;

1401 
tx_rög
->
dev
 = &
ad≠ãr
->
pdev
->dev;

1402 
tx_rög
->
√tdev
 = 
ad≠ãr
->netdev;

1403 
tx_rög
->
ªg_idx
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

1405 i‡(
	`igb_£tup_tx_ªsour˚s
(
tx_rög
)) {

1406 
ªt_vÆ
 = 1;

1407 
îr_nomem
;

1410 
	`igb_£tup_t˘l
(
ad≠ãr
);

1411 
	`igb_c⁄figuª_tx_rög
(
ad≠ãr
, 
tx_rög
);

1414 
rx_rög
->
cou¡
 = 
IGB_DEFAULT_RXD
;

1415 
rx_rög
->
dev
 = &
ad≠ãr
->
pdev
->dev;

1416 
rx_rög
->
√tdev
 = 
ad≠ãr
->netdev;

1417 
rx_rög
->
rx_buf„r_Àn
 = 
IGB_RXBUFFER_2048
;

1418 
rx_rög
->
ªg_idx
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

1420 i‡(
	`igb_£tup_rx_ªsour˚s
(
rx_rög
)) {

1421 
ªt_vÆ
 = 3;

1422 
îr_nomem
;

1426 
	`wr32
(
E1000_MRQC
, 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 << 3);

1429 
	`igb_£tup_r˘l
(
ad≠ãr
);

1430 
	`igb_c⁄figuª_rx_rög
(
ad≠ãr
, 
rx_rög
);

1432 
	`igb_Æloc_rx_buf„rs_adv
(
rx_rög
, 
	`igb_desc_unu£d
(rx_ring));

1436 
îr_nomem
:

1437 
	`igb_‰ì_desc_rögs
(
ad≠ãr
);

1438  
ªt_vÆ
;

1439 
	}
}

1441 
	$igb_phy_dißbÀ_ª˚ivî
(
igb_ad≠ãr
 *
ad≠ãr
)

1443 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1446 
	`igb_wrôe_phy_ªg
(
hw
, 29, 0x001F);

1447 
	`igb_wrôe_phy_ªg
(
hw
, 30, 0x8FFC);

1448 
	`igb_wrôe_phy_ªg
(
hw
, 29, 0x001A);

1449 
	`igb_wrôe_phy_ªg
(
hw
, 30, 0x8FF0);

1450 
	}
}

1452 
	$igb_öãgøãd_phy_lo›back
(
igb_ad≠ãr
 *
ad≠ãr
)

1454 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1455 
u32
 
˘æ_ªg
 = 0;

1457 
hw
->
mac
.
aut⁄eg
 = 
Ál£
;

1459 i‡(
hw
->
phy
.
ty≥
 =
e1000_phy_m88
) {

1461 
	`igb_wrôe_phy_ªg
(
hw
, 
M88E1000_PHY_SPEC_CTRL
, 0x0808);

1463 
	`igb_wrôe_phy_ªg
(
hw
, 
PHY_CONTROL
, 0x9140);

1465 
	`igb_wrôe_phy_ªg
(
hw
, 
PHY_CONTROL
, 0x8140);

1466 } i‡(
hw
->
phy
.
ty≥
 =
e1000_phy_82580
) {

1468 
	`igb_wrôe_phy_ªg
(
hw
, 
I82580_PHY_LBK_CTRL
, 0x8041);

1471 
˘æ_ªg
 = 
	`rd32
(
E1000_CTRL
);

1474 
	`igb_wrôe_phy_ªg
(
hw
, 
PHY_CONTROL
, 0x4140);

1477 
˘æ_ªg
 = 
	`rd32
(
E1000_CTRL
);

1478 
˘æ_ªg
 &~
E1000_CTRL_SPD_SEL
;

1479 
˘æ_ªg
 |(
E1000_CTRL_FRCSPD
 |

1480 
E1000_CTRL_FRCDPX
 |

1481 
E1000_CTRL_SPD_1000
 |

1482 
E1000_CTRL_FD
 |

1483 
E1000_CTRL_SLU
);

1485 i‡(
hw
->
phy
.
ty≥
 =
e1000_phy_m88
)

1486 
˘æ_ªg
 |
E1000_CTRL_ILOS
;

1488 
	`wr32
(
E1000_CTRL
, 
˘æ_ªg
);

1493 i‡(
hw
->
phy
.
ty≥
 =
e1000_phy_m88
)

1494 
	`igb_phy_dißbÀ_ª˚ivî
(
ad≠ãr
);

1496 
	`udñay
(500);

1499 
	}
}

1501 
	$igb_£t_phy_lo›back
(
igb_ad≠ãr
 *
ad≠ãr
)

1503  
	`igb_öãgøãd_phy_lo›back
(
ad≠ãr
);

1504 
	}
}

1506 
	$igb_£tup_lo›back_ã°
(
igb_ad≠ãr
 *
ad≠ãr
)

1508 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1509 
u32
 
ªg
;

1511 
ªg
 = 
	`rd32
(
E1000_CTRL_EXT
);

1514 i‡(
ªg
 & 
E1000_CTRL_EXT_LINK_MODE_MASK
) {

1515 
ªg
 = 
	`rd32
(
E1000_RCTL
);

1516 
ªg
 |
E1000_RCTL_LBM_TCVR
;

1517 
	`wr32
(
E1000_RCTL
, 
ªg
);

1519 
	`wr32
(
E1000_SCTL
, 
E1000_ENABLE_SERDES_LOOPBACK
);

1521 
ªg
 = 
	`rd32
(
E1000_CTRL
);

1522 
ªg
 &~(
E1000_CTRL_RFCE
 |

1523 
E1000_CTRL_TFCE
 |

1524 
E1000_CTRL_LRST
);

1525 
ªg
 |
E1000_CTRL_SLU
 |

1526 
E1000_CTRL_FD
;

1527 
	`wr32
(
E1000_CTRL
, 
ªg
);

1530 
ªg
 = 
	`rd32
(
E1000_CONNSW
);

1531 
ªg
 &~
E1000_CONNSW_ENRGSRC
;

1532 
	`wr32
(
E1000_CONNSW
, 
ªg
);

1535 
ªg
 = 
	`rd32
(
E1000_PCS_LCTL
);

1536 
ªg
 &~
E1000_PCS_LCTL_AN_ENABLE
;

1537 
ªg
 |
E1000_PCS_LCTL_FLV_LINK_UP
 |

1538 
E1000_PCS_LCTL_FSV_1000
 |

1539 
E1000_PCS_LCTL_FDV_FULL
 |

1540 
E1000_PCS_LCTL_FSD
 |

1541 
E1000_PCS_LCTL_FORCE_LINK
;

1542 
	`wr32
(
E1000_PCS_LCTL
, 
ªg
);

1547  
	`igb_£t_phy_lo›back
(
ad≠ãr
);

1548 
	}
}

1550 
	$igb_lo›back_˛ónup
(
igb_ad≠ãr
 *
ad≠ãr
)

1552 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1553 
u32
 
r˘l
;

1554 
u16
 
phy_ªg
;

1556 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

1557 
r˘l
 &~(
E1000_RCTL_LBM_TCVR
 | 
E1000_RCTL_LBM_MAC
);

1558 
	`wr32
(
E1000_RCTL
, 
r˘l
);

1560 
hw
->
mac
.
aut⁄eg
 = 
åue
;

1561 
	`igb_ªad_phy_ªg
(
hw
, 
PHY_CONTROL
, &
phy_ªg
);

1562 i‡(
phy_ªg
 & 
MII_CR_LOOPBACK
) {

1563 
phy_ªg
 &~
MII_CR_LOOPBACK
;

1564 
	`igb_wrôe_phy_ªg
(
hw
, 
PHY_CONTROL
, 
phy_ªg
);

1565 
	`igb_phy_sw_ª£t
(
hw
);

1567 
	}
}

1569 
	$igb_¸óã_lbã°_‰ame
(
sk_buff
 *
skb
,

1570 
‰ame_size
)

1572 
	`mem£t
(
skb
->
d©a
, 0xFF, 
‰ame_size
);

1573 
‰ame_size
 /= 2;

1574 
	`mem£t
(&
skb
->
d©a
[
‰ame_size
], 0xAA, frame_size - 1);

1575 
	`mem£t
(&
skb
->
d©a
[
‰ame_size
 + 10], 0xBE, 1);

1576 
	`mem£t
(&
skb
->
d©a
[
‰ame_size
 + 12], 0xAF, 1);

1577 
	}
}

1579 
	$igb_check_lbã°_‰ame
(
sk_buff
 *
skb
, 
‰ame_size
)

1581 
‰ame_size
 /= 2;

1582 i‡(*(
skb
->
d©a
 + 3) == 0xFF) {

1583 i‡((*(
skb
->
d©a
 + 
‰ame_size
 + 10) == 0xBE) &&

1584 (*(
skb
->
d©a
 + 
‰ame_size
 + 12) == 0xAF)) {

1589 
	}
}

1591 
	$igb_˛ón_ã°_rögs
(
igb_rög
 *
rx_rög
,

1592 
igb_rög
 *
tx_rög
,

1593 
size
)

1595 
e1000_adv_rx_desc
 *
rx_desc
;

1596 
igb_buf„r
 *
buf„r_öfo
;

1597 
rx_¡c
, 
tx_¡c
, 
cou¡
 = 0;

1598 
u32
 
°©îr
;

1601 
rx_¡c
 = 
rx_rög
->
√xt_to_˛ón
;

1602 
tx_¡c
 = 
tx_rög
->
√xt_to_˛ón
;

1603 
rx_desc
 = 
	`E1000_RX_DESC_ADV
(*
rx_rög
, 
rx_¡c
);

1604 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

1606 
°©îr
 & 
E1000_RXD_STAT_DD
) {

1608 
buf„r_öfo
 = &
rx_rög
->buf„r_öfo[
rx_¡c
];

1611 
	`dma_unm≠_sögÀ
(
rx_rög
->
dev
,

1612 
buf„r_öfo
->
dma
,

1613 
rx_rög
->
rx_buf„r_Àn
,

1614 
DMA_FROM_DEVICE
);

1615 
buf„r_öfo
->
dma
 = 0;

1618 i‡(!
	`igb_check_lbã°_‰ame
(
buf„r_öfo
->
skb
, 
size
))

1619 
cou¡
++;

1622 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
tx_¡c
];

1623 
	`igb_unm≠_™d_‰ì_tx_ªsour˚
(
tx_rög
, 
buf„r_öfo
);

1626 
rx_¡c
++;

1627 i‡(
rx_¡c
 =
rx_rög
->
cou¡
)

1628 
rx_¡c
 = 0;

1629 
tx_¡c
++;

1630 i‡(
tx_¡c
 =
tx_rög
->
cou¡
)

1631 
tx_¡c
 = 0;

1634 
rx_desc
 = 
	`E1000_RX_DESC_ADV
(*
rx_rög
, 
rx_¡c
);

1635 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

1639 
	`igb_Æloc_rx_buf„rs_adv
(
rx_rög
, 
cou¡
);

1640 
rx_rög
->
√xt_to_˛ón
 = 
rx_¡c
;

1641 
tx_rög
->
√xt_to_˛ón
 = 
tx_¡c
;

1643  
cou¡
;

1644 
	}
}

1646 
	$igb_run_lo›back_ã°
(
igb_ad≠ãr
 *
ad≠ãr
)

1648 
igb_rög
 *
tx_rög
 = &
ad≠ãr
->
ã°_tx_rög
;

1649 
igb_rög
 *
rx_rög
 = &
ad≠ãr
->
ã°_rx_rög
;

1650 
i
, 
j
, 
lc
, 
good_˙t
, 
ªt_vÆ
 = 0;

1651 
size
 = 1024;

1652 
√tdev_tx_t
 
tx_ªt_vÆ
;

1653 
sk_buff
 *
skb
;

1656 
skb
 = 
	`ukmem_skb_Æloc
(
size
);

1658 i‡(!
skb
)

1662 
	`igb_¸óã_lbã°_‰ame
(
skb
, 
size
);

1663 
	`skb_put
(
skb
, 
size
);

1671 i‡(
rx_rög
->
cou¡
 <
tx_rög
->count)

1672 
lc
 = ((
tx_rög
->
cou¡
 / 64) * 2) + 1;

1674 
lc
 = ((
rx_rög
->
cou¡
 / 64) * 2) + 1;

1676 
j
 = 0; j <
lc
; j++) {

1678 
good_˙t
 = 0;

1681 
i
 = 0; i < 64; i++) {

1682 
	`skb_gë
(
skb
);

1683 
tx_ªt_vÆ
 = 
	`igb_xmô_‰ame_rög_adv
(
skb
, 
tx_rög
);

1684 i‡(
tx_ªt_vÆ
 =
NETDEV_TX_OK
)

1685 
good_˙t
++;

1688 i‡(
good_˙t
 != 64) {

1689 
ªt_vÆ
 = 12;

1694 
	`m¶ìp
(200);

1696 
good_˙t
 = 
	`igb_˛ón_ã°_rögs
(
rx_rög
, 
tx_rög
, 
size
);

1697 i‡(
good_˙t
 != 64) {

1698 
ªt_vÆ
 = 13;

1704 
	`k‰ì_skb
(
skb
);

1706  
ªt_vÆ
;

1707 
	}
}

1709 
	$igb_lo›back_ã°
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1713 i‡(
	`igb_check_ª£t_block
(&
ad≠ãr
->
hw
)) {

1714 
	`dev_îr
(&
ad≠ãr
->
pdev
->
dev
,

1717 *
d©a
 = 0;

1718 
out
;

1720 *
d©a
 = 
	`igb_£tup_desc_rögs
(
ad≠ãr
);

1721 i‡(*
d©a
)

1722 
out
;

1723 *
d©a
 = 
	`igb_£tup_lo›back_ã°
(
ad≠ãr
);

1724 i‡(*
d©a
)

1725 
îr_lo›back
;

1726 *
d©a
 = 
	`igb_run_lo›back_ã°
(
ad≠ãr
);

1727 
	`igb_lo›back_˛ónup
(
ad≠ãr
);

1729 
îr_lo›back
:

1730 
	`igb_‰ì_desc_rögs
(
ad≠ãr
);

1731 
out
:

1732  *
d©a
;

1733 
	}
}

1735 
	$igb_lök_ã°
(
igb_ad≠ãr
 *
ad≠ãr
, 
u64
 *
d©a
)

1737 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1738 *
d©a
 = 0;

1739 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_öã∫Æ_£rdes
) {

1740 
i
 = 0;

1741 
hw
->
mac
.
£rdes_has_lök
 = 
Ál£
;

1746 
hw
->
mac
.
›s
.
	`check_f‹_lök
(&
ad≠ãr
->hw);

1747 i‡(
hw
->
mac
.
£rdes_has_lök
)

1748  *
d©a
;

1749 
	`m¶ìp
(20);

1750 } 
i
++ < 3750);

1752 *
d©a
 = 1;

1754 
hw
->
mac
.
›s
.
	`check_f‹_lök
(&
ad≠ãr
->hw);

1755 i‡(
hw
->
mac
.
aut⁄eg
)

1756 
	`m¶ìp
(4000);

1758 i‡(!(
	`rd32
(
E1000_STATUS
Ë& 
E1000_STATUS_LU
))

1759 *
d©a
 = 1;

1761  *
d©a
;

1762 
	}
}

1764 
	$igb_düg_ã°
(
√t_devi˚
 *
√tdev
,

1765 
ëhtoﬁ_ã°
 *
ëh_ã°
, 
u64
 *
d©a
)

1767 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1768 
u16
 
aut⁄eg_advîti£d
;

1769 
u8
 
f‹˚d_•ìd_du∂ex
, 
aut⁄eg
;

1770 
boﬁ
 
if_ru¬ög
 = 
	`√tif_ru¬ög
(
√tdev
);

1772 
	`£t_bô
(
__IGB_TESTING
, &
ad≠ãr
->
°©e
);

1773 i‡(
ëh_ã°
->
Êags
 =
ETH_TEST_FL_OFFLINE
) {

1777 
aut⁄eg_advîti£d
 = 
ad≠ãr
->
hw
.
phy
.autoneg_advertised;

1778 
f‹˚d_•ìd_du∂ex
 = 
ad≠ãr
->
hw
.
mac
.forced_speed_duplex;

1779 
aut⁄eg
 = 
ad≠ãr
->
hw
.
mac
.autoneg;

1781 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "offlineÅesting starting\n");

1784 
	`igb_powî_up_lök
(
ad≠ãr
);

1788 i‡(
	`igb_lök_ã°
(
ad≠ãr
, &
d©a
[4]))

1789 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1791 i‡(
if_ru¬ög
)

1793 
	`dev_˛o£
(
√tdev
);

1795 
	`igb_ª£t
(
ad≠ãr
);

1797 i‡(
	`igb_ªg_ã°
(
ad≠ãr
, &
d©a
[0]))

1798 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1800 
	`igb_ª£t
(
ad≠ãr
);

1801 i‡(
	`igb_ì¥om_ã°
(
ad≠ãr
, &
d©a
[1]))

1802 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1804 
	`igb_ª£t
(
ad≠ãr
);

1805 i‡(
	`igb_öå_ã°
(
ad≠ãr
, &
d©a
[2]))

1806 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1808 
	`igb_ª£t
(
ad≠ãr
);

1810 
	`igb_powî_up_lök
(
ad≠ãr
);

1811 i‡(
	`igb_lo›back_ã°
(
ad≠ãr
, &
d©a
[3]))

1812 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1815 
ad≠ãr
->
hw
.
phy
.
aut⁄eg_advîti£d
 =áutoneg_advertised;

1816 
ad≠ãr
->
hw
.
mac
.
f‹˚d_•ìd_du∂ex
 = forced_speed_duplex;

1817 
ad≠ãr
->
hw
.
mac
.
aut⁄eg
 =áutoneg;

1820 
ad≠ãr
->
hw
.
phy
.
aut⁄eg_waô_to_com∂ëe
 = 
åue
;

1821 
	`igb_ª£t
(
ad≠ãr
);

1822 
ad≠ãr
->
hw
.
phy
.
aut⁄eg_waô_to_com∂ëe
 = 
Ál£
;

1824 
	`˛ór_bô
(
__IGB_TESTING
, &
ad≠ãr
->
°©e
);

1825 i‡(
if_ru¬ög
)

1826 
	`dev_›í
(
√tdev
);

1828 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "onlineÅesting starting\n");

1831 i‡(!
	`√tif_ˇºõr_ok
(
√tdev
)) {

1832 
d©a
[4] = 0;

1834 i‡(
	`igb_lök_ã°
(
ad≠ãr
, &
d©a
[4]))

1835 
ëh_ã°
->
Êags
 |
ETH_TEST_FL_FAILED
;

1839 
d©a
[0] = 0;

1840 
d©a
[1] = 0;

1841 
d©a
[2] = 0;

1842 
d©a
[3] = 0;

1844 
	`˛ór_bô
(
__IGB_TESTING
, &
ad≠ãr
->
°©e
);

1846 
	`m¶ìp_öãºu±ibÀ
(4 * 1000);

1847 
	}
}

1849 
	$igb_wﬁ_ex˛usi⁄
(
igb_ad≠ãr
 *
ad≠ãr
,

1850 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

1852 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1853 
ªtvÆ
 = 1;

1855 
hw
->
devi˚_id
) {

1856 
E1000_DEV_ID_82575GB_QUAD_COPPER
:

1858 
wﬁ
->
suµ‹ãd
 = 0;

1860 
E1000_DEV_ID_82575EB_FIBER_SERDES
:

1861 
E1000_DEV_ID_82576_FIBER
:

1862 
E1000_DEV_ID_82576_SERDES
:

1864 i‡(
	`rd32
(
E1000_STATUS
Ë& 
E1000_STATUS_FUNC_1
) {

1865 
wﬁ
->
suµ‹ãd
 = 0;

1869 
ªtvÆ
 = 0;

1871 
E1000_DEV_ID_82576_QUAD_COPPER
:

1872 
E1000_DEV_ID_82576_QUAD_COPPER_ET2
:

1874 i‡(!(
ad≠ãr
->
Êags
 & 
IGB_FLAG_QUAD_PORT_A
)) {

1875 
wﬁ
->
suµ‹ãd
 = 0;

1879 
ªtvÆ
 = 0;

1885 i‡((
	`rd32
(
E1000_STATUS
Ë& 
E1000_STATUS_FUNC_MASK
) &&

1886 !
ad≠ãr
->
ì¥om_wﬁ
) {

1887 
wﬁ
->
suµ‹ãd
 = 0;

1891 
ªtvÆ
 = 0;

1894  
ªtvÆ
;

1895 
	}
}

1897 
	$igb_gë_wﬁ
(
√t_devi˚
 *
√tdev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

1899 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1901 
wﬁ
->
suµ‹ãd
 = 
WAKE_UCAST
 | 
WAKE_MCAST
 |

1902 
WAKE_BCAST
 | 
WAKE_MAGIC
 |

1903 
WAKE_PHY
;

1904 
wﬁ
->
wﬁ›ts
 = 0;

1908 i‡(
	`igb_wﬁ_ex˛usi⁄
(
ad≠ãr
, 
wﬁ
) ||

1909 !
	`devi˚_ˇn_wakeup
(&
ad≠ãr
->
pdev
->
dev
))

1913 
ad≠ãr
->
hw
.
devi˚_id
) {

1918 i‡(
ad≠ãr
->
wﬁ
 & 
E1000_WUFC_EX
)

1919 
wﬁ
->
wﬁ›ts
 |
WAKE_UCAST
;

1920 i‡(
ad≠ãr
->
wﬁ
 & 
E1000_WUFC_MC
)

1921 
wﬁ
->
wﬁ›ts
 |
WAKE_MCAST
;

1922 i‡(
ad≠ãr
->
wﬁ
 & 
E1000_WUFC_BC
)

1923 
wﬁ
->
wﬁ›ts
 |
WAKE_BCAST
;

1924 i‡(
ad≠ãr
->
wﬁ
 & 
E1000_WUFC_MAG
)

1925 
wﬁ
->
wﬁ›ts
 |
WAKE_MAGIC
;

1926 i‡(
ad≠ãr
->
wﬁ
 & 
E1000_WUFC_LNKC
)

1927 
wﬁ
->
wﬁ›ts
 |
WAKE_PHY
;

1928 
	}
}

1930 
	$igb_£t_wﬁ
(
√t_devi˚
 *
√tdev
, 
ëhtoﬁ_wﬁöfo
 *
wﬁ
)

1932 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1934 i‡(
wﬁ
->
wﬁ›ts
 & (
WAKE_ARP
 | 
WAKE_MAGICSECURE
))

1935  -
EOPNOTSUPP
;

1937 i‡(
	`igb_wﬁ_ex˛usi⁄
(
ad≠ãr
, 
wﬁ
) ||

1938 !
	`devi˚_ˇn_wakeup
(&
ad≠ãr
->
pdev
->
dev
))

1939  
wﬁ
->
wﬁ›ts
 ? -
EOPNOTSUPP
 : 0;

1942 
ad≠ãr
->
wﬁ
 = 0;

1944 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_UCAST
)

1945 
ad≠ãr
->
wﬁ
 |
E1000_WUFC_EX
;

1946 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_MCAST
)

1947 
ad≠ãr
->
wﬁ
 |
E1000_WUFC_MC
;

1948 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_BCAST
)

1949 
ad≠ãr
->
wﬁ
 |
E1000_WUFC_BC
;

1950 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_MAGIC
)

1951 
ad≠ãr
->
wﬁ
 |
E1000_WUFC_MAG
;

1952 i‡(
wﬁ
->
wﬁ›ts
 & 
WAKE_PHY
)

1953 
ad≠ãr
->
wﬁ
 |
E1000_WUFC_LNKC
;

1954 
	`devi˚_£t_wakeup_íabÀ
(&
ad≠ãr
->
pdev
->
dev
,ád≠ãr->
wﬁ
);

1957 
	}
}

1960 
	#IGB_LED_ON
 0

	)

1962 
	$igb_phys_id
(
√t_devi˚
 *
√tdev
, 
u32
 
d©a
)

1964 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1965 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1966 
timeout
;

1968 
timeout
 = 
d©a
 * 1000;

1974 i‡(!
timeout
 ||Åimeouà> 
UINT_MAX
)

1975 
timeout
 = 
UINT_MAX
;

1977 
	`igb_blök_Àd
(
hw
);

1978 
	`m¶ìp_öãºu±ibÀ
(
timeout
);

1980 
	`igb_Àd_off
(
hw
);

1981 
	`˛ór_bô
(
IGB_LED_ON
, &
ad≠ãr
->
Àd_°©us
);

1982 
	`igb_˛ónup_Àd
(
hw
);

1985 
	}
}

1987 
	$igb_£t_cﬂÀs˚
(
√t_devi˚
 *
√tdev
,

1988 
ëhtoﬁ_cﬂÀs˚
 *
ec
)

1990 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1991 
i
;

1993 i‡((
ec
->
rx_cﬂÀs˚_u£cs
 > 
IGB_MAX_ITR_USECS
) ||

1994 ((
ec
->
rx_cﬂÀs˚_u£cs
 > 3) &&

1995 (
ec
->
rx_cﬂÀs˚_u£cs
 < 
IGB_MIN_ITR_USECS
)) ||

1996 (
ec
->
rx_cﬂÀs˚_u£cs
 == 2))

1997  -
EINVAL
;

1999 i‡((
ec
->
tx_cﬂÀs˚_u£cs
 > 
IGB_MAX_ITR_USECS
) ||

2000 ((
ec
->
tx_cﬂÀs˚_u£cs
 > 3) &&

2001 (
ec
->
tx_cﬂÀs˚_u£cs
 < 
IGB_MIN_ITR_USECS
)) ||

2002 (
ec
->
tx_cﬂÀs˚_u£cs
 == 2))

2003  -
EINVAL
;

2005 i‡((
ad≠ãr
->
Êags
 & 
IGB_FLAG_QUEUE_PAIRS
Ë&& 
ec
->
tx_cﬂÀs˚_u£cs
)

2006  -
EINVAL
;

2009 i‡(
ec
->
rx_cﬂÀs˚_u£cs
 &&Éc->rx_coalesce_usecs <= 3)

2010 
ad≠ãr
->
rx_ôr_£âög
 = 
ec
->
rx_cﬂÀs˚_u£cs
;

2012 
ad≠ãr
->
rx_ôr_£âög
 = 
ec
->
rx_cﬂÀs˚_u£cs
 << 2;

2015 i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_QUEUE_PAIRS
)

2016 
ad≠ãr
->
tx_ôr_£âög
 =ád≠ãr->
rx_ôr_£âög
;

2017 i‡(
ec
->
tx_cﬂÀs˚_u£cs
 &&Éc->tx_coalesce_usecs <= 3)

2018 
ad≠ãr
->
tx_ôr_£âög
 = 
ec
->
tx_cﬂÀs˚_u£cs
;

2020 
ad≠ãr
->
tx_ôr_£âög
 = 
ec
->
tx_cﬂÀs˚_u£cs
 << 2;

2022 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

2023 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

2024 i‡(
q_ve˘‹
->
rx_rög
)

2025 
q_ve˘‹
->
ôr_vÆ
 = 
ad≠ãr
->
rx_ôr_£âög
;

2027 
q_ve˘‹
->
ôr_vÆ
 = 
ad≠ãr
->
tx_ôr_£âög
;

2028 i‡(
q_ve˘‹
->
ôr_vÆ
 && q_vector->itr_val <= 3)

2029 
q_ve˘‹
->
ôr_vÆ
 = 
IGB_START_ITR
;

2030 
q_ve˘‹
->
£t_ôr
 = 1;

2034 
	}
}

2036 
	$igb_gë_cﬂÀs˚
(
√t_devi˚
 *
√tdev
,

2037 
ëhtoﬁ_cﬂÀs˚
 *
ec
)

2039 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2041 i‡(
ad≠ãr
->
rx_ôr_£âög
 <= 3)

2042 
ec
->
rx_cﬂÀs˚_u£cs
 = 
ad≠ãr
->
rx_ôr_£âög
;

2044 
ec
->
rx_cﬂÀs˚_u£cs
 = 
ad≠ãr
->
rx_ôr_£âög
 >> 2;

2046 i‡(!(
ad≠ãr
->
Êags
 & 
IGB_FLAG_QUEUE_PAIRS
)) {

2047 i‡(
ad≠ãr
->
tx_ôr_£âög
 <= 3)

2048 
ec
->
tx_cﬂÀs˚_u£cs
 = 
ad≠ãr
->
tx_ôr_£âög
;

2050 
ec
->
tx_cﬂÀs˚_u£cs
 = 
ad≠ãr
->
tx_ôr_£âög
 >> 2;

2054 
	}
}

2056 
	$igb_nway_ª£t
(
√t_devi˚
 *
√tdev
)

2058 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2059 i‡(
	`√tif_ru¬ög
(
√tdev
))

2060 
	`igb_ªöô_locked
(
ad≠ãr
);

2062 
	}
}

2064 
	$igb_gë_s£t_cou¡
(
√t_devi˚
 *
√tdev
, 
s£t
)

2066 
s£t
) {

2067 
ETH_SS_STATS
:

2068  
IGB_STATS_LEN
;

2069 
ETH_SS_TEST
:

2070  
IGB_TEST_LEN
;

2072  -
ENOTSUPP
;

2074 
	}
}

2076 
	$igb_gë_ëhtoﬁ_°©s
(
√t_devi˚
 *
√tdev
,

2077 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
)

2079 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2080 
√t_devi˚_°©s
 *
√t_°©s
 = &
√tdev
->
°©s
;

2081 
u64
 *
queue_°©
;

2082 
i
, 
j
, 
k
;

2083 *
p
;

2085 
	`igb_upd©e_°©s
(
ad≠ãr
);

2087 
i
 = 0; i < 
IGB_GLOBAL_STATS_LEN
; i++) {

2088 
p
 = (*)
ad≠ãr
 + 
igb_g°rögs_°©s
[
i
].
°©_off£t
;

2089 
d©a
[
i
] = (
igb_g°rögs_°©s
[i].
sizeof_°©
 ==

2090 (
u64
)Ë? *(u64 *)
p
 : *(
u32
 *)p;

2092 
j
 = 0; j < 
IGB_NETDEV_STATS_LEN
; j++, 
i
++) {

2093 
p
 = (*)
√t_°©s
 + 
igb_g°rögs_√t_°©s
[
j
].
°©_off£t
;

2094 
d©a
[
i
] = (
igb_g°rögs_√t_°©s
[
j
].
sizeof_°©
 ==

2095 (
u64
)Ë? *(u64 *)
p
 : *(
u32
 *)p;

2097 
j
 = 0; j < 
ad≠ãr
->
num_tx_queues
; j++) {

2098 
queue_°©
 = (
u64
 *)&
ad≠ãr
->
tx_rög
[
j
]->
tx_°©s
;

2099 
k
 = 0; k < 
IGB_TX_QUEUE_STATS_LEN
; k++, 
i
++)

2100 
d©a
[
i
] = 
queue_°©
[
k
];

2102 
j
 = 0; j < 
ad≠ãr
->
num_rx_queues
; j++) {

2103 
queue_°©
 = (
u64
 *)&
ad≠ãr
->
rx_rög
[
j
]->
rx_°©s
;

2104 
k
 = 0; k < 
IGB_RX_QUEUE_STATS_LEN
; k++, 
i
++)

2105 
d©a
[
i
] = 
queue_°©
[
k
];

2107 
	}
}

2109 
	$igb_gë_°rögs
(
√t_devi˚
 *
√tdev
, 
u32
 
°rög£t
, 
u8
 *
d©a
)

2111 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2112 
u8
 *
p
 = 
d©a
;

2113 
i
;

2115 
°rög£t
) {

2116 
ETH_SS_TEST
:

2117 
	`mem˝y
(
d©a
, *
igb_g°rögs_ã°
,

2118 
IGB_TEST_LEN
*
ETH_GSTRING_LEN
);

2120 
ETH_SS_STATS
:

2121 
i
 = 0; i < 
IGB_GLOBAL_STATS_LEN
; i++) {

2122 
	`mem˝y
(
p
, 
igb_g°rögs_°©s
[
i
].
°©_°rög
,

2123 
ETH_GSTRING_LEN
);

2124 
p
 +
ETH_GSTRING_LEN
;

2126 
i
 = 0; i < 
IGB_NETDEV_STATS_LEN
; i++) {

2127 
	`mem˝y
(
p
, 
igb_g°rögs_√t_°©s
[
i
].
°©_°rög
,

2128 
ETH_GSTRING_LEN
);

2129 
p
 +
ETH_GSTRING_LEN
;

2131 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

2132 
	`•rötf
(
p
, "tx_queue_%u_∑ckës", 
i
);

2133 
p
 +
ETH_GSTRING_LEN
;

2134 
	`•rötf
(
p
, "tx_queue_%u_byãs", 
i
);

2135 
p
 +
ETH_GSTRING_LEN
;

2136 
	`•rötf
(
p
, "tx_queue_%u_ª°¨t", 
i
);

2137 
p
 +
ETH_GSTRING_LEN
;

2139 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

2140 
	`•rötf
(
p
, "rx_queue_%u_∑ckës", 
i
);

2141 
p
 +
ETH_GSTRING_LEN
;

2142 
	`•rötf
(
p
, "rx_queue_%u_byãs", 
i
);

2143 
p
 +
ETH_GSTRING_LEN
;

2144 
	`•rötf
(
p
, "rx_queue_%u_dr›s", 
i
);

2145 
p
 +
ETH_GSTRING_LEN
;

2146 
	`•rötf
(
p
, "rx_queue_%u_csum_îr", 
i
);

2147 
p
 +
ETH_GSTRING_LEN
;

2148 
	`•rötf
(
p
, "rx_queue_%u_Æloc_Áûed", 
i
);

2149 
p
 +
ETH_GSTRING_LEN
;

2154 
	}
}

2156 c⁄° 
ëhtoﬁ_›s
 
	gigb_ëhtoﬁ_›s
 = {

2157 .
gë_£âögs
 = 
igb_gë_£âögs
,

2158 .
	g£t_£âögs
 = 
igb_£t_£âögs
,

2159 .
	ggë_drvöfo
 = 
igb_gë_drvöfo
,

2160 .
	ggë_ªgs_Àn
 = 
igb_gë_ªgs_Àn
,

2161 .
	ggë_ªgs
 = 
igb_gë_ªgs
,

2162 .
	ggë_wﬁ
 = 
igb_gë_wﬁ
,

2163 .
	g£t_wﬁ
 = 
igb_£t_wﬁ
,

2164 .
	ggë_msgÀvñ
 = 
igb_gë_msgÀvñ
,

2165 .
	g£t_msgÀvñ
 = 
igb_£t_msgÀvñ
,

2166 .
	gnway_ª£t
 = 
igb_nway_ª£t
,

2167 .
	ggë_lök
 = 
igb_gë_lök
,

2168 .
	ggë_ì¥om_Àn
 = 
igb_gë_ì¥om_Àn
,

2169 .
	ggë_ì¥om
 = 
igb_gë_ì¥om
,

2170 .
	g£t_ì¥om
 = 
igb_£t_ì¥om
,

2171 .
	ggë_rög∑øm
 = 
igb_gë_rög∑øm
,

2172 .
	g£t_rög∑øm
 = 
igb_£t_rög∑øm
,

2173 .
	ggë_∑u£∑øm
 = 
igb_gë_∑u£∑øm
,

2174 .
	g£t_∑u£∑øm
 = 
igb_£t_∑u£∑øm
,

2175 .
	ggë_rx_csum
 = 
igb_gë_rx_csum
,

2176 .
	g£t_rx_csum
 = 
igb_£t_rx_csum
,

2177 .
	ggë_tx_csum
 = 
igb_gë_tx_csum
,

2178 .
	g£t_tx_csum
 = 
igb_£t_tx_csum
,

2179 .
	ggë_sg
 = 
ëhtoﬁ_›_gë_sg
,

2180 .
	g£t_sg
 = 
ëhtoﬁ_›_£t_sg
,

2181 .
	ggë_tso
 = 
ëhtoﬁ_›_gë_tso
,

2182 .
	g£t_tso
 = 
igb_£t_tso
,

2183 .
	g£lf_ã°
 = 
igb_düg_ã°
,

2184 .
	ggë_°rögs
 = 
igb_gë_°rögs
,

2185 .
	gphys_id
 = 
igb_phys_id
,

2186 .
	ggë_s£t_cou¡
 = 
igb_gë_s£t_cou¡
,

2187 .
	ggë_ëhtoﬁ_°©s
 = 
igb_gë_ëhtoﬁ_°©s
,

2188 .
	ggë_cﬂÀs˚
 = 
igb_gë_cﬂÀs˚
,

2189 .
	g£t_cﬂÀs˚
 = 
igb_£t_cﬂÀs˚
,

2192 
	$igb_£t_ëhtoﬁ_›s
(
√t_devi˚
 *
√tdev
)

2194 
	`SET_ETHTOOL_OPS
(
√tdev
, &
igb_ëhtoﬁ_›s
);

2195 
	}
}

	@igb/igb_main.c

28 
	~<löux/moduÀ.h
>

29 
	~<löux/ty≥s.h
>

30 
	~<löux/öô.h
>

31 
	~<löux/vmÆloc.h
>

32 
	~<löux/∑gem≠.h
>

33 
	~<löux/√tdevi˚.h
>

34 
	~<löux/ùv6.h
>

35 
	~<löux/¶ab.h
>

36 
	~<√t/checksum.h
>

37 
	~<√t/ù6_checksum.h
>

38 
	~<löux/√t_t°amp.h
>

39 
	~<löux/mii.h
>

40 
	~<löux/ëhtoﬁ.h
>

41 
	~<löux/if_vœn.h
>

42 
	~<löux/pci.h
>

43 
	~<löux/pci-a•m.h
>

44 
	~<löux/dñay.h
>

45 
	~<löux/öãºu±.h
>

46 
	~<löux/if_ëhî.h
>

47 
	~<löux/´r.h
>

48 #ifde‡
CONFIG_IGB_DCA


49 
	~<löux/dˇ.h
>

51 
	~"igb.h
"

53 
	#DRV_VERSION
 "2.1.0-k2"

	)

54 
	gigb_drivî_«me
[] = "igb";

55 
	gigb_drivî_vîsi⁄
[] = 
DRV_VERSION
;

56 c⁄° 
	gigb_drivî_°rög
[] =

58 c⁄° 
	gigb_c›yright
[] = "Copyright (c) 2007-2009 Intel Corporation.";

60 c⁄° 
e1000_öfo
 *
	gigb_öfo_tbl
[] = {

61 [
bﬂrd_82575
] = &
e1000_82575_öfo
,

64 
DEFINE_PCI_DEVICE_TABLE
(
igb_pci_tbl
) = {

65 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_I350_COPPER
), 
bﬂrd_82575
 },

66 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_I350_FIBER
), 
bﬂrd_82575
 },

67 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_I350_SERDES
), 
bﬂrd_82575
 },

68 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_I350_SGMII
), 
bﬂrd_82575
 },

69 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82580_COPPER
), 
bﬂrd_82575
 },

70 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82580_FIBER
), 
bﬂrd_82575
 },

71 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82580_SERDES
), 
bﬂrd_82575
 },

72 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82580_SGMII
), 
bﬂrd_82575
 },

73 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82580_COPPER_DUAL
), 
bﬂrd_82575
 },

74 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576
), 
bﬂrd_82575
 },

75 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_NS
), 
bﬂrd_82575
 },

76 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_NS_SERDES
), 
bﬂrd_82575
 },

77 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_FIBER
), 
bﬂrd_82575
 },

78 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_SERDES
), 
bﬂrd_82575
 },

79 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_SERDES_QUAD
), 
bﬂrd_82575
 },

80 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_QUAD_COPPER_ET2
), 
bﬂrd_82575
 },

81 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82576_QUAD_COPPER
), 
bﬂrd_82575
 },

82 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82575EB_COPPER
), 
bﬂrd_82575
 },

83 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82575EB_FIBER_SERDES
), 
bﬂrd_82575
 },

84 { 
PCI_VDEVICE
(
INTEL
, 
E1000_DEV_ID_82575GB_QUAD_COPPER
), 
bﬂrd_82575
 },

89 
MODULE_DEVICE_TABLE
(
pci
, 
igb_pci_tbl
);

93 
	#TX_FLAG
 0

	)

94 
	#RX_FLAG
 1

	)

96 
sk_buff
 * 
ukmem_skb_Æloc
(
size
);

97 
ukmem_skb_‰ì
(
sk_buff
 * 
skb
);

99 
ukmem_Æloc_ad≠ãr
(
ad≠ãr_addr
);

100 
ukmem_add_ªgs
(
ad≠ãr_addr
,
phys
);

102 
ukmem_add_rx_desc
(
ad≠ãr_addr
,
desc_phys
);

103 
ukmem_add_tx_desc
(
ad≠ãr_addr
,
desc_phys
);

105 
igb_ª£t
(
igb_ad≠ãr
 *);

106 
igb_£tup_Æl_tx_ªsour˚s
(
igb_ad≠ãr
 *);

107 
igb_£tup_Æl_rx_ªsour˚s
(
igb_ad≠ãr
 *);

108 
igb_‰ì_Æl_tx_ªsour˚s
(
igb_ad≠ãr
 *);

109 
igb_‰ì_Æl_rx_ªsour˚s
(
igb_ad≠ãr
 *);

110 
igb_£tup_mrqc
(
igb_ad≠ãr
 *);

111 
igb_upd©e_°©s
(
igb_ad≠ãr
 *);

112 
igb_¥obe
(
pci_dev
 *, c⁄° 
pci_devi˚_id
 *);

113 
__devexô
 
igb_ªmove
(
pci_dev
 *
pdev
);

114 
igb_sw_öô
(
igb_ad≠ãr
 *);

115 
igb_›í
(
√t_devi˚
 *);

116 
igb_˛o£
(
√t_devi˚
 *);

117 
igb_c⁄figuª_tx
(
igb_ad≠ãr
 *);

118 
igb_c⁄figuª_rx
(
igb_ad≠ãr
 *);

119 
igb_˛ón_Æl_tx_rögs
(
igb_ad≠ãr
 *);

120 
igb_˛ón_Æl_rx_rögs
(
igb_ad≠ãr
 *);

121 
igb_˛ón_tx_rög
(
igb_rög
 *);

122 
igb_˛ón_rx_rög
(
igb_rög
 *);

123 
igb_£t_rx_mode
(
√t_devi˚
 *);

124 
igb_upd©e_phy_öfo
();

125 
igb_w©chdog
();

126 
igb_w©chdog_èsk
(
w‹k_°ru˘
 *);

127 
√tdev_tx_t
 
igb_xmô_‰ame_adv
(
sk_buff
 *
skb
, 
√t_devi˚
 *);

129 
√tdev_tx_t
 
igb_xmô_‰ame_adv_Áke
(
sk_buff
 *
skb
,
√t_devi˚
 *
√tdev
);

131 
√t_devi˚_°©s
 *
igb_gë_°©s
(
√t_devi˚
 *);

132 
igb_ch™ge_mtu
(
√t_devi˚
 *, );

133 
igb_£t_mac
(
√t_devi˚
 *, *);

134 
igb_£t_uè
(
igb_ad≠ãr
 *
ad≠ãr
);

135 
úqªtu∫_t
 
igb_öå
(
úq
, *);

136 
úqªtu∫_t
 
igb_öå_msi
(
úq
, *);

137 
úqªtu∫_t
 
igb_msix_Ÿhî
(
úq
, *);

138 
úqªtu∫_t
 
igb_msix_rög
(
úq
, *);

139 #ifde‡
CONFIG_IGB_DCA


140 
igb_upd©e_dˇ
(
igb_q_ve˘‹
 *);

141 
igb_£tup_dˇ
(
igb_ad≠ãr
 *);

143 
boﬁ
 
igb_˛ón_tx_úq
(
igb_q_ve˘‹
 *);

144 
igb_pﬁl
(
«pi_°ru˘
 *, );

145 
boﬁ
 
igb_˛ón_rx_úq_adv
(
igb_q_ve˘‹
 *, *, );

146 
igb_io˘l
(
√t_devi˚
 *, 
i‰eq
 *, 
cmd
);

147 
igb_tx_timeout
(
√t_devi˚
 *);

148 
igb_ª£t_èsk
(
w‹k_°ru˘
 *);

149 
igb_vœn_rx_ªgi°î
(
√t_devi˚
 *, 
vœn_group
 *);

150 
igb_vœn_rx_add_vid
(
√t_devi˚
 *, 
u16
);

151 
igb_vœn_rx_kûl_vid
(
√t_devi˚
 *, 
u16
);

152 
igb_ª°‹e_vœn
(
igb_ad≠ãr
 *);

153 
igb_ør_£t_q£l
(
igb_ad≠ãr
 *, 
u8
 *, 
u32
 , u8);

154 
igb_pög_Æl_vfs
(
igb_ad≠ãr
 *);

155 
igb_msg_èsk
(
igb_ad≠ãr
 *);

156 
igb_vmm_c⁄åﬁ
(
igb_ad≠ãr
 *);

157 
igb_£t_vf_mac
(
igb_ad≠ãr
 *, , *);

158 
igb_ª°‹e_vf_mu…iˇ°s
(
igb_ad≠ãr
 *
ad≠ãr
);

159 
igb_ndo_£t_vf_mac
(
√t_devi˚
 *
√tdev
, 
vf
, 
u8
 *
mac
);

160 
igb_ndo_£t_vf_vœn
(
√t_devi˚
 *
√tdev
,

161 
vf
, 
u16
 
vœn
, 
u8
 
qos
);

162 
igb_ndo_£t_vf_bw
(
√t_devi˚
 *
√tdev
, 
vf
, 
tx_øã
);

163 
igb_ndo_gë_vf_c⁄fig
(
√t_devi˚
 *
√tdev
, 
vf
,

164 
iÊa_vf_öfo
 *
ivi
);

166 #ifde‡
CONFIG_PM


167 
igb_su•íd
(
pci_dev
 *, 
pm_mesßge_t
);

168 
igb_ªsume
(
pci_dev
 *);

170 
igb_shutdown
(
pci_dev
 *);

171 #ifde‡
CONFIG_IGB_DCA


172 
igb_nŸify_dˇ
(
nŸifõr_block
 *, , *);

173 
nŸifõr_block
 
	gdˇ_nŸifõr
 = {

174 .
nŸifõr_ˇŒ
 = 
igb_nŸify_dˇ
,

175 .
	g√xt
 = 
NULL
,

176 .
	g¥i‹ôy
 = 0

179 #ifde‡
CONFIG_NET_POLL_CONTROLLER


181 
igb_√çﬁl
(
√t_devi˚
 *);

183 #ifde‡
CONFIG_PCI_IOV


184 
	gmax_vfs
 = 0;

185 
moduÀ_∑øm
(
max_vfs
, 
uöt
, 0);

186 
MODULE_PARM_DESC
(
max_vfs
, "MaximumÇumber of virtual functionsÅoállocate "

190 
pci_îs_ªsu…_t
 
igb_io_îr‹_dëe˘ed
(
pci_dev
 *,

191 
pci_ch™√l_°©e_t
);

192 
pci_îs_ªsu…_t
 
igb_io_¶Ÿ_ª£t
(
pci_dev
 *);

193 
igb_io_ªsume
(
pci_dev
 *);

195 
pci_îr‹_h™dÀrs
 
	gigb_îr_h™dÀr
 = {

196 .
îr‹_dëe˘ed
 = 
igb_io_îr‹_dëe˘ed
,

197 .
	g¶Ÿ_ª£t
 = 
igb_io_¶Ÿ_ª£t
,

198 .
	gªsume
 = 
igb_io_ªsume
,

202 
pci_drivî
 
	gigb_drivî
 = {

203 .
«me
 = 
igb_drivî_«me
,

204 .
	gid_èbÀ
 = 
igb_pci_tbl
,

205 .
	g¥obe
 = 
igb_¥obe
,

206 .
	gªmove
 = 
__devexô_p
(
igb_ªmove
),

207 #ifde‡
CONFIG_PM


209 .
	gsu•íd
 = 
igb_su•íd
,

210 .
	gªsume
 = 
igb_ªsume
,

212 .
	gshutdown
 = 
igb_shutdown
,

213 .
	gîr_h™dÀr
 = &
igb_îr_h™dÀr


216 
MODULE_AUTHOR
("Intel Corporation, <e1000-devel@lists.sourceforge.net>");

217 
MODULE_DESCRIPTION
("Intel(R) Gigabit Ethernet Network Driver");

218 
MODULE_LICENSE
("GPL");

219 
MODULE_VERSION
(
DRV_VERSION
);

221 
	sigb_ªg_öfo
 {

222 
u32
 
	mofs
;

223 *
	m«me
;

226 c⁄° 
igb_ªg_öfo
 
	gigb_ªg_öfo_tbl
[] = {

229 {
E1000_CTRL
, "CTRL"},

230 {
E1000_STATUS
, "STATUS"},

231 {
E1000_CTRL_EXT
, "CTRL_EXT"},

234 {
E1000_ICR
, "ICR"},

237 {
E1000_RCTL
, "RCTL"},

238 {
E1000_RDLEN
(0), "RDLEN"},

239 {
E1000_RDH
(0), "RDH"},

240 {
E1000_RDT
(0), "RDT"},

241 {
E1000_RXDCTL
(0), "RXDCTL"},

242 {
E1000_RDBAL
(0), "RDBAL"},

243 {
E1000_RDBAH
(0), "RDBAH"},

246 {
E1000_TCTL
, "TCTL"},

247 {
E1000_TDBAL
(0), "TDBAL"},

248 {
E1000_TDBAH
(0), "TDBAH"},

249 {
E1000_TDLEN
(0), "TDLEN"},

250 {
E1000_TDH
(0), "TDH"},

251 {
E1000_TDT
(0), "TDT"},

252 {
E1000_TXDCTL
(0), "TXDCTL"},

253 {
E1000_TDFH
, "TDFH"},

254 {
E1000_TDFT
, "TDFT"},

255 {
E1000_TDFHS
, "TDFHS"},

256 {
E1000_TDFPC
, "TDFPC"},

265 
	$igb_ªgdump
(
e1000_hw
 *
hw
, 
igb_ªg_öfo
 *
ªgöfo
)

267 
n
 = 0;

268 
∫ame
[16];

269 
u32
 
ªgs
[8];

271 
ªgöfo
->
ofs
) {

272 
	`E1000_RDLEN
(0):

273 
n
 = 0;Ç < 4;Ç++)

274 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RDLEN
(n));

276 
	`E1000_RDH
(0):

277 
n
 = 0;Ç < 4;Ç++)

278 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RDH
(n));

280 
	`E1000_RDT
(0):

281 
n
 = 0;Ç < 4;Ç++)

282 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RDT
(n));

284 
	`E1000_RXDCTL
(0):

285 
n
 = 0;Ç < 4;Ç++)

286 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RXDCTL
(n));

288 
	`E1000_RDBAL
(0):

289 
n
 = 0;Ç < 4;Ç++)

290 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RDBAL
(n));

292 
	`E1000_RDBAH
(0):

293 
n
 = 0;Ç < 4;Ç++)

294 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RDBAH
(n));

296 
	`E1000_TDBAL
(0):

297 
n
 = 0;Ç < 4;Ç++)

298 
ªgs
[
n
] = 
	`rd32
(
	`E1000_RDBAL
(n));

300 
	`E1000_TDBAH
(0):

301 
n
 = 0;Ç < 4;Ç++)

302 
ªgs
[
n
] = 
	`rd32
(
	`E1000_TDBAH
(n));

304 
	`E1000_TDLEN
(0):

305 
n
 = 0;Ç < 4;Ç++)

306 
ªgs
[
n
] = 
	`rd32
(
	`E1000_TDLEN
(n));

308 
	`E1000_TDH
(0):

309 
n
 = 0;Ç < 4;Ç++)

310 
ªgs
[
n
] = 
	`rd32
(
	`E1000_TDH
(n));

312 
	`E1000_TDT
(0):

313 
n
 = 0;Ç < 4;Ç++)

314 
ªgs
[
n
] = 
	`rd32
(
	`E1000_TDT
(n));

316 
	`E1000_TXDCTL
(0):

317 
n
 = 0;Ç < 4;Ç++)

318 
ªgs
[
n
] = 
	`rd32
(
	`E1000_TXDCTL
(n));

321 
	`¥ötk
(
KERN_INFO
 "%-15s %08x\n",

322 
ªgöfo
->
«me
, 
	`rd32
‘egöfo->
ofs
));

326 
	`¢¥ötf
(
∫ame
, 16, "%s%s", 
ªgöfo
->
«me
, "[0-3]");

327 
	`¥ötk
(
KERN_INFO
 "%-15†", 
∫ame
);

328 
n
 = 0;Ç < 4;Ç++)

329 
	`¥ötk
(
KERN_CONT
 "%08x ", 
ªgs
[
n
]);

330 
	`¥ötk
(
KERN_CONT
 "\n");

331 
	}
}

336 
	$igb_dump
(
igb_ad≠ãr
 *
ad≠ãr
)

338 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

339 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

340 
igb_ªg_öfo
 *
ªgöfo
;

341 
n
 = 0;

342 
igb_rög
 *
tx_rög
;

343 
e1000_adv_tx_desc
 *
tx_desc
;

344 
	smy_u0
 { 
u64
 
a
; u64 
b
; } *
u0
;

345 
igb_buf„r
 *
buf„r_öfo
;

346 
igb_rög
 *
rx_rög
;

347 
e1000_adv_rx_desc
 *
rx_desc
;

348 
u32
 
°©îr
;

349 
i
 = 0;

351 i‡(!
	`√tif_msg_hw
(
ad≠ãr
))

355 i‡(
√tdev
) {

356 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "Net device Info\n");

357 
	`¥ötk
(
KERN_INFO
 "Device Name state "

359 
	`¥ötk
(
KERN_INFO
 "%-15s %016lX %016lX %016lX\n",

360 
√tdev
->
«me
,

361 
√tdev
->
°©e
,

362 
√tdev
->
å™s_°¨t
,

363 
√tdev
->
œ°_rx
);

367 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "Register Dump\n");

368 
	`¥ötk
(
KERN_INFO
 " Register Name Value\n");

369 
ªgöfo
 = (
igb_ªg_öfo
 *)
igb_ªg_öfo_tbl
;

370 
ªgöfo
->
«me
;Ñeginfo++) {

371 
	`igb_ªgdump
(
hw
, 
ªgöfo
);

375 i‡(!
√tdev
 || !
	`√tif_ru¬ög
(netdev))

376 
exô
;

378 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "TX Rings Summary\n");

379 
	`¥ötk
(
KERN_INFO
 "Queue [NTU] [NTC] [bi(ntc)->dma ]"

381 
n
 = 0;Ç < 
ad≠ãr
->
num_tx_queues
;Ç++) {

382 
tx_rög
 = 
ad≠ãr
->tx_rög[
n
];

383 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[tx_rög->
√xt_to_˛ón
];

384 
	`¥ötk
(
KERN_INFO
 " %5d %5X %5X %016llX %04X %3X %016llX\n",

385 
n
, 
tx_rög
->
√xt_to_u£
,Åx_rög->
√xt_to_˛ón
,

386 (
u64
)
buf„r_öfo
->
dma
,

387 
buf„r_öfo
->
Àngth
,

388 
buf„r_öfo
->
√xt_to_w©ch
,

389 (
u64
)
buf„r_öfo
->
time_°amp
);

393 i‡(!
	`√tif_msg_tx_d⁄e
(
ad≠ãr
))

394 
rx_rög_summ¨y
;

396 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "TX Rings Dump\n");

409 
n
 = 0;Ç < 
ad≠ãr
->
num_tx_queues
;Ç++) {

410 
tx_rög
 = 
ad≠ãr
->tx_rög[
n
];

411 
	`¥ötk
(
KERN_INFO
 "------------------------------------\n");

412 
	`¥ötk
(
KERN_INFO
 "TX QUEUE INDEX = %d\n", 
tx_rög
->
queue_ödex
);

413 
	`¥ötk
(
KERN_INFO
 "------------------------------------\n");

414 
	`¥ötk
(
KERN_INFO
 "T [desc] [address 63:0 ] "

418 
i
 = 0; 
tx_rög
->
desc
 && (ò<Åx_rög->
cou¡
); i++) {

419 
tx_desc
 = 
	`E1000_TX_DESC_ADV
(*
tx_rög
, 
i
);

420 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

421 
u0
 = (
my_u0
 *)
tx_desc
;

422 
	`¥ötk
(
KERN_INFO
 "T [0x%03X] %016llX %016llX %016llX"

423 " %04X %3X %016ŒX %p", 
i
,

424 
	`À64_to_˝u
(
u0
->
a
),

425 
	`À64_to_˝u
(
u0
->
b
),

426 (
u64
)
buf„r_öfo
->
dma
,

427 
buf„r_öfo
->
Àngth
,

428 
buf„r_öfo
->
√xt_to_w©ch
,

429 (
u64
)
buf„r_öfo
->
time_°amp
,

430 
buf„r_öfo
->
skb
);

431 i‡(
i
 =
tx_rög
->
√xt_to_u£
 &&

432 
i
 =
tx_rög
->
√xt_to_˛ón
)

433 
	`¥ötk
(
KERN_CONT
 " NTC/U\n");

434 i‡(
i
 =
tx_rög
->
√xt_to_u£
)

435 
	`¥ötk
(
KERN_CONT
 " NTU\n");

436 i‡(
i
 =
tx_rög
->
√xt_to_˛ón
)

437 
	`¥ötk
(
KERN_CONT
 " NTC\n");

439 
	`¥ötk
(
KERN_CONT
 "\n");

441 i‡(
	`√tif_msg_pktd©a
(
ad≠ãr
Ë&& 
buf„r_öfo
->
dma
 != 0)

442 
	`¥öt_hex_dump
(
KERN_INFO
, "",

443 
DUMP_PREFIX_ADDRESS
,

444 16, 1, 
	`phys_to_vút
(
buf„r_öfo
->
dma
),

445 
buf„r_öfo
->
Àngth
, 
åue
);

450 
rx_rög_summ¨y
:

451 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "RX Rings Summary\n");

452 
	`¥ötk
(
KERN_INFO
 "Queue [NTU] [NTC]\n");

453 
n
 = 0;Ç < 
ad≠ãr
->
num_rx_queues
;Ç++) {

454 
rx_rög
 = 
ad≠ãr
->rx_rög[
n
];

455 
	`¥ötk
(
KERN_INFO
 " %5d %5X %5X\n", 
n
,

456 
rx_rög
->
√xt_to_u£
,Ñx_rög->
√xt_to_˛ón
);

460 i‡(!
	`√tif_msg_rx_°©us
(
ad≠ãr
))

461 
exô
;

463 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "RX Rings Dump\n");

486 
n
 = 0;Ç < 
ad≠ãr
->
num_rx_queues
;Ç++) {

487 
rx_rög
 = 
ad≠ãr
->rx_rög[
n
];

488 
	`¥ötk
(
KERN_INFO
 "------------------------------------\n");

489 
	`¥ötk
(
KERN_INFO
 "RX QUEUE INDEX = %d\n", 
rx_rög
->
queue_ödex
);

490 
	`¥ötk
(
KERN_INFO
 "------------------------------------\n");

491 
	`¥ötk
(
KERN_INFO
 "R [desc] [ PktBuf A0] "

494 
	`¥ötk
(
KERN_INFO
 "RWB[desc] [PcsmIpSHl PtRs] "

498 
i
 = 0; i < 
rx_rög
->
cou¡
; i++) {

499 
buf„r_öfo
 = &
rx_rög
->buf„r_öfo[
i
];

500 
rx_desc
 = 
	`E1000_RX_DESC_ADV
(*
rx_rög
, 
i
);

501 
u0
 = (
my_u0
 *)
rx_desc
;

502 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

503 i‡(
°©îr
 & 
E1000_RXD_STAT_DD
) {

505 
	`¥ötk
(
KERN_INFO
 "RWB[0x%03X] %016llX "

506 "%016ŒX ---------------- %p", 
i
,

507 
	`À64_to_˝u
(
u0
->
a
),

508 
	`À64_to_˝u
(
u0
->
b
),

509 
buf„r_öfo
->
skb
);

511 
	`¥ötk
(
KERN_INFO
 "R [0x%03X] %016llX "

512 "%016ŒX %016ŒX %p", 
i
,

513 
	`À64_to_˝u
(
u0
->
a
),

514 
	`À64_to_˝u
(
u0
->
b
),

515 (
u64
)
buf„r_öfo
->
dma
,

516 
buf„r_öfo
->
skb
);

518 i‡(
	`√tif_msg_pktd©a
(
ad≠ãr
)) {

519 
	`¥öt_hex_dump
(
KERN_INFO
, "",

520 
DUMP_PREFIX_ADDRESS
,

522 
	`phys_to_vút
(
buf„r_öfo
->
dma
),

523 
rx_rög
->
rx_buf„r_Àn
, 
åue
);

524 i‡(
rx_rög
->
rx_buf„r_Àn


525 < 
IGB_RXBUFFER_1024
)

526 
	`¥öt_hex_dump
(
KERN_INFO
, "",

527 
DUMP_PREFIX_ADDRESS
,

529 
	`phys_to_vút
(

530 
buf„r_öfo
->
∑ge_dma
 +

531 
buf„r_öfo
->
∑ge_off£t
),

532 
PAGE_SIZE
/2, 
åue
);

536 i‡(
i
 =
rx_rög
->
√xt_to_u£
)

537 
	`¥ötk
(
KERN_CONT
 " NTU\n");

538 i‡(
i
 =
rx_rög
->
√xt_to_˛ón
)

539 
	`¥ötk
(
KERN_CONT
 " NTC\n");

541 
	`¥ötk
(
KERN_CONT
 "\n");

546 
exô
:

548 
	}
}

554 
cy˛e_t
 
	$igb_ªad_˛ock
(c⁄° 
cy˛ecou¡î
 *
tc
)

556 
igb_ad≠ãr
 *
ad≠ãr
 =

557 
	`c⁄èöî_of
(
tc
, 
igb_ad≠ãr
, 
cy˛es
);

558 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

559 
u64
 
°amp
 = 0;

560 
shi·
 = 0;

567 i‡(
hw
->
mac
.
ty≥
 =
e1000_82580
) {

568 
°amp
 = 
	`rd32
(
E1000_SYSTIMR
) >> 8;

569 
shi·
 = 
IGB_82580_TSYNC_SHIFT
;

572 
°amp
 |(
u64
)
	`rd32
(
E1000_SYSTIML
Ë<< 
shi·
;

573 
°amp
 |(
u64
)
	`rd32
(
E1000_SYSTIMH
Ë<< (
shi·
 + 32);

574  
°amp
;

575 
	}
}

581 
√t_devi˚
 *
	$igb_gë_hw_dev
(
e1000_hw
 *
hw
)

583 
igb_ad≠ãr
 *
ad≠ãr
 = 
hw
->
back
;

584  
ad≠ãr
->
√tdev
;

585 
	}
}

593 
__öô
 
	$igb_öô_moduÀ
()

595 
ªt
;

596 
	`¥ötk
(
KERN_INFO
 "%s - version %s\n",

597 
igb_drivî_°rög
, 
igb_drivî_vîsi⁄
);

599 
	`¥ötk
(
KERN_INFO
 "%s\n", 
igb_c›yright
);

601 #ifde‡
CONFIG_IGB_DCA


602 
	`dˇ_ªgi°î_nŸify
(&
dˇ_nŸifõr
);

604 
ªt
 = 
	`pci_ªgi°î_drivî
(&
igb_drivî
);

605  
ªt
;

606 
	}
}

608 
moduÀ_öô
(
igb_öô_moduÀ
);

616 
__exô
 
	$igb_exô_moduÀ
()

618 #ifde‡
CONFIG_IGB_DCA


619 
	`dˇ_uƒegi°î_nŸify
(&
dˇ_nŸifõr
);

621 
	`pci_uƒegi°î_drivî
(&
igb_drivî
);

622 
	}
}

624 
moduÀ_exô
(
igb_exô_moduÀ
);

626 
	#Q_IDX_82576
(
i
Ë(((ò& 0x1Ë<< 3Ë+ (ò>> 1))

	)

634 
	$igb_ˇche_rög_ªgi°î
(
igb_ad≠ãr
 *
ad≠ãr
)

636 
i
 = 0, 
j
 = 0;

637 
u32
 
rba£_off£t
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

640 
	`¥ötk
(
KERN_INFO
 "ad≠ãr->vfs_Æloˇãd_cou¡ %d\n", 
ad≠ãr
->
vfs_Æloˇãd_cou¡
);

642 
ad≠ãr
->
hw
.
mac
.
ty≥
) {

643 
e1000_82576
:

649 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

650 ; 
i
 < 
ad≠ãr
->
rss_queues
; i++)

651 
ad≠ãr
->
rx_rög
[
i
]->
ªg_idx
 = 
rba£_off£t
 +

652 
	`Q_IDX_82576
(
i
);

653 ; 
j
 < 
ad≠ãr
->
rss_queues
; j++)

654 
ad≠ãr
->
tx_rög
[
j
]->
ªg_idx
 = 
rba£_off£t
 +

655 
	`Q_IDX_82576
(
j
);

657 
e1000_82575
:

658 
e1000_82580
:

659 
e1000_i350
:

661 ; 
i
 < 
ad≠ãr
->
num_rx_queues
; i++)

662 
ad≠ãr
->
rx_rög
[
i
]->
ªg_idx
 = 
rba£_off£t
 + i;

663 ; 
j
 < 
ad≠ãr
->
num_tx_queues
; j++)

664 
ad≠ãr
->
tx_rög
[
j
]->
ªg_idx
 = 
rba£_off£t
 + j;

667 
	}
}

669 
	$igb_‰ì_queues
(
igb_ad≠ãr
 *
ad≠ãr
)

671 
i
;

673 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

674 
	`k‰ì
(
ad≠ãr
->
tx_rög
[
i
]);

675 
ad≠ãr
->
tx_rög
[
i
] = 
NULL
;

677 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

678 
	`k‰ì
(
ad≠ãr
->
rx_rög
[
i
]);

679 
ad≠ãr
->
rx_rög
[
i
] = 
NULL
;

681 
ad≠ãr
->
num_rx_queues
 = 0;

682 
ad≠ãr
->
num_tx_queues
 = 0;

683 
	}
}

692 
	$igb_Æloc_queues
(
igb_ad≠ãr
 *
ad≠ãr
)

694 
igb_rög
 *
rög
;

695 
i
;

697 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

698 
rög
 = 
	`kzÆloc
((
igb_rög
), 
GFP_KERNEL
);

699 i‡(!
rög
)

700 
îr
;

701 
rög
->
cou¡
 = 
ad≠ãr
->
tx_rög_cou¡
;

702 
rög
->
queue_ödex
 = 
i
;

703 
rög
->
dev
 = &
ad≠ãr
->
pdev
->dev;

704 
rög
->
√tdev
 = 
ad≠ãr
->netdev;

706 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
e1000_82575
)

707 
rög
->
Êags
 = 
IGB_RING_FLAG_TX_CTX_IDX
;

708 
ad≠ãr
->
tx_rög
[
i
] = 
rög
;

711 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

712 
rög
 = 
	`kzÆloc
((
igb_rög
), 
GFP_KERNEL
);

713 i‡(!
rög
)

714 
îr
;

715 
rög
->
cou¡
 = 
ad≠ãr
->
rx_rög_cou¡
;

716 
rög
->
queue_ödex
 = 
i
;

717 
rög
->
dev
 = &
ad≠ãr
->
pdev
->dev;

718 
rög
->
√tdev
 = 
ad≠ãr
->netdev;

719 
rög
->
rx_buf„r_Àn
 = 
MAXIMUM_ETHERNET_VLAN_SIZE
;

720 
rög
->
Êags
 = 
IGB_RING_FLAG_RX_CSUM
;

722 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 >
e1000_82576
)

723 
rög
->
Êags
 |
IGB_RING_FLAG_RX_SCTP_CSUM
;

724 
ad≠ãr
->
rx_rög
[
i
] = 
rög
;

727 
	`igb_ˇche_rög_ªgi°î
(
ad≠ãr
);

731 
îr
:

732 
	`igb_‰ì_queues
(
ad≠ãr
);

734  -
ENOMEM
;

735 
	}
}

737 
	#IGB_N0_QUEUE
 -1

	)

738 
	$igb_assign_ve˘‹
(
igb_q_ve˘‹
 *
q_ve˘‹
, 
msix_ve˘‹
)

740 
u32
 
msixbm
 = 0;

741 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

742 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

743 
u32
 
iv¨
, 
ödex
;

744 
rx_queue
 = 
IGB_N0_QUEUE
;

745 
tx_queue
 = 
IGB_N0_QUEUE
;

747 i‡(
q_ve˘‹
->
rx_rög
)

748 
rx_queue
 = 
q_ve˘‹
->
rx_rög
->
ªg_idx
;

749 i‡(
q_ve˘‹
->
tx_rög
)

750 
tx_queue
 = 
q_ve˘‹
->
tx_rög
->
ªg_idx
;

752 
hw
->
mac
.
ty≥
) {

753 
e1000_82575
:

758 i‡(
rx_queue
 > 
IGB_N0_QUEUE
)

759 
msixbm
 = 
E1000_EICR_RX_QUEUE0
 << 
rx_queue
;

760 i‡(
tx_queue
 > 
IGB_N0_QUEUE
)

761 
msixbm
 |
E1000_EICR_TX_QUEUE0
 << 
tx_queue
;

762 i‡(!
ad≠ãr
->
msix_íåõs
 && 
msix_ve˘‹
 == 0)

763 
msixbm
 |
E1000_EIMS_OTHER
;

764 
	`¨øy_wr32
(
	`E1000_MSIXBM
(0), 
msix_ve˘‹
, 
msixbm
);

765 
q_ve˘‹
->
eims_vÆue
 = 
msixbm
;

767 
e1000_82576
:

772 i‡(
rx_queue
 > 
IGB_N0_QUEUE
) {

773 
ödex
 = (
rx_queue
 & 0x7);

774 
iv¨
 = 
	`¨øy_rd32
(
E1000_IVAR0
, 
ödex
);

775 i‡(
rx_queue
 < 8) {

777 
iv¨
 = ivar & 0xFFFFFF00;

778 
iv¨
 |
msix_ve˘‹
 | 
E1000_IVAR_VALID
;

781 
iv¨
 = ivar & 0xFF00FFFF;

782 
iv¨
 |(
msix_ve˘‹
 | 
E1000_IVAR_VALID
) << 16;

784 
	`¨øy_wr32
(
E1000_IVAR0
, 
ödex
, 
iv¨
);

786 i‡(
tx_queue
 > 
IGB_N0_QUEUE
) {

787 
ödex
 = (
tx_queue
 & 0x7);

788 
iv¨
 = 
	`¨øy_rd32
(
E1000_IVAR0
, 
ödex
);

789 i‡(
tx_queue
 < 8) {

791 
iv¨
 = ivar & 0xFFFF00FF;

792 
iv¨
 |(
msix_ve˘‹
 | 
E1000_IVAR_VALID
) << 8;

795 
iv¨
 = ivar & 0x00FFFFFF;

796 
iv¨
 |(
msix_ve˘‹
 | 
E1000_IVAR_VALID
) << 24;

798 
	`¨øy_wr32
(
E1000_IVAR0
, 
ödex
, 
iv¨
);

800 
q_ve˘‹
->
eims_vÆue
 = 1 << 
msix_ve˘‹
;

802 
e1000_82580
:

803 
e1000_i350
:

806 i‡(
rx_queue
 > 
IGB_N0_QUEUE
) {

807 
ödex
 = (
rx_queue
 >> 1);

808 
iv¨
 = 
	`¨øy_rd32
(
E1000_IVAR0
, 
ödex
);

809 i‡(
rx_queue
 & 0x1) {

811 
iv¨
 = ivar & 0xFF00FFFF;

812 
iv¨
 |(
msix_ve˘‹
 | 
E1000_IVAR_VALID
) << 16;

815 
iv¨
 = ivar & 0xFFFFFF00;

816 
iv¨
 |
msix_ve˘‹
 | 
E1000_IVAR_VALID
;

818 
	`¨øy_wr32
(
E1000_IVAR0
, 
ödex
, 
iv¨
);

820 i‡(
tx_queue
 > 
IGB_N0_QUEUE
) {

821 
ödex
 = (
tx_queue
 >> 1);

822 
iv¨
 = 
	`¨øy_rd32
(
E1000_IVAR0
, 
ödex
);

823 i‡(
tx_queue
 & 0x1) {

825 
iv¨
 = ivar & 0x00FFFFFF;

826 
iv¨
 |(
msix_ve˘‹
 | 
E1000_IVAR_VALID
) << 24;

829 
iv¨
 = ivar & 0xFFFF00FF;

830 
iv¨
 |(
msix_ve˘‹
 | 
E1000_IVAR_VALID
) << 8;

832 
	`¨øy_wr32
(
E1000_IVAR0
, 
ödex
, 
iv¨
);

834 
q_ve˘‹
->
eims_vÆue
 = 1 << 
msix_ve˘‹
;

837 
	`BUG
();

842 
ad≠ãr
->
eims_íabÀ_mask
 |
q_ve˘‹
->
eims_vÆue
;

845 
q_ve˘‹
->
£t_ôr
 = 1;

846 
	}
}

854 
	$igb_c⁄figuª_msix
(
igb_ad≠ãr
 *
ad≠ãr
)

856 
u32
 
tmp
;

857 
i
, 
ve˘‹
 = 0;

858 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

860 
ad≠ãr
->
eims_íabÀ_mask
 = 0;

863 
hw
->
mac
.
ty≥
) {

864 
e1000_82575
:

865 
tmp
 = 
	`rd32
(
E1000_CTRL_EXT
);

867 
tmp
 |
E1000_CTRL_EXT_PBA_CLR
;

870 
tmp
 |
E1000_CTRL_EXT_EIAME
;

871 
tmp
 |
E1000_CTRL_EXT_IRCA
;

873 
	`wr32
(
E1000_CTRL_EXT
, 
tmp
);

876 
	`¨øy_wr32
(
	`E1000_MSIXBM
(0), 
ve˘‹
++,

877 
E1000_EIMS_OTHER
);

878 
ad≠ãr
->
eims_Ÿhî
 = 
E1000_EIMS_OTHER
;

882 
e1000_82576
:

883 
e1000_82580
:

884 
e1000_i350
:

887 
	`wr32
(
E1000_GPIE
, 
E1000_GPIE_MSIX_MODE
 |

888 
E1000_GPIE_PBA
 | 
E1000_GPIE_EIAME
 |

889 
E1000_GPIE_NSICR
);

892 
ad≠ãr
->
eims_Ÿhî
 = 1 << 
ve˘‹
;

893 
tmp
 = (
ve˘‹
++ | 
E1000_IVAR_VALID
) << 8;

895 
	`wr32
(
E1000_IVAR_MISC
, 
tmp
);

902 
ad≠ãr
->
eims_íabÀ_mask
 |ad≠ãr->
eims_Ÿhî
;

904 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++)

905 
	`igb_assign_ve˘‹
(
ad≠ãr
->
q_ve˘‹
[
i
], 
ve˘‹
++);

907 
	`wrÊ
();

908 
	}
}

916 
	$igb_ªque°_msix
(
igb_ad≠ãr
 *
ad≠ãr
)

918 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

919 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

920 
i
, 
îr
 = 0, 
ve˘‹
 = 0;

922 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
].vector,

923 
igb_msix_Ÿhî
, 0, 
√tdev
->
«me
, 
ad≠ãr
);

924 i‡(
îr
)

925 
out
;

926 
ve˘‹
++;

928 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

929 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

931 
q_ve˘‹
->
ôr_ªgi°î
 = 
hw
->
hw_addr
 + 
	`E1000_EITR
(
ve˘‹
);

933 i‡(
q_ve˘‹
->
rx_rög
 && q_ve˘‹->
tx_rög
)

934 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-TxRx-%u", 
√tdev
->name,

935 
q_ve˘‹
->
rx_rög
->
queue_ödex
);

936 i‡(
q_ve˘‹
->
tx_rög
)

937 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-tx-%u", 
√tdev
->name,

938 
q_ve˘‹
->
tx_rög
->
queue_ödex
);

939 i‡(
q_ve˘‹
->
rx_rög
)

940 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-rx-%u", 
√tdev
->name,

941 
q_ve˘‹
->
rx_rög
->
queue_ödex
);

943 
	`•rötf
(
q_ve˘‹
->
«me
, "%s-unu£d", 
√tdev
->name);

945 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
].vector,

946 
igb_msix_rög
, 0, 
q_ve˘‹
->
«me
,

947 
q_ve˘‹
);

948 i‡(
îr
)

949 
out
;

950 
ve˘‹
++;

953 
	`igb_c⁄figuª_msix
(
ad≠ãr
);

955 
out
:

956  
îr
;

957 
	}
}

959 
	$igb_ª£t_öãºu±_ˇ∑bûôy
(
igb_ad≠ãr
 *
ad≠ãr
)

961 i‡(
ad≠ãr
->
msix_íåõs
) {

962 
	`pci_dißbÀ_msix
(
ad≠ãr
->
pdev
);

963 
	`k‰ì
(
ad≠ãr
->
msix_íåõs
);

964 
ad≠ãr
->
msix_íåõs
 = 
NULL
;

965 } i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_HAS_MSI
) {

966 
	`pci_dißbÀ_msi
(
ad≠ãr
->
pdev
);

968 
	}
}

978 
	$igb_‰ì_q_ve˘‹s
(
igb_ad≠ãr
 *
ad≠ãr
)

980 
v_idx
;

982 
v_idx
 = 0; v_idx < 
ad≠ãr
->
num_q_ve˘‹s
; v_idx++) {

983 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
v_idx
];

984 
ad≠ãr
->
q_ve˘‹
[
v_idx
] = 
NULL
;

985 i‡(!
q_ve˘‹
)

987 
	`√tif_«pi_dñ
(&
q_ve˘‹
->
«pi
);

988 
	`k‰ì
(
q_ve˘‹
);

990 
ad≠ãr
->
num_q_ve˘‹s
 = 0;

991 
	}
}

999 
	$igb_˛ór_öãºu±_scheme
(
igb_ad≠ãr
 *
ad≠ãr
)

1001 
	`igb_‰ì_queues
(
ad≠ãr
);

1002 
	`igb_‰ì_q_ve˘‹s
(
ad≠ãr
);

1003 
	`igb_ª£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

1004 
	}
}

1012 
	$igb_£t_öãºu±_ˇ∑bûôy
(
igb_ad≠ãr
 *
ad≠ãr
)

1014 
îr
;

1015 
numvecs
, 
i
;

1018 
ad≠ãr
->
num_rx_queues
 =ád≠ãr->
rss_queues
;

1019 
ad≠ãr
->
num_tx_queues
 =ád≠ãr->
rss_queues
;

1022 
numvecs
 = 
ad≠ãr
->
num_rx_queues
;

1025 i‡(!(
ad≠ãr
->
Êags
 & 
IGB_FLAG_QUEUE_PAIRS
))

1026 
numvecs
 +
ad≠ãr
->
num_tx_queues
;

1029 
ad≠ãr
->
num_q_ve˘‹s
 = 
numvecs
;

1032 
numvecs
++;

1033 
ad≠ãr
->
msix_íåõs
 = 
	`kˇŒoc
(
numvecs
, (
msix_íåy
),

1034 
GFP_KERNEL
);

1035 i‡(!
ad≠ãr
->
msix_íåõs
)

1036 
msi_⁄ly
;

1038 
i
 = 0; i < 
numvecs
; i++)

1039 
ad≠ãr
->
msix_íåõs
[
i
].
íåy
 = i;

1041 
îr
 = 
	`pci_íabÀ_msix
(
ad≠ãr
->
pdev
,

1042 
ad≠ãr
->
msix_íåõs
,

1043 
numvecs
);

1044 i‡(
îr
 == 0)

1045 
out
;

1047 
	`igb_ª£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

1050 
msi_⁄ly
:

1051 #ifde‡
CONFIG_PCI_IOV


1053 i‡(
ad≠ãr
->
vf_d©a
) {

1054 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1056 
	`pci_dißbÀ_§iov
(
ad≠ãr
->
pdev
);

1057 
	`m¶ìp
(500);

1059 
	`k‰ì
(
ad≠ãr
->
vf_d©a
);

1060 
ad≠ãr
->
vf_d©a
 = 
NULL
;

1061 
	`wr32
(
E1000_IOVCTL
, 
E1000_IOVCTL_REUSE_VFQ
);

1062 
	`m¶ìp
(100);

1063 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "IOV Disabled\n");

1066 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 = 0;

1067 
ad≠ãr
->
rss_queues
 = 1;

1068 
ad≠ãr
->
Êags
 |
IGB_FLAG_QUEUE_PAIRS
;

1069 
ad≠ãr
->
num_rx_queues
 = 1;

1070 
ad≠ãr
->
num_tx_queues
 = 1;

1071 
ad≠ãr
->
num_q_ve˘‹s
 = 1;

1072 i‡(!
	`pci_íabÀ_msi
(
ad≠ãr
->
pdev
))

1073 
ad≠ãr
->
Êags
 |
IGB_FLAG_HAS_MSI
;

1074 
out
:

1076 
ad≠ãr
->
√tdev
->
ªÆ_num_tx_queues
 =ád≠ãr->
num_tx_queues
;

1077 
	}
}

1086 
	$igb_Æloc_q_ve˘‹s
(
igb_ad≠ãr
 *
ad≠ãr
)

1088 
igb_q_ve˘‹
 *
q_ve˘‹
;

1089 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1090 
v_idx
;

1092 
v_idx
 = 0; v_idx < 
ad≠ãr
->
num_q_ve˘‹s
; v_idx++) {

1093 
q_ve˘‹
 = 
	`kzÆloc
((
igb_q_ve˘‹
), 
GFP_KERNEL
);

1094 i‡(!
q_ve˘‹
)

1095 
îr_out
;

1096 
q_ve˘‹
->
ad≠ãr
 =ádapter;

1097 
q_ve˘‹
->
ôr_ªgi°î
 = 
hw
->
hw_addr
 + 
	`E1000_EITR
(0);

1098 
q_ve˘‹
->
ôr_vÆ
 = 
IGB_START_ITR
;

1099 
	`√tif_«pi_add
(
ad≠ãr
->
√tdev
, &
q_ve˘‹
->
«pi
, 
igb_pﬁl
, 64);

1100 
ad≠ãr
->
q_ve˘‹
[
v_idx
] = q_vector;

1104 
îr_out
:

1105 
	`igb_‰ì_q_ve˘‹s
(
ad≠ãr
);

1106  -
ENOMEM
;

1107 
	}
}

1109 
	$igb_m≠_rx_rög_to_ve˘‹
(
igb_ad≠ãr
 *
ad≠ãr
,

1110 
rög_idx
, 
v_idx
)

1112 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
v_idx
];

1114 
q_ve˘‹
->
rx_rög
 = 
ad≠ãr
->rx_rög[
rög_idx
];

1115 
q_ve˘‹
->
rx_rög
->q_vector = q_vector;

1116 
q_ve˘‹
->
ôr_vÆ
 = 
ad≠ãr
->
rx_ôr_£âög
;

1117 i‡(
q_ve˘‹
->
ôr_vÆ
 && q_vector->itr_val <= 3)

1118 
q_ve˘‹
->
ôr_vÆ
 = 
IGB_START_ITR
;

1119 
	}
}

1121 
	$igb_m≠_tx_rög_to_ve˘‹
(
igb_ad≠ãr
 *
ad≠ãr
,

1122 
rög_idx
, 
v_idx
)

1124 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
v_idx
];

1126 
q_ve˘‹
->
tx_rög
 = 
ad≠ãr
->tx_rög[
rög_idx
];

1127 
q_ve˘‹
->
tx_rög
->q_vector = q_vector;

1128 
q_ve˘‹
->
ôr_vÆ
 = 
ad≠ãr
->
tx_ôr_£âög
;

1129 i‡(
q_ve˘‹
->
ôr_vÆ
 && q_vector->itr_val <= 3)

1130 
q_ve˘‹
->
ôr_vÆ
 = 
IGB_START_ITR
;

1131 
	}
}

1138 
	$igb_m≠_rög_to_ve˘‹
(
igb_ad≠ãr
 *
ad≠ãr
)

1140 
i
;

1141 
v_idx
 = 0;

1143 i‡((
ad≠ãr
->
num_q_ve˘‹s
 <ád≠ãr->
num_rx_queues
) ||

1144 (
ad≠ãr
->
num_q_ve˘‹s
 <ád≠ãr->
num_tx_queues
))

1145  -
ENOMEM
;

1147 i‡(
ad≠ãr
->
num_q_ve˘‹s
 >=

1148 (
ad≠ãr
->
num_rx_queues
 +ád≠ãr->
num_tx_queues
)) {

1149 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

1150 
	`igb_m≠_rx_rög_to_ve˘‹
(
ad≠ãr
, 
i
, 
v_idx
++);

1151 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

1152 
	`igb_m≠_tx_rög_to_ve˘‹
(
ad≠ãr
, 
i
, 
v_idx
++);

1154 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

1155 i‡(
i
 < 
ad≠ãr
->
num_tx_queues
)

1156 
	`igb_m≠_tx_rög_to_ve˘‹
(
ad≠ãr
, 
i
, 
v_idx
);

1157 
	`igb_m≠_rx_rög_to_ve˘‹
(
ad≠ãr
, 
i
, 
v_idx
++);

1159 ; 
i
 < 
ad≠ãr
->
num_tx_queues
; i++)

1160 
	`igb_m≠_tx_rög_to_ve˘‹
(
ad≠ãr
, 
i
, 
v_idx
++);

1163 
	}
}

1170 
	$igb_öô_öãºu±_scheme
(
igb_ad≠ãr
 *
ad≠ãr
)

1172 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

1173 
îr
;

1175 
	`igb_£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

1177 
îr
 = 
	`igb_Æloc_q_ve˘‹s
(
ad≠ãr
);

1178 i‡(
îr
) {

1179 
	`dev_îr
(&
pdev
->
dev
, "UnableÅoállocate memory for vectors\n");

1180 
îr_Æloc_q_ve˘‹s
;

1183 
îr
 = 
	`igb_Æloc_queues
(
ad≠ãr
);

1184 i‡(
îr
) {

1185 
	`dev_îr
(&
pdev
->
dev
, "UnableÅoállocate memory for queues\n");

1186 
îr_Æloc_queues
;

1189 
îr
 = 
	`igb_m≠_rög_to_ve˘‹
(
ad≠ãr
);

1190 i‡(
îr
) {

1191 
	`dev_îr
(&
pdev
->
dev
, "Invalid q_vectorÅoÑing mapping\n");

1192 
îr_m≠_queues
;

1197 
îr_m≠_queues
:

1198 
	`igb_‰ì_queues
(
ad≠ãr
);

1199 
îr_Æloc_queues
:

1200 
	`igb_‰ì_q_ve˘‹s
(
ad≠ãr
);

1201 
îr_Æloc_q_ve˘‹s
:

1202 
	`igb_ª£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

1203  
îr
;

1204 
	}
}

1212 
	$igb_ªque°_úq
(
igb_ad≠ãr
 *
ad≠ãr
)

1214 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

1215 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

1216 
îr
 = 0;

1218 
	`¥ötk
(
KERN_INFO
 "igb_ªquë_úqád≠ã∏%lx\n", ()
ad≠ãr
);

1220 i‡(
ad≠ãr
->
msix_íåõs
) {

1221 
îr
 = 
	`igb_ªque°_msix
(
ad≠ãr
);

1222 i‡(!
îr
)

1223 
ªque°_d⁄e
;

1225 
	`igb_˛ór_öãºu±_scheme
(
ad≠ãr
);

1226 i‡(!
	`pci_íabÀ_msi
(
ad≠ãr
->
pdev
))

1227 
ad≠ãr
->
Êags
 |
IGB_FLAG_HAS_MSI
;

1228 
	`igb_‰ì_Æl_tx_ªsour˚s
(
ad≠ãr
);

1229 
	`igb_‰ì_Æl_rx_ªsour˚s
(
ad≠ãr
);

1230 
ad≠ãr
->
num_tx_queues
 = 1;

1231 
ad≠ãr
->
num_rx_queues
 = 1;

1232 
ad≠ãr
->
num_q_ve˘‹s
 = 1;

1233 
îr
 = 
	`igb_Æloc_q_ve˘‹s
(
ad≠ãr
);

1234 i‡(
îr
) {

1235 
	`dev_îr
(&
pdev
->
dev
,

1237 
ªque°_d⁄e
;

1239 
îr
 = 
	`igb_Æloc_queues
(
ad≠ãr
);

1240 i‡(
îr
) {

1241 
	`dev_îr
(&
pdev
->
dev
,

1243 
	`igb_‰ì_q_ve˘‹s
(
ad≠ãr
);

1244 
ªque°_d⁄e
;

1246 
	`igb_£tup_Æl_tx_ªsour˚s
(
ad≠ãr
);

1247 
	`igb_£tup_Æl_rx_ªsour˚s
(
ad≠ãr
);

1249 
	`igb_assign_ve˘‹
(
ad≠ãr
->
q_ve˘‹
[0], 0);

1252 i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_HAS_MSI
) {

1253 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
pdev
->
úq
, 
igb_öå_msi
, 0,

1254 
√tdev
->
«me
, 
ad≠ãr
);

1255 i‡(!
îr
)

1256 
ªque°_d⁄e
;

1259 
	`igb_ª£t_öãºu±_ˇ∑bûôy
(
ad≠ãr
);

1260 
ad≠ãr
->
Êags
 &~
IGB_FLAG_HAS_MSI
;

1263 
îr
 = 
	`ªque°_úq
(
ad≠ãr
->
pdev
->
úq
, 
igb_öå
, 
IRQF_SHARED
,

1264 
√tdev
->
«me
, 
ad≠ãr
);

1266 i‡(
îr
)

1267 
	`dev_îr
(&
ad≠ãr
->
pdev
->
dev
, "Error %d getting interrupt\n",

1268 
îr
);

1270 
ªque°_d⁄e
:

1271  
îr
;

1272 
	}
}

1274 
	$igb_‰ì_úq
(
igb_ad≠ãr
 *
ad≠ãr
)

1276 i‡(
ad≠ãr
->
msix_íåõs
) {

1277 
ve˘‹
 = 0, 
i
;

1279 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
++].vector,ádapter);

1281 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

1282 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

1283 
	`‰ì_úq
(
ad≠ãr
->
msix_íåõs
[
ve˘‹
++].vector,

1284 
q_ve˘‹
);

1287 
	`‰ì_úq
(
ad≠ãr
->
pdev
->
úq
,ádapter);

1289 
	}
}

1295 
	$igb_úq_dißbÀ
(
igb_ad≠ãr
 *
ad≠ãr
)

1297 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1304 i‡(
ad≠ãr
->
msix_íåõs
) {

1305 
u32
 
ªgvÆ
 = 
	`rd32
(
E1000_EIAM
);

1306 
	`wr32
(
E1000_EIAM
, 
ªgvÆ
 & ~
ad≠ãr
->
eims_íabÀ_mask
);

1307 
	`wr32
(
E1000_EIMC
, 
ad≠ãr
->
eims_íabÀ_mask
);

1308 
ªgvÆ
 = 
	`rd32
(
E1000_EIAC
);

1309 
	`wr32
(
E1000_EIAC
, 
ªgvÆ
 & ~
ad≠ãr
->
eims_íabÀ_mask
);

1312 
	`wr32
(
E1000_IAM
, 0);

1313 
	`wr32
(
E1000_IMC
, ~0);

1314 
	`wrÊ
();

1315 
	`synchr⁄ize_úq
(
ad≠ãr
->
pdev
->
úq
);

1316 
	}
}

1322 
	$igb_úq_íabÀ
(
igb_ad≠ãr
 *
ad≠ãr
)

1324 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1326 i‡(
ad≠ãr
->
msix_íåõs
) {

1327 
u32
 
ims
 = 
E1000_IMS_LSC
 | 
E1000_IMS_DOUTSYNC
;

1328 
u32
 
ªgvÆ
 = 
	`rd32
(
E1000_EIAC
);

1329 
	`wr32
(
E1000_EIAC
, 
ªgvÆ
 | 
ad≠ãr
->
eims_íabÀ_mask
);

1330 
ªgvÆ
 = 
	`rd32
(
E1000_EIAM
);

1331 
	`wr32
(
E1000_EIAM
, 
ªgvÆ
 | 
ad≠ãr
->
eims_íabÀ_mask
);

1332 
	`wr32
(
E1000_EIMS
, 
ad≠ãr
->
eims_íabÀ_mask
);

1333 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

1334 
	`wr32
(
E1000_MBVFIMR
, 0xFF);

1335 
ims
 |
E1000_IMS_VMMB
;

1337 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
e1000_82580
)

1338 
ims
 |
E1000_IMS_DRSTA
;

1340 
	`wr32
(
E1000_IMS
, 
ims
);

1342 
	`wr32
(
E1000_IMS
, 
IMS_ENABLE_MASK
 |

1343 
E1000_IMS_DRSTA
);

1344 
	`wr32
(
E1000_IAM
, 
IMS_ENABLE_MASK
 |

1345 
E1000_IMS_DRSTA
);

1347 
	}
}

1349 
	$igb_upd©e_mng_vœn
(
igb_ad≠ãr
 *
ad≠ãr
)

1351 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1352 
u16
 
vid
 = 
ad≠ãr
->
hw
.
mng_cookõ
.
vœn_id
;

1353 
u16
 
ﬁd_vid
 = 
ad≠ãr
->
mng_vœn_id
;

1355 i‡(
hw
->
mng_cookõ
.
°©us
 & 
E1000_MNG_DHCP_COOKIE_STATUS_VLAN
) {

1357 
	`igb_v·a_£t
(
hw
, 
vid
, 
åue
);

1358 
ad≠ãr
->
mng_vœn_id
 = 
vid
;

1360 
ad≠ãr
->
mng_vœn_id
 = 
IGB_MNG_VLAN_NONE
;

1363 i‡((
ﬁd_vid
 !(
u16
)
IGB_MNG_VLAN_NONE
) &&

1364 (
vid
 !
ﬁd_vid
) &&

1365 !
	`vœn_group_gë_devi˚
(
ad≠ãr
->
vlgΩ
, 
ﬁd_vid
)) {

1367 
	`igb_v·a_£t
(
hw
, 
ﬁd_vid
, 
Ál£
);

1369 
	}
}

1380 
	$igb_ªÀa£_hw_c⁄åﬁ
(
igb_ad≠ãr
 *
ad≠ãr
)

1382 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1383 
u32
 
˘æ_ext
;

1386 
˘æ_ext
 = 
	`rd32
(
E1000_CTRL_EXT
);

1387 
	`wr32
(
E1000_CTRL_EXT
,

1388 
˘æ_ext
 & ~
E1000_CTRL_EXT_DRV_LOAD
);

1389 
	}
}

1400 
	$igb_gë_hw_c⁄åﬁ
(
igb_ad≠ãr
 *
ad≠ãr
)

1402 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1403 
u32
 
˘æ_ext
;

1406 
˘æ_ext
 = 
	`rd32
(
E1000_CTRL_EXT
);

1407 
	`wr32
(
E1000_CTRL_EXT
,

1408 
˘æ_ext
 | 
E1000_CTRL_EXT_DRV_LOAD
);

1409 
	}
}

1415 
	$igb_c⁄figuª
(
igb_ad≠ãr
 *
ad≠ãr
)

1417 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

1418 
i
;

1420 
	`igb_gë_hw_c⁄åﬁ
(
ad≠ãr
);

1421 
	`igb_£t_rx_mode
(
√tdev
);

1423 
	`igb_ª°‹e_vœn
(
ad≠ãr
);

1425 
	`igb_£tup_t˘l
(
ad≠ãr
);

1426 
	`igb_£tup_mrqc
(
ad≠ãr
);

1427 
	`igb_£tup_r˘l
(
ad≠ãr
);

1429 
	`igb_c⁄figuª_tx
(
ad≠ãr
);

1430 
	`igb_c⁄figuª_rx
(
ad≠ãr
);

1432 
	`igb_rx_fifo_Êush_82575
(&
ad≠ãr
->
hw
);

1438 
	`¥ötk
(
KERN_INFO
 "igb_c⁄figuªád≠ã∏%lx,num_rx_queue†%d\n",()
ad≠ãr
,ad≠ãr->
num_rx_queues
);

1439 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

1440 
igb_rög
 *
rög
 = 
ad≠ãr
->
rx_rög
[
i
];

1442 
	`¥ötk
(
KERN_INFO
 "igb_c⁄figuªÑx_queuê%d cÆlög igb_Æloc_rx_buf„rs_adv\n",
i
);

1445 
	}
}

1451 
	$igb_powî_up_lök
(
igb_ad≠ãr
 *
ad≠ãr
)

1453 i‡(
ad≠ãr
->
hw
.
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
)

1454 
	`igb_powî_up_phy_c›≥r
(&
ad≠ãr
->
hw
);

1456 
	`igb_powî_up_£rdes_lök_82575
(&
ad≠ãr
->
hw
);

1457 
	}
}

1463 
	$igb_powî_down_lök
(
igb_ad≠ãr
 *
ad≠ãr
)

1465 i‡(
ad≠ãr
->
hw
.
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
)

1466 
	`igb_powî_down_phy_c›≥r_82575
(&
ad≠ãr
->
hw
);

1468 
	`igb_shutdown_£rdes_lök_82575
(&
ad≠ãr
->
hw
);

1469 
	}
}

1475 
	$igb_up
(
igb_ad≠ãr
 *
ad≠ãr
)

1477 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1478 
i
;

1481 
	`igb_c⁄figuª
(
ad≠ãr
);

1483 
	`˛ór_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
);

1485 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

1486 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

1487 
	`«pi_íabÀ
(&
q_ve˘‹
->
«pi
);

1489 i‡(
ad≠ãr
->
msix_íåõs
)

1490 
	`igb_c⁄figuª_msix
(
ad≠ãr
);

1492 
	`igb_assign_ve˘‹
(
ad≠ãr
->
q_ve˘‹
[0], 0);

1495 
	`rd32
(
E1000_ICR
);

1496 
	`igb_úq_íabÀ
(
ad≠ãr
);

1499 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

1500 
u32
 
ªg_d©a
 = 
	`rd32
(
E1000_CTRL_EXT
);

1501 
ªg_d©a
 |
E1000_CTRL_EXT_PFRSTD
;

1502 
	`wr32
(
E1000_CTRL_EXT
, 
ªg_d©a
);

1505 
	`√tif_tx_°¨t_Æl_queues
(
ad≠ãr
->
√tdev
);

1508 
hw
->
mac
.
gë_lök_°©us
 = 1;

1509 
	`scheduÀ_w‹k
(&
ad≠ãr
->
w©chdog_èsk
);

1512 
	}
}

1514 
	$igb_down
(
igb_ad≠ãr
 *
ad≠ãr
)

1516 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

1517 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1518 
u32
 
t˘l
, 
r˘l
;

1519 
i
;

1523 
	`£t_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
);

1526 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

1527 
	`wr32
(
E1000_RCTL
, 
r˘l
 & ~
E1000_RCTL_EN
);

1530 
	`√tif_tx_°›_Æl_queues
(
√tdev
);

1533 
t˘l
 = 
	`rd32
(
E1000_TCTL
);

1534 
t˘l
 &~
E1000_TCTL_EN
;

1535 
	`wr32
(
E1000_TCTL
, 
t˘l
);

1537 
	`wrÊ
();

1538 
	`m¶ìp
(10);

1540 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

1541 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

1542 
	`«pi_dißbÀ
(&
q_ve˘‹
->
«pi
);

1545 
	`igb_úq_dißbÀ
(
ad≠ãr
);

1547 
	`dñ_timî_sync
(&
ad≠ãr
->
w©chdog_timî
);

1548 
	`dñ_timî_sync
(&
ad≠ãr
->
phy_öfo_timî
);

1550 
	`√tif_ˇºõr_off
(
√tdev
);

1553 
	`igb_upd©e_°©s
(
ad≠ãr
);

1555 
ad≠ãr
->
lök_•ìd
 = 0;

1556 
ad≠ãr
->
lök_du∂ex
 = 0;

1558 i‡(!
	`pci_ch™√l_ofÊöe
(
ad≠ãr
->
pdev
))

1559 
	`igb_ª£t
(
ad≠ãr
);

1560 
	`igb_˛ón_Æl_tx_rögs
(
ad≠ãr
);

1561 
	`igb_˛ón_Æl_rx_rögs
(
ad≠ãr
);

1562 #ifde‡
CONFIG_IGB_DCA


1565 
	`igb_£tup_dˇ
(
ad≠ãr
);

1567 
	}
}

1569 
	$igb_ªöô_locked
(
igb_ad≠ãr
 *
ad≠ãr
)

1571 
	`WARN_ON
(
	`ö_öãºu±
());

1572 
	`ã°_™d_£t_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
))

1573 
	`m¶ìp
(1);

1574 
	`igb_down
(
ad≠ãr
);

1575 
	`igb_up
(
ad≠ãr
);

1576 
	`˛ór_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
);

1577 
	}
}

1579 
	$igb_ª£t
(
igb_ad≠ãr
 *
ad≠ãr
)

1581 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

1582 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

1583 
e1000_mac_öfo
 *
mac
 = &
hw
->mac;

1584 
e1000_fc_öfo
 *
fc
 = &
hw
->fc;

1585 
u32
 
pba
 = 0, 
tx_•a˚
, 
mö_tx_•a˚
, 
mö_rx_•a˚
;

1586 
u16
 
hwm
;

1591 
mac
->
ty≥
) {

1592 
e1000_i350
:

1593 
e1000_82580
:

1594 
pba
 = 
	`rd32
(
E1000_RXPBS
);

1595 
pba
 = 
	`igb_rxpbs_adju°_82580
(pba);

1597 
e1000_82576
:

1598 
pba
 = 
	`rd32
(
E1000_RXPBS
);

1599 
pba
 &
E1000_RXPBS_SIZE_MASK_82576
;

1601 
e1000_82575
:

1603 
pba
 = 
E1000_PBA_34K
;

1607 i‡((
ad≠ãr
->
max_‰ame_size
 > 
ETH_FRAME_LEN
 + 
ETH_FCS_LEN
) &&

1608 (
mac
->
ty≥
 < 
e1000_82576
)) {

1610 
	`wr32
(
E1000_PBA
, 
pba
);

1618 
pba
 = 
	`rd32
(
E1000_PBA
);

1620 
tx_•a˚
 = 
pba
 >> 16;

1622 
pba
 &= 0xffff;

1625 
mö_tx_•a˚
 = (
ad≠ãr
->
max_‰ame_size
 +

1626 (
e1000_adv_tx_desc
) -

1627 
ETH_FCS_LEN
) * 2;

1628 
mö_tx_•a˚
 = 
	`ALIGN
(min_tx_space, 1024);

1629 
mö_tx_•a˚
 >>= 10;

1631 
mö_rx_•a˚
 = 
ad≠ãr
->
max_‰ame_size
;

1632 
mö_rx_•a˚
 = 
	`ALIGN
(min_rx_space, 1024);

1633 
mö_rx_•a˚
 >>= 10;

1638 i‡(
tx_•a˚
 < 
mö_tx_•a˚
 &&

1639 ((
mö_tx_•a˚
 - 
tx_•a˚
Ë< 
pba
)) {

1640 
pba
 =Öb®- (
mö_tx_•a˚
 - 
tx_•a˚
);

1644 i‡(
pba
 < 
mö_rx_•a˚
)

1645 
pba
 = 
mö_rx_•a˚
;

1647 
	`wr32
(
E1000_PBA
, 
pba
);

1656 
hwm
 = 
	`mö
(((
pba
 << 10) * 9 / 10),

1657 ((
pba
 << 10Ë- 2 * 
ad≠ãr
->
max_‰ame_size
));

1659 
fc
->
high_w©î
 = 
hwm
 & 0xFFF0;

1660 
fc
->
low_w©î
 = fc->
high_w©î
 - 16;

1661 
fc
->
∑u£_time
 = 0xFFFF;

1662 
fc
->
£nd_x⁄
 = 1;

1663 
fc
->
cuºít_mode
 = fc->
ªque°ed_mode
;

1666 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

1667 
i
;

1668 
i
 = 0 ; i < 
ad≠ãr
->
vfs_Æloˇãd_cou¡
; i++)

1669 
ad≠ãr
->
vf_d©a
[
i
].
Êags
 = 0;

1672 
	`igb_pög_Æl_vfs
(
ad≠ãr
);

1675 
	`wr32
(
E1000_VFRE
, 0);

1676 
	`wr32
(
E1000_VFTE
, 0);

1680 
hw
->
mac
.
›s
.
	`ª£t_hw
(hw);

1681 
	`wr32
(
E1000_WUC
, 0);

1683 i‡(
hw
->
mac
.
›s
.
	`öô_hw
(hw))

1684 
	`dev_îr
(&
pdev
->
dev
, "Hardware Error\n");

1686 i‡(
hw
->
mac
.
ty≥
 =
e1000_82580
) {

1687 
u32
 
ªg
 = 
	`rd32
(
E1000_PCIEMISC
);

1688 
	`wr32
(
E1000_PCIEMISC
,

1689 
ªg
 & ~
E1000_PCIEMISC_LX_DECISION
);

1691 i‡(!
	`√tif_ru¬ög
(
ad≠ãr
->
√tdev
))

1692 
	`igb_powî_down_lök
(
ad≠ãr
);

1694 
	`igb_upd©e_mng_vœn
(
ad≠ãr
);

1697 
	`wr32
(
E1000_VET
, 
ETHERNET_IEEE_VLAN_TYPE
);

1699 
	`igb_gë_phy_öfo
(
hw
);

1700 
	}
}

1702 c⁄° 
√t_devi˚_›s
 
	gigb_√tdev_›s
 = {

1703 .
ndo_›í
 = 
igb_›í
,

1704 .
	gndo_°›
 = 
igb_˛o£
,

1705 .
	gndo_°¨t_xmô
 = 
igb_xmô_‰ame_adv_Áke
,

1706 .
	gndo_gë_°©s
 = 
igb_gë_°©s
,

1707 .
	gndo_£t_rx_mode
 = 
igb_£t_rx_mode
,

1708 .
	gndo_£t_mu…iˇ°_li°
 = 
igb_£t_rx_mode
,

1709 .
	gndo_£t_mac_addªss
 = 
igb_£t_mac
,

1710 .
	gndo_ch™ge_mtu
 = 
igb_ch™ge_mtu
,

1711 .
	gndo_do_io˘l
 = 
igb_io˘l
,

1712 .
	gndo_tx_timeout
 = 
igb_tx_timeout
,

1713 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

1714 .
	gndo_vœn_rx_ªgi°î
 = 
igb_vœn_rx_ªgi°î
,

1715 .
	gndo_vœn_rx_add_vid
 = 
igb_vœn_rx_add_vid
,

1716 .
	gndo_vœn_rx_kûl_vid
 = 
igb_vœn_rx_kûl_vid
,

1717 .
	gndo_£t_vf_mac
 = 
igb_ndo_£t_vf_mac
,

1718 .
	gndo_£t_vf_vœn
 = 
igb_ndo_£t_vf_vœn
,

1719 .
	gndo_£t_vf_tx_øã
 = 
igb_ndo_£t_vf_bw
,

1720 .
	gndo_gë_vf_c⁄fig
 = 
igb_ndo_gë_vf_c⁄fig
,

1721 #ifde‡
CONFIG_NET_POLL_CONTROLLER


1722 .
	gndo_pﬁl_c⁄åﬁÀr
 = 
igb_√çﬁl
,

1737 
__devöô
 
	$igb_¥obe
(
pci_dev
 *
pdev
,

1738 c⁄° 
pci_devi˚_id
 *
ít
)

1740 
√t_devi˚
 *
√tdev
;

1741 
igb_ad≠ãr
 *
ad≠ãr
;

1742 
e1000_hw
 *
hw
;

1743 
u16
 
ì¥om_d©a
 = 0;

1744 
globÆ_quad_p‹t_a
;

1745 c⁄° 
e1000_öfo
 *
ei
 = 
igb_öfo_tbl
[
ít
->
drivî_d©a
];

1746 
mmio_°¨t
, 
mmio_Àn
;

1747 
îr
, 
pci_usög_dac
;

1748 
u16
 
ì¥om_≠me_mask
 = 
IGB_EEPROM_APME
;

1749 
u32
 
∑π_num
;

1754 i‡(
pdev
->
is_vút‚
) {

1755 
	`WARN
(1, 
KERN_ERR
 "%s (%hx:%hx) shouldÇot beá VF!\n",

1756 
	`pci_«me
(
pdev
),Ödev->
víd‹
,Ödev->
devi˚
);

1757  -
EINVAL
;

1760 
îr
 = 
	`pci_íabÀ_devi˚_mem
(
pdev
);

1761 i‡(
îr
)

1762  
îr
;

1764 
pci_usög_dac
 = 0;

1765 
îr
 = 
	`dma_£t_mask
(&
pdev
->
dev
, 
	`DMA_BIT_MASK
(64));

1766 i‡(!
îr
) {

1767 
îr
 = 
	`dma_£t_cohîít_mask
(&
pdev
->
dev
, 
	`DMA_BIT_MASK
(64));

1768 i‡(!
îr
)

1769 
pci_usög_dac
 = 1;

1771 
îr
 = 
	`dma_£t_mask
(&
pdev
->
dev
, 
	`DMA_BIT_MASK
(32));

1772 i‡(
îr
) {

1773 
îr
 = 
	`dma_£t_cohîít_mask
(&
pdev
->
dev
, 
	`DMA_BIT_MASK
(32));

1774 i‡(
îr
) {

1775 
	`dev_îr
(&
pdev
->
dev
, "No usable DMA "

1777 
îr_dma
;

1782 
îr
 = 
	`pci_ªque°_£À˘ed_ªgi⁄s
(
pdev
, 
	`pci_£À˘_b¨s
(pdev,

1783 
IORESOURCE_MEM
),

1784 
igb_drivî_«me
);

1785 i‡(
îr
)

1786 
îr_pci_ªg
;

1788 
	`pci_íabÀ_pcõ_îr‹_ªp‹tög
(
pdev
);

1790 
	`pci_£t_ma°î
(
pdev
);

1791 
	`pci_ßve_°©e
(
pdev
);

1793 
îr
 = -
ENOMEM
;

1794 
√tdev
 = 
	`Æloc_ëhîdev_mq
((
igb_ad≠ãr
),

1795 
IGB_ABS_MAX_TX_QUEUES
);

1796 i‡(!
√tdev
)

1797 
îr_Æloc_ëhîdev
;

1799 
	`SET_NETDEV_DEV
(
√tdev
, &
pdev
->
dev
);

1801 
	`pci_£t_drvd©a
(
pdev
, 
√tdev
);

1802 
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

1803 
ad≠ãr
->
√tdev
 =Çetdev;

1804 
ad≠ãr
->
pdev
 =Ödev;

1805 
hw
 = &
ad≠ãr
->hw;

1806 
hw
->
back
 = 
ad≠ãr
;

1807 
ad≠ãr
->
msg_íabÀ
 = 
NETIF_MSG_DRV
 | 
NETIF_MSG_PROBE
;

1809 
mmio_°¨t
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 0);

1810 
mmio_Àn
 = 
	`pci_ªsour˚_Àn
(
pdev
, 0);

1812 
îr
 = -
EIO
;

1813 
hw
->
hw_addr
 = 
	`i‹em≠
(
mmio_°¨t
, 
mmio_Àn
);

1815 
	`¥ötk
(
KERN_INFO
 "igb_¥obêi‹em≠: vútuÆádd∏%lxÖhysiˇ»add∏%lxÜí %ld\n",()
hw
->
hw_addr
, 
mmio_°¨t
, 
mmio_Àn
);

1816 i‡(!
hw
->
hw_addr
)

1817 
îr_i‹em≠
;

1820 
	`ukmem_Æloc_ad≠ãr
(()
ad≠ãr
);

1821 
	`ukmem_add_ªgs
(()
ad≠ãr
,
mmio_°¨t
);

1823 
√tdev
->
√tdev_›s
 = &
igb_√tdev_›s
;

1824 
	`igb_£t_ëhtoﬁ_›s
(
√tdev
);

1825 
√tdev
->
w©chdog_timeo
 = 5 * 
HZ
;

1827 
	`°∫˝y
(
√tdev
->
«me
, 
	`pci_«me
(
pdev
), (netdev->name) - 1);

1829 
√tdev
->
mem_°¨t
 = 
mmio_°¨t
;

1830 
√tdev
->
mem_íd
 = 
mmio_°¨t
 + 
mmio_Àn
;

1833 
hw
->
víd‹_id
 = 
pdev
->
víd‹
;

1834 
hw
->
devi˚_id
 = 
pdev
->
devi˚
;

1835 
hw
->
ªvisi⁄_id
 = 
pdev
->
ªvisi⁄
;

1836 
hw
->
subsy°em_víd‹_id
 = 
pdev
->
subsy°em_víd‹
;

1837 
hw
->
subsy°em_devi˚_id
 = 
pdev
->
subsy°em_devi˚
;

1840 
	`mem˝y
(&
hw
->
mac
.
›s
, 
ei
->
mac_›s
, (hw->mac.ops));

1841 
	`mem˝y
(&
hw
->
phy
.
›s
, 
ei
->
phy_›s
, (hw->phy.ops));

1842 
	`mem˝y
(&
hw
->
nvm
.
›s
, 
ei
->
nvm_›s
, (hw->nvm.ops));

1844 
îr
 = 
ei
->
	`gë_öv¨ü¡s
(
hw
);

1845 i‡(
îr
)

1846 
îr_sw_öô
;

1849 
îr
 = 
	`igb_sw_öô
(
ad≠ãr
);

1850 i‡(
îr
)

1851 
îr_sw_öô
;

1853 
	`igb_gë_bus_öfo_pcõ
(
hw
);

1855 
hw
->
phy
.
aut⁄eg_waô_to_com∂ëe
 = 
Ál£
;

1858 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
) {

1859 
hw
->
phy
.
mdix
 = 
AUTO_ALL_MODES
;

1860 
hw
->
phy
.
dißbÀ_pﬁ¨ôy_c‹ª˘i⁄
 = 
Ál£
;

1861 
hw
->
phy
.
ms_ty≥
 = 
e1000_ms_hw_deÁu…
;

1864 i‡(
	`igb_check_ª£t_block
(
hw
))

1865 
	`dev_öfo
(&
pdev
->
dev
,

1868 
√tdev
->
„©uªs
 = 
NETIF_F_SG
 |

1869 
NETIF_F_IP_CSUM
 |

1870 
NETIF_F_HW_VLAN_TX
 |

1871 
NETIF_F_HW_VLAN_RX
 |

1872 
NETIF_F_HW_VLAN_FILTER
;

1874 
√tdev
->
„©uªs
 |
NETIF_F_IPV6_CSUM
;

1875 
√tdev
->
„©uªs
 |
NETIF_F_TSO
;

1876 
√tdev
->
„©uªs
 |
NETIF_F_TSO6
;

1877 
√tdev
->
„©uªs
 |
NETIF_F_GRO
;

1879 
√tdev
->
vœn_„©uªs
 |
NETIF_F_TSO
;

1880 
√tdev
->
vœn_„©uªs
 |
NETIF_F_TSO6
;

1881 
√tdev
->
vœn_„©uªs
 |
NETIF_F_IP_CSUM
;

1882 
√tdev
->
vœn_„©uªs
 |
NETIF_F_IPV6_CSUM
;

1883 
√tdev
->
vœn_„©uªs
 |
NETIF_F_SG
;

1885 i‡(
pci_usög_dac
)

1886 
√tdev
->
„©uªs
 |
NETIF_F_HIGHDMA
;

1888 i‡(
hw
->
mac
.
ty≥
 >
e1000_82576
)

1889 
√tdev
->
„©uªs
 |
NETIF_F_SCTP_CSUM
;

1891 
ad≠ãr
->
í_mng_±
 = 
	`igb_íabÀ_mng_∑ss_thru
(
hw
);

1895 
hw
->
mac
.
›s
.
	`ª£t_hw
(hw);

1898 i‡(
	`igb_vÆid©e_nvm_checksum
(
hw
) < 0) {

1899 
	`dev_îr
(&
pdev
->
dev
, "The NVM Checksum Is Not Valid\n");

1900 
îr
 = -
EIO
;

1901 
îr_ì¥om
;

1905 i‡(
hw
->
mac
.
›s
.
	`ªad_mac_addr
(hw))

1906 
	`dev_îr
(&
pdev
->
dev
, "NVM Read Error\n");

1908 
	`mem˝y
(
√tdev
->
dev_addr
, 
hw
->
mac
.
addr
,Çëdev->
addr_Àn
);

1909 
	`mem˝y
(
√tdev
->
≥rm_addr
, 
hw
->
mac
.
addr
,Çëdev->
addr_Àn
);

1911 i‡(!
	`is_vÆid_ëhî_addr
(
√tdev
->
≥rm_addr
)) {

1912 
	`dev_îr
(&
pdev
->
dev
, "Invalid MAC Address\n");

1913 
îr
 = -
EIO
;

1914 
îr_ì¥om
;

1917 
	`£tup_timî
(&
ad≠ãr
->
w©chdog_timî
, &
igb_w©chdog
,

1918 (Ë
ad≠ãr
);

1919 
	`£tup_timî
(&
ad≠ãr
->
phy_öfo_timî
, &
igb_upd©e_phy_öfo
,

1920 (Ë
ad≠ãr
);

1922 
	`INIT_WORK
(&
ad≠ãr
->
ª£t_èsk
, 
igb_ª£t_èsk
);

1923 
	`INIT_WORK
(&
ad≠ãr
->
w©chdog_èsk
, 
igb_w©chdog_èsk
);

1926 
ad≠ãr
->
fc_aut⁄eg
 = 
åue
;

1927 
hw
->
mac
.
aut⁄eg
 = 
åue
;

1928 
hw
->
phy
.
aut⁄eg_advîti£d
 = 0x2f;

1930 
hw
->
fc
.
ªque°ed_mode
 = 
e1000_fc_deÁu…
;

1931 
hw
->
fc
.
cuºít_mode
 = 
e1000_fc_deÁu…
;

1933 
	`igb_vÆid©e_mdi_£âög
(
hw
);

1939 i‡(
hw
->
bus
.
func
 == 0)

1940 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_INIT_CONTROL3_PORT_A
, 1, &
ì¥om_d©a
);

1941 i‡(
hw
->
mac
.
ty≥
 =
e1000_82580
)

1942 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_INIT_CONTROL3_PORT_A
 +

1943 
	`NVM_82580_LAN_FUNC_OFFSET
(
hw
->
bus
.
func
), 1,

1944 &
ì¥om_d©a
);

1945 i‡(
hw
->
bus
.
func
 == 1)

1946 
hw
->
nvm
.
›s
.
	`ªad
(hw, 
NVM_INIT_CONTROL3_PORT_B
, 1, &
ì¥om_d©a
);

1948 i‡(
ì¥om_d©a
 & 
ì¥om_≠me_mask
)

1949 
ad≠ãr
->
ì¥om_wﬁ
 |
E1000_WUFC_MAG
;

1954 
pdev
->
devi˚
) {

1955 
E1000_DEV_ID_82575GB_QUAD_COPPER
:

1956 
ad≠ãr
->
ì¥om_wﬁ
 = 0;

1958 
E1000_DEV_ID_82575EB_FIBER_SERDES
:

1959 
E1000_DEV_ID_82576_FIBER
:

1960 
E1000_DEV_ID_82576_SERDES
:

1963 i‡(
	`rd32
(
E1000_STATUS
Ë& 
E1000_STATUS_FUNC_1
)

1964 
ad≠ãr
->
ì¥om_wﬁ
 = 0;

1966 
E1000_DEV_ID_82576_QUAD_COPPER
:

1967 
E1000_DEV_ID_82576_QUAD_COPPER_ET2
:

1969 i‡(
globÆ_quad_p‹t_a
 != 0)

1970 
ad≠ãr
->
ì¥om_wﬁ
 = 0;

1972 
ad≠ãr
->
Êags
 |
IGB_FLAG_QUAD_PORT_A
;

1974 i‡(++
globÆ_quad_p‹t_a
 == 4)

1975 
globÆ_quad_p‹t_a
 = 0;

1980 
ad≠ãr
->
wﬁ
 =ád≠ãr->
ì¥om_wﬁ
;

1981 
	`devi˚_£t_wakeup_íabÀ
(&
ad≠ãr
->
pdev
->
dev
,ád≠ãr->
wﬁ
);

1984 
	`igb_ª£t
(
ad≠ãr
);

1988 
	`igb_gë_hw_c⁄åﬁ
(
ad≠ãr
);

1990 
	`°r˝y
(
√tdev
->
«me
, "eth%d");

1991 
îr
 = 
	`ªgi°î_√tdev
(
√tdev
);

1992 i‡(
îr
)

1993 
îr_ªgi°î
;

1996 
	`√tif_ˇºõr_off
(
√tdev
);

1998 #ifde‡
CONFIG_IGB_DCA


1999 i‡(
	`dˇ_add_ªque°î
(&
pdev
->
dev
) == 0) {

2000 
ad≠ãr
->
Êags
 |
IGB_FLAG_DCA_ENABLED
;

2001 
	`dev_öfo
(&
pdev
->
dev
, "DCAÉnabled\n");

2002 
	`igb_£tup_dˇ
(
ad≠ãr
);

2006 
	`dev_öfo
(&
pdev
->
dev
, "Intel(R) Gigabit Ethernet Network Connection\n");

2008 
	`dev_öfo
(&
pdev
->
dev
, "%s: (PCIe:%s:%s) %pM\n",

2009 
√tdev
->
«me
,

2010 ((
hw
->
bus
.
•ìd
 =
e1000_bus_•ìd_2500
) ? "2.5Gb/s" :

2011 (
hw
->
bus
.
•ìd
 =
e1000_bus_•ìd_5000
) ? "5.0Gb/s" :

2013 ((
hw
->
bus
.
width
 =
e1000_bus_width_pcõ_x4
) ? "Width x4" :

2014 (
hw
->
bus
.
width
 =
e1000_bus_width_pcõ_x2
) ? "Width x2" :

2015 (
hw
->
bus
.
width
 =
e1000_bus_width_pcõ_x1
) ? "Width x1" :

2017 
√tdev
->
dev_addr
);

2019 
	`igb_ªad_∑π_num
(
hw
, &
∑π_num
);

2020 
	`dev_öfo
(&
pdev
->
dev
, "%s: PBA No: %06x-%03x\n", 
√tdev
->
«me
,

2021 (
∑π_num
 >> 8), (part_num & 0xff));

2023 
	`dev_öfo
(&
pdev
->
dev
,

2025 
ad≠ãr
->
msix_íåõs
 ? "MSI-X" :

2026 (
ad≠ãr
->
Êags
 & 
IGB_FLAG_HAS_MSI
) ? "MSI" : "legacy",

2027 
ad≠ãr
->
num_rx_queues
,ád≠ãr->
num_tx_queues
);

2031 
îr_ªgi°î
:

2032 
	`igb_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

2033 
îr_ì¥om
:

2034 i‡(!
	`igb_check_ª£t_block
(
hw
))

2035 
	`igb_ª£t_phy
(
hw
);

2037 i‡(
hw
->
Êash_addªss
)

2038 
	`iounm≠
(
hw
->
Êash_addªss
);

2039 
îr_sw_öô
:

2040 
	`igb_˛ór_öãºu±_scheme
(
ad≠ãr
);

2041 
	`iounm≠
(
hw
->
hw_addr
);

2042 
îr_i‹em≠
:

2043 
	`‰ì_√tdev
(
√tdev
);

2044 
îr_Æloc_ëhîdev
:

2045 
	`pci_ªÀa£_£À˘ed_ªgi⁄s
(
pdev
,

2046 
	`pci_£À˘_b¨s
(
pdev
, 
IORESOURCE_MEM
));

2047 
îr_pci_ªg
:

2048 
îr_dma
:

2049 
	`pci_dißbÀ_devi˚
(
pdev
);

2050  
îr
;

2051 
	}
}

2062 
__devexô
 
	$igb_ªmove
(
pci_dev
 *
pdev
)

2064 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

2065 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2066 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2070 
	`£t_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
);

2071 
	`dñ_timî_sync
(&
ad≠ãr
->
w©chdog_timî
);

2072 
	`dñ_timî_sync
(&
ad≠ãr
->
phy_öfo_timî
);

2074 
	`Êush_scheduÀd_w‹k
();

2076 #ifde‡
CONFIG_IGB_DCA


2077 i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_DCA_ENABLED
) {

2078 
	`dev_öfo
(&
pdev
->
dev
, "DCA disabled\n");

2079 
	`dˇ_ªmove_ªque°î
(&
pdev
->
dev
);

2080 
ad≠ãr
->
Êags
 &~
IGB_FLAG_DCA_ENABLED
;

2081 
	`wr32
(
E1000_DCA_CTRL
, 
E1000_DCA_CTRL_DCA_MODE_DISABLE
);

2087 
	`igb_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

2089 
	`uƒegi°î_√tdev
(
√tdev
);

2091 
	`igb_˛ór_öãºu±_scheme
(
ad≠ãr
);

2093 #ifde‡
CONFIG_PCI_IOV


2095 i‡(
ad≠ãr
->
vf_d©a
) {

2097 
	`pci_dißbÀ_§iov
(
pdev
);

2098 
	`m¶ìp
(500);

2100 
	`k‰ì
(
ad≠ãr
->
vf_d©a
);

2101 
ad≠ãr
->
vf_d©a
 = 
NULL
;

2102 
	`wr32
(
E1000_IOVCTL
, 
E1000_IOVCTL_REUSE_VFQ
);

2103 
	`m¶ìp
(100);

2104 
	`dev_öfo
(&
pdev
->
dev
, "IOV Disabled\n");

2108 
	`iounm≠
(
hw
->
hw_addr
);

2109 i‡(
hw
->
Êash_addªss
)

2110 
	`iounm≠
(
hw
->
Êash_addªss
);

2111 
	`pci_ªÀa£_£À˘ed_ªgi⁄s
(
pdev
,

2112 
	`pci_£À˘_b¨s
(
pdev
, 
IORESOURCE_MEM
));

2114 
	`‰ì_√tdev
(
√tdev
);

2116 
	`pci_dißbÀ_pcõ_îr‹_ªp‹tög
(
pdev
);

2118 
	`pci_dißbÀ_devi˚
(
pdev
);

2119 
	}
}

2130 
__devöô
 
	$igb_¥obe_vfs
(
igb_ad≠ãr
 * 
ad≠ãr
)

2132 #ifde‡
CONFIG_PCI_IOV


2133 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

2135 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
 > 7)

2136 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 = 7;

2138 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

2139 
ad≠ãr
->
vf_d©a
 = 
	`kˇŒoc
◊d≠ãr->
vfs_Æloˇãd_cou¡
,

2140 (
vf_d©a_°‹age
),

2141 
GFP_KERNEL
);

2143 i‡(!
ad≠ãr
->
vf_d©a
) {

2144 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 = 0;

2145 
	`dev_îr
(&
pdev
->
dev
, "UnableÅoállocate memory for VF "

2150 i‡(
	`pci_íabÀ_§iov
(
pdev
, 
ad≠ãr
->
vfs_Æloˇãd_cou¡
)) {

2151 
	`k‰ì
(
ad≠ãr
->
vf_d©a
);

2152 
ad≠ãr
->
vf_d©a
 = 
NULL
;

2154 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 = 0;

2155 #ifde‡
CONFIG_PCI_IOV


2157 
mac_addr
[
ETH_ALEN
];

2158 
i
;

2159 
	`dev_öfo
(&
pdev
->
dev
, "%d vfsállocated\n",

2160 
ad≠ãr
->
vfs_Æloˇãd_cou¡
);

2161 
i
 = 0; i < 
ad≠ãr
->
vfs_Æloˇãd_cou¡
; i++) {

2162 
	`øndom_ëhî_addr
(
mac_addr
);

2163 
	`igb_£t_vf_mac
(
ad≠ãr
, 
i
, 
mac_addr
);

2167 
	}
}

2177 
	$igb_öô_hw_timî
(
igb_ad≠ãr
 *
ad≠ãr
)

2179 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2181 
hw
->
mac
.
ty≥
) {

2182 
e1000_i350
:

2183 
e1000_82580
:

2184 
	`mem£t
(&
ad≠ãr
->
cy˛es
, 0, (adapter->cycles));

2185 
ad≠ãr
->
cy˛es
.
ªad
 = 
igb_ªad_˛ock
;

2186 
ad≠ãr
->
cy˛es
.
mask
 = 
	`CLOCKSOURCE_MASK
(64);

2187 
ad≠ãr
->
cy˛es
.
mu…
 = 1;

2195 
ad≠ãr
->
cy˛es
.
shi·
 = 
IGB_82580_TSYNC_SHIFT
;

2197 
	`wr32
(
E1000_TSAUXC
, 0x80000000);

2198 
	`wrÊ
();

2201 
	`wr32
(
E1000_SYSTIMR
, 0x00000000);

2202 
	`wr32
(
E1000_SYSTIML
, 0x80000000);

2203 
	`wr32
(
E1000_SYSTIMH
, 0x000000FF);

2204 
	`wrÊ
();

2207 
	`wr32
(
E1000_TSAUXC
, 0x0);

2208 
	`wrÊ
();

2210 
	`timecou¡î_öô
(&
ad≠ãr
->
˛ock
,

2211 &
ad≠ãr
->
cy˛es
,

2212 
	`ktime_to_ns
(
	`ktime_gë_ªÆ
()));

2219 
	`mem£t
(&
ad≠ãr
->
com∑ª
, 0, (adapter->compare));

2220 
ad≠ãr
->
com∑ª
.
sour˚
 = &ad≠ãr->
˛ock
;

2221 
ad≠ãr
->
com∑ª
.
èrgë
 = 
ktime_gë_ªÆ
;

2222 
ad≠ãr
->
com∑ª
.
num_ßm∂es
 = 10;

2223 
	`timecom∑ª_upd©e
(&
ad≠ãr
->
com∑ª
, 0);

2225 
e1000_82576
:

2230 
	`mem£t
(&
ad≠ãr
->
cy˛es
, 0, (adapter->cycles));

2231 
ad≠ãr
->
cy˛es
.
ªad
 = 
igb_ªad_˛ock
;

2232 
ad≠ãr
->
cy˛es
.
mask
 = 
	`CLOCKSOURCE_MASK
(64);

2233 
ad≠ãr
->
cy˛es
.
mu…
 = 1;

2243 
ad≠ãr
->
cy˛es
.
shi·
 = 
IGB_82576_TSYNC_SHIFT
;

2244 
	`wr32
(
E1000_TIMINCA
,

2245 (1 << 
E1000_TIMINCA_16NS_SHIFT
) |

2246 (16 << 
IGB_82576_TSYNC_SHIFT
));

2249 
	`wr32
(
E1000_SYSTIML
, 0x00000000);

2250 
	`wr32
(
E1000_SYSTIMH
, 0xFF800000);

2251 
	`wrÊ
();

2253 
	`timecou¡î_öô
(&
ad≠ãr
->
˛ock
,

2254 &
ad≠ãr
->
cy˛es
,

2255 
	`ktime_to_ns
(
	`ktime_gë_ªÆ
()));

2262 
	`mem£t
(&
ad≠ãr
->
com∑ª
, 0, (adapter->compare));

2263 
ad≠ãr
->
com∑ª
.
sour˚
 = &ad≠ãr->
˛ock
;

2264 
ad≠ãr
->
com∑ª
.
èrgë
 = 
ktime_gë_ªÆ
;

2265 
ad≠ãr
->
com∑ª
.
num_ßm∂es
 = 10;

2266 
	`timecom∑ª_upd©e
(&
ad≠ãr
->
com∑ª
, 0);

2268 
e1000_82575
:

2274 
	}
}

2284 
__devöô
 
	$igb_sw_öô
(
igb_ad≠ãr
 *
ad≠ãr
)

2286 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2287 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

2288 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

2290 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, &
hw
->
bus
.
pci_cmd_w‹d
);

2292 
ad≠ãr
->
tx_rög_cou¡
 = 
IGB_DEFAULT_TXD
;

2293 
ad≠ãr
->
rx_rög_cou¡
 = 
IGB_DEFAULT_RXD
;

2294 
ad≠ãr
->
rx_ôr_£âög
 = 
IGB_DEFAULT_ITR
;

2295 
ad≠ãr
->
tx_ôr_£âög
 = 
IGB_DEFAULT_ITR
;

2297 
ad≠ãr
->
max_‰ame_size
 = 
√tdev
->
mtu
 + 
ETH_HLEN
 + 
ETH_FCS_LEN
;

2298 
ad≠ãr
->
mö_‰ame_size
 = 
ETH_ZLEN
 + 
ETH_FCS_LEN
;

2300 #ifde‡
CONFIG_PCI_IOV


2301 i‡(
hw
->
mac
.
ty≥
 =
e1000_82576
)

2302 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 = 
max_vfs
;

2305 
ad≠ãr
->
rss_queues
 = 
	`mö_t
(
u32
, 
IGB_MAX_RX_QUEUES
, 
	`num_⁄löe_˝us
());

2312 i‡((
ad≠ãr
->
rss_queues
 > 4) ||

2313 ((
ad≠ãr
->
rss_queues
 > 1Ë&& (ad≠ãr->
vfs_Æloˇãd_cou¡
 > 6)))

2314 
ad≠ãr
->
Êags
 |
IGB_FLAG_QUEUE_PAIRS
;

2317 i‡(
	`igb_öô_öãºu±_scheme
(
ad≠ãr
)) {

2318 
	`dev_îr
(&
pdev
->
dev
, "UnableÅoállocate memory for queues\n");

2319  -
ENOMEM
;

2322 
	`igb_öô_hw_timî
(
ad≠ãr
);

2323 
	`igb_¥obe_vfs
(
ad≠ãr
);

2326 
	`igb_úq_dißbÀ
(
ad≠ãr
);

2328 
	`£t_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
);

2330 
	}
}

2344 
	$igb_›í
(
√t_devi˚
 *
√tdev
)

2346 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2347 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2348 
îr
;

2349 
i
;

2351 
	`¥ötk
(
KERN_INFO
 "igb_›í“ë_devi˚ %lx)\n",()
√tdev
);

2354 i‡(
	`ã°_bô
(
__IGB_TESTING
, &
ad≠ãr
->
°©e
))

2355  -
EBUSY
;

2357 
	`√tif_ˇºõr_off
(
√tdev
);

2360 
îr
 = 
	`igb_£tup_Æl_tx_ªsour˚s
(
ad≠ãr
);

2361 i‡(
îr
)

2362 
îr_£tup_tx
;

2365 
îr
 = 
	`igb_£tup_Æl_rx_ªsour˚s
(
ad≠ãr
);

2366 i‡(
îr
)

2367 
îr_£tup_rx
;

2369 
	`igb_powî_up_lök
(
ad≠ãr
);

2375 
	`igb_c⁄figuª
(
ad≠ãr
);

2377 
îr
 = 
	`igb_ªque°_úq
(
ad≠ãr
);

2378 i‡(
îr
)

2379 
îr_ªq_úq
;

2382 
	`˛ór_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
);

2384 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

2385 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

2386 
	`«pi_íabÀ
(&
q_ve˘‹
->
«pi
);

2390 
	`rd32
(
E1000_ICR
);

2393 
	`igb_úq_dißbÀ
(
ad≠ãr
);

2396 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

2397 
u32
 
ªg_d©a
 = 
	`rd32
(
E1000_CTRL_EXT
);

2398 
ªg_d©a
 |
E1000_CTRL_EXT_PFRSTD
;

2399 
	`wr32
(
E1000_CTRL_EXT
, 
ªg_d©a
);

2402 
	`√tif_tx_°¨t_Æl_queues
(
√tdev
);

2405 
hw
->
mac
.
gë_lök_°©us
 = 1;

2406 
	`scheduÀ_w‹k
(&
ad≠ãr
->
w©chdog_èsk
);

2410 
îr_ªq_úq
:

2411 
	`igb_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

2412 
	`igb_powî_down_lök
(
ad≠ãr
);

2413 
	`igb_‰ì_Æl_rx_ªsour˚s
(
ad≠ãr
);

2414 
îr_£tup_rx
:

2415 
	`igb_‰ì_Æl_tx_ªsour˚s
(
ad≠ãr
);

2416 
îr_£tup_tx
:

2417 
	`igb_ª£t
(
ad≠ãr
);

2419  
îr
;

2420 
	}
}

2433 
	$igb_˛o£
(
√t_devi˚
 *
√tdev
)

2435 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

2437 
	`WARN_ON
(
	`ã°_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
));

2438 
	`igb_down
(
ad≠ãr
);

2440 
	`igb_‰ì_úq
(
ad≠ãr
);

2442 
	`igb_‰ì_Æl_tx_ªsour˚s
(
ad≠ãr
);

2443 
	`igb_‰ì_Æl_rx_ªsour˚s
(
ad≠ãr
);

2446 
	}
}

2454 
	$igb_£tup_tx_ªsour˚s
(
igb_rög
 *
tx_rög
)

2456 
devi˚
 *
dev
 = 
tx_rög
->dev;

2457 
size
;

2459 
size
 = (
igb_buf„r
Ë* 
tx_rög
->
cou¡
;

2460 
tx_rög
->
buf„r_öfo
 = 
	`vmÆloc
(
size
);

2461 i‡(!
tx_rög
->
buf„r_öfo
)

2462 
îr
;

2463 
	`mem£t
(
tx_rög
->
buf„r_öfo
, 0, 
size
);

2466 
tx_rög
->
size
 =Åx_rög->
cou¡
 * (
e1000_adv_tx_desc
);

2467 
tx_rög
->
size
 = 
	`ALIGN
(tx_ring->size, 4096);

2470 
	`¥ötk
(
KERN_INFO
 "tx desc_À¿%ld m≠ sizê%dÇum %d\n\n",(
e1000_adv_tx_desc
),
tx_rög
->
size
,tx_rög->
cou¡
);

2471 
tx_rög
->
desc
 = 
	`dma_Æloc_cohîít
(
dev
,

2472 
tx_rög
->
size
,

2473 &
tx_rög
->
dma
,

2474 
GFP_KERNEL
);

2476 i‡(!
tx_rög
->
desc
)

2477 
îr
;

2481 
tx_rög
->
√xt_to_u£
 = 0;

2482 
tx_rög
->
√xt_to_˛ón
 = 0;

2485 
îr
:

2486 
	`v‰ì
(
tx_rög
->
buf„r_öfo
);

2487 
	`dev_îr
(
dev
,

2489  -
ENOMEM
;

2490 
	}
}

2499 
	$igb_£tup_Æl_tx_ªsour˚s
(
igb_ad≠ãr
 *
ad≠ãr
)

2501 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

2502 
i
, 
îr
 = 0;

2504 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

2506 
îr
 = 
	`igb_£tup_tx_ªsour˚s
(
ad≠ãr
->
tx_rög
[
i
]);

2508 i‡(
îr
) {

2509 
	`dev_îr
(&
pdev
->
dev
,

2510 "AŒoˇti⁄ f‹ Tx Queuê%u faûed\n", 
i
);

2511 
i
--; i >= 0; i--)

2512 
	`igb_‰ì_tx_ªsour˚s
(
ad≠ãr
->
tx_rög
[
i
]);

2516 
	`ukmem_add_tx_desc
(()
ad≠ãr
,ád≠ãr->
tx_rög
[
i
]->
dma
);

2519 
i
 = 0; i < 
IGB_ABS_MAX_TX_QUEUES
; i++) {

2520 
r_idx
 = 
i
 % 
ad≠ãr
->
num_tx_queues
;

2521 
ad≠ãr
->
mu…i_tx_èbÀ
[
i
] =ád≠ãr->
tx_rög
[
r_idx
];

2523  
îr
;

2524 
	}
}

2530 
	$igb_£tup_t˘l
(
igb_ad≠ãr
 *
ad≠ãr
)

2532 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2533 
u32
 
t˘l
;

2536 
	`wr32
(
	`E1000_TXDCTL
(0), 0);

2539 
t˘l
 = 
	`rd32
(
E1000_TCTL
);

2540 
t˘l
 &~
E1000_TCTL_CT
;

2541 
t˘l
 |
E1000_TCTL_PSP
 | 
E1000_TCTL_RTLC
 |

2542 (
E1000_COLLISION_THRESHOLD
 << 
E1000_CT_SHIFT
);

2544 
	`igb_c⁄fig_cﬁlisi⁄_di°
(
hw
);

2547 
t˘l
 |
E1000_TCTL_EN
;

2549 
	`wr32
(
E1000_TCTL
, 
t˘l
);

2550 
	}
}

2559 
	$igb_c⁄figuª_tx_rög
(
igb_ad≠ãr
 *
ad≠ãr
,

2560 
igb_rög
 *
rög
)

2562 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2563 
u32
 
txd˘l
;

2564 
u64
 
tdba
 = 
rög
->
dma
;

2565 
ªg_idx
 = 
rög
->reg_idx;

2568 
txd˘l
 = 
	`rd32
(
	`E1000_TXDCTL
(
ªg_idx
));

2569 
	`wr32
(
	`E1000_TXDCTL
(
ªg_idx
),

2570 
txd˘l
 & ~
E1000_TXDCTL_QUEUE_ENABLE
);

2571 
	`wrÊ
();

2572 
	`mdñay
(10);

2574 
	`wr32
(
	`E1000_TDLEN
(
ªg_idx
),

2575 
rög
->
cou¡
 * (
e1000_adv_tx_desc
));

2576 
	`wr32
(
	`E1000_TDBAL
(
ªg_idx
),

2577 
tdba
 & 0x00000000ffffffffULL);

2578 
	`wr32
(
	`E1000_TDBAH
(
ªg_idx
), 
tdba
 >> 32);

2581 
	`¥ötk
(
KERN_INFO
 "igb_c⁄figuª_tx_rög hw->hw_add∏%lxÑeg_idx = %d\n",
hw
->
hw_addr
,
ªg_idx
);

2582 
rög
->
hód
 = 
hw
->
hw_addr
 + 
	`E1000_TDH
(
ªg_idx
);

2583 
rög
->
èû
 = 
hw
->
hw_addr
 + 
	`E1000_TDT
(
ªg_idx
);

2584 
	`wrôñ
(0, 
rög
->
hód
);

2585 
	`wrôñ
(0, 
rög
->
èû
);

2587 
txd˘l
 |
IGB_TX_PTHRESH
;

2588 
txd˘l
 |
IGB_TX_HTHRESH
 << 8;

2589 
txd˘l
 |
IGB_TX_WTHRESH
 << 16;

2591 
txd˘l
 |
E1000_TXDCTL_QUEUE_ENABLE
;

2592 
	`wr32
(
	`E1000_TXDCTL
(
ªg_idx
), 
txd˘l
);

2593 
	}
}

2601 
	$igb_c⁄figuª_tx
(
igb_ad≠ãr
 *
ad≠ãr
)

2603 
i
;

2605 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

2606 
	`igb_c⁄figuª_tx_rög
(
ad≠ãr
,ád≠ãr->
tx_rög
[
i
]);

2607 
	}
}

2615 
	$igb_£tup_rx_ªsour˚s
(
igb_rög
 *
rx_rög
)

2617 
devi˚
 *
dev
 = 
rx_rög
->dev;

2618 
size
, 
desc_Àn
;

2621 
	`¥ötk
(
KERN_INFO
 "igb_£tup_rx_ªsour˚†rx_rög->cou¡ = %d\n",
rx_rög
->
cou¡
);

2623 
size
 = (
igb_buf„r
Ë* 
rx_rög
->
cou¡
;

2624 
rx_rög
->
buf„r_öfo
 = 
	`vmÆloc
(
size
);

2625 i‡(!
rx_rög
->
buf„r_öfo
)

2626 
îr
;

2627 
	`mem£t
(
rx_rög
->
buf„r_öfo
, 0, 
size
);

2629 
desc_Àn
 = (
e1000_adv_rx_desc
);

2632 
rx_rög
->
size
 =Ñx_rög->
cou¡
 * 
desc_Àn
;

2633 
rx_rög
->
size
 = 
	`ALIGN
(rx_ring->size, 4096);

2636 
	`¥ötk
(
KERN_INFO
 "rx desc_À¿%d m≠ sizê%d\n",
desc_Àn
,
rx_rög
->
size
);

2638 
rx_rög
->
desc
 = 
	`dma_Æloc_cohîít
(
dev
,

2639 
rx_rög
->
size
,

2640 &
rx_rög
->
dma
,

2641 
GFP_KERNEL
);

2643 i‡(!
rx_rög
->
desc
)

2644 
îr
;

2648 
rx_rög
->
√xt_to_˛ón
 = 0;

2649 
rx_rög
->
√xt_to_u£
 = 0;

2653 
îr
:

2654 
	`v‰ì
(
rx_rög
->
buf„r_öfo
);

2655 
rx_rög
->
buf„r_öfo
 = 
NULL
;

2656 
	`dev_îr
(
dev
, "UnableÅoállocate memory forÅheÑeceive descriptor"

2658  -
ENOMEM
;

2659 
	}
}

2668 
	$igb_£tup_Æl_rx_ªsour˚s
(
igb_ad≠ãr
 *
ad≠ãr
)

2670 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

2671 
i
, 
îr
 = 0;

2673 
	`¥ötk
(
KERN_INFO
 "igb_£tup_Æl_rx_ªsour˚s:ád≠ãr->num_rx_queue†%d\n",
ad≠ãr
->
num_rx_queues
);

2674 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

2675 
îr
 = 
	`igb_£tup_rx_ªsour˚s
(
ad≠ãr
->
rx_rög
[
i
]);

2676 i‡(
îr
) {

2677 
	`dev_îr
(&
pdev
->
dev
,

2678 "AŒoˇti⁄ f‹ Rx Queuê%u faûed\n", 
i
);

2679 
i
--; i >= 0; i--)

2680 
	`igb_‰ì_rx_ªsour˚s
(
ad≠ãr
->
rx_rög
[
i
]);

2684 
	`ukmem_add_rx_desc
(()
ad≠ãr
,ád≠ãr->
rx_rög
[
i
]->
dma
);

2687  
îr
;

2688 
	}
}

2694 
	$igb_£tup_mrqc
(
igb_ad≠ãr
 *
ad≠ãr
)

2696 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2697 
u32
 
mrqc
, 
rxcsum
;

2698 
u32
 
j
, 
num_rx_queues
, 
shi·
 = 0, 
shi·2
 = 0;

2699 
	ue1000_ªè
 {

2700 
u32
 
dw‹d
;

2701 
u8
 
byãs
[4];

2702 } 
ªè
;

2703 c⁄° 
u8
 
rsshash
[40] = {

2710 
j
 = 0; j < 10; j++) {

2711 
u32
 
rsskey
 = 
rsshash
[(
j
 * 4)];

2712 
rsskey
 |
rsshash
[(
j
 * 4) + 1] << 8;

2713 
rsskey
 |
rsshash
[(
j
 * 4) + 2] << 16;

2714 
rsskey
 |
rsshash
[(
j
 * 4) + 3] << 24;

2715 
	`¨øy_wr32
(
	`E1000_RSSRK
(0), 
j
, 
rsskey
);

2718 
num_rx_queues
 = 
ad≠ãr
->
rss_queues
;

2720 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

2722 
hw
->
mac
.
ty≥
) {

2723 
e1000_i350
:

2724 
e1000_82580
:

2725 
num_rx_queues
 = 1;

2726 
shi·
 = 0;

2728 
e1000_82576
:

2729 
shi·
 = 3;

2730 
num_rx_queues
 = 2;

2732 
e1000_82575
:

2733 
shi·
 = 2;

2734 
shi·2
 = 6;

2739 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
)

2740 
shi·
 = 6;

2743 
j
 = 0; j < (32 * 4); j++) {

2744 
ªè
.
byãs
[
j
 & 3] = (j % 
num_rx_queues
Ë<< 
shi·
;

2745 i‡(
shi·2
)

2746 
ªè
.
byãs
[
j
 & 3] |
num_rx_queues
 << 
shi·2
;

2747 i‡((
j
 & 3) == 3)

2748 
	`wr32
(
	`E1000_RETA
(
j
 >> 2), 
ªè
.
dw‹d
);

2756 
rxcsum
 = 
	`rd32
(
E1000_RXCSUM
);

2757 
rxcsum
 |
E1000_RXCSUM_PCSD
;

2759 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 >
e1000_82576
)

2761 
rxcsum
 |
E1000_RXCSUM_CRCOFL
;

2764 
	`wr32
(
E1000_RXCSUM
, 
rxcsum
);

2769 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

2770 i‡(
hw
->
mac
.
ty≥
 > 
e1000_82575
) {

2772 
u32
 
vt˘l
 = 
	`rd32
(
E1000_VT_CTL
);

2773 
vt˘l
 &~(
E1000_VT_CTL_DEFAULT_POOL_MASK
 |

2774 
E1000_VT_CTL_DISABLE_DEF_POOL
);

2775 
vt˘l
 |
ad≠ãr
->
vfs_Æloˇãd_cou¡
 <<

2776 
E1000_VT_CTL_DEFAULT_POOL_SHIFT
;

2777 
	`wr32
(
E1000_VT_CTL
, 
vt˘l
);

2779 i‡(
ad≠ãr
->
rss_queues
 > 1)

2780 
mrqc
 = 
E1000_MRQC_ENABLE_VMDQ_RSS_2Q
;

2782 
mrqc
 = 
E1000_MRQC_ENABLE_VMDQ
;

2784 
mrqc
 = 
E1000_MRQC_ENABLE_RSS_4Q
;

2786 
	`igb_vmm_c⁄åﬁ
(
ad≠ãr
);

2788 
mrqc
 |(
E1000_MRQC_RSS_FIELD_IPV4
 |

2789 
E1000_MRQC_RSS_FIELD_IPV4_TCP
);

2790 
mrqc
 |(
E1000_MRQC_RSS_FIELD_IPV6
 |

2791 
E1000_MRQC_RSS_FIELD_IPV6_TCP
);

2792 
mrqc
 |(
E1000_MRQC_RSS_FIELD_IPV4_UDP
 |

2793 
E1000_MRQC_RSS_FIELD_IPV6_UDP
);

2794 
mrqc
 |(
E1000_MRQC_RSS_FIELD_IPV6_UDP_EX
 |

2795 
E1000_MRQC_RSS_FIELD_IPV6_TCP_EX
);

2797 
	`wr32
(
E1000_MRQC
, 
mrqc
);

2798 
	}
}

2804 
	$igb_£tup_r˘l
(
igb_ad≠ãr
 *
ad≠ãr
)

2806 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2807 
u32
 
r˘l
;

2809 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

2811 
r˘l
 &~(3 << 
E1000_RCTL_MO_SHIFT
);

2812 
r˘l
 &~(
E1000_RCTL_LBM_TCVR
 | 
E1000_RCTL_LBM_MAC
);

2814 
r˘l
 |
E1000_RCTL_EN
 | 
E1000_RCTL_BAM
 | 
E1000_RCTL_RDMTS_HALF
 |

2815 (
hw
->
mac
.
mc_fûãr_ty≥
 << 
E1000_RCTL_MO_SHIFT
);

2822 
r˘l
 |
E1000_RCTL_SECRC
;

2825 
r˘l
 &~(
E1000_RCTL_SBP
 | 
E1000_RCTL_SZ_256
);

2828 
r˘l
 |
E1000_RCTL_LPE
;

2831 
	`wr32
(
	`E1000_RXDCTL
(0), 0);

2837 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

2839 
	`wr32
(
E1000_QDE
, 
ALL_QUEUES
);

2842 
	`wr32
(
E1000_RCTL
, 
r˘l
);

2843 
	}
}

2845 
ölöe
 
	$igb_£t_vf_æpml
(
igb_ad≠ãr
 *
ad≠ãr
, 
size
,

2846 
v‚
)

2848 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2849 
u32
 
vmﬁr
;

2853 i‡(
v‚
 < 
ad≠ãr
->
vfs_Æloˇãd_cou¡
 &&

2854 
ad≠ãr
->
vf_d©a
[
v‚
].
vœns_íabÀd
)

2855 
size
 +
VLAN_TAG_SIZE
;

2857 
vmﬁr
 = 
	`rd32
(
	`E1000_VMOLR
(
v‚
));

2858 
vmﬁr
 &~
E1000_VMOLR_RLPML_MASK
;

2859 
vmﬁr
 |
size
 | 
E1000_VMOLR_LPE
;

2860 
	`wr32
(
	`E1000_VMOLR
(
v‚
), 
vmﬁr
);

2863 
	}
}

2871 
	$igb_æpml_£t
(
igb_ad≠ãr
 *
ad≠ãr
)

2873 
u32
 
max_‰ame_size
 = 
ad≠ãr
->max_frame_size;

2874 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2875 
u16
 
pf_id
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

2877 i‡(
ad≠ãr
->
vlgΩ
)

2878 
max_‰ame_size
 +
VLAN_TAG_SIZE
;

2882 i‡(
pf_id
) {

2883 
	`igb_£t_vf_æpml
(
ad≠ãr
, 
max_‰ame_size
, 
pf_id
);

2884 
max_‰ame_size
 = 
MAX_JUMBO_FRAME_SIZE
;

2887 
	`wr32
(
E1000_RLPML
, 
max_‰ame_size
);

2888 
	}
}

2890 
ölöe
 
	$igb_£t_vmﬁr
(
igb_ad≠ãr
 *
ad≠ãr
,

2891 
v‚
, 
boﬁ
 
au≥
)

2893 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2894 
u32
 
vmﬁr
;

2900 i‡(
hw
->
mac
.
ty≥
 < 
e1000_82576
)

2903 
vmﬁr
 = 
	`rd32
(
	`E1000_VMOLR
(
v‚
));

2904 
vmﬁr
 |
E1000_VMOLR_STRVLAN
;

2905 i‡(
au≥
)

2906 
vmﬁr
 |
E1000_VMOLR_AUPE
;

2908 
vmﬁr
 &~(
E1000_VMOLR_AUPE
);

2911 
vmﬁr
 &~(
E1000_VMOLR_BAM
 | 
E1000_VMOLR_RSSE
);

2913 i‡(
ad≠ãr
->
rss_queues
 > 1 && 
v‚
 =ad≠ãr->
vfs_Æloˇãd_cou¡
)

2914 
vmﬁr
 |
E1000_VMOLR_RSSE
;

2919 i‡(
v‚
 <
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

2920 
vmﬁr
 |
E1000_VMOLR_BAM
;

2922 
	`wr32
(
	`E1000_VMOLR
(
v‚
), 
vmﬁr
);

2923 
	}
}

2932 
	$igb_c⁄figuª_rx_rög
(
igb_ad≠ãr
 *
ad≠ãr
,

2933 
igb_rög
 *
rög
)

2935 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

2936 
u64
 
rdba
 = 
rög
->
dma
;

2937 
ªg_idx
 = 
rög
->reg_idx;

2938 
u32
 
§r˘l
, 
rxd˘l
;

2941 
rxd˘l
 = 
	`rd32
(
	`E1000_RXDCTL
(
ªg_idx
));

2942 
	`wr32
(
	`E1000_RXDCTL
(
ªg_idx
),

2943 
rxd˘l
 & ~
E1000_RXDCTL_QUEUE_ENABLE
);

2946 
	`wr32
(
	`E1000_RDBAL
(
ªg_idx
),

2947 
rdba
 & 0x00000000ffffffffULL);

2948 
	`wr32
(
	`E1000_RDBAH
(
ªg_idx
), 
rdba
 >> 32);

2949 
	`wr32
(
	`E1000_RDLEN
(
ªg_idx
),

2950 
rög
->
cou¡
 * (
e1000_adv_rx_desc
));

2953 
	`¥ötk
(
KERN_INFO
 "igb_c⁄figuª_rx_rög hw->hw_add∏%lxÑeg_idx = %d\n",
hw
->
hw_addr
,
ªg_idx
);

2954 
rög
->
hód
 = 
hw
->
hw_addr
 + 
	`E1000_RDH
(
ªg_idx
);

2955 
rög
->
èû
 = 
hw
->
hw_addr
 + 
	`E1000_RDT
(
ªg_idx
);

2956 
	`wrôñ
(0, 
rög
->
hód
);

2957 
	`wrôñ
(0, 
rög
->
èû
);

2960 i‡(
rög
->
rx_buf„r_Àn
 < 
IGB_RXBUFFER_1024
) {

2961 
§r˘l
 = 
	`ALIGN
(
rög
->
rx_buf„r_Àn
, 64) <<

2962 
E1000_SRRCTL_BSIZEHDRSIZE_SHIFT
;

2963 #i‡(
PAGE_SIZE
 / 2Ë> 
IGB_RXBUFFER_16384


2964 
§r˘l
 |
IGB_RXBUFFER_16384
 >>

2965 
E1000_SRRCTL_BSIZEPKT_SHIFT
;

2967 
§r˘l
 |(
PAGE_SIZE
 / 2) >>

2968 
E1000_SRRCTL_BSIZEPKT_SHIFT
;

2970 
§r˘l
 |
E1000_SRRCTL_DESCTYPE_HDR_SPLIT_ALWAYS
;

2972 
§r˘l
 = 
	`ALIGN
(
rög
->
rx_buf„r_Àn
, 1024) >>

2973 
E1000_SRRCTL_BSIZEPKT_SHIFT
;

2974 
§r˘l
 |
E1000_SRRCTL_DESCTYPE_ADV_ONEBUF
;

2976 i‡(
hw
->
mac
.
ty≥
 =
e1000_82580
)

2977 
§r˘l
 |
E1000_SRRCTL_TIMESTAMP
;

2979 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
 ||ád≠ãr->
num_rx_queues
 > 1)

2980 
§r˘l
 |
E1000_SRRCTL_DROP_EN
;

2982 
	`wr32
(
	`E1000_SRRCTL
(
ªg_idx
), 
§r˘l
);

2985 
	`igb_£t_vmﬁr
(
ad≠ãr
, 
ªg_idx
 & 0x7, 
åue
);

2988 
rxd˘l
 = 
	`rd32
(
	`E1000_RXDCTL
(
ªg_idx
));

2989 
rxd˘l
 |
E1000_RXDCTL_QUEUE_ENABLE
;

2990 
rxd˘l
 &= 0xFFF00000;

2991 
rxd˘l
 |
IGB_RX_PTHRESH
;

2992 
rxd˘l
 |
IGB_RX_HTHRESH
 << 8;

2993 
rxd˘l
 |
IGB_RX_WTHRESH
 << 16;

2994 
	`wr32
(
	`E1000_RXDCTL
(
ªg_idx
), 
rxd˘l
);

2995 
	}
}

3003 
	$igb_c⁄figuª_rx
(
igb_ad≠ãr
 *
ad≠ãr
)

3005 
i
;

3008 
	`igb_£t_uè
(
ad≠ãr
);

3011 
	`igb_ør_£t_q£l
(
ad≠ãr
,ád≠ãr->
hw
.
mac
.
addr
, 0,

3012 
ad≠ãr
->
vfs_Æloˇãd_cou¡
);

3016 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

3017 
	`igb_c⁄figuª_rx_rög
(
ad≠ãr
,ád≠ãr->
rx_rög
[
i
]);

3018 
	}
}

3026 
	$igb_‰ì_tx_ªsour˚s
(
igb_rög
 *
tx_rög
)

3028 
	`igb_˛ón_tx_rög
(
tx_rög
);

3030 
	`v‰ì
(
tx_rög
->
buf„r_öfo
);

3031 
tx_rög
->
buf„r_öfo
 = 
NULL
;

3034 i‡(!
tx_rög
->
desc
)

3037 
	`dma_‰ì_cohîít
(
tx_rög
->
dev
,Åx_rög->
size
,

3038 
tx_rög
->
desc
,Åx_rög->
dma
);

3040 
tx_rög
->
desc
 = 
NULL
;

3041 
	}
}

3049 
	$igb_‰ì_Æl_tx_ªsour˚s
(
igb_ad≠ãr
 *
ad≠ãr
)

3051 
i
;

3053 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

3054 
	`igb_‰ì_tx_ªsour˚s
(
ad≠ãr
->
tx_rög
[
i
]);

3055 
	}
}

3057 
	$igb_unm≠_™d_‰ì_tx_ªsour˚
(
igb_rög
 *
tx_rög
,

3058 
igb_buf„r
 *
buf„r_öfo
)

3060 i‡(
buf„r_öfo
->
dma
) {

3061 i‡(
buf„r_öfo
->
m≠≥d_as_∑ge
)

3062 
	`dma_unm≠_∑ge
(
tx_rög
->
dev
,

3063 
buf„r_öfo
->
dma
,

3064 
buf„r_öfo
->
Àngth
,

3065 
DMA_TO_DEVICE
);

3067 
	`dma_unm≠_sögÀ
(
tx_rög
->
dev
,

3068 
buf„r_öfo
->
dma
,

3069 
buf„r_öfo
->
Àngth
,

3070 
DMA_TO_DEVICE
);

3071 
buf„r_öfo
->
dma
 = 0;

3073 i‡(
buf„r_öfo
->
skb
) {

3075 
	`ukmem_skb_‰ì
(
buf„r_öfo
->
skb
);

3076 
buf„r_öfo
->
skb
 = 
NULL
;

3078 
buf„r_öfo
->
time_°amp
 = 0;

3079 
buf„r_öfo
->
Àngth
 = 0;

3080 
buf„r_öfo
->
√xt_to_w©ch
 = 0;

3081 
buf„r_öfo
->
m≠≥d_as_∑ge
 = 
Ál£
;

3082 
	}
}

3088 
	$igb_˛ón_tx_rög
(
igb_rög
 *
tx_rög
)

3090 
igb_buf„r
 *
buf„r_öfo
;

3091 
size
;

3092 
i
;

3094 i‡(!
tx_rög
->
buf„r_öfo
)

3098 
i
 = 0; i < 
tx_rög
->
cou¡
; i++) {

3099 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

3100 
	`igb_unm≠_™d_‰ì_tx_ªsour˚
(
tx_rög
, 
buf„r_öfo
);

3103 
size
 = (
igb_buf„r
Ë* 
tx_rög
->
cou¡
;

3104 
	`mem£t
(
tx_rög
->
buf„r_öfo
, 0, 
size
);

3107 
	`mem£t
(
tx_rög
->
desc
, 0,Åx_rög->
size
);

3109 
tx_rög
->
√xt_to_u£
 = 0;

3110 
tx_rög
->
√xt_to_˛ón
 = 0;

3111 
	}
}

3117 
	$igb_˛ón_Æl_tx_rögs
(
igb_ad≠ãr
 *
ad≠ãr
)

3119 
i
;

3121 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++)

3122 
	`igb_˛ón_tx_rög
(
ad≠ãr
->
tx_rög
[
i
]);

3123 
	}
}

3131 
	$igb_‰ì_rx_ªsour˚s
(
igb_rög
 *
rx_rög
)

3133 
	`igb_˛ón_rx_rög
(
rx_rög
);

3135 
	`v‰ì
(
rx_rög
->
buf„r_öfo
);

3136 
rx_rög
->
buf„r_öfo
 = 
NULL
;

3139 i‡(!
rx_rög
->
desc
)

3142 
	`dma_‰ì_cohîít
(
rx_rög
->
dev
,Ñx_rög->
size
,

3143 
rx_rög
->
desc
,Ñx_rög->
dma
);

3145 
rx_rög
->
desc
 = 
NULL
;

3146 
	}
}

3154 
	$igb_‰ì_Æl_rx_ªsour˚s
(
igb_ad≠ãr
 *
ad≠ãr
)

3156 
i
;

3158 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

3159 
	`igb_‰ì_rx_ªsour˚s
(
ad≠ãr
->
rx_rög
[
i
]);

3160 
	}
}

3166 
	$igb_˛ón_rx_rög
(
igb_rög
 *
rx_rög
)

3168 
igb_buf„r
 *
buf„r_öfo
;

3169 
size
;

3170 
i
;

3172 i‡(!
rx_rög
->
buf„r_öfo
)

3176 
i
 = 0; i < 
rx_rög
->
cou¡
; i++) {

3177 
buf„r_öfo
 = &
rx_rög
->buf„r_öfo[
i
];

3178 i‡(
buf„r_öfo
->
dma
) {

3179 
	`dma_unm≠_sögÀ
(
rx_rög
->
dev
,

3180 
buf„r_öfo
->
dma
,

3181 
rx_rög
->
rx_buf„r_Àn
,

3182 
DMA_FROM_DEVICE
);

3183 
buf„r_öfo
->
dma
 = 0;

3186 i‡(
buf„r_öfo
->
skb
) {

3188 
	`ukmem_skb_‰ì
(
buf„r_öfo
->
skb
);

3189 
buf„r_öfo
->
skb
 = 
NULL
;

3191 i‡(
buf„r_öfo
->
∑ge_dma
) {

3192 
	`dma_unm≠_∑ge
(
rx_rög
->
dev
,

3193 
buf„r_öfo
->
∑ge_dma
,

3194 
PAGE_SIZE
 / 2,

3195 
DMA_FROM_DEVICE
);

3196 
buf„r_öfo
->
∑ge_dma
 = 0;

3198 i‡(
buf„r_öfo
->
∑ge
) {

3199 
	`put_∑ge
(
buf„r_öfo
->
∑ge
);

3200 
buf„r_öfo
->
∑ge
 = 
NULL
;

3201 
buf„r_öfo
->
∑ge_off£t
 = 0;

3205 
size
 = (
igb_buf„r
Ë* 
rx_rög
->
cou¡
;

3206 
	`mem£t
(
rx_rög
->
buf„r_öfo
, 0, 
size
);

3209 
	`mem£t
(
rx_rög
->
desc
, 0,Ñx_rög->
size
);

3211 
rx_rög
->
√xt_to_˛ón
 = 0;

3212 
rx_rög
->
√xt_to_u£
 = 0;

3213 
	}
}

3219 
	$igb_˛ón_Æl_rx_rögs
(
igb_ad≠ãr
 *
ad≠ãr
)

3221 
i
;

3223 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

3224 
	`igb_˛ón_rx_rög
(
ad≠ãr
->
rx_rög
[
i
]);

3225 
	}
}

3234 
	$igb_£t_mac
(
√t_devi˚
 *
√tdev
, *
p
)

3236 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

3237 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

3238 
sockaddr
 *
addr
 = 
p
;

3240 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

3241  -
EADDRNOTAVAIL
;

3243 
	`mem˝y
(
√tdev
->
dev_addr
, 
addr
->
ß_d©a
,Çëdev->
addr_Àn
);

3244 
	`mem˝y
(
hw
->
mac
.
addr
,áddr->
ß_d©a
, 
√tdev
->
addr_Àn
);

3247 
	`igb_ør_£t_q£l
(
ad≠ãr
, 
hw
->
mac
.
addr
, 0,

3248 
ad≠ãr
->
vfs_Æloˇãd_cou¡
);

3251 
	}
}

3262 
	$igb_wrôe_mc_addr_li°
(
√t_devi˚
 *
√tdev
)

3264 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

3265 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

3266 
√tdev_hw_addr
 *
ha
;

3267 
u8
 *
mè_li°
;

3268 
i
;

3270 i‡(
	`√tdev_mc_em±y
(
√tdev
)) {

3272 
	`igb_upd©e_mc_addr_li°
(
hw
, 
NULL
, 0);

3273 
	`igb_ª°‹e_vf_mu…iˇ°s
(
ad≠ãr
);

3277 
mè_li°
 = 
	`kzÆloc
(
	`√tdev_mc_cou¡
(
√tdev
Ë* 6, 
GFP_ATOMIC
);

3278 i‡(!
mè_li°
)

3279  -
ENOMEM
;

3282 
i
 = 0;

3283 
	`√tdev_f‹_óch_mc_addr
(
ha
, 
√tdev
)

3284 
	`mem˝y
(
mè_li°
 + (
i
++ * 
ETH_ALEN
), 
ha
->
addr
, ETH_ALEN);

3286 
	`igb_upd©e_mc_addr_li°
(
hw
, 
mè_li°
, 
i
);

3287 
	`k‰ì
(
mè_li°
);

3289  
	`√tdev_mc_cou¡
(
√tdev
);

3290 
	}
}

3301 
	$igb_wrôe_uc_addr_li°
(
√t_devi˚
 *
√tdev
)

3303 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

3304 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

3305 
v‚
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

3306 
ør_íåõs
 = 
hw
->
mac
.
ør_íåy_cou¡
 - (
v‚
 + 1);

3307 
cou¡
 = 0;

3310 i‡(
	`√tdev_uc_cou¡
(
√tdev
Ë> 
ør_íåõs
)

3311  -
ENOMEM
;

3313 i‡(!
	`√tdev_uc_em±y
(
√tdev
Ë&& 
ør_íåõs
) {

3314 
√tdev_hw_addr
 *
ha
;

3316 
	`√tdev_f‹_óch_uc_addr
(
ha
, 
√tdev
) {

3317 i‡(!
ør_íåõs
)

3319 
	`igb_ør_£t_q£l
(
ad≠ãr
, 
ha
->
addr
,

3320 
ør_íåõs
--,

3321 
v‚
);

3322 
cou¡
++;

3326 ; 
ør_íåõs
 > 0 ;Ñar_entries--) {

3327 
	`wr32
(
	`E1000_RAH
(
ør_íåõs
), 0);

3328 
	`wr32
(
	`E1000_RAL
(
ør_íåõs
), 0);

3330 
	`wrÊ
();

3332  
cou¡
;

3333 
	}
}

3344 
	$igb_£t_rx_mode
(
√t_devi˚
 *
√tdev
)

3346 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

3347 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

3348 
v‚
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

3349 
u32
 
r˘l
, 
vmﬁr
 = 0;

3350 
cou¡
;

3353 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

3356 
r˘l
 &~(
E1000_RCTL_UPE
 | 
E1000_RCTL_MPE
 | 
E1000_RCTL_VFE
);

3358 i‡(
√tdev
->
Êags
 & 
IFF_PROMISC
) {

3359 
r˘l
 |(
E1000_RCTL_UPE
 | 
E1000_RCTL_MPE
);

3360 
vmﬁr
 |(
E1000_VMOLR_ROPE
 | 
E1000_VMOLR_MPME
);

3362 i‡(
√tdev
->
Êags
 & 
IFF_ALLMULTI
) {

3363 
r˘l
 |
E1000_RCTL_MPE
;

3364 
vmﬁr
 |
E1000_VMOLR_MPME
;

3371 
cou¡
 = 
	`igb_wrôe_mc_addr_li°
(
√tdev
);

3372 i‡(
cou¡
 < 0) {

3373 
r˘l
 |
E1000_RCTL_MPE
;

3374 
vmﬁr
 |
E1000_VMOLR_MPME
;

3375 } i‡(
cou¡
) {

3376 
vmﬁr
 |
E1000_VMOLR_ROMPE
;

3384 
cou¡
 = 
	`igb_wrôe_uc_addr_li°
(
√tdev
);

3385 i‡(
cou¡
 < 0) {

3386 
r˘l
 |
E1000_RCTL_UPE
;

3387 
vmﬁr
 |
E1000_VMOLR_ROPE
;

3389 
r˘l
 |
E1000_RCTL_VFE
;

3391 
	`wr32
(
E1000_RCTL
, 
r˘l
);

3399 i‡(
hw
->
mac
.
ty≥
 < 
e1000_82576
)

3402 
vmﬁr
 |
	`rd32
(
	`E1000_VMOLR
(
v‚
)) &

3403 ~(
E1000_VMOLR_ROPE
 | 
E1000_VMOLR_MPME
 | 
E1000_VMOLR_ROMPE
);

3404 
	`wr32
(
	`E1000_VMOLR
(
v‚
), 
vmﬁr
);

3405 
	`igb_ª°‹e_vf_mu…iˇ°s
(
ad≠ãr
);

3406 
	}
}

3410 
	$igb_upd©e_phy_öfo
(
d©a
)

3412 
igb_ad≠ãr
 *
ad≠ãr
 = (igb_ad≠ã∏*Ë
d©a
;

3413 
	`igb_gë_phy_öfo
(&
ad≠ãr
->
hw
);

3414 
	}
}

3420 
boﬁ
 
	$igb_has_lök
(
igb_ad≠ãr
 *
ad≠ãr
)

3422 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

3423 
boﬁ
 
lök_a˘ive
 = 
Ál£
;

3424 
s32
 
ªt_vÆ
 = 0;

3431 
hw
->
phy
.
medü_ty≥
) {

3432 
e1000_medü_ty≥_c›≥r
:

3433 i‡(
hw
->
mac
.
gë_lök_°©us
) {

3434 
ªt_vÆ
 = 
hw
->
mac
.
›s
.
	`check_f‹_lök
(hw);

3435 
lök_a˘ive
 = !
hw
->
mac
.
gë_lök_°©us
;

3437 
lök_a˘ive
 = 
åue
;

3440 
e1000_medü_ty≥_öã∫Æ_£rdes
:

3441 
ªt_vÆ
 = 
hw
->
mac
.
›s
.
	`check_f‹_lök
(hw);

3442 
lök_a˘ive
 = 
hw
->
mac
.
£rdes_has_lök
;

3445 
e1000_medü_ty≥_unknown
:

3449  
lök_a˘ive
;

3450 
	}
}

3456 
	$igb_w©chdog
(
d©a
)

3458 
igb_ad≠ãr
 *
ad≠ãr
 = (igb_ad≠ã∏*)
d©a
;

3460 
	`scheduÀ_w‹k
(&
ad≠ãr
->
w©chdog_èsk
);

3461 
	}
}

3463 
	$igb_w©chdog_èsk
(
w‹k_°ru˘
 *
w‹k
)

3465 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
,

3466 
igb_ad≠ãr
,

3467 
w©chdog_èsk
);

3468 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

3469 
√t_devi˚
 *
√tdev
 = 
ad≠ãr
->netdev;

3470 
u32
 
lök
;

3471 
i
;

3473 
lök
 = 
	`igb_has_lök
(
ad≠ãr
);

3474 i‡(
lök
) {

3475 i‡(!
	`√tif_ˇºõr_ok
(
√tdev
)) {

3476 
u32
 
˘æ
;

3477 
hw
->
mac
.
›s
.
	`gë_•ìd_™d_du∂ex
(hw,

3478 &
ad≠ãr
->
lök_•ìd
,

3479 &
ad≠ãr
->
lök_du∂ex
);

3481 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

3483 
	`¥ötk
(
KERN_INFO
 "igb: %s NIC Link is Up %d Mbps %s, "

3485 
√tdev
->
«me
,

3486 
ad≠ãr
->
lök_•ìd
,

3487 
ad≠ãr
->
lök_du∂ex
 =
FULL_DUPLEX
 ?

3489 ((
˘æ
 & 
E1000_CTRL_TFCE
) &&

3490 (
˘æ
 & 
E1000_CTRL_RFCE
)) ? "RX/TX" :

3491 ((
˘æ
 & 
E1000_CTRL_RFCE
) ? "RX" :

3492 ((
˘æ
 & 
E1000_CTRL_TFCE
) ? "TX" : "None")));

3495 
ad≠ãr
->
tx_timeout_Á˘‹
 = 1;

3496 
ad≠ãr
->
lök_•ìd
) {

3497 
SPEED_10
:

3498 
ad≠ãr
->
tx_timeout_Á˘‹
 = 14;

3500 
SPEED_100
:

3505 
	`√tif_ˇºõr_⁄
(
√tdev
);

3507 
	`igb_pög_Æl_vfs
(
ad≠ãr
);

3510 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

3511 
	`mod_timî
(&
ad≠ãr
->
phy_öfo_timî
,

3512 
	`round_jiffõs
(
jiffõs
 + 2 * 
HZ
));

3515 i‡(
	`√tif_ˇºõr_ok
(
√tdev
)) {

3516 
ad≠ãr
->
lök_•ìd
 = 0;

3517 
ad≠ãr
->
lök_du∂ex
 = 0;

3519 
	`¥ötk
(
KERN_INFO
 "igb: %s NIC Link is Down\n",

3520 
√tdev
->
«me
);

3521 
	`√tif_ˇºõr_off
(
√tdev
);

3523 
	`igb_pög_Æl_vfs
(
ad≠ãr
);

3526 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

3527 
	`mod_timî
(&
ad≠ãr
->
phy_öfo_timî
,

3528 
	`round_jiffõs
(
jiffõs
 + 2 * 
HZ
));

3532 
	`igb_upd©e_°©s
(
ad≠ãr
);

3534 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

3535 
igb_rög
 *
tx_rög
 = 
ad≠ãr
->tx_rög[
i
];

3536 i‡(!
	`√tif_ˇºõr_ok
(
√tdev
)) {

3541 i‡(
	`igb_desc_unu£d
(
tx_rög
Ë+ 1 <Åx_rög->
cou¡
) {

3542 
ad≠ãr
->
tx_timeout_cou¡
++;

3543 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

3550 
tx_rög
->
dëe˘_tx_hung
 = 
åue
;

3554 i‡(
ad≠ãr
->
msix_íåõs
) {

3555 
u32
 
eics
 = 0;

3556 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

3557 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

3558 
eics
 |
q_ve˘‹
->
eims_vÆue
;

3560 
	`wr32
(
E1000_EICS
, 
eics
);

3562 
	`wr32
(
E1000_ICS
, 
E1000_ICS_RXDMT0
);

3566 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

3567 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
,

3568 
	`round_jiffõs
(
jiffõs
 + 2 * 
HZ
));

3569 
	}
}

3571 
	eœãncy_ønge
 {

3572 
	mlowe°_œãncy
 = 0,

3573 
	mlow_œãncy
 = 1,

3574 
	mbulk_œãncy
 = 2,

3575 
	mœãncy_övÆid
 = 255

3594 
	$igb_upd©e_rög_ôr
(
igb_q_ve˘‹
 *
q_ve˘‹
)

3596 
√w_vÆ
 = 
q_ve˘‹
->
ôr_vÆ
;

3597 
avg_wúe_size
 = 0;

3598 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

3603 i‡(
ad≠ãr
->
lök_•ìd
 !
SPEED_1000
) {

3604 
√w_vÆ
 = 976;

3605 
£t_ôr_vÆ
;

3608 i‡(
q_ve˘‹
->
rx_rög
 && q_ve˘‹->rx_rög->
tŸÆ_∑ckës
) {

3609 
igb_rög
 *
rög
 = 
q_ve˘‹
->
rx_rög
;

3610 
avg_wúe_size
 = 
rög
->
tŸÆ_byãs
 /Ñög->
tŸÆ_∑ckës
;

3613 i‡(
q_ve˘‹
->
tx_rög
 && q_ve˘‹->tx_rög->
tŸÆ_∑ckës
) {

3614 
igb_rög
 *
rög
 = 
q_ve˘‹
->
tx_rög
;

3615 
avg_wúe_size
 = 
	`max_t
(
u32
,ávg_wire_size,

3616 (
rög
->
tŸÆ_byãs
 /

3617 
rög
->
tŸÆ_∑ckës
));

3621 i‡(!
avg_wúe_size
)

3622 
˛ór_cou¡s
;

3625 
avg_wúe_size
 += 24;

3628 
avg_wúe_size
 = 
	`mö
(avg_wire_size, 3000);

3631 i‡((
avg_wúe_size
 > 300) && (avg_wire_size < 1200))

3632 
√w_vÆ
 = 
avg_wúe_size
 / 3;

3634 
√w_vÆ
 = 
avg_wúe_size
 / 2;

3637 i‡(
ad≠ãr
->
rx_ôr_£âög
 =3 && 
√w_vÆ
 < 196)

3638 
√w_vÆ
 = 196;

3640 
£t_ôr_vÆ
:

3641 i‡(
√w_vÆ
 !
q_ve˘‹
->
ôr_vÆ
) {

3642 
q_ve˘‹
->
ôr_vÆ
 = 
√w_vÆ
;

3643 
q_ve˘‹
->
£t_ôr
 = 1;

3645 
˛ór_cou¡s
:

3646 i‡(
q_ve˘‹
->
rx_rög
) {

3647 
q_ve˘‹
->
rx_rög
->
tŸÆ_byãs
 = 0;

3648 
q_ve˘‹
->
rx_rög
->
tŸÆ_∑ckës
 = 0;

3650 i‡(
q_ve˘‹
->
tx_rög
) {

3651 
q_ve˘‹
->
tx_rög
->
tŸÆ_byãs
 = 0;

3652 
q_ve˘‹
->
tx_rög
->
tŸÆ_∑ckës
 = 0;

3654 
	}
}

3674 
	$igb_upd©e_ôr
(
igb_ad≠ãr
 *
ad≠ãr
, 
u16
 
ôr_£âög
,

3675 
∑ckës
, 
byãs
)

3677 
ªtvÆ
 = 
ôr_£âög
;

3679 i‡(
∑ckës
 == 0)

3680 
upd©e_ôr_d⁄e
;

3682 
ôr_£âög
) {

3683 
lowe°_œãncy
:

3685 i‡(
byãs
/
∑ckës
 > 8000)

3686 
ªtvÆ
 = 
bulk_œãncy
;

3687 i‡((
∑ckës
 < 5Ë&& (
byãs
 > 512))

3688 
ªtvÆ
 = 
low_œãncy
;

3690 
low_œãncy
:

3691 i‡(
byãs
 > 10000) {

3693 i‡(
byãs
/
∑ckës
 > 8000) {

3694 
ªtvÆ
 = 
bulk_œãncy
;

3695 } i‡((
∑ckës
 < 10Ë|| ((
byãs
/packets) > 1200)) {

3696 
ªtvÆ
 = 
bulk_œãncy
;

3697 } i‡((
∑ckës
 > 35)) {

3698 
ªtvÆ
 = 
lowe°_œãncy
;

3700 } i‡(
byãs
/
∑ckës
 > 2000) {

3701 
ªtvÆ
 = 
bulk_œãncy
;

3702 } i‡(
∑ckës
 <2 && 
byãs
 < 512) {

3703 
ªtvÆ
 = 
lowe°_œãncy
;

3706 
bulk_œãncy
:

3707 i‡(
byãs
 > 25000) {

3708 i‡(
∑ckës
 > 35)

3709 
ªtvÆ
 = 
low_œãncy
;

3710 } i‡(
byãs
 < 1500) {

3711 
ªtvÆ
 = 
low_œãncy
;

3716 
upd©e_ôr_d⁄e
:

3717  
ªtvÆ
;

3718 
	}
}

3720 
	$igb_£t_ôr
(
igb_ad≠ãr
 *
ad≠ãr
)

3722 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

3723 
u16
 
cuºít_ôr
;

3724 
u32
 
√w_ôr
 = 
q_ve˘‹
->
ôr_vÆ
;

3727 i‡(
ad≠ãr
->
lök_•ìd
 !
SPEED_1000
) {

3728 
cuºít_ôr
 = 0;

3729 
√w_ôr
 = 4000;

3730 
£t_ôr_now
;

3733 
ad≠ãr
->
rx_ôr
 = 
	`igb_upd©e_ôr
(adapter,

3734 
ad≠ãr
->
rx_ôr
,

3735 
q_ve˘‹
->
rx_rög
->
tŸÆ_∑ckës
,

3736 
q_ve˘‹
->
rx_rög
->
tŸÆ_byãs
);

3738 
ad≠ãr
->
tx_ôr
 = 
	`igb_upd©e_ôr
(adapter,

3739 
ad≠ãr
->
tx_ôr
,

3740 
q_ve˘‹
->
tx_rög
->
tŸÆ_∑ckës
,

3741 
q_ve˘‹
->
tx_rög
->
tŸÆ_byãs
);

3742 
cuºít_ôr
 = 
	`max
(
ad≠ãr
->
rx_ôr
,ád≠ãr->
tx_ôr
);

3745 i‡(
ad≠ãr
->
rx_ôr_£âög
 =3 && 
cuºít_ôr
 =
lowe°_œãncy
)

3746 
cuºít_ôr
 = 
low_œãncy
;

3748 
cuºít_ôr
) {

3750 
lowe°_œãncy
:

3751 
√w_ôr
 = 56;

3753 
low_œãncy
:

3754 
√w_ôr
 = 196;

3756 
bulk_œãncy
:

3757 
√w_ôr
 = 980;

3763 
£t_ôr_now
:

3764 
q_ve˘‹
->
rx_rög
->
tŸÆ_byãs
 = 0;

3765 
q_ve˘‹
->
rx_rög
->
tŸÆ_∑ckës
 = 0;

3766 
q_ve˘‹
->
tx_rög
->
tŸÆ_byãs
 = 0;

3767 
q_ve˘‹
->
tx_rög
->
tŸÆ_∑ckës
 = 0;

3769 i‡(
√w_ôr
 !
q_ve˘‹
->
ôr_vÆ
) {

3773 
√w_ôr
 =Çew_ô∏> 
q_ve˘‹
->
ôr_vÆ
 ?

3774 
	`max
((
√w_ôr
 * 
q_ve˘‹
->
ôr_vÆ
) /

3775 (
√w_ôr
 + (
q_ve˘‹
->
ôr_vÆ
 >> 2)),

3776 
√w_ôr
) :

3777 
√w_ôr
;

3784 
q_ve˘‹
->
ôr_vÆ
 = 
√w_ôr
;

3785 
q_ve˘‹
->
£t_ôr
 = 1;

3787 
	}
}

3789 
	#IGB_TX_FLAGS_CSUM
 0x00000001

	)

3790 
	#IGB_TX_FLAGS_VLAN
 0x00000002

	)

3791 
	#IGB_TX_FLAGS_TSO
 0x00000004

	)

3792 
	#IGB_TX_FLAGS_IPV4
 0x00000008

	)

3793 
	#IGB_TX_FLAGS_TSTAMP
 0x00000010

	)

3794 
	#IGB_TX_FLAGS_VLAN_MASK
 0xffff0000

	)

3795 
	#IGB_TX_FLAGS_VLAN_SHIFT
 16

	)

3797 
ölöe
 
	$igb_tso_adv
(
igb_rög
 *
tx_rög
,

3798 
sk_buff
 *
skb
, 
u32
 
tx_Êags
, 
u8
 *
hdr_Àn
)

3800 
e1000_adv_tx_c⁄ãxt_desc
 *
c⁄ãxt_desc
;

3801 
i
;

3802 
îr
;

3803 
igb_buf„r
 *
buf„r_öfo
;

3804 
u32
 
öfo
 = 0, 
tu_cmd
 = 0;

3805 
u32
 
mss_l4Àn_idx
;

3806 
u8
 
l4Àn
;

3808 i‡(
	`skb_hódî_˛⁄ed
(
skb
)) {

3809 
îr
 = 
	`pskb_ex∑nd_hód
(
skb
, 0, 0, 
GFP_ATOMIC
);

3810 i‡(
îr
)

3811  
îr
;

3814 
l4Àn
 = 
	`t˝_hdæí
(
skb
);

3815 *
hdr_Àn
 +
l4Àn
;

3817 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

3818 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

3819 
ùh
->
tŸ_Àn
 = 0;

3820 
ùh
->
check
 = 0;

3821 
	`t˝_hdr
(
skb
)->
check
 = ~
	`csum_t˝udp_magic
(
ùh
->
ßddr
,

3822 
ùh
->
daddr
, 0,

3823 
IPPROTO_TCP
,

3825 } i‡(
	`skb_is_gso_v6
(
skb
)) {

3826 
	`ùv6_hdr
(
skb
)->
∑ylﬂd_Àn
 = 0;

3827 
	`t˝_hdr
(
skb
)->
check
 = ~
	`csum_ùv6_magic
(&
	`ùv6_hdr
(skb)->
ßddr
,

3828 &
	`ùv6_hdr
(
skb
)->
daddr
,

3829 0, 
IPPROTO_TCP
, 0);

3832 
i
 = 
tx_rög
->
√xt_to_u£
;

3834 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

3835 
c⁄ãxt_desc
 = 
	`E1000_TX_CTXTDESC_ADV
(*
tx_rög
, 
i
);

3837 i‡(
tx_Êags
 & 
IGB_TX_FLAGS_VLAN
)

3838 
öfo
 |(
tx_Êags
 & 
IGB_TX_FLAGS_VLAN_MASK
);

3839 
öfo
 |(
	`skb_√tw‹k_off£t
(
skb
Ë<< 
E1000_ADVTXD_MACLEN_SHIFT
);

3840 *
hdr_Àn
 +
	`skb_√tw‹k_off£t
(
skb
);

3841 
öfo
 |
	`skb_√tw‹k_hódî_Àn
(
skb
);

3842 *
hdr_Àn
 +
	`skb_√tw‹k_hódî_Àn
(
skb
);

3843 
c⁄ãxt_desc
->
vœn_macù_Àns
 = 
	`˝u_to_À32
(
öfo
);

3846 
tu_cmd
 |(
E1000_TXD_CMD_DEXT
 | 
E1000_ADVTXD_DTYP_CTXT
);

3848 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

3849 
tu_cmd
 |
E1000_ADVTXD_TUCMD_IPV4
;

3850 
tu_cmd
 |
E1000_ADVTXD_TUCMD_L4T_TCP
;

3852 
c⁄ãxt_desc
->
ty≥_tucmd_mlhl
 = 
	`˝u_to_À32
(
tu_cmd
);

3855 
mss_l4Àn_idx
 = (
	`skb_shöfo
(
skb
)->
gso_size
 << 
E1000_ADVTXD_MSS_SHIFT
);

3856 
mss_l4Àn_idx
 |(
l4Àn
 << 
E1000_ADVTXD_L4LEN_SHIFT
);

3859 i‡(
tx_rög
->
Êags
 & 
IGB_RING_FLAG_TX_CTX_IDX
)

3860 
mss_l4Àn_idx
 |
tx_rög
->
ªg_idx
 << 4;

3862 
c⁄ãxt_desc
->
mss_l4Àn_idx
 = 
	`˝u_to_À32
(mss_l4len_idx);

3863 
c⁄ãxt_desc
->
£qnum_£ed
 = 0;

3865 
buf„r_öfo
->
time_°amp
 = 
jiffõs
;

3866 
buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

3867 
buf„r_öfo
->
dma
 = 0;

3868 
i
++;

3869 i‡(
i
 =
tx_rög
->
cou¡
)

3870 
i
 = 0;

3872 
tx_rög
->
√xt_to_u£
 = 
i
;

3874  
åue
;

3875 
	}
}

3877 
ölöe
 
boﬁ
 
	$igb_tx_csum_adv
(
igb_rög
 *
tx_rög
,

3878 
sk_buff
 *
skb
, 
u32
 
tx_Êags
)

3880 
e1000_adv_tx_c⁄ãxt_desc
 *
c⁄ãxt_desc
;

3881 
devi˚
 *
dev
 = 
tx_rög
->dev;

3882 
igb_buf„r
 *
buf„r_öfo
;

3883 
u32
 
öfo
 = 0, 
tu_cmd
 = 0;

3884 
i
;

3886 i‡((
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
) ||

3887 (
tx_Êags
 & 
IGB_TX_FLAGS_VLAN
)) {

3888 
i
 = 
tx_rög
->
√xt_to_u£
;

3889 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

3890 
c⁄ãxt_desc
 = 
	`E1000_TX_CTXTDESC_ADV
(*
tx_rög
, 
i
);

3892 i‡(
tx_Êags
 & 
IGB_TX_FLAGS_VLAN
)

3893 
öfo
 |(
tx_Êags
 & 
IGB_TX_FLAGS_VLAN_MASK
);

3895 
öfo
 |(
	`skb_√tw‹k_off£t
(
skb
Ë<< 
E1000_ADVTXD_MACLEN_SHIFT
);

3896 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
)

3897 
öfo
 |
	`skb_√tw‹k_hódî_Àn
(
skb
);

3899 
c⁄ãxt_desc
->
vœn_macù_Àns
 = 
	`˝u_to_À32
(
öfo
);

3901 
tu_cmd
 |(
E1000_TXD_CMD_DEXT
 | 
E1000_ADVTXD_DTYP_CTXT
);

3903 i‡(
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
) {

3904 
__be16
 
¥Ÿocﬁ
;

3906 i‡(
skb
->
¥Ÿocﬁ
 =
	`˝u_to_be16
(
ETH_P_8021Q
)) {

3907 c⁄° 
vœn_ëhhdr
 *
vhdr
 =

3908 (c⁄° 
vœn_ëhhdr
*)
skb
->
d©a
;

3910 
¥Ÿocﬁ
 = 
vhdr
->
h_vœn_íˇpsuœãd_¥Ÿo
;

3912 
¥Ÿocﬁ
 = 
skb
->protocol;

3915 
¥Ÿocﬁ
) {

3916 
	`˝u_to_be16
(
ETH_P_IP
):

3917 
tu_cmd
 |
E1000_ADVTXD_TUCMD_IPV4
;

3918 i‡(
	`ù_hdr
(
skb
)->
¥Ÿocﬁ
 =
IPPROTO_TCP
)

3919 
tu_cmd
 |
E1000_ADVTXD_TUCMD_L4T_TCP
;

3920 i‡(
	`ù_hdr
(
skb
)->
¥Ÿocﬁ
 =
IPPROTO_SCTP
)

3921 
tu_cmd
 |
E1000_ADVTXD_TUCMD_L4T_SCTP
;

3923 
	`˝u_to_be16
(
ETH_P_IPV6
):

3925 i‡(
	`ùv6_hdr
(
skb
)->
√xthdr
 =
IPPROTO_TCP
)

3926 
tu_cmd
 |
E1000_ADVTXD_TUCMD_L4T_TCP
;

3927 i‡(
	`ùv6_hdr
(
skb
)->
√xthdr
 =
IPPROTO_SCTP
)

3928 
tu_cmd
 |
E1000_ADVTXD_TUCMD_L4T_SCTP
;

3931 i‡(
	`u∆ikñy
(
	`√t_øãlimô
()))

3932 
	`dev_w¨n
(
dev
,

3934 
skb
->
¥Ÿocﬁ
);

3939 
c⁄ãxt_desc
->
ty≥_tucmd_mlhl
 = 
	`˝u_to_À32
(
tu_cmd
);

3940 
c⁄ãxt_desc
->
£qnum_£ed
 = 0;

3941 i‡(
tx_rög
->
Êags
 & 
IGB_RING_FLAG_TX_CTX_IDX
)

3942 
c⁄ãxt_desc
->
mss_l4Àn_idx
 =

3943 
	`˝u_to_À32
(
tx_rög
->
ªg_idx
 << 4);

3945 
buf„r_öfo
->
time_°amp
 = 
jiffõs
;

3946 
buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

3947 
buf„r_öfo
->
dma
 = 0;

3949 
i
++;

3950 i‡(
i
 =
tx_rög
->
cou¡
)

3951 
i
 = 0;

3952 
tx_rög
->
√xt_to_u£
 = 
i
;

3954  
åue
;

3956  
Ál£
;

3957 
	}
}

3959 
	#IGB_MAX_TXD_PWR
 16

	)

3960 
	#IGB_MAX_DATA_PER_TXD
 (1<<
IGB_MAX_TXD_PWR
)

	)

3962 
ölöe
 
	$igb_tx_m≠_adv
(
igb_rög
 *
tx_rög
, 
sk_buff
 *
skb
,

3963 
fú°
)

3965 
igb_buf„r
 *
buf„r_öfo
;

3966 
devi˚
 *
dev
 = 
tx_rög
->dev;

3967 
hÀn
 = 
	`skb_hódÀn
(
skb
);

3968 
cou¡
 = 0, 
i
;

3969 
f
;

3970 
u16
 
gso_£gs
 = 
	`skb_shöfo
(
skb
)->gso_segs ?: 1;

3972 
i
 = 
tx_rög
->
√xt_to_u£
;

3974 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

3975 
	`BUG_ON
(
hÀn
 >
IGB_MAX_DATA_PER_TXD
);

3976 
buf„r_öfo
->
Àngth
 = 
hÀn
;

3978 
buf„r_öfo
->
time_°amp
 = 
jiffõs
;

3979 
buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

3980 
buf„r_öfo
->
dma
 = 
	`dma_m≠_sögÀ
(
dev
, 
skb
->
d©a
, 
hÀn
,

3981 
DMA_TO_DEVICE
);

3982 i‡(
	`dma_m≠pög_îr‹
(
dev
, 
buf„r_öfo
->
dma
))

3983 
dma_îr‹
;

3985 
f
 = 0; f < 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
; f++) {

3986 
skb_‰ag_°ru˘
 *
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[
f
];

3987 
Àn
 = 
‰ag
->
size
;

3989 
cou¡
++;

3990 
i
++;

3991 i‡(
i
 =
tx_rög
->
cou¡
)

3992 
i
 = 0;

3994 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

3995 
	`BUG_ON
(
Àn
 >
IGB_MAX_DATA_PER_TXD
);

3996 
buf„r_öfo
->
Àngth
 = 
Àn
;

3997 
buf„r_öfo
->
time_°amp
 = 
jiffõs
;

3998 
buf„r_öfo
->
√xt_to_w©ch
 = 
i
;

3999 
buf„r_öfo
->
m≠≥d_as_∑ge
 = 
åue
;

4000 
buf„r_öfo
->
dma
 = 
	`dma_m≠_∑ge
(
dev
,

4001 
‰ag
->
∑ge
,

4002 
‰ag
->
∑ge_off£t
,

4003 
Àn
,

4004 
DMA_TO_DEVICE
);

4005 i‡(
	`dma_m≠pög_îr‹
(
dev
, 
buf„r_öfo
->
dma
))

4006 
dma_îr‹
;

4010 
tx_rög
->
buf„r_öfo
[
i
].
skb
 = skb;

4011 
tx_rög
->
buf„r_öfo
[
i
].
shtx
 = 
	`skb_shöfo
(
skb
)->
tx_Êags
;

4013 
tx_rög
->
buf„r_öfo
[
i
].
byãcou¡
 = ((
gso_£gs
 - 1Ë* 
hÀn
Ë+ 
skb
->
Àn
;

4014 
tx_rög
->
buf„r_öfo
[
i
].
gso_£gs
 = gso_segs;

4015 
tx_rög
->
buf„r_öfo
[
fú°
].
√xt_to_w©ch
 = 
i
;

4017  ++
cou¡
;

4019 
dma_îr‹
:

4020 
	`dev_îr
(
dev
, "TX DMA map failed\n");

4023 
buf„r_öfo
->
dma
 = 0;

4024 
buf„r_öfo
->
time_°amp
 = 0;

4025 
buf„r_öfo
->
Àngth
 = 0;

4026 
buf„r_öfo
->
√xt_to_w©ch
 = 0;

4027 
buf„r_öfo
->
m≠≥d_as_∑ge
 = 
Ál£
;

4030 
cou¡
--) {

4031 i‡(
i
 == 0)

4032 
i
 = 
tx_rög
->
cou¡
;

4033 
i
--;

4034 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

4035 
	`igb_unm≠_™d_‰ì_tx_ªsour˚
(
tx_rög
, 
buf„r_öfo
);

4039 
	}
}

4041 
ölöe
 
	$igb_tx_queue_adv
(
igb_rög
 *
tx_rög
,

4042 
u32
 
tx_Êags
, 
cou¡
, u32 
∑yÀn
,

4043 
u8
 
hdr_Àn
)

4045 
e1000_adv_tx_desc
 *
tx_desc
;

4046 
igb_buf„r
 *
buf„r_öfo
;

4047 
u32
 
ﬁöfo_°©us
 = 0, 
cmd_ty≥_Àn
;

4048 
i
 = 
tx_rög
->
√xt_to_u£
;

4050 
cmd_ty≥_Àn
 = (
E1000_ADVTXD_DTYP_DATA
 | 
E1000_ADVTXD_DCMD_IFCS
 |

4051 
E1000_ADVTXD_DCMD_DEXT
);

4053 i‡(
tx_Êags
 & 
IGB_TX_FLAGS_VLAN
)

4054 
cmd_ty≥_Àn
 |
E1000_ADVTXD_DCMD_VLE
;

4056 i‡(
tx_Êags
 & 
IGB_TX_FLAGS_TSTAMP
)

4057 
cmd_ty≥_Àn
 |
E1000_ADVTXD_MAC_TSTAMP
;

4059 i‡(
tx_Êags
 & 
IGB_TX_FLAGS_TSO
) {

4060 
cmd_ty≥_Àn
 |
E1000_ADVTXD_DCMD_TSE
;

4063 
ﬁöfo_°©us
 |
E1000_TXD_POPTS_TXSM
 << 8;

4066 i‡(
tx_Êags
 & 
IGB_TX_FLAGS_IPV4
)

4067 
ﬁöfo_°©us
 |
E1000_TXD_POPTS_IXSM
 << 8;

4069 } i‡(
tx_Êags
 & 
IGB_TX_FLAGS_CSUM
) {

4070 
ﬁöfo_°©us
 |
E1000_TXD_POPTS_TXSM
 << 8;

4073 i‡((
tx_rög
->
Êags
 & 
IGB_RING_FLAG_TX_CTX_IDX
) &&

4074 (
tx_Êags
 & (
IGB_TX_FLAGS_CSUM
 |

4075 
IGB_TX_FLAGS_TSO
 |

4076 
IGB_TX_FLAGS_VLAN
)))

4077 
ﬁöfo_°©us
 |
tx_rög
->
ªg_idx
 << 4;

4079 
ﬁöfo_°©us
 |((
∑yÀn
 - 
hdr_Àn
Ë<< 
E1000_ADVTXD_PAYLEN_SHIFT
);

4082 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

4083 
tx_desc
 = 
	`E1000_TX_DESC_ADV
(*
tx_rög
, 
i
);

4084 
tx_desc
->
ªad
.
buf„r_addr
 = 
	`˝u_to_À64
(
buf„r_öfo
->
dma
);

4085 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 =

4086 
	`˝u_to_À32
(
cmd_ty≥_Àn
 | 
buf„r_öfo
->
Àngth
);

4087 
tx_desc
->
ªad
.
ﬁöfo_°©us
 = 
	`˝u_to_À32
(olinfo_status);

4088 
cou¡
--;

4089 
i
++;

4090 i‡(
i
 =
tx_rög
->
cou¡
)

4091 
i
 = 0;

4092 } 
cou¡
 > 0);

4094 
tx_desc
->
ªad
.
cmd_ty≥_Àn
 |
	`˝u_to_À32
(
IGB_ADVTXD_DCMD
);

4099 
	`wmb
();

4101 
tx_rög
->
√xt_to_u£
 = 
i
;

4102 
	`wrôñ
(
i
, 
tx_rög
->
èû
);

4105 
	`mmiowb
();

4106 
	}
}

4108 
	$__igb_maybe_°›_tx
(
igb_rög
 *
tx_rög
, 
size
)

4110 
√t_devi˚
 *
√tdev
 = 
tx_rög
->netdev;

4112 
	`√tif_°›_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

4117 
	`smp_mb
();

4121 i‡(
	`igb_desc_unu£d
(
tx_rög
Ë< 
size
)

4122  -
EBUSY
;

4125 
	`√tif_wake_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

4126 
tx_rög
->
tx_°©s
.
ª°¨t_queue
++;

4128 
	}
}

4130 
ölöe
 
	$igb_maybe_°›_tx
(
igb_rög
 *
tx_rög
, 
size
)

4132 i‡(
	`igb_desc_unu£d
(
tx_rög
Ë>
size
)

4134  
	`__igb_maybe_°›_tx
(
tx_rög
, 
size
);

4135 
	}
}

4137 
√tdev_tx_t
 
	$igb_xmô_‰ame_rög_adv
(
sk_buff
 *
skb
,

4138 
igb_rög
 *
tx_rög
)

4140 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
tx_rög
->
√tdev
);

4141 
tso
 = 0, 
cou¡
;

4142 
u32
 
tx_Êags
 = 0;

4143 
u16
 
fú°
;

4144 
u8
 
hdr_Àn
 = 0;

4145 
skb_sh¨ed_tx
 *
shtx
 = 
	`skb_tx
(
skb
);

4152 i‡(
	`igb_maybe_°›_tx
(
tx_rög
, 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
 + 4)) {

4154  
NETDEV_TX_BUSY
;

4157 i‡(
	`u∆ikñy
(
shtx
->
h¨dw¨e
)) {

4158 
shtx
->
ö_¥ogªss
 = 1;

4159 
tx_Êags
 |
IGB_TX_FLAGS_TSTAMP
;

4162 i‡(
	`vœn_tx_èg_¥e£¡
(
skb
Ë&& 
ad≠ãr
->
vlgΩ
) {

4163 
tx_Êags
 |
IGB_TX_FLAGS_VLAN
;

4164 
tx_Êags
 |(
	`vœn_tx_èg_gë
(
skb
Ë<< 
IGB_TX_FLAGS_VLAN_SHIFT
);

4167 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

4168 
tx_Êags
 |
IGB_TX_FLAGS_IPV4
;

4170 
fú°
 = 
tx_rög
->
√xt_to_u£
;

4171 i‡(
	`skb_is_gso
(
skb
)) {

4172 
tso
 = 
	`igb_tso_adv
(
tx_rög
, 
skb
, 
tx_Êags
, &
hdr_Àn
);

4174 i‡(
tso
 < 0) {

4176 
	`ukmem_skb_‰ì
(
skb
);

4177  
NETDEV_TX_OK
;

4181 i‡(
tso
)

4182 
tx_Êags
 |
IGB_TX_FLAGS_TSO
;

4183 i‡(
	`igb_tx_csum_adv
(
tx_rög
, 
skb
, 
tx_Êags
) &&

4184 (
skb
->
ù_summed
 =
CHECKSUM_PARTIAL
))

4185 
tx_Êags
 |
IGB_TX_FLAGS_CSUM
;

4191 
cou¡
 = 
	`igb_tx_m≠_adv
(
tx_rög
, 
skb
, 
fú°
);

4192 i‡(!
cou¡
) {

4194 
	`ukmem_skb_‰ì
(
skb
);

4195 
tx_rög
->
buf„r_öfo
[
fú°
].
time_°amp
 = 0;

4196 
tx_rög
->
√xt_to_u£
 = 
fú°
;

4197  
NETDEV_TX_OK
;

4200 
	`igb_tx_queue_adv
(
tx_rög
, 
tx_Êags
, 
cou¡
, 
skb
->
Àn
, 
hdr_Àn
);

4203 
	`igb_maybe_°›_tx
(
tx_rög
, 
MAX_SKB_FRAGS
 + 4);

4205  
NETDEV_TX_OK
;

4206 
	}
}

4210 
√tdev_tx_t
 
	$igb_xmô_‰ame_adv_Áke
(
sk_buff
 *
skb
,

4211 
√t_devi˚
 *
√tdev
)

4213  
NETDEV_TX_OK
;

4214 
	}
}

4216 
√tdev_tx_t
 
	$igb_xmô_‰ame_adv
(
sk_buff
 *
skb
,

4217 
√t_devi˚
 *
√tdev
)

4219 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

4220 
igb_rög
 *
tx_rög
;

4221 
r_idx
 = 0;

4223 i‡(
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
)) {

4225 
	`ukmem_skb_‰ì
(
skb
);

4226  
NETDEV_TX_OK
;

4229 i‡(
skb
->
Àn
 <= 0) {

4231 
	`ukmem_skb_‰ì
(
skb
);

4232  
NETDEV_TX_OK
;

4235 
r_idx
 = 
skb
->
queue_m≠pög
 & (
IGB_ABS_MAX_TX_QUEUES
 - 1);

4236 
tx_rög
 = 
ad≠ãr
->
mu…i_tx_èbÀ
[
r_idx
];

4242  
	`igb_xmô_‰ame_rög_adv
(
skb
, 
tx_rög
);

4243 
	}
}

4249 
	$igb_tx_timeout
(
√t_devi˚
 *
√tdev
)

4251 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

4252 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4255 
ad≠ãr
->
tx_timeout_cou¡
++;

4257 i‡(
hw
->
mac
.
ty≥
 =
e1000_82580
)

4258 
hw
->
dev_•ec
.
_82575
.
globÆ_devi˚_ª£t
 = 
åue
;

4260 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

4261 
	`wr32
(
E1000_EICS
,

4262 (
ad≠ãr
->
eims_íabÀ_mask
 & ~ad≠ãr->
eims_Ÿhî
));

4263 
	}
}

4265 
	$igb_ª£t_èsk
(
w‹k_°ru˘
 *
w‹k
)

4267 
igb_ad≠ãr
 *
ad≠ãr
;

4268 
ad≠ãr
 = 
	`c⁄èöî_of
(
w‹k
, 
igb_ad≠ãr
, 
ª£t_èsk
);

4270 
	`igb_dump
(
ad≠ãr
);

4271 
	`√tdev_îr
(
ad≠ãr
->
√tdev
, "Resetádapter\n");

4272 
	`igb_ªöô_locked
(
ad≠ãr
);

4273 
	}
}

4282 
√t_devi˚_°©s
 *
	$igb_gë_°©s
(
√t_devi˚
 *
√tdev
)

4285  &
√tdev
->
°©s
;

4286 
	}
}

4295 
	$igb_ch™ge_mtu
(
√t_devi˚
 *
√tdev
, 
√w_mtu
)

4297 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

4298 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4299 
max_‰ame
 = 
√w_mtu
 + 
ETH_HLEN
 + 
ETH_FCS_LEN
;

4300 
u32
 
rx_buf„r_Àn
, 
i
;

4302 i‡((
√w_mtu
 < 68Ë|| (
max_‰ame
 > 
MAX_JUMBO_FRAME_SIZE
)) {

4303 
	`dev_îr
(&
pdev
->
dev
, "Invalid MTU setting\n");

4304  -
EINVAL
;

4307 i‡(
max_‰ame
 > 
MAX_STD_JUMBO_FRAME_SIZE
) {

4308 
	`dev_îr
(&
pdev
->
dev
, "MTU > 9216Çot supported.\n");

4309  -
EINVAL
;

4312 
	`ã°_™d_£t_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
))

4313 
	`m¶ìp
(1);

4316 
ad≠ãr
->
max_‰ame_size
 = 
max_‰ame
;

4324 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
e1000_82580
)

4325 
max_‰ame
 +
IGB_TS_HDR_LEN
;

4327 i‡(
max_‰ame
 <
IGB_RXBUFFER_1024
)

4328 
rx_buf„r_Àn
 = 
IGB_RXBUFFER_1024
;

4329 i‡(
max_‰ame
 <
MAXIMUM_ETHERNET_VLAN_SIZE
)

4330 
rx_buf„r_Àn
 = 
MAXIMUM_ETHERNET_VLAN_SIZE
;

4332 
rx_buf„r_Àn
 = 
IGB_RXBUFFER_128
;

4334 i‡((
max_‰ame
 =
ETH_FRAME_LEN
 + 
ETH_FCS_LEN
 + 
IGB_TS_HDR_LEN
) ||

4335 (
max_‰ame
 =
MAXIMUM_ETHERNET_VLAN_SIZE
 + 
IGB_TS_HDR_LEN
))

4336 
rx_buf„r_Àn
 = 
MAXIMUM_ETHERNET_VLAN_SIZE
 + 
IGB_TS_HDR_LEN
;

4338 i‡((
ad≠ãr
->
hw
.
mac
.
ty≥
 =
e1000_82580
) &&

4339 (
rx_buf„r_Àn
 =
IGB_RXBUFFER_128
))

4340 
rx_buf„r_Àn
 +
IGB_RXBUFFER_64
;

4342 i‡(
	`√tif_ru¬ög
(
√tdev
))

4343 
	`igb_down
(
ad≠ãr
);

4345 
	`dev_öfo
(&
pdev
->
dev
, "changing MTU from %dÅo %d\n",

4346 
√tdev
->
mtu
, 
√w_mtu
);

4347 
√tdev
->
mtu
 = 
√w_mtu
;

4349 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++)

4350 
ad≠ãr
->
rx_rög
[
i
]->
rx_buf„r_Àn
 =Ñx_buffer_len;

4352 i‡(
	`√tif_ru¬ög
(
√tdev
))

4353 
	`igb_up
(
ad≠ãr
);

4355 
	`igb_ª£t
(
ad≠ãr
);

4357 
	`˛ór_bô
(
__IGB_RESETTING
, &
ad≠ãr
->
°©e
);

4360 
	}
}

4367 
	$igb_upd©e_°©s
(
igb_ad≠ãr
 *
ad≠ãr
)

4369 
√t_devi˚_°©s
 *
√t_°©s
 = 
	`igb_gë_°©s
(
ad≠ãr
->
√tdev
);

4370 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4371 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4372 
u32
 
ªg
, 
mpc
;

4373 
u16
 
phy_tmp
;

4374 
i
;

4375 
u64
 
byãs
, 
∑ckës
;

4377 
	#PHY_IDLE_ERROR_COUNT_MASK
 0x00FF

	)

4383 i‡(
ad≠ãr
->
lök_•ìd
 == 0)

4385 i‡(
	`pci_ch™√l_ofÊöe
(
pdev
))

4388 
byãs
 = 0;

4389 
∑ckës
 = 0;

4390 
i
 = 0; i < 
ad≠ãr
->
num_rx_queues
; i++) {

4391 
u32
 
rqdpc_tmp
 = 
	`rd32
(
	`E1000_RQDPC
(
i
)) & 0x0FFF;

4392 
igb_rög
 *
rög
 = 
ad≠ãr
->
rx_rög
[
i
];

4393 
rög
->
rx_°©s
.
dr›s
 +
rqdpc_tmp
;

4394 
√t_°©s
->
rx_fifo_îr‹s
 +
rqdpc_tmp
;

4395 
byãs
 +
rög
->
rx_°©s
.bytes;

4396 
∑ckës
 +
rög
->
rx_°©s
.packets;

4399 
√t_°©s
->
rx_byãs
 = 
byãs
;

4400 
√t_°©s
->
rx_∑ckës
 = 
∑ckës
;

4402 
byãs
 = 0;

4403 
∑ckës
 = 0;

4404 
i
 = 0; i < 
ad≠ãr
->
num_tx_queues
; i++) {

4405 
igb_rög
 *
rög
 = 
ad≠ãr
->
tx_rög
[
i
];

4406 
byãs
 +
rög
->
tx_°©s
.bytes;

4407 
∑ckës
 +
rög
->
tx_°©s
.packets;

4409 
√t_°©s
->
tx_byãs
 = 
byãs
;

4410 
√t_°©s
->
tx_∑ckës
 = 
∑ckës
;

4413 
ad≠ãr
->
°©s
.
¸˚ºs
 +
	`rd32
(
E1000_CRCERRS
);

4414 
ad≠ãr
->
°©s
.
g¥c
 +
	`rd32
(
E1000_GPRC
);

4415 
ad≠ãr
->
°©s
.
g‹c
 +
	`rd32
(
E1000_GORCL
);

4416 
	`rd32
(
E1000_GORCH
);

4417 
ad≠ãr
->
°©s
.
b¥c
 +
	`rd32
(
E1000_BPRC
);

4418 
ad≠ãr
->
°©s
.
m¥c
 +
	`rd32
(
E1000_MPRC
);

4419 
ad≠ãr
->
°©s
.
roc
 +
	`rd32
(
E1000_ROC
);

4421 
ad≠ãr
->
°©s
.
¥c64
 +
	`rd32
(
E1000_PRC64
);

4422 
ad≠ãr
->
°©s
.
¥c127
 +
	`rd32
(
E1000_PRC127
);

4423 
ad≠ãr
->
°©s
.
¥c255
 +
	`rd32
(
E1000_PRC255
);

4424 
ad≠ãr
->
°©s
.
¥c511
 +
	`rd32
(
E1000_PRC511
);

4425 
ad≠ãr
->
°©s
.
¥c1023
 +
	`rd32
(
E1000_PRC1023
);

4426 
ad≠ãr
->
°©s
.
¥c1522
 +
	`rd32
(
E1000_PRC1522
);

4427 
ad≠ãr
->
°©s
.
symîrs
 +
	`rd32
(
E1000_SYMERRS
);

4428 
ad≠ãr
->
°©s
.
£c
 +
	`rd32
(
E1000_SEC
);

4430 
mpc
 = 
	`rd32
(
E1000_MPC
);

4431 
ad≠ãr
->
°©s
.
mpc
 += mpc;

4432 
√t_°©s
->
rx_fifo_îr‹s
 +
mpc
;

4433 
ad≠ãr
->
°©s
.
scc
 +
	`rd32
(
E1000_SCC
);

4434 
ad≠ãr
->
°©s
.
ecﬁ
 +
	`rd32
(
E1000_ECOL
);

4435 
ad≠ãr
->
°©s
.
mcc
 +
	`rd32
(
E1000_MCC
);

4436 
ad≠ãr
->
°©s
.
œãcﬁ
 +
	`rd32
(
E1000_LATECOL
);

4437 
ad≠ãr
->
°©s
.
dc
 +
	`rd32
(
E1000_DC
);

4438 
ad≠ãr
->
°©s
.
æec
 +
	`rd32
(
E1000_RLEC
);

4439 
ad≠ãr
->
°©s
.
x⁄rxc
 +
	`rd32
(
E1000_XONRXC
);

4440 
ad≠ãr
->
°©s
.
x⁄txc
 +
	`rd32
(
E1000_XONTXC
);

4441 
ad≠ãr
->
°©s
.
xof‰xc
 +
	`rd32
(
E1000_XOFFRXC
);

4442 
ad≠ãr
->
°©s
.
xof·xc
 +
	`rd32
(
E1000_XOFFTXC
);

4443 
ad≠ãr
->
°©s
.
f¸uc
 +
	`rd32
(
E1000_FCRUC
);

4444 
ad≠ãr
->
°©s
.
g±c
 +
	`rd32
(
E1000_GPTC
);

4445 
ad≠ãr
->
°©s
.
gŸc
 +
	`rd32
(
E1000_GOTCL
);

4446 
	`rd32
(
E1000_GOTCH
);

4447 
ad≠ãr
->
°©s
.
∫bc
 +
	`rd32
(
E1000_RNBC
);

4448 
ad≠ãr
->
°©s
.
ruc
 +
	`rd32
(
E1000_RUC
);

4449 
ad≠ãr
->
°©s
.
rfc
 +
	`rd32
(
E1000_RFC
);

4450 
ad≠ãr
->
°©s
.
rjc
 +
	`rd32
(
E1000_RJC
);

4451 
ad≠ãr
->
°©s
.
t‹
 +
	`rd32
(
E1000_TORH
);

4452 
ad≠ãr
->
°©s
.
tŸ
 +
	`rd32
(
E1000_TOTH
);

4453 
ad≠ãr
->
°©s
.
çr
 +
	`rd32
(
E1000_TPR
);

4455 
ad≠ãr
->
°©s
.
±c64
 +
	`rd32
(
E1000_PTC64
);

4456 
ad≠ãr
->
°©s
.
±c127
 +
	`rd32
(
E1000_PTC127
);

4457 
ad≠ãr
->
°©s
.
±c255
 +
	`rd32
(
E1000_PTC255
);

4458 
ad≠ãr
->
°©s
.
±c511
 +
	`rd32
(
E1000_PTC511
);

4459 
ad≠ãr
->
°©s
.
±c1023
 +
	`rd32
(
E1000_PTC1023
);

4460 
ad≠ãr
->
°©s
.
±c1522
 +
	`rd32
(
E1000_PTC1522
);

4462 
ad≠ãr
->
°©s
.
m±c
 +
	`rd32
(
E1000_MPTC
);

4463 
ad≠ãr
->
°©s
.
b±c
 +
	`rd32
(
E1000_BPTC
);

4465 
ad≠ãr
->
°©s
.
çt
 +
	`rd32
(
E1000_TPT
);

4466 
ad≠ãr
->
°©s
.
cﬁc
 +
	`rd32
(
E1000_COLC
);

4468 
ad≠ãr
->
°©s
.
Æg√ºc
 +
	`rd32
(
E1000_ALGNERRC
);

4470 
ªg
 = 
	`rd32
(
E1000_CTRL_EXT
);

4471 i‡(!(
ªg
 & 
E1000_CTRL_EXT_LINK_MODE_MASK
)) {

4472 
ad≠ãr
->
°©s
.
rxîrc
 +
	`rd32
(
E1000_RXERRC
);

4473 
ad≠ãr
->
°©s
.
ä¸s
 +
	`rd32
(
E1000_TNCRS
);

4476 
ad≠ãr
->
°©s
.
ts˘c
 +
	`rd32
(
E1000_TSCTC
);

4477 
ad≠ãr
->
°©s
.
ts˘fc
 +
	`rd32
(
E1000_TSCTFC
);

4479 
ad≠ãr
->
°©s
.
üc
 +
	`rd32
(
E1000_IAC
);

4480 
ad≠ãr
->
°©s
.
i¸xoc
 +
	`rd32
(
E1000_ICRXOC
);

4481 
ad≠ãr
->
°©s
.
i¸x±c
 +
	`rd32
(
E1000_ICRXPTC
);

4482 
ad≠ãr
->
°©s
.
i¸x©c
 +
	`rd32
(
E1000_ICRXATC
);

4483 
ad≠ãr
->
°©s
.
i˘x±c
 +
	`rd32
(
E1000_ICTXPTC
);

4484 
ad≠ãr
->
°©s
.
i˘x©c
 +
	`rd32
(
E1000_ICTXATC
);

4485 
ad≠ãr
->
°©s
.
i˘xqec
 +
	`rd32
(
E1000_ICTXQEC
);

4486 
ad≠ãr
->
°©s
.
i˘xqmtc
 +
	`rd32
(
E1000_ICTXQMTC
);

4487 
ad≠ãr
->
°©s
.
i¸xdmtc
 +
	`rd32
(
E1000_ICRXDMTC
);

4490 
√t_°©s
->
mu…iˇ°
 = 
ad≠ãr
->
°©s
.
m¥c
;

4491 
√t_°©s
->
cﬁlisi⁄s
 = 
ad≠ãr
->
°©s
.
cﬁc
;

4497 
√t_°©s
->
rx_îr‹s
 = 
ad≠ãr
->
°©s
.
rxîrc
 +

4498 
ad≠ãr
->
°©s
.
¸˚ºs
 +ád≠ãr->°©s.
Æg√ºc
 +

4499 
ad≠ãr
->
°©s
.
ruc
 +ád≠ãr->°©s.
roc
 +

4500 
ad≠ãr
->
°©s
.
˚xãº
;

4501 
√t_°©s
->
rx_Àngth_îr‹s
 = 
ad≠ãr
->
°©s
.
ruc
 +

4502 
ad≠ãr
->
°©s
.
roc
;

4503 
√t_°©s
->
rx_¸c_îr‹s
 = 
ad≠ãr
->
°©s
.
¸˚ºs
;

4504 
√t_°©s
->
rx_‰ame_îr‹s
 = 
ad≠ãr
->
°©s
.
Æg√ºc
;

4505 
√t_°©s
->
rx_mis£d_îr‹s
 = 
ad≠ãr
->
°©s
.
mpc
;

4508 
√t_°©s
->
tx_îr‹s
 = 
ad≠ãr
->
°©s
.
ecﬁ
 +

4509 
ad≠ãr
->
°©s
.
œãcﬁ
;

4510 
√t_°©s
->
tx_ab‹ãd_îr‹s
 = 
ad≠ãr
->
°©s
.
ecﬁ
;

4511 
√t_°©s
->
tx_wödow_îr‹s
 = 
ad≠ãr
->
°©s
.
œãcﬁ
;

4512 
√t_°©s
->
tx_ˇºõr_îr‹s
 = 
ad≠ãr
->
°©s
.
ä¸s
;

4517 i‡(
hw
->
phy
.
medü_ty≥
 =
e1000_medü_ty≥_c›≥r
) {

4518 i‡((
ad≠ãr
->
lök_•ìd
 =
SPEED_1000
) &&

4519 (!
	`igb_ªad_phy_ªg
(
hw
, 
PHY_1000T_STATUS
, &
phy_tmp
))) {

4520 
phy_tmp
 &
PHY_IDLE_ERROR_COUNT_MASK
;

4521 
ad≠ãr
->
phy_°©s
.
idÀ_îr‹s
 +
phy_tmp
;

4526 
ad≠ãr
->
°©s
.
mg±c
 +
	`rd32
(
E1000_MGTPTC
);

4527 
ad≠ãr
->
°©s
.
mg¥c
 +
	`rd32
(
E1000_MGTPRC
);

4528 
ad≠ãr
->
°©s
.
mgpdc
 +
	`rd32
(
E1000_MGTPDC
);

4529 
	}
}

4531 
úqªtu∫_t
 
	$igb_msix_Ÿhî
(
úq
, *
d©a
)

4533 
igb_ad≠ãr
 *
ad≠ãr
 = 
d©a
;

4534 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4535 
u32
 
i¸
 = 
	`rd32
(
E1000_ICR
);

4538 i‡(
i¸
 & 
E1000_ICR_DRSTA
)

4539 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

4541 i‡(
i¸
 & 
E1000_ICR_DOUTSYNC
) {

4543 
ad≠ãr
->
°©s
.
doosync
++;

4547 i‡(
i¸
 & 
E1000_ICR_VMMB
)

4548 
	`igb_msg_èsk
(
ad≠ãr
);

4550 i‡(
i¸
 & 
E1000_ICR_LSC
) {

4551 
hw
->
mac
.
gë_lök_°©us
 = 1;

4553 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

4554 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
, 
jiffõs
 + 1);

4557 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

4558 
	`wr32
(
E1000_IMS
, 
E1000_IMS_LSC
 |

4559 
E1000_IMS_VMMB
 |

4560 
E1000_IMS_DOUTSYNC
);

4562 
	`wr32
(
E1000_IMS
, 
E1000_IMS_LSC
 | 
E1000_IMS_DOUTSYNC
);

4563 
	`wr32
(
E1000_EIMS
, 
ad≠ãr
->
eims_Ÿhî
);

4565  
IRQ_HANDLED
;

4566 
	}
}

4568 
	$igb_wrôe_ôr
(
igb_q_ve˘‹
 *
q_ve˘‹
)

4570 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

4571 
u32
 
ôr_vÆ
 = 
q_ve˘‹
->itr_val & 0x7FFC;

4573 i‡(!
q_ve˘‹
->
£t_ôr
)

4576 i‡(!
ôr_vÆ
)

4577 
ôr_vÆ
 = 0x4;

4579 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
e1000_82575
)

4580 
ôr_vÆ
 |= itr_val << 16;

4582 
ôr_vÆ
 |= 0x8000000;

4584 
	`wrôñ
(
ôr_vÆ
, 
q_ve˘‹
->
ôr_ªgi°î
);

4585 
q_ve˘‹
->
£t_ôr
 = 0;

4586 
	}
}

4588 
úqªtu∫_t
 
	$igb_msix_rög
(
úq
, *
d©a
)

4590 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
d©a
;

4593 
	`igb_wrôe_ôr
(
q_ve˘‹
);

4595 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

4597  
IRQ_HANDLED
;

4598 
	}
}

4600 #ifde‡
CONFIG_IGB_DCA


4601 
	$igb_upd©e_dˇ
(
igb_q_ve˘‹
 *
q_ve˘‹
)

4603 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

4604 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4605 
˝u
 = 
	`gë_˝u
();

4607 i‡(
q_ve˘‹
->
˝u
 == cpu)

4608 
out_no_upd©e
;

4610 i‡(
q_ve˘‹
->
tx_rög
) {

4611 
q
 = 
q_ve˘‹
->
tx_rög
->
ªg_idx
;

4612 
u32
 
dˇ_tx˘æ
 = 
	`rd32
(
	`E1000_DCA_TXCTRL
(
q
));

4613 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
) {

4614 
dˇ_tx˘æ
 &~
E1000_DCA_TXCTRL_CPUID_MASK
;

4615 
dˇ_tx˘æ
 |
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
);

4617 
dˇ_tx˘æ
 &~
E1000_DCA_TXCTRL_CPUID_MASK_82576
;

4618 
dˇ_tx˘æ
 |
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
) <<

4619 
E1000_DCA_TXCTRL_CPUID_SHIFT
;

4621 
dˇ_tx˘æ
 |
E1000_DCA_TXCTRL_DESC_DCA_EN
;

4622 
	`wr32
(
	`E1000_DCA_TXCTRL
(
q
), 
dˇ_tx˘æ
);

4624 i‡(
q_ve˘‹
->
rx_rög
) {

4625 
q
 = 
q_ve˘‹
->
rx_rög
->
ªg_idx
;

4626 
u32
 
dˇ_rx˘æ
 = 
	`rd32
(
	`E1000_DCA_RXCTRL
(
q
));

4627 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
) {

4628 
dˇ_rx˘æ
 &~
E1000_DCA_RXCTRL_CPUID_MASK
;

4629 
dˇ_rx˘æ
 |
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
);

4631 
dˇ_rx˘æ
 &~
E1000_DCA_RXCTRL_CPUID_MASK_82576
;

4632 
dˇ_rx˘æ
 |
	`dˇ3_gë_èg
(&
ad≠ãr
->
pdev
->
dev
, 
˝u
) <<

4633 
E1000_DCA_RXCTRL_CPUID_SHIFT
;

4635 
dˇ_rx˘æ
 |
E1000_DCA_RXCTRL_DESC_DCA_EN
;

4636 
dˇ_rx˘æ
 |
E1000_DCA_RXCTRL_HEAD_DCA_EN
;

4637 
dˇ_rx˘æ
 |
E1000_DCA_RXCTRL_DATA_DCA_EN
;

4638 
	`wr32
(
	`E1000_DCA_RXCTRL
(
q
), 
dˇ_rx˘æ
);

4640 
q_ve˘‹
->
˝u
 = cpu;

4641 
out_no_upd©e
:

4642 
	`put_˝u
();

4643 
	}
}

4645 
	$igb_£tup_dˇ
(
igb_ad≠ãr
 *
ad≠ãr
)

4647 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4648 
i
;

4650 i‡(!(
ad≠ãr
->
Êags
 & 
IGB_FLAG_DCA_ENABLED
))

4654 
	`wr32
(
E1000_DCA_CTRL
, 
E1000_DCA_CTRL_DCA_MODE_CB2
);

4656 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

4657 
ad≠ãr
->
q_ve˘‹
[
i
]->
˝u
 = -1;

4658 
	`igb_upd©e_dˇ
(
ad≠ãr
->
q_ve˘‹
[
i
]);

4660 
	}
}

4662 
	$__igb_nŸify_dˇ
(
devi˚
 *
dev
, *
d©a
)

4664 
√t_devi˚
 *
√tdev
 = 
	`dev_gë_drvd©a
(
dev
);

4665 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

4666 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

4667 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4668 
evít
 = *(*)
d©a
;

4670 
evít
) {

4671 
DCA_PROVIDER_ADD
:

4673 i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_DCA_ENABLED
)

4675 i‡(
	`dˇ_add_ªque°î
(
dev
) == 0) {

4676 
ad≠ãr
->
Êags
 |
IGB_FLAG_DCA_ENABLED
;

4677 
	`dev_öfo
(&
pdev
->
dev
, "DCAÉnabled\n");

4678 
	`igb_£tup_dˇ
(
ad≠ãr
);

4682 
DCA_PROVIDER_REMOVE
:

4683 i‡(
ad≠ãr
->
Êags
 & 
IGB_FLAG_DCA_ENABLED
) {

4686 
	`dˇ_ªmove_ªque°î
(
dev
);

4687 
	`dev_öfo
(&
pdev
->
dev
, "DCA disabled\n");

4688 
ad≠ãr
->
Êags
 &~
IGB_FLAG_DCA_ENABLED
;

4689 
	`wr32
(
E1000_DCA_CTRL
, 
E1000_DCA_CTRL_DCA_MODE_DISABLE
);

4695 
	}
}

4697 
	$igb_nŸify_dˇ
(
nŸifõr_block
 *
nb
, 
evít
,

4698 *
p
)

4700 
ªt_vÆ
;

4702 
ªt_vÆ
 = 
	`drivî_f‹_óch_devi˚
(&
igb_drivî
.
drivî
, 
NULL
, &
evít
,

4703 
__igb_nŸify_dˇ
);

4705  
ªt_vÆ
 ? 
NOTIFY_BAD
 : 
NOTIFY_DONE
;

4706 
	}
}

4709 
	$igb_pög_Æl_vfs
(
igb_ad≠ãr
 *
ad≠ãr
)

4711 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4712 
u32
 
pög
;

4713 
i
;

4715 
i
 = 0 ; i < 
ad≠ãr
->
vfs_Æloˇãd_cou¡
; i++) {

4716 
pög
 = 
E1000_PF_CONTROL_MSG
;

4717 i‡(
ad≠ãr
->
vf_d©a
[
i
].
Êags
 & 
IGB_VF_FLAG_CTS
)

4718 
pög
 |
E1000_VT_MSGTYPE_CTS
;

4719 
	`igb_wrôe_mbx
(
hw
, &
pög
, 1, 
i
);

4721 
	}
}

4723 
	$igb_£t_vf_¥omisc
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 *
msgbuf
, u32 
vf
)

4725 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4726 
u32
 
vmﬁr
 = 
	`rd32
(
	`E1000_VMOLR
(
vf
));

4727 
vf_d©a_°‹age
 *
vf_d©a
 = &
ad≠ãr
->vf_d©a[
vf
];

4729 
vf_d©a
->
Êags
 |~(
IGB_VF_FLAG_UNI_PROMISC
 |

4730 
IGB_VF_FLAG_MULTI_PROMISC
);

4731 
vmﬁr
 &~(
E1000_VMOLR_ROPE
 | 
E1000_VMOLR_ROMPE
 | 
E1000_VMOLR_MPME
);

4733 i‡(*
msgbuf
 & 
E1000_VF_SET_PROMISC_MULTICAST
) {

4734 
vmﬁr
 |
E1000_VMOLR_MPME
;

4735 *
msgbuf
 &~
E1000_VF_SET_PROMISC_MULTICAST
;

4742 i‡(
vf_d©a
->
num_vf_mc_hashes
 > 30) {

4743 
vmﬁr
 |
E1000_VMOLR_MPME
;

4744 } i‡(
vf_d©a
->
num_vf_mc_hashes
) {

4745 
j
;

4746 
vmﬁr
 |
E1000_VMOLR_ROMPE
;

4747 
j
 = 0; j < 
vf_d©a
->
num_vf_mc_hashes
; j++)

4748 
	`igb_mè_£t
(
hw
, 
vf_d©a
->
vf_mc_hashes
[
j
]);

4752 
	`wr32
(
	`E1000_VMOLR
(
vf
), 
vmﬁr
);

4755 i‡(*
msgbuf
 & 
E1000_VT_MSGINFO_MASK
)

4756  -
EINVAL
;

4760 
	}
}

4762 
	$igb_£t_vf_mu…iˇ°s
(
igb_ad≠ãr
 *
ad≠ãr
,

4763 
u32
 *
msgbuf
, u32 
vf
)

4765 
n
 = (
msgbuf
[0] & 
E1000_VT_MSGINFO_MASK
Ë>> 
E1000_VT_MSGINFO_SHIFT
;

4766 
u16
 *
hash_li°
 = (u16 *)&
msgbuf
[1];

4767 
vf_d©a_°‹age
 *
vf_d©a
 = &
ad≠ãr
->vf_d©a[
vf
];

4768 
i
;

4774 
vf_d©a
->
num_vf_mc_hashes
 = 
n
;

4777 i‡(
n
 > 30)

4778 
n
 = 30;

4781 
i
 = 0; i < 
n
; i++)

4782 
vf_d©a
->
vf_mc_hashes
[
i
] = 
hash_li°
[i];

4785 
	`igb_£t_rx_mode
(
ad≠ãr
->
√tdev
);

4788 
	}
}

4790 
	$igb_ª°‹e_vf_mu…iˇ°s
(
igb_ad≠ãr
 *
ad≠ãr
)

4792 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4793 
vf_d©a_°‹age
 *
vf_d©a
;

4794 
i
, 
j
;

4796 
i
 = 0; i < 
ad≠ãr
->
vfs_Æloˇãd_cou¡
; i++) {

4797 
u32
 
vmﬁr
 = 
	`rd32
(
	`E1000_VMOLR
(
i
));

4798 
vmﬁr
 &~(
E1000_VMOLR_ROMPE
 | 
E1000_VMOLR_MPME
);

4800 
vf_d©a
 = &
ad≠ãr
->vf_d©a[
i
];

4802 i‡((
vf_d©a
->
num_vf_mc_hashes
 > 30) ||

4803 (
vf_d©a
->
Êags
 & 
IGB_VF_FLAG_MULTI_PROMISC
)) {

4804 
vmﬁr
 |
E1000_VMOLR_MPME
;

4805 } i‡(
vf_d©a
->
num_vf_mc_hashes
) {

4806 
vmﬁr
 |
E1000_VMOLR_ROMPE
;

4807 
j
 = 0; j < 
vf_d©a
->
num_vf_mc_hashes
; j++)

4808 
	`igb_mè_£t
(
hw
, 
vf_d©a
->
vf_mc_hashes
[
j
]);

4810 
	`wr32
(
	`E1000_VMOLR
(
i
), 
vmﬁr
);

4812 
	}
}

4814 
	$igb_˛ór_vf_v·a
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vf
)

4816 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4817 
u32
 
poﬁ_mask
, 
ªg
, 
vid
;

4818 
i
;

4820 
poﬁ_mask
 = 1 << (
E1000_VLVF_POOLSEL_SHIFT
 + 
vf
);

4823 
i
 = 0; i < 
E1000_VLVF_ARRAY_SIZE
; i++) {

4824 
ªg
 = 
	`rd32
(
	`E1000_VLVF
(
i
));

4827 
ªg
 &~
poﬁ_mask
;

4830 i‡(!(
ªg
 & 
E1000_VLVF_POOLSEL_MASK
) &&

4831 (
ªg
 & 
E1000_VLVF_VLANID_ENABLE
)) {

4832 
ªg
 = 0;

4833 
vid
 = 
ªg
 & 
E1000_VLVF_VLANID_MASK
;

4834 
	`igb_v·a_£t
(
hw
, 
vid
, 
Ál£
);

4837 
	`wr32
(
	`E1000_VLVF
(
i
), 
ªg
);

4840 
ad≠ãr
->
vf_d©a
[
vf
].
vœns_íabÀd
 = 0;

4841 
	}
}

4843 
s32
 
	$igb_vlvf_£t
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vid
, 
boﬁ
 
add
, u32 
vf
)

4845 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4846 
u32
 
ªg
, 
i
;

4849 i‡(
hw
->
mac
.
ty≥
 < 
e1000_82576
)

4853 i‡(!
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

4857 
i
 = 0; i < 
E1000_VLVF_ARRAY_SIZE
; i++) {

4858 
ªg
 = 
	`rd32
(
	`E1000_VLVF
(
i
));

4859 i‡((
ªg
 & 
E1000_VLVF_VLANID_ENABLE
) &&

4860 
vid
 =(
ªg
 & 
E1000_VLVF_VLANID_MASK
))

4864 i‡(
add
) {

4865 i‡(
i
 =
E1000_VLVF_ARRAY_SIZE
) {

4870 
i
 = 0; i < 
E1000_VLVF_ARRAY_SIZE
; i++) {

4871 
ªg
 = 
	`rd32
(
	`E1000_VLVF
(
i
));

4872 i‡(!(
ªg
 & 
E1000_VLVF_VLANID_ENABLE
))

4876 i‡(
i
 < 
E1000_VLVF_ARRAY_SIZE
) {

4878 
ªg
 |1 << (
E1000_VLVF_POOLSEL_SHIFT
 + 
vf
);

4881 i‡(!(
ªg
 & 
E1000_VLVF_VLANID_ENABLE
)) {

4883 
	`igb_v·a_£t
(
hw
, 
vid
, 
åue
);

4884 
ªg
 |
E1000_VLVF_VLANID_ENABLE
;

4886 
ªg
 &~
E1000_VLVF_VLANID_MASK
;

4887 
ªg
 |
vid
;

4888 
	`wr32
(
	`E1000_VLVF
(
i
), 
ªg
);

4891 i‡(
vf
 >
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

4894 i‡(!
ad≠ãr
->
vf_d©a
[
vf
].
vœns_íabÀd
) {

4895 
u32
 
size
;

4896 
ªg
 = 
	`rd32
(
	`E1000_VMOLR
(
vf
));

4897 
size
 = 
ªg
 & 
E1000_VMOLR_RLPML_MASK
;

4898 
size
 += 4;

4899 
ªg
 &~
E1000_VMOLR_RLPML_MASK
;

4900 
ªg
 |
size
;

4901 
	`wr32
(
	`E1000_VMOLR
(
vf
), 
ªg
);

4904 
ad≠ãr
->
vf_d©a
[
vf
].
vœns_íabÀd
++;

4908 i‡(
i
 < 
E1000_VLVF_ARRAY_SIZE
) {

4910 
ªg
 &~(1 << (
E1000_VLVF_POOLSEL_SHIFT
 + 
vf
));

4912 i‡(!(
ªg
 & 
E1000_VLVF_POOLSEL_MASK
)) {

4913 
ªg
 = 0;

4914 
	`igb_v·a_£t
(
hw
, 
vid
, 
Ál£
);

4916 
	`wr32
(
	`E1000_VLVF
(
i
), 
ªg
);

4919 i‡(
vf
 >
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

4922 
ad≠ãr
->
vf_d©a
[
vf
].
vœns_íabÀd
--;

4923 i‡(!
ad≠ãr
->
vf_d©a
[
vf
].
vœns_íabÀd
) {

4924 
u32
 
size
;

4925 
ªg
 = 
	`rd32
(
	`E1000_VMOLR
(
vf
));

4926 
size
 = 
ªg
 & 
E1000_VMOLR_RLPML_MASK
;

4927 
size
 -= 4;

4928 
ªg
 &~
E1000_VMOLR_RLPML_MASK
;

4929 
ªg
 |
size
;

4930 
	`wr32
(
	`E1000_VMOLR
(
vf
), 
ªg
);

4935 
	}
}

4937 
	$igb_£t_vmvú
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vid
, u32 
vf
)

4939 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

4941 i‡(
vid
)

4942 
	`wr32
(
	`E1000_VMVIR
(
vf
), (
vid
 | 
E1000_VMVIR_VLANA_DEFAULT
));

4944 
	`wr32
(
	`E1000_VMVIR
(
vf
), 0);

4945 
	}
}

4947 
	$igb_ndo_£t_vf_vœn
(
√t_devi˚
 *
√tdev
,

4948 
vf
, 
u16
 
vœn
, 
u8
 
qos
)

4950 
îr
 = 0;

4951 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

4953 i‡((
vf
 >
ad≠ãr
->
vfs_Æloˇãd_cou¡
Ë|| (
vœn
 > 4095Ë|| (
qos
 > 7))

4954  -
EINVAL
;

4955 i‡(
vœn
 || 
qos
) {

4956 
îr
 = 
	`igb_vlvf_£t
(
ad≠ãr
, 
vœn
, !!vœn, 
vf
);

4957 i‡(
îr
)

4958 
out
;

4959 
	`igb_£t_vmvú
(
ad≠ãr
, 
vœn
 | (
qos
 << 
VLAN_PRIO_SHIFT
), 
vf
);

4960 
	`igb_£t_vmﬁr
(
ad≠ãr
, 
vf
, !
vœn
);

4961 
ad≠ãr
->
vf_d©a
[
vf
].
pf_vœn
 = 
vœn
;

4962 
ad≠ãr
->
vf_d©a
[
vf
].
pf_qos
 = 
qos
;

4963 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
,

4964 "Sëtög VLAN %d, QOS 0x%x o¿VF %d\n", 
vœn
, 
qos
, 
vf
);

4965 i‡(
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
)) {

4966 
	`dev_w¨n
(&
ad≠ãr
->
pdev
->
dev
,

4969 
	`dev_w¨n
(&
ad≠ãr
->
pdev
->
dev
,

4974 
	`igb_vlvf_£t
(
ad≠ãr
,ád≠ãr->
vf_d©a
[
vf
].
pf_vœn
,

4975 
Ál£
, 
vf
);

4976 
	`igb_£t_vmvú
(
ad≠ãr
, 
vœn
, 
vf
);

4977 
	`igb_£t_vmﬁr
(
ad≠ãr
, 
vf
, 
åue
);

4978 
ad≠ãr
->
vf_d©a
[
vf
].
pf_vœn
 = 0;

4979 
ad≠ãr
->
vf_d©a
[
vf
].
pf_qos
 = 0;

4981 
out
:

4982  
îr
;

4983 
	}
}

4985 
	$igb_£t_vf_vœn
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 *
msgbuf
, u32 
vf
)

4987 
add
 = (
msgbuf
[0] & 
E1000_VT_MSGINFO_MASK
Ë>> 
E1000_VT_MSGINFO_SHIFT
;

4988 
vid
 = (
msgbuf
[1] & 
E1000_VLVF_VLANID_MASK
);

4990  
	`igb_vlvf_£t
(
ad≠ãr
, 
vid
, 
add
, 
vf
);

4991 
	}
}

4993 
ölöe
 
	$igb_vf_ª£t
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vf
)

4996 
ad≠ãr
->
vf_d©a
[
vf
].
Êags
 &~(
IGB_VF_FLAG_PF_SET_MAC
);

4997 
ad≠ãr
->
vf_d©a
[
vf
].
œ°_«ck
 = 
jiffõs
;

5000 
	`igb_£t_vmﬁr
(
ad≠ãr
, 
vf
, 
åue
);

5003 
	`igb_˛ór_vf_v·a
(
ad≠ãr
, 
vf
);

5004 i‡(
ad≠ãr
->
vf_d©a
[
vf
].
pf_vœn
)

5005 
	`igb_ndo_£t_vf_vœn
(
ad≠ãr
->
√tdev
, 
vf
,

5006 
ad≠ãr
->
vf_d©a
[
vf
].
pf_vœn
,

5007 
ad≠ãr
->
vf_d©a
[
vf
].
pf_qos
);

5009 
	`igb_˛ór_vf_v·a
(
ad≠ãr
, 
vf
);

5012 
ad≠ãr
->
vf_d©a
[
vf
].
num_vf_mc_hashes
 = 0;

5015 
	`igb_£t_rx_mode
(
ad≠ãr
->
√tdev
);

5016 
	}
}

5018 
	$igb_vf_ª£t_evít
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vf
)

5020 *
vf_mac
 = 
ad≠ãr
->
vf_d©a
[
vf
].
vf_mac_addªs£s
;

5023 i‡(!(
ad≠ãr
->
vf_d©a
[
vf
].
Êags
 & 
IGB_VF_FLAG_PF_SET_MAC
))

5024 
	`øndom_ëhî_addr
(
vf_mac
);

5027 
	`igb_vf_ª£t
(
ad≠ãr
, 
vf
);

5028 
	}
}

5030 
	$igb_vf_ª£t_msg
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vf
)

5032 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5033 *
vf_mac
 = 
ad≠ãr
->
vf_d©a
[
vf
].
vf_mac_addªs£s
;

5034 
ør_íåy
 = 
hw
->
mac
.
ør_íåy_cou¡
 - (
vf
 + 1);

5035 
u32
 
ªg
, 
msgbuf
[3];

5036 
u8
 *
addr
 = (u8 *)(&
msgbuf
[1]);

5039 
	`igb_vf_ª£t
(
ad≠ãr
, 
vf
);

5042 
	`igb_ør_£t_q£l
(
ad≠ãr
, 
vf_mac
, 
ør_íåy
, 
vf
);

5045 
ªg
 = 
	`rd32
(
E1000_VFTE
);

5046 
	`wr32
(
E1000_VFTE
, 
ªg
 | (1 << 
vf
));

5047 
ªg
 = 
	`rd32
(
E1000_VFRE
);

5048 
	`wr32
(
E1000_VFRE
, 
ªg
 | (1 << 
vf
));

5050 
ad≠ãr
->
vf_d©a
[
vf
].
Êags
 = 
IGB_VF_FLAG_CTS
;

5053 
msgbuf
[0] = 
E1000_VF_RESET
 | 
E1000_VT_MSGTYPE_ACK
;

5054 
	`mem˝y
(
addr
, 
vf_mac
, 6);

5055 
	`igb_wrôe_mbx
(
hw
, 
msgbuf
, 3, 
vf
);

5056 
	}
}

5058 
	$igb_£t_vf_mac_addr
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 *
msg
, 
vf
)

5060 *
addr
 = (*)&
msg
[1];

5061 
îr
 = -1;

5063 i‡(
	`is_vÆid_ëhî_addr
(
addr
))

5064 
îr
 = 
	`igb_£t_vf_mac
(
ad≠ãr
, 
vf
, 
addr
);

5066  
îr
;

5067 
	}
}

5069 
	$igb_rcv_ack_‰om_vf
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vf
)

5071 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5072 
vf_d©a_°‹age
 *
vf_d©a
 = &
ad≠ãr
->vf_d©a[
vf
];

5073 
u32
 
msg
 = 
E1000_VT_MSGTYPE_NACK
;

5076 i‡(!(
vf_d©a
->
Êags
 & 
IGB_VF_FLAG_CTS
) &&

5077 
	`time_a·î
(
jiffõs
, 
vf_d©a
->
œ°_«ck
 + (2 * 
HZ
))) {

5078 
	`igb_wrôe_mbx
(
hw
, &
msg
, 1, 
vf
);

5079 
vf_d©a
->
œ°_«ck
 = 
jiffõs
;

5081 
	}
}

5083 
	$igb_rcv_msg_‰om_vf
(
igb_ad≠ãr
 *
ad≠ãr
, 
u32
 
vf
)

5085 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

5086 
u32
 
msgbuf
[
E1000_VFMAILBOX_SIZE
];

5087 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5088 
vf_d©a_°‹age
 *
vf_d©a
 = &
ad≠ãr
->vf_d©a[
vf
];

5089 
s32
 
ªtvÆ
;

5091 
ªtvÆ
 = 
	`igb_ªad_mbx
(
hw
, 
msgbuf
, 
E1000_VFMAILBOX_SIZE
, 
vf
);

5093 i‡(
ªtvÆ
) {

5095 
	`dev_îr
(&
pdev
->
dev
, "ErrorÑeceiving message from VF\n");

5096 
vf_d©a
->
Êags
 &~
IGB_VF_FLAG_CTS
;

5097 i‡(!
	`time_a·î
(
jiffõs
, 
vf_d©a
->
œ°_«ck
 + (2 * 
HZ
)))

5099 
out
;

5103 i‡(
msgbuf
[0] & (
E1000_VT_MSGTYPE_ACK
 | 
E1000_VT_MSGTYPE_NACK
))

5111 i‡(
msgbuf
[0] =
E1000_VF_RESET
) {

5112 
	`igb_vf_ª£t_msg
(
ad≠ãr
, 
vf
);

5116 i‡(!(
vf_d©a
->
Êags
 & 
IGB_VF_FLAG_CTS
)) {

5117 i‡(!
	`time_a·î
(
jiffõs
, 
vf_d©a
->
œ°_«ck
 + (2 * 
HZ
)))

5119 
ªtvÆ
 = -1;

5120 
out
;

5123 (
msgbuf
[0] & 0xFFFF)) {

5124 
E1000_VF_SET_MAC_ADDR
:

5125 
ªtvÆ
 = 
	`igb_£t_vf_mac_addr
(
ad≠ãr
, 
msgbuf
, 
vf
);

5127 
E1000_VF_SET_PROMISC
:

5128 
ªtvÆ
 = 
	`igb_£t_vf_¥omisc
(
ad≠ãr
, 
msgbuf
, 
vf
);

5130 
E1000_VF_SET_MULTICAST
:

5131 
ªtvÆ
 = 
	`igb_£t_vf_mu…iˇ°s
(
ad≠ãr
, 
msgbuf
, 
vf
);

5133 
E1000_VF_SET_LPE
:

5134 
ªtvÆ
 = 
	`igb_£t_vf_æpml
(
ad≠ãr
, 
msgbuf
[1], 
vf
);

5136 
E1000_VF_SET_VLAN
:

5137 i‡(
ad≠ãr
->
vf_d©a
[
vf
].
pf_vœn
)

5138 
ªtvÆ
 = -1;

5140 
ªtvÆ
 = 
	`igb_£t_vf_vœn
(
ad≠ãr
, 
msgbuf
, 
vf
);

5143 
	`dev_îr
(&
pdev
->
dev
, "Unh™dÀd Msg %08x\n", 
msgbuf
[0]);

5144 
ªtvÆ
 = -1;

5148 
msgbuf
[0] |
E1000_VT_MSGTYPE_CTS
;

5149 
out
:

5151 i‡(
ªtvÆ
)

5152 
msgbuf
[0] |
E1000_VT_MSGTYPE_NACK
;

5154 
msgbuf
[0] |
E1000_VT_MSGTYPE_ACK
;

5156 
	`igb_wrôe_mbx
(
hw
, 
msgbuf
, 1, 
vf
);

5157 
	}
}

5159 
	$igb_msg_èsk
(
igb_ad≠ãr
 *
ad≠ãr
)

5161 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5162 
u32
 
vf
;

5164 
vf
 = 0; v‡< 
ad≠ãr
->
vfs_Æloˇãd_cou¡
; vf++) {

5166 i‡(!
	`igb_check_f‹_r°
(
hw
, 
vf
))

5167 
	`igb_vf_ª£t_evít
(
ad≠ãr
, 
vf
);

5170 i‡(!
	`igb_check_f‹_msg
(
hw
, 
vf
))

5171 
	`igb_rcv_msg_‰om_vf
(
ad≠ãr
, 
vf
);

5174 i‡(!
	`igb_check_f‹_ack
(
hw
, 
vf
))

5175 
	`igb_rcv_ack_‰om_vf
(
ad≠ãr
, 
vf
);

5177 
	}
}

5189 
	$igb_£t_uè
(
igb_ad≠ãr
 *
ad≠ãr
)

5191 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5192 
i
;

5195 i‡(
hw
->
mac
.
ty≥
 < 
e1000_82576
)

5199 i‡(!
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

5202 
i
 = 0; i < 
hw
->
mac
.
uè_ªg_cou¡
; i++)

5203 
	`¨øy_wr32
(
E1000_UTA
, 
i
, ~0);

5204 
	}
}

5211 
úqªtu∫_t
 
	$igb_öå_msi
(
úq
, *
d©a
)

5213 
igb_ad≠ãr
 *
ad≠ãr
 = 
d©a
;

5214 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

5215 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5217 
u32
 
i¸
 = 
	`rd32
(
E1000_ICR
);

5219 
	`igb_wrôe_ôr
(
q_ve˘‹
);

5221 i‡(
i¸
 & 
E1000_ICR_DRSTA
)

5222 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

5224 i‡(
i¸
 & 
E1000_ICR_DOUTSYNC
) {

5226 
ad≠ãr
->
°©s
.
doosync
++;

5229 i‡(
i¸
 & (
E1000_ICR_RXSEQ
 | 
E1000_ICR_LSC
)) {

5230 
hw
->
mac
.
gë_lök_°©us
 = 1;

5231 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

5232 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
, 
jiffõs
 + 1);

5235 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

5237  
IRQ_HANDLED
;

5238 
	}
}

5245 
úqªtu∫_t
 
	$igb_öå
(
úq
, *
d©a
)

5247 
igb_ad≠ãr
 *
ad≠ãr
 = 
d©a
;

5248 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

5249 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5252 
u32
 
i¸
 = 
	`rd32
(
E1000_ICR
);

5253 i‡(!
i¸
)

5254  
IRQ_NONE
;

5256 
	`igb_wrôe_ôr
(
q_ve˘‹
);

5260 i‡(!(
i¸
 & 
E1000_ICR_INT_ASSERTED
))

5261  
IRQ_NONE
;

5263 i‡(
i¸
 & 
E1000_ICR_DRSTA
)

5264 
	`scheduÀ_w‹k
(&
ad≠ãr
->
ª£t_èsk
);

5266 i‡(
i¸
 & 
E1000_ICR_DOUTSYNC
) {

5268 
ad≠ãr
->
°©s
.
doosync
++;

5271 i‡(
i¸
 & (
E1000_ICR_RXSEQ
 | 
E1000_ICR_LSC
)) {

5272 
hw
->
mac
.
gë_lök_°©us
 = 1;

5274 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

5275 
	`mod_timî
(&
ad≠ãr
->
w©chdog_timî
, 
jiffõs
 + 1);

5278 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

5280  
IRQ_HANDLED
;

5281 
	}
}

5283 
ölöe
 
	$igb_rög_úq_íabÀ
(
igb_q_ve˘‹
 *
q_ve˘‹
)

5285 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

5286 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5288 i‡((
q_ve˘‹
->
rx_rög
 && (
ad≠ãr
->
rx_ôr_£âög
 & 3)) ||

5289 (!
q_ve˘‹
->
rx_rög
 && (
ad≠ãr
->
tx_ôr_£âög
 & 3))) {

5290 i‡(!
ad≠ãr
->
msix_íåõs
)

5291 
	`igb_£t_ôr
(
ad≠ãr
);

5293 
	`igb_upd©e_rög_ôr
(
q_ve˘‹
);

5296 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
)) {

5297 i‡(
ad≠ãr
->
msix_íåõs
)

5298 
	`wr32
(
E1000_EIMS
, 
q_ve˘‹
->
eims_vÆue
);

5300 
	`igb_úq_íabÀ
(
ad≠ãr
);

5302 
	}
}

5309 
	$igb_pﬁl
(
«pi_°ru˘
 *
«pi
, 
budgë
)

5311 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
	`c⁄èöî_of
(
«pi
,

5312 
igb_q_ve˘‹
,

5313 
«pi
);

5314 
tx_˛ón_com∂ëe
 = 1, 
w‹k_d⁄e
 = 0;

5318  
w‹k_d⁄e
;

5320 #ifde‡
CONFIG_IGB_DCA


5321 i‡(
q_ve˘‹
->
ad≠ãr
->
Êags
 & 
IGB_FLAG_DCA_ENABLED
)

5322 
	`igb_upd©e_dˇ
(
q_ve˘‹
);

5324 i‡(
q_ve˘‹
->
tx_rög
)

5325 
tx_˛ón_com∂ëe
 = 
	`igb_˛ón_tx_úq
(
q_ve˘‹
);

5327 i‡(
q_ve˘‹
->
rx_rög
)

5328 
	`igb_˛ón_rx_úq_adv
(
q_ve˘‹
, &
w‹k_d⁄e
, 
budgë
);

5330 i‡(!
tx_˛ón_com∂ëe
)

5331 
w‹k_d⁄e
 = 
budgë
;

5334 i‡(
w‹k_d⁄e
 < 
budgë
) {

5335 
	`«pi_com∂ëe
(
«pi
);

5336 
	`igb_rög_úq_íabÀ
(
q_ve˘‹
);

5339  
w‹k_d⁄e
;

5340 
	}
}

5351 
	$igb_sy°im_to_hwt°amp
(
igb_ad≠ãr
 *
ad≠ãr
,

5352 
skb_sh¨ed_hwt°amps
 *
shhwt°amps
,

5353 
u64
 
ªgvÆ
)

5355 
u64
 
ns
;

5361 i‡(
ad≠ãr
->
hw
.
mac
.
ty≥
 =
e1000_82580
)

5362 
ªgvÆ
 <<
IGB_82580_TSYNC_SHIFT
;

5364 
ns
 = 
	`timecou¡î_cyc2time
(&
ad≠ãr
->
˛ock
, 
ªgvÆ
);

5365 
	`timecom∑ª_upd©e
(&
ad≠ãr
->
com∑ª
, 
ns
);

5366 
	`mem£t
(
shhwt°amps
, 0, (
skb_sh¨ed_hwt°amps
));

5367 
shhwt°amps
->
hwt°amp
 = 
	`ns_to_ktime
(
ns
);

5368 
shhwt°amps
->
sy°°amp
 = 
	`timecom∑ª_å™sf‹m
(&
ad≠ãr
->
com∑ª
, 
ns
);

5369 
	}
}

5380 
	$igb_tx_hwt°amp
(
igb_q_ve˘‹
 *
q_ve˘‹
, 
igb_buf„r
 *
buf„r_öfo
)

5382 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

5383 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5384 
skb_sh¨ed_hwt°amps
 
shhwt°amps
;

5385 
u64
 
ªgvÆ
;

5388 i‡(
	`likñy
(!
buf„r_öfo
->
shtx
.
h¨dw¨e
) ||

5389 !(
	`rd32
(
E1000_TSYNCTXCTL
Ë& 
E1000_TSYNCTXCTL_VALID
))

5392 
ªgvÆ
 = 
	`rd32
(
E1000_TXSTMPL
);

5393 
ªgvÆ
 |(
u64
)
	`rd32
(
E1000_TXSTMPH
) << 32;

5395 
	`igb_sy°im_to_hwt°amp
(
ad≠ãr
, &
shhwt°amps
, 
ªgvÆ
);

5396 
	`skb_t°amp_tx
(
buf„r_öfo
->
skb
, &
shhwt°amps
);

5397 
	}
}

5404 
boﬁ
 
	$igb_˛ón_tx_úq
(
igb_q_ve˘‹
 *
q_ve˘‹
)

5406 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

5407 
igb_rög
 *
tx_rög
 = 
q_ve˘‹
->tx_ring;

5408 
√t_devi˚
 *
√tdev
 = 
tx_rög
->netdev;

5409 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5410 
igb_buf„r
 *
buf„r_öfo
;

5411 
e1000_adv_tx_desc
 *
tx_desc
, *
e›_desc
;

5412 
tŸÆ_byãs
 = 0, 
tŸÆ_∑ckës
 = 0;

5413 
i
, 
e›
, 
cou¡
 = 0;

5414 
boﬁ
 
˛ó√d
 = 
Ál£
;

5416 
i
 = 
tx_rög
->
√xt_to_˛ón
;

5417 
e›
 = 
tx_rög
->
buf„r_öfo
[
i
].
√xt_to_w©ch
;

5418 
e›_desc
 = 
	`E1000_TX_DESC_ADV
(*
tx_rög
, 
e›
);

5420 (
e›_desc
->
wb
.
°©us
 & 
	`˝u_to_À32
(
E1000_TXD_STAT_DD
)) &&

5421 (
cou¡
 < 
tx_rög
->count)) {

5422 
˛ó√d
 = 
Ál£
; !˛ó√d; 
cou¡
++) {

5423 
tx_desc
 = 
	`E1000_TX_DESC_ADV
(*
tx_rög
, 
i
);

5424 
buf„r_öfo
 = &
tx_rög
->buf„r_öfo[
i
];

5425 
˛ó√d
 = (
i
 =
e›
);

5427 i‡(
buf„r_öfo
->
skb
) {

5428 
tŸÆ_byãs
 +
buf„r_öfo
->
byãcou¡
;

5430 
tŸÆ_∑ckës
 +
buf„r_öfo
->
gso_£gs
;

5431 
	`igb_tx_hwt°amp
(
q_ve˘‹
, 
buf„r_öfo
);

5434 
	`igb_unm≠_™d_‰ì_tx_ªsour˚
(
tx_rög
, 
buf„r_öfo
);

5435 
tx_desc
->
wb
.
°©us
 = 0;

5437 
i
++;

5438 i‡(
i
 =
tx_rög
->
cou¡
)

5439 
i
 = 0;

5441 
e›
 = 
tx_rög
->
buf„r_öfo
[
i
].
√xt_to_w©ch
;

5442 
e›_desc
 = 
	`E1000_TX_DESC_ADV
(*
tx_rög
, 
e›
);

5445 
tx_rög
->
√xt_to_˛ón
 = 
i
;

5447 i‡(
	`u∆ikñy
(
cou¡
 &&

5448 
	`√tif_ˇºõr_ok
(
√tdev
) &&

5449 
	`igb_desc_unu£d
(
tx_rög
Ë>
IGB_TX_QUEUE_WAKE
)) {

5453 
	`smp_mb
();

5454 i‡(
	`__√tif_subqueue_°›≥d
(
√tdev
, 
tx_rög
->
queue_ödex
) &&

5455 !(
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))) {

5456 
	`√tif_wake_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

5457 
tx_rög
->
tx_°©s
.
ª°¨t_queue
++;

5461 i‡(
tx_rög
->
dëe˘_tx_hung
) {

5464 
tx_rög
->
dëe˘_tx_hung
 = 
Ál£
;

5465 i‡(
tx_rög
->
buf„r_öfo
[
i
].
time_°amp
 &&

5466 
	`time_a·î
(
jiffõs
, 
tx_rög
->
buf„r_öfo
[
i
].
time_°amp
 +

5467 (
ad≠ãr
->
tx_timeout_Á˘‹
 * 
HZ
)) &&

5468 !(
	`rd32
(
E1000_STATUS
Ë& 
E1000_STATUS_TXOFF
)) {

5471 
	`dev_îr
(
tx_rög
->
dev
,

5483 
tx_rög
->
queue_ödex
,

5484 
	`ªadl
(
tx_rög
->
hód
),

5485 
	`ªadl
(
tx_rög
->
èû
),

5486 
tx_rög
->
√xt_to_u£
,

5487 
tx_rög
->
√xt_to_˛ón
,

5488 
tx_rög
->
buf„r_öfo
[
e›
].
time_°amp
,

5489 
e›
,

5490 
jiffõs
,

5491 
e›_desc
->
wb
.
°©us
);

5492 
	`√tif_°›_subqueue
(
√tdev
, 
tx_rög
->
queue_ödex
);

5495 
tx_rög
->
tŸÆ_byãs
 +=Åotal_bytes;

5496 
tx_rög
->
tŸÆ_∑ckës
 +=Åotal_packets;

5497 
tx_rög
->
tx_°©s
.
byãs
 +
tŸÆ_byãs
;

5498 
tx_rög
->
tx_°©s
.
∑ckës
 +
tŸÆ_∑ckës
;

5499  (
cou¡
 < 
tx_rög
->count);

5500 
	}
}

5508 
	$igb_ª˚ive_skb
(
igb_q_ve˘‹
 *
q_ve˘‹
,

5509 
sk_buff
 *
skb
,

5510 
u16
 
vœn_èg
)

5523 
	`¥ötk
(
KERN_INFO
 "@@igb_ª˚ive_skb %lx\n",()
skb
);

5524 
	}
}

5526 
ölöe
 
	$igb_rx_checksum_adv
(
igb_rög
 *
rög
,

5527 
u32
 
°©us_îr
, 
sk_buff
 *
skb
)

5529 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

5532 i‡(!(
rög
->
Êags
 & 
IGB_RING_FLAG_RX_CSUM
) ||

5533 (
°©us_îr
 & 
E1000_RXD_STAT_IXSM
))

5537 i‡(
°©us_îr
 &

5538 (
E1000_RXDEXT_STATERR_TCPE
 | 
E1000_RXDEXT_STATERR_IPE
)) {

5544 i‡((
skb
->
Àn
 == 60) &&

5545 (
rög
->
Êags
 & 
IGB_RING_FLAG_RX_SCTP_CSUM
))

5546 
rög
->
rx_°©s
.
csum_îr
++;

5552 i‡(
°©us_îr
 & (
E1000_RXD_STAT_TCPCS
 | 
E1000_RXD_STAT_UDPCS
))

5553 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

5555 
	`dev_dbg
(
rög
->
dev
, "cksum suc˚ss: bô†%08X\n", 
°©us_îr
);

5556 
	}
}

5558 
	$igb_rx_hwt°amp
(
igb_q_ve˘‹
 *
q_ve˘‹
, 
u32
 
°©îr
,

5559 
sk_buff
 *
skb
)

5561 
igb_ad≠ãr
 *
ad≠ãr
 = 
q_ve˘‹
->adapter;

5562 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5563 
u64
 
ªgvÆ
;

5576 i‡(
°©îr
 & 
E1000_RXDADV_STAT_TSIP
) {

5577 
u32
 *
°amp
 = (u32 *)
skb
->
d©a
;

5578 
ªgvÆ
 = 
	`À32_to_˝u
(*(
°amp
 + 2));

5579 
ªgvÆ
 |(
u64
)
	`À32_to_˝u
(*(
°amp
 + 3)) << 32;

5580 
	`skb_puŒ
(
skb
, 
IGB_TS_HDR_LEN
);

5582 if(!(
	`rd32
(
E1000_TSYNCRXCTL
Ë& 
E1000_TSYNCRXCTL_VALID
))

5585 
ªgvÆ
 = 
	`rd32
(
E1000_RXSTMPL
);

5586 
ªgvÆ
 |(
u64
)
	`rd32
(
E1000_RXSTMPH
) << 32;

5589 
	`igb_sy°im_to_hwt°amp
(
ad≠ãr
, 
	`skb_hwt°amps
(
skb
), 
ªgvÆ
);

5590 
	}
}

5591 
ölöe
 
u16
 
	$igb_gë_hÀn
(
igb_rög
 *
rx_rög
,

5592 
e1000_adv_rx_desc
 *
rx_desc
)

5598 
u16
 
hÀn
 = (
	`À16_to_˝u
(
rx_desc
->
wb
.
lowî
.
lo_dw‹d
.
hdr_öfo
) &

5599 
E1000_RXDADV_HDRBUFLEN_MASK
Ë>> 
E1000_RXDADV_HDRBUFLEN_SHIFT
;

5600 i‡(
hÀn
 > 
rx_rög
->
rx_buf„r_Àn
)

5601 
hÀn
 = 
rx_rög
->
rx_buf„r_Àn
;

5602  
hÀn
;

5603 
	}
}

5606 
ölöe
 
	$igb_rx_hash
(
igb_rög
 *
rög
,

5607 
e1000_adv_rx_desc
 *
rx_desc
,

5608 
sk_buff
 *
skb
)

5611 
skb
->
rxhash
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
lowî
.
hi_dw‹d
.
rss
);

5612 
	}
}

5615 
boﬁ
 
	$igb_˛ón_rx_úq_adv
(
igb_q_ve˘‹
 *
q_ve˘‹
,

5616 *
w‹k_d⁄e
, 
budgë
)

5618 
igb_rög
 *
rx_rög
 = 
q_ve˘‹
->rx_ring;

5619 
√t_devi˚
 *
√tdev
 = 
rx_rög
->netdev;

5620 
devi˚
 *
dev
 = 
rx_rög
->dev;

5621 
e1000_adv_rx_desc
 *
rx_desc
 , *
√xt_rxd
;

5622 
igb_buf„r
 *
buf„r_öfo
 , *
√xt_buf„r
;

5623 
sk_buff
 *
skb
;

5624 
boﬁ
 
˛ó√d
 = 
Ál£
;

5625 
˛ó√d_cou¡
 = 0;

5626 
cuºít_node
 = 
	`numa_node_id
();

5627 
tŸÆ_byãs
 = 0, 
tŸÆ_∑ckës
 = 0;

5628 
i
,
j
;

5629 
ödex
;

5630 
u32
 
°©îr
;

5631 
u16
 
Àngth
;

5632 
u16
 
vœn_èg
;

5635 
	`¥ötk
("igb_˛ón_rx_úq_adv %d\n",
	`smp_¥o˚ss‹_id
());

5637 
i
 = 
rx_rög
->
√xt_to_˛ón
;

5638 
buf„r_öfo
 = &
rx_rög
->buf„r_öfo[
i
];

5639 
rx_desc
 = 
	`E1000_RX_DESC_ADV
(*
rx_rög
, 
i
);

5640 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

5642 
°©îr
 & 
E1000_RXD_STAT_DD
) {

5643 i‡(*
w‹k_d⁄e
 >
budgë
)

5645 (*
w‹k_d⁄e
)++;

5647 
skb
 = 
buf„r_öfo
->skb;

5648 
	`¥e„tch
(
skb
->
d©a
 - 
NET_IP_ALIGN
);

5649 
buf„r_öfo
->
skb
 = 
NULL
;

5651 
i
++;

5652 i‡(
i
 =
rx_rög
->
cou¡
)

5653 
i
 = 0;

5655 
√xt_rxd
 = 
	`E1000_RX_DESC_ADV
(*
rx_rög
, 
i
);

5656 
	`¥e„tch
(
√xt_rxd
);

5657 
√xt_buf„r
 = &
rx_rög
->
buf„r_öfo
[
i
];

5659 
Àngth
 = 
	`À16_to_˝u
(
rx_desc
->
wb
.
uµî
.length);

5660 
˛ó√d
 = 
åue
;

5661 
˛ó√d_cou¡
++;

5663 i‡(
buf„r_öfo
->
dma
) {

5664 
	`dma_unm≠_sögÀ
(
dev
, 
buf„r_öfo
->
dma
,

5665 
rx_rög
->
rx_buf„r_Àn
,

5666 
DMA_FROM_DEVICE
);

5667 
buf„r_öfo
->
dma
 = 0;

5668 i‡(
rx_rög
->
rx_buf„r_Àn
 >
IGB_RXBUFFER_1024
) {

5669 
	`skb_put
(
skb
, 
Àngth
);

5670 
£nd_up
;

5672 
	`skb_put
(
skb
, 
	`igb_gë_hÀn
(
rx_rög
, 
rx_desc
));

5675 i‡(
Àngth
) {

5676 
	`dma_unm≠_∑ge
(
dev
, 
buf„r_öfo
->
∑ge_dma
,

5677 
PAGE_SIZE
 / 2, 
DMA_FROM_DEVICE
);

5678 
buf„r_öfo
->
∑ge_dma
 = 0;

5680 
	`skb_fûl_∑ge_desc
(
skb
, 
	`skb_shöfo
(skb)->
ƒ_‰ags
,

5681 
buf„r_öfo
->
∑ge
,

5682 
buf„r_öfo
->
∑ge_off£t
,

5683 
Àngth
);

5685 i‡((
	`∑ge_cou¡
(
buf„r_öfo
->
∑ge
) != 1) ||

5686 (
	`∑ge_to_nid
(
buf„r_öfo
->
∑ge
Ë!
cuºít_node
))

5687 
buf„r_öfo
->
∑ge
 = 
NULL
;

5689 
	`gë_∑ge
(
buf„r_öfo
->
∑ge
);

5691 
skb
->
Àn
 +
Àngth
;

5692 
skb
->
d©a_Àn
 +
Àngth
;

5693 
skb
->
åuesize
 +
Àngth
;

5696 i‡(!(
°©îr
 & 
E1000_RXD_STAT_EOP
)) {

5697 
buf„r_öfo
->
skb
 = 
√xt_buf„r
->skb;

5698 
buf„r_öfo
->
dma
 = 
√xt_buf„r
->dma;

5699 
√xt_buf„r
->
skb
 = skb;

5700 
√xt_buf„r
->
dma
 = 0;

5701 
√xt_desc
;

5703 
£nd_up
:

5704 i‡(
°©îr
 & 
E1000_RXDEXT_ERR_FRAME_ERR_MASK
) {

5706 
	`ukmem_skb_‰ì
(
skb
);

5707 
√xt_desc
;

5710 i‡(
°©îr
 & (
E1000_RXDADV_STAT_TSIP
 | 
E1000_RXDADV_STAT_TS
))

5711 
	`igb_rx_hwt°amp
(
q_ve˘‹
, 
°©îr
, 
skb
);

5712 
tŸÆ_byãs
 +
skb
->
Àn
;

5713 
tŸÆ_∑ckës
++;

5715 
	`igb_rx_hash
(
rx_rög
, 
rx_desc
, 
skb
);

5716 
	`igb_rx_checksum_adv
(
rx_rög
, 
°©îr
, 
skb
);

5718 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
√tdev
);

5719 
	`skb_ªc‹d_rx_queue
(
skb
, 
rx_rög
->
queue_ödex
);

5721 
vœn_èg
 = ((
°©îr
 & 
E1000_RXD_STAT_VP
) ?

5722 
	`À16_to_˝u
(
rx_desc
->
wb
.
uµî
.
vœn
) : 0);

5724 
	`igb_ª˚ive_skb
(
q_ve˘‹
, 
skb
, 
vœn_èg
);

5726 
√xt_desc
:

5727 
rx_desc
->
wb
.
uµî
.
°©us_îr‹
 = 0;

5730 i‡(
˛ó√d_cou¡
 >
IGB_RX_BUFFER_WRITE
) {

5732 
	`¥ötk
(
KERN_INFO
 "igb_clean_rx_irq_adv:0 calling igb_alloc_rx_buffers_adv\n");

5733 
	`igb_Æloc_rx_buf„rs_adv
(
rx_rög
, 
˛ó√d_cou¡
);

5734 
˛ó√d_cou¡
 = 0;

5738 
rx_desc
 = 
√xt_rxd
;

5739 
buf„r_öfo
 = 
√xt_buf„r
;

5740 
°©îr
 = 
	`À32_to_˝u
(
rx_desc
->
wb
.
uµî
.
°©us_îr‹
);

5743 
rx_rög
->
√xt_to_˛ón
 = 
i
;

5744 
˛ó√d_cou¡
 = 
	`igb_desc_unu£d
(
rx_rög
);

5746 i‡(
˛ó√d_cou¡
)

5749 
	`¥ötk
(
KERN_INFO
 "igb_clean_rx_irq_adv:1 calling igb_alloc_rx_buffers_adv\n");

5750 
	`igb_Æloc_rx_buf„rs_adv
(
rx_rög
, 
˛ó√d_cou¡
);

5752 
rx_rög
->
tŸÆ_∑ckës
 +=Åotal_packets;

5753 
rx_rög
->
tŸÆ_byãs
 +=Åotal_bytes;

5754 
rx_rög
->
rx_°©s
.
∑ckës
 +
tŸÆ_∑ckës
;

5755 
rx_rög
->
rx_°©s
.
byãs
 +
tŸÆ_byãs
;

5756  
˛ó√d
;

5757 
	}
}

5763 
	$igb_Æloc_rx_buf„rs_adv
(
igb_rög
 *
rx_rög
, 
˛ó√d_cou¡
)

5765 
√t_devi˚
 *
√tdev
 = 
rx_rög
->netdev;

5766 
e1000_adv_rx_desc
 *
rx_desc
;

5767 
igb_buf„r
 *
buf„r_öfo
;

5768 
sk_buff
 *
skb
;

5769 
i
;

5770 
bufsz
;

5772 
i
 = 
rx_rög
->
√xt_to_u£
;

5773 
buf„r_öfo
 = &
rx_rög
->buf„r_öfo[
i
];

5775 
bufsz
 = 
rx_rög
->
rx_buf„r_Àn
;

5778 
	`¥ötk
(
KERN_INFO
 "˛ó√d_cou¡ %d\n",
˛ó√d_cou¡
);

5779 
˛ó√d_cou¡
--) {

5780 
rx_desc
 = 
	`E1000_RX_DESC_ADV
(*
rx_rög
, 
i
);

5782 i‡((
bufsz
 < 
IGB_RXBUFFER_1024
Ë&& !
buf„r_öfo
->
∑ge_dma
) {

5783 i‡(!
buf„r_öfo
->
∑ge
) {

5784 
buf„r_öfo
->
∑ge
 = 
	`√tdev_Æloc_∑ge
(
√tdev
);

5785 i‡(!
buf„r_öfo
->
∑ge
) {

5786 
rx_rög
->
rx_°©s
.
Æloc_Áûed
++;

5787 
no_buf„rs
;

5789 
buf„r_öfo
->
∑ge_off£t
 = 0;

5791 
buf„r_öfo
->
∑ge_off£t
 ^
PAGE_SIZE
 / 2;

5793 
buf„r_öfo
->
∑ge_dma
 =

5794 
	`dma_m≠_∑ge
(
rx_rög
->
dev
, 
buf„r_öfo
->
∑ge
,

5795 
buf„r_öfo
->
∑ge_off£t
,

5796 
PAGE_SIZE
 / 2,

5797 
DMA_FROM_DEVICE
);

5798 i‡(
	`dma_m≠pög_îr‹
(
rx_rög
->
dev
,

5799 
buf„r_öfo
->
∑ge_dma
)) {

5800 
buf„r_öfo
->
∑ge_dma
 = 0;

5801 
rx_rög
->
rx_°©s
.
Æloc_Áûed
++;

5802 
no_buf„rs
;

5806 
skb
 = 
buf„r_öfo
->skb;

5807 i‡(!
skb
) {

5809 
skb
 = 
	`ukmem_skb_Æloc
(
bufsz
);

5810 i‡(!
skb
) {

5811 
rx_rög
->
rx_°©s
.
Æloc_Áûed
++;

5812 
no_buf„rs
;

5815 
buf„r_öfo
->
skb
 = skb;

5817 i‡(!
buf„r_öfo
->
dma
) {

5818 
buf„r_öfo
->
dma
 = 
	`dma_m≠_sögÀ
(
rx_rög
->
dev
,

5819 
skb
->
d©a
,

5820 
bufsz
,

5821 
DMA_FROM_DEVICE
);

5822 i‡(
	`dma_m≠pög_îr‹
(
rx_rög
->
dev
,

5823 
buf„r_öfo
->
dma
)) {

5824 
buf„r_öfo
->
dma
 = 0;

5825 
rx_rög
->
rx_°©s
.
Æloc_Áûed
++;

5826 
no_buf„rs
;

5831 i‡(
bufsz
 < 
IGB_RXBUFFER_1024
) {

5832 
rx_desc
->
ªad
.
pkt_addr
 =

5833 
	`˝u_to_À64
(
buf„r_öfo
->
∑ge_dma
);

5834 
rx_desc
->
ªad
.
hdr_addr
 = 
	`˝u_to_À64
(
buf„r_öfo
->
dma
);

5836 
rx_desc
->
ªad
.
pkt_addr
 = 
	`˝u_to_À64
(
buf„r_öfo
->
dma
);

5837 
rx_desc
->
ªad
.
hdr_addr
 = 0;

5840 
i
++;

5841 i‡(
i
 =
rx_rög
->
cou¡
)

5842 
i
 = 0;

5843 
buf„r_öfo
 = &
rx_rög
->buf„r_öfo[
i
];

5846 
no_buf„rs
:

5847 i‡(
rx_rög
->
√xt_to_u£
 !
i
) {

5848 
rx_rög
->
√xt_to_u£
 = 
i
;

5849 i‡(
i
 == 0)

5850 
i
 = (
rx_rög
->
cou¡
 - 1);

5852 
i
--;

5858 
	`wmb
();

5859 
	`wrôñ
(
i
, 
rx_rög
->
èû
);

5861 
	}
}

5869 
	$igb_mii_io˘l
(
√t_devi˚
 *
√tdev
, 
i‰eq
 *
i‰
, 
cmd
)

5871 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5872 
mii_io˘l_d©a
 *
d©a
 = 
	`if_mii
(
i‰
);

5874 i‡(
ad≠ãr
->
hw
.
phy
.
medü_ty≥
 !
e1000_medü_ty≥_c›≥r
)

5875  -
EOPNOTSUPP
;

5877 
cmd
) {

5878 
SIOCGMIIPHY
:

5879 
d©a
->
phy_id
 = 
ad≠ãr
->
hw
.
phy
.
addr
;

5881 
SIOCGMIIREG
:

5882 i‡(
	`igb_ªad_phy_ªg
(&
ad≠ãr
->
hw
, 
d©a
->
ªg_num
 & 0x1F,

5883 &
d©a
->
vÆ_out
))

5884  -
EIO
;

5886 
SIOCSMIIREG
:

5888  -
EOPNOTSUPP
;

5891 
	}
}

5912 
	$igb_hwt°amp_io˘l
(
√t_devi˚
 *
√tdev
,

5913 
i‰eq
 *
i‰
, 
cmd
)

5915 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

5916 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

5917 
hwt°amp_c⁄fig
 
c⁄fig
;

5918 
u32
 
tsync_tx_˘l
 = 
E1000_TSYNCTXCTL_ENABLED
;

5919 
u32
 
tsync_rx_˘l
 = 
E1000_TSYNCRXCTL_ENABLED
;

5920 
u32
 
tsync_rx_cfg
 = 0;

5921 
boﬁ
 
is_l4
 = 
Ál£
;

5922 
boﬁ
 
is_l2
 = 
Ál£
;

5923 
u32
 
ªgvÆ
;

5925 i‡(
	`c›y_‰om_u£r
(&
c⁄fig
, 
i‰
->
i‰_d©a
, (config)))

5926  -
EFAULT
;

5929 i‡(
c⁄fig
.
Êags
)

5930  -
EINVAL
;

5932 
c⁄fig
.
tx_ty≥
) {

5933 
HWTSTAMP_TX_OFF
:

5934 
tsync_tx_˘l
 = 0;

5935 
HWTSTAMP_TX_ON
:

5938  -
ERANGE
;

5941 
c⁄fig
.
rx_fûãr
) {

5942 
HWTSTAMP_FILTER_NONE
:

5943 
tsync_rx_˘l
 = 0;

5945 
HWTSTAMP_FILTER_PTP_V1_L4_EVENT
:

5946 
HWTSTAMP_FILTER_PTP_V2_L4_EVENT
:

5947 
HWTSTAMP_FILTER_PTP_V2_L2_EVENT
:

5948 
HWTSTAMP_FILTER_ALL
:

5954 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_ALL
;

5955 
c⁄fig
.
rx_fûãr
 = 
HWTSTAMP_FILTER_ALL
;

5957 
HWTSTAMP_FILTER_PTP_V1_L4_SYNC
:

5958 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_L4_V1
;

5959 
tsync_rx_cfg
 = 
E1000_TSYNCRXCFG_PTP_V1_SYNC_MESSAGE
;

5960 
is_l4
 = 
åue
;

5962 
HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ
:

5963 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_L4_V1
;

5964 
tsync_rx_cfg
 = 
E1000_TSYNCRXCFG_PTP_V1_DELAY_REQ_MESSAGE
;

5965 
is_l4
 = 
åue
;

5967 
HWTSTAMP_FILTER_PTP_V2_L2_SYNC
:

5968 
HWTSTAMP_FILTER_PTP_V2_L4_SYNC
:

5969 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_L2_L4_V2
;

5970 
tsync_rx_cfg
 = 
E1000_TSYNCRXCFG_PTP_V2_SYNC_MESSAGE
;

5971 
is_l2
 = 
åue
;

5972 
is_l4
 = 
åue
;

5973 
c⁄fig
.
rx_fûãr
 = 
HWTSTAMP_FILTER_SOME
;

5975 
HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ
:

5976 
HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ
:

5977 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_L2_L4_V2
;

5978 
tsync_rx_cfg
 = 
E1000_TSYNCRXCFG_PTP_V2_DELAY_REQ_MESSAGE
;

5979 
is_l2
 = 
åue
;

5980 
is_l4
 = 
åue
;

5981 
c⁄fig
.
rx_fûãr
 = 
HWTSTAMP_FILTER_SOME
;

5983 
HWTSTAMP_FILTER_PTP_V2_EVENT
:

5984 
HWTSTAMP_FILTER_PTP_V2_SYNC
:

5985 
HWTSTAMP_FILTER_PTP_V2_DELAY_REQ
:

5986 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_EVENT_V2
;

5987 
c⁄fig
.
rx_fûãr
 = 
HWTSTAMP_FILTER_PTP_V2_EVENT
;

5988 
is_l2
 = 
åue
;

5991  -
ERANGE
;

5994 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
) {

5995 i‡(
tsync_rx_˘l
 | 
tsync_tx_˘l
)

5996  -
EINVAL
;

6005 i‡((
hw
->
mac
.
ty≥
 =
e1000_82580
Ë&& 
tsync_rx_˘l
) {

6006 
tsync_rx_˘l
 = 
E1000_TSYNCRXCTL_ENABLED
;

6007 
tsync_rx_˘l
 |
E1000_TSYNCRXCTL_TYPE_ALL
;

6011 
ªgvÆ
 = 
	`rd32
(
E1000_TSYNCTXCTL
);

6012 
ªgvÆ
 &~
E1000_TSYNCTXCTL_ENABLED
;

6013 
ªgvÆ
 |
tsync_tx_˘l
;

6014 
	`wr32
(
E1000_TSYNCTXCTL
, 
ªgvÆ
);

6017 
ªgvÆ
 = 
	`rd32
(
E1000_TSYNCRXCTL
);

6018 
ªgvÆ
 &~(
E1000_TSYNCRXCTL_ENABLED
 | 
E1000_TSYNCRXCTL_TYPE_MASK
);

6019 
ªgvÆ
 |
tsync_rx_˘l
;

6020 
	`wr32
(
E1000_TSYNCRXCTL
, 
ªgvÆ
);

6023 
	`wr32
(
E1000_TSYNCRXCFG
, 
tsync_rx_cfg
);

6026 i‡(
is_l2
)

6027 
	`wr32
(
	`E1000_ETQF
(3),

6028 (
E1000_ETQF_FILTER_ENABLE
 |

6029 
E1000_ETQF_1588
 |

6030 
ETH_P_1588
));

6032 
	`wr32
(
	`E1000_ETQF
(3), 0);

6034 
	#PTP_PORT
 319

	)

6036 i‡(
is_l4
) {

6037 
u32
 
·qf
 = (
IPPROTO_UDP


6038 | 
E1000_FTQF_VF_BP


6039 | 
E1000_FTQF_1588_TIME_STAMP


6040 | 
E1000_FTQF_MASK
);

6041 
·qf
 &~
E1000_FTQF_MASK_PROTO_BP
;

6043 
	`wr32
(
	`E1000_IMIR
(3), 
	`ht⁄s
(
PTP_PORT
));

6044 
	`wr32
(
	`E1000_IMIREXT
(3),

6045 (
E1000_IMIREXT_SIZE_BP
 | 
E1000_IMIREXT_CTRL_BP
));

6046 i‡(
hw
->
mac
.
ty≥
 =
e1000_82576
) {

6048 
	`wr32
(
	`E1000_SPQF
(3), 
	`ht⁄s
(
PTP_PORT
));

6049 
·qf
 &~
E1000_FTQF_MASK_SOURCE_PORT_BP
;

6051 
	`wr32
(
	`E1000_FTQF
(3), 
·qf
);

6053 
	`wr32
(
	`E1000_FTQF
(3), 
E1000_FTQF_MASK
);

6055 
	`wrÊ
();

6057 
ad≠ãr
->
hwt°amp_c⁄fig
 = 
c⁄fig
;

6060 
ªgvÆ
 = 
	`rd32
(
E1000_TXSTMPH
);

6061 
ªgvÆ
 = 
	`rd32
(
E1000_RXSTMPH
);

6063  
	`c›y_to_u£r
(
i‰
->
i‰_d©a
, &
c⁄fig
, (config)) ?

6064 -
EFAULT
 : 0;

6065 
	}
}

6073 
	$igb_io˘l
(
√t_devi˚
 *
√tdev
, 
i‰eq
 *
i‰
, 
cmd
)

6075 
cmd
) {

6076 
SIOCGMIIPHY
:

6077 
SIOCGMIIREG
:

6078 
SIOCSMIIREG
:

6079  
	`igb_mii_io˘l
(
√tdev
, 
i‰
, 
cmd
);

6080 
SIOCSHWTSTAMP
:

6081  
	`igb_hwt°amp_io˘l
(
√tdev
, 
i‰
, 
cmd
);

6083  -
EOPNOTSUPP
;

6085 
	}
}

6087 
s32
 
	$igb_ªad_pcõ_ˇp_ªg
(
e1000_hw
 *
hw
, 
u32
 
ªg
, 
u16
 *
vÆue
)

6089 
igb_ad≠ãr
 *
ad≠ãr
 = 
hw
->
back
;

6090 
u16
 
ˇp_off£t
;

6092 
ˇp_off£t
 = 
	`pci_föd_ˇ∑bûôy
(
ad≠ãr
->
pdev
, 
PCI_CAP_ID_EXP
);

6093 i‡(!
ˇp_off£t
)

6094  -
E1000_ERR_CONFIG
;

6096 
	`pci_ªad_c⁄fig_w‹d
(
ad≠ãr
->
pdev
, 
ˇp_off£t
 + 
ªg
, 
vÆue
);

6099 
	}
}

6101 
s32
 
	$igb_wrôe_pcõ_ˇp_ªg
(
e1000_hw
 *
hw
, 
u32
 
ªg
, 
u16
 *
vÆue
)

6103 
igb_ad≠ãr
 *
ad≠ãr
 = 
hw
->
back
;

6104 
u16
 
ˇp_off£t
;

6106 
ˇp_off£t
 = 
	`pci_föd_ˇ∑bûôy
(
ad≠ãr
->
pdev
, 
PCI_CAP_ID_EXP
);

6107 i‡(!
ˇp_off£t
)

6108  -
E1000_ERR_CONFIG
;

6110 
	`pci_wrôe_c⁄fig_w‹d
(
ad≠ãr
->
pdev
, 
ˇp_off£t
 + 
ªg
, *
vÆue
);

6113 
	}
}

6115 
	$igb_vœn_rx_ªgi°î
(
√t_devi˚
 *
√tdev
,

6116 
vœn_group
 *
gΩ
)

6118 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6119 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6120 
u32
 
˘æ
, 
r˘l
;

6122 
	`igb_úq_dißbÀ
(
ad≠ãr
);

6123 
ad≠ãr
->
vlgΩ
 = 
gΩ
;

6125 i‡(
gΩ
) {

6127 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

6128 
˘æ
 |
E1000_CTRL_VME
;

6129 
	`wr32
(
E1000_CTRL
, 
˘æ
);

6132 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

6133 
r˘l
 &~
E1000_RCTL_CFIEN
;

6134 
	`wr32
(
E1000_RCTL
, 
r˘l
);

6137 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

6138 
˘æ
 &~
E1000_CTRL_VME
;

6139 
	`wr32
(
E1000_CTRL
, 
˘æ
);

6142 
	`igb_æpml_£t
(
ad≠ãr
);

6144 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

6145 
	`igb_úq_íabÀ
(
ad≠ãr
);

6146 
	}
}

6148 
	$igb_vœn_rx_add_vid
(
√t_devi˚
 *
√tdev
, 
u16
 
vid
)

6150 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6151 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6152 
pf_id
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

6155 
	`igb_vlvf_£t
(
ad≠ãr
, 
vid
, 
åue
, 
pf_id
);

6158 
	`igb_v·a_£t
(
hw
, 
vid
, 
åue
);

6159 
	}
}

6161 
	$igb_vœn_rx_kûl_vid
(
√t_devi˚
 *
√tdev
, 
u16
 
vid
)

6163 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6164 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6165 
pf_id
 = 
ad≠ãr
->
vfs_Æloˇãd_cou¡
;

6166 
s32
 
îr
;

6168 
	`igb_úq_dißbÀ
(
ad≠ãr
);

6169 
	`vœn_group_£t_devi˚
(
ad≠ãr
->
vlgΩ
, 
vid
, 
NULL
);

6171 i‡(!
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
))

6172 
	`igb_úq_íabÀ
(
ad≠ãr
);

6175 
îr
 = 
	`igb_vlvf_£t
(
ad≠ãr
, 
vid
, 
Ál£
, 
pf_id
);

6178 i‡(
îr
)

6179 
	`igb_v·a_£t
(
hw
, 
vid
, 
Ál£
);

6180 
	}
}

6182 
	$igb_ª°‹e_vœn
(
igb_ad≠ãr
 *
ad≠ãr
)

6184 
	`igb_vœn_rx_ªgi°î
(
ad≠ãr
->
√tdev
,ád≠ãr->
vlgΩ
);

6186 i‡(
ad≠ãr
->
vlgΩ
) {

6187 
u16
 
vid
;

6188 
vid
 = 0; vid < 
VLAN_GROUP_ARRAY_LEN
; vid++) {

6189 i‡(!
	`vœn_group_gë_devi˚
(
ad≠ãr
->
vlgΩ
, 
vid
))

6191 
	`igb_vœn_rx_add_vid
(
ad≠ãr
->
√tdev
, 
vid
);

6194 
	}
}

6196 
	$igb_£t_•d_d∂x
(
igb_ad≠ãr
 *
ad≠ãr
, 
u16
 
•dd∂x
)

6198 
pci_dev
 *
pdev
 = 
ad≠ãr
->pdev;

6199 
e1000_mac_öfo
 *
mac
 = &
ad≠ãr
->
hw
.mac;

6201 
mac
->
aut⁄eg
 = 0;

6203 
•dd∂x
) {

6204 
SPEED_10
 + 
DUPLEX_HALF
:

6205 
mac
->
f‹˚d_•ìd_du∂ex
 = 
ADVERTISE_10_HALF
;

6207 
SPEED_10
 + 
DUPLEX_FULL
:

6208 
mac
->
f‹˚d_•ìd_du∂ex
 = 
ADVERTISE_10_FULL
;

6210 
SPEED_100
 + 
DUPLEX_HALF
:

6211 
mac
->
f‹˚d_•ìd_du∂ex
 = 
ADVERTISE_100_HALF
;

6213 
SPEED_100
 + 
DUPLEX_FULL
:

6214 
mac
->
f‹˚d_•ìd_du∂ex
 = 
ADVERTISE_100_FULL
;

6216 
SPEED_1000
 + 
DUPLEX_FULL
:

6217 
mac
->
aut⁄eg
 = 1;

6218 
ad≠ãr
->
hw
.
phy
.
aut⁄eg_advîti£d
 = 
ADVERTISE_1000_FULL
;

6220 
SPEED_1000
 + 
DUPLEX_HALF
:

6222 
	`dev_îr
(&
pdev
->
dev
, "Unsupported Speed/Duplex configuration\n");

6223  -
EINVAL
;

6226 
	}
}

6228 
	$__igb_shutdown
(
pci_dev
 *
pdev
, 
boﬁ
 *
íabÀ_wake
)

6230 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6231 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6232 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6233 
u32
 
˘æ
, 
r˘l
, 
°©us
;

6234 
u32
 
wufc
 = 
ad≠ãr
->
wﬁ
;

6235 #ifde‡
CONFIG_PM


6236 
ªtvÆ
 = 0;

6239 
	`√tif_devi˚_dëach
(
√tdev
);

6241 i‡(
	`√tif_ru¬ög
(
√tdev
))

6242 
	`igb_˛o£
(
√tdev
);

6244 
	`igb_˛ór_öãºu±_scheme
(
ad≠ãr
);

6246 #ifde‡
CONFIG_PM


6247 
ªtvÆ
 = 
	`pci_ßve_°©e
(
pdev
);

6248 i‡(
ªtvÆ
)

6249  
ªtvÆ
;

6252 
°©us
 = 
	`rd32
(
E1000_STATUS
);

6253 i‡(
°©us
 & 
E1000_STATUS_LU
)

6254 
wufc
 &~
E1000_WUFC_LNKC
;

6256 i‡(
wufc
) {

6257 
	`igb_£tup_r˘l
(
ad≠ãr
);

6258 
	`igb_£t_rx_mode
(
√tdev
);

6261 i‡(
wufc
 & 
E1000_WUFC_MC
) {

6262 
r˘l
 = 
	`rd32
(
E1000_RCTL
);

6263 
r˘l
 |
E1000_RCTL_MPE
;

6264 
	`wr32
(
E1000_RCTL
, 
r˘l
);

6267 
˘æ
 = 
	`rd32
(
E1000_CTRL
);

6269 
	#E1000_CTRL_ADVD3WUC
 0x00100000

	)

6271 
	#E1000_CTRL_EN_PHY_PWR_MGMT
 0x00200000

	)

6272 
˘æ
 |
E1000_CTRL_ADVD3WUC
;

6273 
	`wr32
(
E1000_CTRL
, 
˘æ
);

6276 
	`igb_dißbÀ_pcõ_ma°î
(
hw
);

6278 
	`wr32
(
E1000_WUC
, 
E1000_WUC_PME_EN
);

6279 
	`wr32
(
E1000_WUFC
, 
wufc
);

6281 
	`wr32
(
E1000_WUC
, 0);

6282 
	`wr32
(
E1000_WUFC
, 0);

6285 *
íabÀ_wake
 = 
wufc
 || 
ad≠ãr
->
í_mng_±
;

6286 i‡(!*
íabÀ_wake
)

6287 
	`igb_powî_down_lök
(
ad≠ãr
);

6289 
	`igb_powî_up_lök
(
ad≠ãr
);

6293 
	`igb_ªÀa£_hw_c⁄åﬁ
(
ad≠ãr
);

6295 
	`pci_dißbÀ_devi˚
(
pdev
);

6298 
	}
}

6300 #ifde‡
CONFIG_PM


6301 
	$igb_su•íd
(
pci_dev
 *
pdev
, 
pm_mesßge_t
 
°©e
)

6303 
ªtvÆ
;

6304 
boﬁ
 
wake
;

6306 
ªtvÆ
 = 
	`__igb_shutdown
(
pdev
, &
wake
);

6307 i‡(
ªtvÆ
)

6308  
ªtvÆ
;

6310 i‡(
wake
) {

6311 
	`pci_¥ï¨e_to_¶ìp
(
pdev
);

6313 
	`pci_wake_‰om_d3
(
pdev
, 
Ál£
);

6314 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D3hŸ
);

6318 
	}
}

6320 
	$igb_ªsume
(
pci_dev
 *
pdev
)

6322 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6323 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6324 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6325 
u32
 
îr
;

6327 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D0
);

6328 
	`pci_ª°‹e_°©e
(
pdev
);

6329 
	`pci_ßve_°©e
(
pdev
);

6331 
îr
 = 
	`pci_íabÀ_devi˚_mem
(
pdev
);

6332 i‡(
îr
) {

6333 
	`dev_îr
(&
pdev
->
dev
,

6335  
îr
;

6337 
	`pci_£t_ma°î
(
pdev
);

6339 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D3hŸ
, 0);

6340 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D3cﬁd
, 0);

6342 i‡(
	`igb_öô_öãºu±_scheme
(
ad≠ãr
)) {

6343 
	`dev_îr
(&
pdev
->
dev
, "UnableÅoállocate memory for queues\n");

6344  -
ENOMEM
;

6347 
	`igb_ª£t
(
ad≠ãr
);

6351 
	`igb_gë_hw_c⁄åﬁ
(
ad≠ãr
);

6353 
	`wr32
(
E1000_WUS
, ~0);

6355 i‡(
	`√tif_ru¬ög
(
√tdev
)) {

6356 
îr
 = 
	`igb_›í
(
√tdev
);

6357 i‡(
îr
)

6358  
îr
;

6361 
	`√tif_devi˚_©èch
(
√tdev
);

6364 
	}
}

6367 
	$igb_shutdown
(
pci_dev
 *
pdev
)

6369 
boﬁ
 
wake
;

6371 
	`__igb_shutdown
(
pdev
, &
wake
);

6373 i‡(
sy°em_°©e
 =
SYSTEM_POWER_OFF
) {

6374 
	`pci_wake_‰om_d3
(
pdev
, 
wake
);

6375 
	`pci_£t_powî_°©e
(
pdev
, 
PCI_D3hŸ
);

6377 
	}
}

6379 #ifde‡
CONFIG_NET_POLL_CONTROLLER


6385 
	$igb_√çﬁl
(
√t_devi˚
 *
√tdev
)

6387 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6388 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6389 
i
;

6391 i‡(!
ad≠ãr
->
msix_íåõs
) {

6392 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_vector[0];

6393 
	`igb_úq_dißbÀ
(
ad≠ãr
);

6394 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

6398 
i
 = 0; i < 
ad≠ãr
->
num_q_ve˘‹s
; i++) {

6399 
igb_q_ve˘‹
 *
q_ve˘‹
 = 
ad≠ãr
->q_ve˘‹[
i
];

6400 
	`wr32
(
E1000_EIMC
, 
q_ve˘‹
->
eims_vÆue
);

6401 
	`«pi_scheduÀ
(&
q_ve˘‹
->
«pi
);

6403 
	}
}

6414 
pci_îs_ªsu…_t
 
	$igb_io_îr‹_dëe˘ed
(
pci_dev
 *
pdev
,

6415 
pci_ch™√l_°©e_t
 
°©e
)

6417 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6418 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6420 
	`√tif_devi˚_dëach
(
√tdev
);

6422 i‡(
°©e
 =
pci_ch™√l_io_≥rm_Áûuª
)

6423  
PCI_ERS_RESULT_DISCONNECT
;

6425 i‡(
	`√tif_ru¬ög
(
√tdev
))

6426 
	`igb_down
(
ad≠ãr
);

6427 
	`pci_dißbÀ_devi˚
(
pdev
);

6430  
PCI_ERS_RESULT_NEED_RESET
;

6431 
	}
}

6440 
pci_îs_ªsu…_t
 
	$igb_io_¶Ÿ_ª£t
(
pci_dev
 *
pdev
)

6442 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6443 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6444 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6445 
pci_îs_ªsu…_t
 
ªsu…
;

6446 
îr
;

6448 i‡(
	`pci_íabÀ_devi˚_mem
(
pdev
)) {

6449 
	`dev_îr
(&
pdev
->
dev
,

6451 
ªsu…
 = 
PCI_ERS_RESULT_DISCONNECT
;

6453 
	`pci_£t_ma°î
(
pdev
);

6454 
	`pci_ª°‹e_°©e
(
pdev
);

6455 
	`pci_ßve_°©e
(
pdev
);

6457 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D3hŸ
, 0);

6458 
	`pci_íabÀ_wake
(
pdev
, 
PCI_D3cﬁd
, 0);

6460 
	`igb_ª£t
(
ad≠ãr
);

6461 
	`wr32
(
E1000_WUS
, ~0);

6462 
ªsu…
 = 
PCI_ERS_RESULT_RECOVERED
;

6465 
îr
 = 
	`pci_˛ónup_´r_unc‹ª˘_îr‹_°©us
(
pdev
);

6466 i‡(
îr
) {

6467 
	`dev_îr
(&
pdev
->
dev
, "pci_cleanup_aer_uncorrect_error_status "

6468 "Áûed 0x%0x\n", 
îr
);

6472  
ªsu…
;

6473 
	}
}

6483 
	$igb_io_ªsume
(
pci_dev
 *
pdev
)

6485 
√t_devi˚
 *
√tdev
 = 
	`pci_gë_drvd©a
(
pdev
);

6486 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6488 i‡(
	`√tif_ru¬ög
(
√tdev
)) {

6489 i‡(
	`igb_up
(
ad≠ãr
)) {

6490 
	`dev_îr
(&
pdev
->
dev
, "igb_up failedáfterÑeset\n");

6495 
	`√tif_devi˚_©èch
(
√tdev
);

6499 
	`igb_gë_hw_c⁄åﬁ
(
ad≠ãr
);

6500 
	}
}

6502 
	$igb_ør_£t_q£l
(
igb_ad≠ãr
 *
ad≠ãr
, 
u8
 *
addr
, 
u32
 
ödex
,

6503 
u8
 
q£l
)

6505 
u32
 
ør_low
, 
ør_high
;

6506 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6511 
ør_low
 = ((
u32
Ë
addr
[0] | ((u32)áddr[1] << 8) |

6512 ((
u32
Ë
addr
[2] << 16) | ((u32)áddr[3] << 24));

6513 
ør_high
 = ((
u32
Ë
addr
[4] | ((u32)áddr[5] << 8));

6516 
ør_high
 |
E1000_RAH_AV
;

6518 i‡(
hw
->
mac
.
ty≥
 =
e1000_82575
)

6519 
ør_high
 |
E1000_RAH_POOL_1
 * 
q£l
;

6521 
ør_high
 |
E1000_RAH_POOL_1
 << 
q£l
;

6523 
	`wr32
(
	`E1000_RAL
(
ödex
), 
ør_low
);

6524 
	`wrÊ
();

6525 
	`wr32
(
	`E1000_RAH
(
ödex
), 
ør_high
);

6526 
	`wrÊ
();

6527 
	}
}

6529 
	$igb_£t_vf_mac
(
igb_ad≠ãr
 *
ad≠ãr
,

6530 
vf
, *
mac_addr
)

6532 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6535 
ør_íåy
 = 
hw
->
mac
.
ør_íåy_cou¡
 - (
vf
 + 1);

6537 
	`mem˝y
(
ad≠ãr
->
vf_d©a
[
vf
].
vf_mac_addªs£s
, 
mac_addr
, 
ETH_ALEN
);

6539 
	`igb_ør_£t_q£l
(
ad≠ãr
, 
mac_addr
, 
ør_íåy
, 
vf
);

6542 
	}
}

6544 
	$igb_ndo_£t_vf_mac
(
√t_devi˚
 *
√tdev
, 
vf
, 
u8
 *
mac
)

6546 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6547 i‡(!
	`is_vÆid_ëhî_addr
(
mac
Ë|| (
vf
 >
ad≠ãr
->
vfs_Æloˇãd_cou¡
))

6548  -
EINVAL
;

6549 
ad≠ãr
->
vf_d©a
[
vf
].
Êags
 |
IGB_VF_FLAG_PF_SET_MAC
;

6550 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "£âög MAC %pM o¿VF %d\n", 
mac
, 
vf
);

6551 
	`dev_öfo
(&
ad≠ãr
->
pdev
->
dev
, "ReloadÅhe VF driverÅo makeÅhis"

6553 i‡(
	`ã°_bô
(
__IGB_DOWN
, &
ad≠ãr
->
°©e
)) {

6554 
	`dev_w¨n
(&
ad≠ãr
->
pdev
->
dev
, "The VF MACáddress has been set,"

6556 
	`dev_w¨n
(&
ad≠ãr
->
pdev
->
dev
, "BringÅhe PF device up before"

6559  
	`igb_£t_vf_mac
(
ad≠ãr
, 
vf
, 
mac
);

6560 
	}
}

6562 
	$igb_ndo_£t_vf_bw
(
√t_devi˚
 *
√tdev
, 
vf
, 
tx_øã
)

6564  -
EOPNOTSUPP
;

6565 
	}
}

6567 
	$igb_ndo_gë_vf_c⁄fig
(
√t_devi˚
 *
√tdev
,

6568 
vf
, 
iÊa_vf_öfo
 *
ivi
)

6570 
igb_ad≠ãr
 *
ad≠ãr
 = 
	`√tdev_¥iv
(
√tdev
);

6571 i‡(
vf
 >
ad≠ãr
->
vfs_Æloˇãd_cou¡
)

6572  -
EINVAL
;

6573 
ivi
->
vf
 = vf;

6574 
	`mem˝y
(&
ivi
->
mac
, 
ad≠ãr
->
vf_d©a
[
vf
].
vf_mac_addªs£s
, 
ETH_ALEN
);

6575 
ivi
->
tx_øã
 = 0;

6576 
ivi
->
vœn
 = 
ad≠ãr
->
vf_d©a
[
vf
].
pf_vœn
;

6577 
ivi
->
qos
 = 
ad≠ãr
->
vf_d©a
[
vf
].
pf_qos
;

6579 
	}
}

6581 
	$igb_vmm_c⁄åﬁ
(
igb_ad≠ãr
 *
ad≠ãr
)

6583 
e1000_hw
 *
hw
 = &
ad≠ãr
->hw;

6584 
u32
 
ªg
;

6586 
hw
->
mac
.
ty≥
) {

6587 
e1000_82575
:

6591 
e1000_82576
:

6593 
ªg
 = 
	`rd32
(
E1000_DTXCTL
);

6594 
ªg
 |
E1000_DTXCTL_VLAN_ADDED
;

6595 
	`wr32
(
E1000_DTXCTL
, 
ªg
);

6596 
e1000_82580
:

6598 
ªg
 = 
	`rd32
(
E1000_RPLOLR
);

6599 
ªg
 |
E1000_RPLOLR_STRVLAN
;

6600 
	`wr32
(
E1000_RPLOLR
, 
ªg
);

6601 
e1000_i350
:

6606 i‡(
ad≠ãr
->
vfs_Æloˇãd_cou¡
) {

6607 
	`igb_vmdq_£t_lo›back_pf
(
hw
, 
åue
);

6608 
	`igb_vmdq_£t_ª∂iˇti⁄_pf
(
hw
, 
åue
);

6610 
	`igb_vmdq_£t_lo›back_pf
(
hw
, 
Ál£
);

6611 
	`igb_vmdq_£t_ª∂iˇti⁄_pf
(
hw
, 
Ál£
);

6613 
	}
}

	@ukmem.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/ty≥s.h
>

4 
	~<löux/mm.h
>

5 
	~<löux/fs.h
>

6 
	~<löux/pﬁl.h
>

7 
	~<löux/io˘l.h
>

8 
	~<asm/io.h
>

9 
	~<löux/skbuff.h
>

12 
	~<löux/miscdevi˚.h
>

14 
	#USTAK_VERSION
 "1.0"

	)

16 
MODULE_AUTHOR
("peng jianzhang, <pengjianzhang@gmail.com>");

17 
MODULE_DESCRIPTION
("User spaceánd kernel space memory share");

18 
MODULE_LICENSE
("GPL");

19 
MODULE_VERSION
(
USTAK_VERSION
);

22 
	#MAX_DESC_NUM
 8

	)

23 
	#MAX_ADAPTER_NUM
 4

	)

25 
	sad≠ãr_mem


27 
	mad≠ãr_addr
;

29 
	mªgs_phys
;

31 
	mrx_desc
[
MAX_DESC_NUM
];

32 
	mtx_desc
[
MAX_DESC_NUM
];

33 
	mrx_desc_num
;

34 
	mtx_desc_num
;

37 
	sukmem


39 
ad≠ãr_mem
 
	mad≠ãr
[
MAX_ADAPTER_NUM
];

40 
	mad≠ãr_num
;

42 
	mªgs_∑ges
;

43 
	mdesc_∑ges
;

46 
	m°¨t
;

47 
	mphys
;

48 
	m∑ges
;

49 
	m‹dî
;

50 }
	gukmm≠
;

54 
	$ukmem_¥öt
()

56 
i
,
j
;

57 
ad≠ãr_mem
 * 
a
;

59 
i
 = 0; i < 
ukmm≠
.
ad≠ãr_num
;i++)

62 
a
 = &
ukmm≠
.
ad≠ãr
[
i
];

63 
	`¥ötk
(
KERN_INFO
 "ad≠ã∏%d\n",
i
);

64 
	`¥ötk
(
KERN_INFO
 "ªgs:%lx\n",
a
->
ªgs_phys
);

66 
j
 = 0; j < 
a
->
tx_desc_num
; j++)

67 
	`¥ötk
(
KERN_INFO
 "tx_desc:%lx",
a
->
tx_desc
[
j
]);

69 
j
 = 0; j < 
a
->
rx_desc_num
; j++)

70 
	`¥ötk
(
KERN_INFO
 "rx_desc:%lx",
a
->
rx_desc
[
j
]);

72 
	`¥ötk
(
KERN_INFO
 "\n\n");

75 
	`¥ötk
(
KERN_INFO
 "gë_‰ì_∑ges:phy†%lx\n",
ukmm≠
.
phys
);

77 
	}
}

85 
	$ukmm≠_öô
(
ªgs_∑ges
, 
desc_∑ges
, 
‹dî
)

87 
i
;

88 
addr
, 
phys
;

90 
ukmm≠
.
ad≠ãr_num
 = 0;

91 
ukmm≠
.
ªgs_∑ges
 =Ñegs_pages;

92 
ukmm≠
.
desc_∑ges
 = desc_pages;

93 
ukmm≠
.
°¨t
 = 0;

94 
ukmm≠
.
phys
 = 0;

95 
ukmm≠
.
∑ges
 = 0;

97 
i
 = 0; i < 
MAX_ADAPTER_NUM
; i++)

99 
ukmm≠
.
ad≠ãr
[
i
].
rx_desc_num
 = 0;

100 
ukmm≠
.
ad≠ãr
[
i
].
tx_desc_num
 = 0;

103 
addr
 = 
	`__gë_‰ì_∑ges
(
GFP_KERNEL
 , 
‹dî
);

105 if(
addr
 == 0)

107 
	`¥ötk
(
KERN_INFO
 "get_free_pagesÉrror\n");

108 
	`‰ì_∑ges
(
addr
, 
‹dî
);

112 
phys
 = 
	`vút_to_phys
((vﬁ©ûê*)(
addr
));

114 
	`¥ötk
(
KERN_INFO
 "phys:%lx %d\n" ,
phys
,1<<
‹dî
);

115 
ukmm≠
.
°¨t
 = 
addr
;

116 
ukmm≠
.
phys
 =Öhys;

117 
ukmm≠
.
∑ges
 = 1 << 
‹dî
;

118 
ukmm≠
.
‹dî
 = order;

123 
	}
}

125 
	$ukmm≠_exô
()

127 if(
ukmm≠
.
°¨t
)

128 
	`‰ì_∑ges
(
ukmm≠
.
°¨t
, ukmm≠.
‹dî
);

129 
	}
}

132 
ad≠ãr_mem
 * 
	$ukmem_föd_ad≠ãr
(
ad≠ãr_addr
)

134 
i
;

135 
ad≠ãr_mem
 * 
a
;

137 
i
 = 0; i < 
ukmm≠
.
ad≠ãr_num
; i++)

139 
a
 =&(
ukmm≠
.
ad≠ãr
[
i
]);

140 if(
a
->
ad≠ãr_addr
 ==ádapter_addr) á;

143  
NULL
;

144 
	}
}

146 
	$ukmem_Æloc_ad≠ãr
(
ad≠ãr_addr
)

148 
i
 = 
ukmm≠
.
ad≠ãr_num
;

149 
ukmm≠
.
ad≠ãr
[
i
].
ad≠ãr_addr
 =ádapter_addr;

150 
ukmm≠
.
ad≠ãr_num
++;

151 
	}
}

152 
EXPORT_SYMBOL
(
ukmem_Æloc_ad≠ãr
);

154 
	$ukmem_add_ªgs
(
ad≠ãr_addr
,
phys
)

156 
ad≠ãr_mem
 * 
a
 = 
	`ukmem_föd_ad≠ãr
(
ad≠ãr_addr
);

158 if(
a
 =
NULL
)

160 
	`¥ötk
(
KERN_INFO
 "ERROR: Nÿsuchád≠ã∏%lx\n",
ad≠ãr_addr
);

164 
a
->
ªgs_phys
 = 
phys
;

165 
	}
}

166 
EXPORT_SYMBOL
(
ukmem_add_ªgs
);

168 
	#TX_FLAG
 0

	)

169 
	#RX_FLAG
 1

	)

171 
	$ukmem_add_desc
(
ad≠ãr_addr
,
desc_phys
, 
Êag
)

174 
ad≠ãr_mem
 * 
a
 = 
	`ukmem_föd_ad≠ãr
(
ad≠ãr_addr
);

176 if(
a
 =
NULL
)

178 
	`¥ötk
(
KERN_INFO
 "ERROR: Nÿsuchád≠ã∏%lx\n",
ad≠ãr_addr
);

182 if(
Êag
 =
TX_FLAG
)

183 
a
->
tx_desc
[a->
tx_desc_num
++] = 
desc_phys
;

185 
a
->
rx_desc
[a->
rx_desc_num
++] = 
desc_phys
;

186 
	}
}

189 
	$ukmem_add_rx_desc
(
ad≠ãr_addr
,
desc_phys
)

191 
	`ukmem_add_desc
(
ad≠ãr_addr
,
desc_phys
,
RX_FLAG
);

192 
	}
}

193 
EXPORT_SYMBOL
(
ukmem_add_rx_desc
);

195 
	$ukmem_add_tx_desc
(
ad≠ãr_addr
,
desc_phys
)

197 
	`ukmem_add_desc
(
ad≠ãr_addr
,
desc_phys
,
TX_FLAG
);

198 
	}
}

199 
EXPORT_SYMBOL
(
ukmem_add_tx_desc
);

203 
sk_buff
 * 
	$ukmem_skb_Æloc
(
size
)

205  
NULL
;

206 
	}
}

208 
EXPORT_SYMBOL
(
ukmem_skb_Æloc
);

211 
	$ukmem_skb_‰ì
(
sk_buff
 * 
skb
)

214 
	}
}

216 
EXPORT_SYMBOL
(
ukmem_skb_‰ì
);

218 
	$ukmem_vma_Áu…
(
vm_¨ó_°ru˘
 *
vma
,
vm_Áu…
 *
vmf
)

220 
off£t
;

221 
∑ge
 *page;

223 
off£t
 = ()
vmf
->
vútuÆ_addªss
 - 
vma
->
vm_°¨t
;

225 if((
off£t
/
PAGE_SIZE
Ë> (1 << 
ukmm≠
.
‹dî
))

226  
VM_FAULT_SIGBUS
;

228 
∑ge
 = 
	`vút_to_∑ge
–
ukmm≠
.
°¨t
 + 
off£t
);

230 i‡(!
∑ge
)

232 
	`¥ötk
(
KERN_INFO
 "NO PAGE FOUND\n");

233  
VM_FAULT_SIGBUS
;

235 
vmf
->
∑ge
 =Öage;

236 
	`gë_∑ge
(
∑ge
);

240 
	}
}

242 
vm_›î©i⁄s_°ru˘
 
	gukmem_vm_›s
 = {

243 .
Áu…
 = 
ukmem_vma_Áu…
,

248 
	$ukmem_mm≠_ªgs
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
)

250 
i
;

251 
phys_addr
;

252 
Àn
;

254 
Àn
 = 
ukmm≠
.
ªgs_∑ges
 * 
PAGE_SIZE
;

255 
vma
->
vm_∑ge_¥Ÿ
 = 
	`pg¥Ÿ_n⁄ˇched
(vma->vm_page_prot);

257 
i
 = 0; i < 
ukmm≠
.
ad≠ãr_num
; i++)

259 
phys_addr
 = 
ukmm≠
.
ad≠ãr
[
i
].
ªgs_phys
;

260 if(
	`ªm≠_p‚_ønge
(
vma
,vma->
vm_°¨t
 +
i
* 
Àn
,
phys_addr
 >> 
PAGE_SHIFT
,Àn,vma->
vm_∑ge_¥Ÿ
))

262 
	`¥ötk
(
KERN_INFO
 "mmapÉrror\n");

263  -
EAGAIN
;

268 
	}
}

270 
	$ukmem_mm≠_desc
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
)

272 
i
,
j
;

273 
phys_addr
;

274 
Àn
 = 
ukmm≠
.
desc_∑ges
 * 
PAGE_SIZE
;

275 
size
 = 0;

278 
i
 = 0; i < 
ukmm≠
.
ad≠ãr_num
; i++)

282 
j
 = 0; j < 
ukmm≠
.
ad≠ãr
[
i
].
tx_desc_num
; j++)

284 
phys_addr
 = 
ukmm≠
.
ad≠ãr
[
i
].
tx_desc
[
j
];

285 if(
	`ªm≠_p‚_ønge
(
vma
,vma->
vm_°¨t
 + 
size
,
phys_addr
 >> 
PAGE_SHIFT
,
Àn
,vma->
vm_∑ge_¥Ÿ
))

287 
	`¥ötk
(
KERN_INFO
 "mmapÅxÉrror\n");

288  -
EAGAIN
;

290 
size
 +
Àn
;

294 
j
 = 0; j < 
ukmm≠
.
ad≠ãr
[
i
].
rx_desc_num
; j++)

296 
phys_addr
 = 
ukmm≠
.
ad≠ãr
[
i
].
rx_desc
[
j
];

297 if(
	`ªm≠_p‚_ønge
(
vma
,vma->
vm_°¨t
 + 
size
,
phys_addr
 >> 
PAGE_SHIFT
,
Àn
,vma->
vm_∑ge_¥Ÿ
))

299 
	`¥ötk
(
KERN_INFO
 "mmapÑxÉrror\n");

300  -
EAGAIN
;

302 
size
 +
Àn
;

308 
	}
}

312 
	$ukmem_mm≠
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
)

314 
size
 = 
vma
->
vm_íd
 - vma->
vm_°¨t
;

315 
ªt
 = 0;

316 
ªgs_size
 = 
ukmm≠
.
ad≠ãr_num
 * ukmm≠.
ªgs_∑ges
 * 
PAGE_SIZE
;

317 
desc_size
 = 
ukmm≠
.
ad≠ãr_num
 * ukmm≠.
desc_∑ges
 * 
PAGE_SIZE
 * ukmm≠.
ad≠ãr
[0].
rx_desc_num
 * 2;

320 if–(
vma
->
vm_pgoff
 !0Ë||(
size
 % 
PAGE_SIZE
 != 0))

322 
	`¥ötk
(
KERN_INFO
 "mmapÉrror 1\n");

323  -
EAGAIN
;

327 if(
size
 =
ªgs_size
)

328 
ªt
 = 
	`ukmem_mm≠_ªgs
(
fûe
, 
vma
);

329 if(
size
 =
desc_size
)

330 
ªt
 = 
	`ukmem_mm≠_desc
(
fûe
, 
vma
);

333 
vma
->
vm_Êags
|=
VM_RESERVED
;

334 
vma
->
vm_›s
 = &
ukmem_vm_›s
;

337  
ªt
;

338 
	}
}

342 
	$ukmem_›í
(
öode
 *öode, 
fûe
 *file)

345 
	`¥ötk
(
KERN_INFO
 "open\n");

349 
	}
}

352 
	$ukmem_ªÀa£
(
öode
 *öode, 
fûe
 *file)

354 
	`¥ötk
(
KERN_INFO
 "release\n");

357 
	}
}

361 
ssize_t
 
	$ukmem_ªad
(
fûe
 *fûe, 
__u£r
 *
buf
, 
size_t
 
size
, 
loff_t
 *
off
)

364 
buff
[2] ;

365 
îr
;

366 
Àn
 = () * 2;

368 
buff
[0] = 
ukmm≠
.
phys
;

369 
buff
[1] = 
ukmm≠
.
∑ges
;

372 
	`¥ötk
(
KERN_INFO
 "read\n");

373 if(
size
 >(
Àn
))

375 
îr
 = 
	`c›y_to_u£r
(
buf
,
buff
,
Àn
);

377 if(
îr
 < 0) Érr;

380  
Àn
;

381 
	}
}

384 
ssize_t
 
	$ukmem_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
buf
, 
size_t
 
size
, 
loff_t
 *
off
)

386 
	`¥ötk
(
KERN_INFO
 "write\n");

389 
	}
}

392 
	$ukmem_pﬁl
(
fûe
 *fûe, 
pﬁl_èbÀ_°ru˘
 *
waô
)

394 
	`¥ötk
(
KERN_INFO
 "poll\n");

397 
	}
}

400 
	$ukmem_io˘l
(
öode
 *öode, 
fûe
 *fûe, 
cmd
, 
¨g
)

402 
	`¥ötk
(
KERN_INFO
 "ioctl\n");

405 
	}
}

407 
fûe_›î©i⁄s
 
	gukmem_›s
 = {

408 .
pﬁl
 = &
ukmem_pﬁl
,

409 .
	gio˘l
 = &
ukmem_io˘l
,

410 .
	g›í
 = &
ukmem_›í
,

411 .
	gªÀa£
 = &
ukmem_ªÀa£
,

412 .
	gªad
 = &
ukmem_ªad
,

413 .
	gwrôe
 = &
ukmem_wrôe
,

414 .
	gmm≠
 = &
ukmem_mm≠
,

415 .
	gow√r
 = 
THIS_MODULE
,

418 
miscdevi˚
 
	gukmem_dev
 =

420 .
mö‹
 = 0,

421 .
	g«me
 = "ukmem",

422 .
	gf›s
 = &
ukmem_›s
,

428 
__öô


429 
	$ukmem_öô_moduÀ
()

431 
	`¥ötk
(
KERN_INFO
 "ukmem_init^_^\n");

433 if(
	`ukmm≠_öô
(128,1,10)Ë -
EINVAL
;

435 i‡(
	`misc_ªgi°î
(&
ukmem_dev
) < 0) {

436 
	`ukmm≠_exô
();

437 
	`¥ötk
(
KERN_ERR
 "FailedÅoÑegister ukmem_dev\n");

438  -
EINVAL
;

442 
	}
}

444 
moduÀ_öô
(
ukmem_öô_moduÀ
);

447 
__exô


448 
	$ukmem_exô_moduÀ
()

450 
	`¥ötk
(
KERN_INFO
 "ukmemÉxit ~_~\n");

452 
	`ukmem_¥öt
();

454 
	`ukmm≠_exô
();

455 
	`misc_dîegi°î
(&
ukmem_dev
);

456 
	}
}

458 
moduÀ_exô
(
ukmem_exô_moduÀ
);

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

19 
	sëhtoﬁ_cmd
 {

20 
__u32
 
	mcmd
;

21 
__u32
 
	msuµ‹ãd
;

22 
__u32
 
	madvîtisög
;

23 
__u16
 
	m•ìd
;

24 
__u8
 
	mdu∂ex
;

25 
__u8
 
	mp‹t
;

26 
__u8
 
	mphy_addªss
;

27 
__u8
 
	må™s˚ivî
;

28 
__u8
 
	maut⁄eg
;

29 
__u8
 
	mmdio_suµ‹t
;

30 
__u32
 
	mmaxtxpkt
;

31 
__u32
 
	mmaxrxpkt
;

32 
__u16
 
	m•ìd_hi
;

33 
__u8
 
	mëh_ç_mdix
;

34 
__u8
 
	mª£rved2
;

35 
__u32
 
	mÕ_advîtisög
;

36 
__u32
 
	mª£rved
[2];

39 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

40 
__u32
 
•ìd
)

43 
ï
->
•ìd
 = (
__u16
)speed;

44 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

45 
	}
}

47 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(
ëhtoﬁ_cmd
 *
ï
)

49  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

50 
	}
}

52 
	#ETHTOOL_FWVERS_LEN
 32

	)

53 
	#ETHTOOL_BUSINFO_LEN
 32

	)

55 
	sëhtoﬁ_drvöfo
 {

56 
__u32
 
	mcmd
;

57 
	mdrivî
[32];

58 
	mvîsi⁄
[32];

59 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

60 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

62 
	mª£rved1
[32];

63 
	mª£rved2
[12];

64 
__u32
 
	mn_¥iv_Êags
;

65 
__u32
 
	mn_°©s
;

66 
__u32
 
	mã°öfo_Àn
;

67 
__u32
 
	mìdump_Àn
;

68 
__u32
 
	mªgdump_Àn
;

71 
	#SOPASS_MAX
 6

	)

73 
	sëhtoﬁ_wﬁöfo
 {

74 
__u32
 
	mcmd
;

75 
__u32
 
	msuµ‹ãd
;

76 
__u32
 
	mwﬁ›ts
;

77 
__u8
 
	ms›ass
[
SOPASS_MAX
];

81 
	sëhtoﬁ_vÆue
 {

82 
__u32
 
	mcmd
;

83 
__u32
 
	md©a
;

87 
	sëhtoﬁ_ªgs
 {

88 
__u32
 
	mcmd
;

89 
__u32
 
	mvîsi⁄
;

90 
__u32
 
	mÀn
;

91 
__u8
 
	md©a
[0];

95 
	sëhtoﬁ_ì¥om
 {

96 
__u32
 
	mcmd
;

97 
__u32
 
	mmagic
;

98 
__u32
 
	moff£t
;

99 
__u32
 
	mÀn
;

100 
__u8
 
	md©a
[0];

104 
	sëhtoﬁ_cﬂÀs˚
 {

105 
__u32
 
	mcmd
;

111 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

119 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

126 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

127 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

133 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

141 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

148 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

149 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

156 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

165 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

166 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

172 
__u32
 
	mpkt_øã_low
;

173 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

174 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

175 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

176 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

187 
__u32
 
	mpkt_øã_high
;

188 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

189 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

190 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

191 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

196 
__u32
 
	møã_ßm∂e_öãrvÆ
;

200 
	sëhtoﬁ_rög∑øm
 {

201 
__u32
 
	mcmd
;

207 
__u32
 
	mrx_max_≥ndög
;

208 
__u32
 
	mrx_möi_max_≥ndög
;

209 
__u32
 
	mrx_jumbo_max_≥ndög
;

210 
__u32
 
	mtx_max_≥ndög
;

215 
__u32
 
	mrx_≥ndög
;

216 
__u32
 
	mrx_möi_≥ndög
;

217 
__u32
 
	mrx_jumbo_≥ndög
;

218 
__u32
 
	mtx_≥ndög
;

222 
	sëhtoﬁ_∑u£∑øm
 {

223 
__u32
 
	mcmd
;

235 
__u32
 
	maut⁄eg
;

236 
__u32
 
	mrx_∑u£
;

237 
__u32
 
	mtx_∑u£
;

240 
	#ETH_GSTRING_LEN
 32

	)

241 
	eëhtoﬁ_°rög£t
 {

242 
	mETH_SS_TEST
 = 0,

243 
	mETH_SS_STATS
,

244 
	mETH_SS_PRIV_FLAGS
,

248 
	sëhtoﬁ_g°rögs
 {

249 
__u32
 
	mcmd
;

250 
__u32
 
	m°rög_£t
;

251 
__u32
 
	mÀn
;

252 
__u8
 
	md©a
[0];

265 
	eëhtoﬁ_ã°_Êags
 {

266 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

267 
	mETH_TEST_FL_FAILED
 = (1 << 1),

268 
	mETH_TEST_FL_EXTERNAL_LB
 = (1 << 2),

269 
	mETH_TEST_FL_EXTERNAL_LB_DONE
 = (1 << 3),

273 
	sëhtoﬁ_ã°
 {

274 
__u32
 
	mcmd
;

275 
__u32
 
	mÊags
;

276 
__u32
 
	mª£rved
;

277 
__u32
 
	mÀn
;

278 
__u64
 
	md©a
[0];

282 
	sëhtoﬁ_°©s
 {

283 
__u32
 
	mcmd
;

284 
__u32
 
	mn_°©s
;

285 
__u64
 
	md©a
[0];

288 
	sëhtoﬁ_≥rm_addr
 {

289 
__u32
 
	mcmd
;

290 
__u32
 
	msize
;

291 
__u8
 
	md©a
[0];

303 
	eëhtoﬁ_Êags
 {

304 
	mETH_FLAG_LRO
 = (1 << 15),

305 
	mETH_FLAG_NTUPLE
 = (1 << 27),

306 
	mETH_FLAG_RXHASH
 = (1 << 28),

314 
	sëhtoﬁ_t˝ù4_•ec
 {

315 
__be32
 
	mù4§c
;

316 
__be32
 
	mù4d°
;

317 
__be16
 
	mp§c
;

318 
__be16
 
	mpd°
;

319 
__u8
 
	mtos
;

322 
	sëhtoﬁ_ah_e•ù4_•ec
 {

323 
__be32
 
	mù4§c
;

324 
__be32
 
	mù4d°
;

325 
__be32
 
	m•i
;

326 
__u8
 
	mtos
;

329 
	sëhtoﬁ_øwù4_•ec
 {

330 
__be32
 
	mù4§c
;

331 
__be32
 
	mù4d°
;

332 
__u8
 
	mhd©a
[64];

335 
	sëhtoﬁ_ëhî_•ec
 {

336 
__be16
 
	mëhî_ty≥
;

337 
__u8
 
	m‰ame_size
;

338 
__u8
 
	me‰ame
[16];

341 
	#ETH_RX_NFC_IP4
 1

	)

342 
	#ETH_RX_NFC_IP6
 2

	)

344 
	sëhtoﬁ_u§ù4_•ec
 {

345 
__be32
 
	mù4§c
;

346 
__be32
 
	mù4d°
;

347 
__be32
 
	ml4_4_byãs
;

348 
__u8
 
	mtos
;

349 
__u8
 
	mù_vî
;

350 
__u8
 
	m¥Ÿo
;

353 
	sëhtoﬁ_rx_Êow_•ec
 {

354 
__u32
 
	mÊow_ty≥
;

356 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

357 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

358 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

359 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

360 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

361 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

362 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

363 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

364 
__u8
 
	mhd©a
[64];

365 } 
	mh_u
, 
	mm_u
;

366 
__u64
 
	mrög_cookõ
;

367 
__u32
 
	mloˇti⁄
;

370 
	sëhtoﬁ_rxnfc
 {

371 
__u32
 
	mcmd
;

372 
__u32
 
	mÊow_ty≥
;

374 
__u64
 
	md©a
;

375 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

376 
__u32
 
	mruÀ_˙t
;

377 
__u32
 
	mruÀ_locs
[0];

380 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

381 
	eëhtoﬁ_Êash_›_ty≥
 {

382 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

386 
	sëhtoﬁ_Êash
 {

387 
__u32
 
	mcmd
;

388 
__u32
 
	mªgi⁄
;

389 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

394 
	#ETHTOOL_GSET
 0x00000001

	)

395 
	#ETHTOOL_SSET
 0x00000002

	)

396 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

397 
	#ETHTOOL_GREGS
 0x00000004

	)

398 
	#ETHTOOL_GWOL
 0x00000005

	)

399 
	#ETHTOOL_SWOL
 0x00000006

	)

400 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

401 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

402 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

403 
	#ETHTOOL_GLINK
 0x0000000®

	)

404 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

405 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

406 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

407 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

408 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

409 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

410 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

411 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

412 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

413 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

414 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

415 
	#ETHTOOL_STXCSUM
 0x00000017

	)

416 
	#ETHTOOL_GSG
 0x00000018

	)

418 
	#ETHTOOL_SSG
 0x00000019

	)

420 
	#ETHTOOL_TEST
 0x0000001®

	)

421 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

422 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

423 
	#ETHTOOL_GSTATS
 0x0000001d

	)

424 
	#ETHTOOL_GTSO
 0x0000001ê

	)

425 
	#ETHTOOL_STSO
 0x0000001‡

	)

426 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

427 
	#ETHTOOL_GUFO
 0x00000021

	)

428 
	#ETHTOOL_SUFO
 0x00000022

	)

429 
	#ETHTOOL_GGSO
 0x00000023

	)

430 
	#ETHTOOL_SGSO
 0x00000024

	)

431 
	#ETHTOOL_GFLAGS
 0x00000025

	)

432 
	#ETHTOOL_SFLAGS
 0x00000026

	)

433 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

434 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

436 
	#ETHTOOL_GRXFH
 0x00000029

	)

437 
	#ETHTOOL_SRXFH
 0x0000002®

	)

438 
	#ETHTOOL_GGRO
 0x0000002b

	)

439 
	#ETHTOOL_SGRO
 0x0000002¯

	)

440 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

441 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

442 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

443 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

444 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

445 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

446 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

449 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

450 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

453 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

454 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

455 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

456 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

457 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

458 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

459 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

460 
	#SUPPORTED_TP
 (1 << 7)

	)

461 
	#SUPPORTED_AUI
 (1 << 8)

	)

462 
	#SUPPORTED_MII
 (1 << 9)

	)

463 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

464 
	#SUPPORTED_BNC
 (1 << 11)

	)

465 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

466 
	#SUPPORTED_Pau£
 (1 << 13)

	)

467 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

468 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

469 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

470 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

471 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

472 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

473 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

474 
	#SUPPORTED_20000ba£MLD2_FuŒ
 (1 << 21)

	)

475 
	#SUPPORTED_20000ba£KR2_FuŒ
 (1 << 22)

	)

478 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

479 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

480 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

481 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

482 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

483 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

484 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

485 
	#ADVERTISED_TP
 (1 << 7)

	)

486 
	#ADVERTISED_AUI
 (1 << 8)

	)

487 
	#ADVERTISED_MII
 (1 << 9)

	)

488 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

489 
	#ADVERTISED_BNC
 (1 << 11)

	)

490 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

491 
	#ADVERTISED_Pau£
 (1 << 13)

	)

492 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

493 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

494 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

495 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

496 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

497 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

498 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

499 
	#ADVERTISED_20000ba£MLD2_FuŒ
 (1 << 21)

	)

500 
	#ADVERTISED_20000ba£KR2_FuŒ
 (1 << 22)

	)

509 
	#SPEED_10
 10

	)

510 
	#SPEED_100
 100

	)

511 
	#SPEED_1000
 1000

	)

512 
	#SPEED_2500
 2500

	)

513 
	#SPEED_10000
 10000

	)

514 
	#SPEED_UNKNOWN
 -1

	)

517 
	#DUPLEX_HALF
 0x00

	)

518 
	#DUPLEX_FULL
 0x01

	)

519 
	#DUPLEX_UNKNOWN
 0xff

	)

522 
	#PORT_TP
 0x00

	)

523 
	#PORT_AUI
 0x01

	)

524 
	#PORT_MII
 0x02

	)

525 
	#PORT_FIBRE
 0x03

	)

526 
	#PORT_BNC
 0x04

	)

527 
	#PORT_DA
 0x05

	)

528 
	#PORT_NONE
 0xef

	)

529 
	#PORT_OTHER
 0xff

	)

532 
	#XCVR_INTERNAL
 0x00

	)

533 
	#XCVR_EXTERNAL
 0x01

	)

534 
	#XCVR_DUMMY1
 0x02

	)

535 
	#XCVR_DUMMY2
 0x03

	)

536 
	#XCVR_DUMMY3
 0x04

	)

541 
	#AUTONEG_DISABLE
 0x00

	)

542 
	#AUTONEG_ENABLE
 0x01

	)

545 
	#ETH_TP_MDI_INVALID
 0x00

	)

546 
	#ETH_TP_MDI
 0x01

	)

547 
	#ETH_TP_MDI_X
 0x02

	)

550 
	#WAKE_PHY
 (1 << 0)

	)

551 
	#WAKE_UCAST
 (1 << 1)

	)

552 
	#WAKE_MCAST
 (1 << 2)

	)

553 
	#WAKE_BCAST
 (1 << 3)

	)

554 
	#WAKE_ARP
 (1 << 4)

	)

555 
	#WAKE_MAGIC
 (1 << 5)

	)

556 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

559 
	#TCP_V4_FLOW
 0x01

	)

560 
	#UDP_V4_FLOW
 0x02

	)

561 
	#SCTP_V4_FLOW
 0x03

	)

562 
	#AH_ESP_V4_FLOW
 0x04

	)

563 
	#TCP_V6_FLOW
 0x05

	)

564 
	#UDP_V6_FLOW
 0x06

	)

565 
	#SCTP_V6_FLOW
 0x07

	)

566 
	#AH_ESP_V6_FLOW
 0x08

	)

567 
	#AH_V4_FLOW
 0x09

	)

568 
	#ESP_V4_FLOW
 0x0a

	)

569 
	#AH_V6_FLOW
 0x0b

	)

570 
	#ESP_V6_FLOW
 0x0c

	)

571 
	#IP_USER_FLOW
 0x0d

	)

574 
	#RXH_L2DA
 (1 << 1)

	)

575 
	#RXH_VLAN
 (1 << 2)

	)

576 
	#RXH_L3_PROTO
 (1 << 3)

	)

577 
	#RXH_IP_SRC
 (1 << 4)

	)

578 
	#RXH_IP_DST
 (1 << 5)

	)

579 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

580 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

581 
	#RXH_DISCARD
 (1 << 31)

	)

583 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

585 
	eëhtoﬁ_ª£t_Êags
 {

591 
	mETH_RESET_MGMT
 = 1 << 0,

592 
	mETH_RESET_IRQ
 = 1 << 1,

593 
	mETH_RESET_DMA
 = 1 << 2,

594 
	mETH_RESET_FILTER
 = 1 << 3,

595 
	mETH_RESET_OFFLOAD
 = 1 << 4,

596 
	mETH_RESET_MAC
 = 1 << 5,

597 
	mETH_RESET_PHY
 = 1 << 6,

598 
	mETH_RESET_RAM
 = 1 << 7,

601 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

603 
	mETH_RESET_ALL
 = 0xffffffff,

606 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN_CUR
 1024

	)

27 
	#INR_OPEN_MAX
 4096

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

30 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

32 
	#SEEK_SET
 0

	)

33 
	#SEEK_CUR
 1

	)

34 
	#SEEK_END
 2

	)

35 
	#SEEK_MAX
 
SEEK_END


	)

37 
	sf°rim_ønge
 {

38 
__u64
 
	m°¨t
;

39 
__u64
 
	mÀn
;

40 
__u64
 
	mmöÀn
;

44 
	sfûes_°©_°ru˘
 {

45 
	mƒ_fûes
;

46 
	mƒ_‰ì_fûes
;

47 
	mmax_fûes
;

50 
	söodes_°©_t
 {

51 
	mƒ_öodes
;

52 
	mƒ_unu£d
;

53 
	mdummy
[5];

57 
	#NR_FILE
 8192

	)

59 
	#MAY_EXEC
 1

	)

60 
	#MAY_WRITE
 2

	)

61 
	#MAY_READ
 4

	)

62 
	#MAY_APPEND
 8

	)

63 
	#MAY_ACCESS
 16

	)

64 
	#MAY_OPEN
 32

	)

72 
	#FMODE_READ
 ((
fmode_t
)1)

	)

74 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

76 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

78 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

80 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

82 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

84 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

86 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

89 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

91 
	#FMODE_32BITHASH
 ((
fmode_t
)0x200)

	)

93 
	#FMODE_64BITHASH
 ((
fmode_t
)0x400)

	)

101 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

104 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

162 
	#RW_MASK
 
REQ_WRITE


	)

163 
	#RWA_MASK
 (1 << 
BIO_RW_AHEAD
)

	)

165 
	#READ
 0

	)

166 
	#WRITE
 1

	)

167 
	#READA
 
RWA_MASK


	)

168 
	#SWRITE
 (
WRITE
 | 
READA
)

	)

170 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

171 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

172 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

173 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

174 
	#WRITE_ODIRECT_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
))

	)

175 
	#WRITE_META
 (
WRITE
 | (1 << 
BIO_RW_META
))

	)

176 
	#SWRITE_SYNC_PLUG
 \

177 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

178 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

179 
	#WRITE_BARRIER
 (
WRITE_SYNC
 | (1 << 
BIO_RW_BARRIER
))

	)

181 
	#WRITE_FLUSH
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FLUSH
))

	)

182 
	#WRITE_FUA
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FUA
))

	)

183 
	#WRITE_FLUSH_FUA
 (
WRITE_FLUSH
 | 
WRITE_FUA
)

	)

190 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

191 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

193 
	#SEL_IN
 1

	)

194 
	#SEL_OUT
 2

	)

195 
	#SEL_EX
 4

	)

198 
	#FS_REQUIRES_DEV
 1

	)

199 
	#FS_BINARY_MOUNTDATA
 2

	)

200 
	#FS_HAS_SUBTYPE
 4

	)

201 
	#FS_REVAL_DOT
 16384

	)

202 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

209 
	#MS_RDONLY
 1

	)

210 
	#MS_NOSUID
 2

	)

211 
	#MS_NODEV
 4

	)

212 
	#MS_NOEXEC
 8

	)

213 
	#MS_SYNCHRONOUS
 16

	)

214 
	#MS_REMOUNT
 32

	)

215 
	#MS_MANDLOCK
 64

	)

216 
	#MS_DIRSYNC
 128

	)

217 
	#MS_NOATIME
 1024

	)

218 
	#MS_NODIRATIME
 2048

	)

219 
	#MS_BIND
 4096

	)

220 
	#MS_MOVE
 8192

	)

221 
	#MS_REC
 16384

	)

222 
	#MS_VERBOSE
 32768

	)

224 
	#MS_SILENT
 32768

	)

225 
	#MS_POSIXACL
 (1<<16Ë

	)

226 
	#MS_UNBINDABLE
 (1<<17Ë

	)

227 
	#MS_PRIVATE
 (1<<18Ë

	)

228 
	#MS_SLAVE
 (1<<19Ë

	)

229 
	#MS_SHARED
 (1<<20Ë

	)

230 
	#MS_RELATIME
 (1<<21Ë

	)

231 
	#MS_KERNMOUNT
 (1<<22Ë

	)

232 
	#MS_I_VERSION
 (1<<23Ë

	)

233 
	#MS_STRICTATIME
 (1<<24Ë

	)

234 
	#MS_ACTIVE
 (1<<30)

	)

235 
	#MS_NOUSER
 (1<<31)

	)

240 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

245 
	#MS_MGC_VAL
 0xC0ED0000

	)

246 
	#MS_MGC_MSK
 0xffff0000

	)

250 
	#S_SYNC
 1

	)

251 
	#S_NOATIME
 2

	)

252 
	#S_APPEND
 4

	)

253 
	#S_IMMUTABLE
 8

	)

254 
	#S_DEAD
 16

	)

255 
	#S_NOQUOTA
 32

	)

256 
	#S_DIRSYNC
 64

	)

257 
	#S_NOCMTIME
 128

	)

258 
	#S_SWAPFILE
 256

	)

259 
	#S_PRIVATE
 512

	)

260 
	#S_AUTOMOUNT
 2048

	)

261 
	#S_AOP_EXT
 16384

	)

276 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

278 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

279 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

280 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

281 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

282 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

283 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

284 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

285 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

287 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

288 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

289 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

290 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

292 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

293 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

294 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

295 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

296 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

297 
	#IS_AOP_EXT
(
öode
Ë((öode)->
i_Êags
 & 
S_AOP_EXT
)

	)

302 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

303 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

304 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

305 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

306 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

307 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

308 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

309 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

310 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

311 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

312 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

313 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

315 
	#BLKPG
 
	`_IO
(0x12,105)

	)

319 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

320 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

325 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

326 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

327 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

328 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

329 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

330 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

331 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

332 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

333 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

334 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

335 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

336 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

337 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

339 
	#BMAP_IOCTL
 1

	)

340 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

341 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

342 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

343 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

344 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

346 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

347 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

348 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

349 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

350 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

351 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

352 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

353 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

354 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

359 
	#FS_SECRM_FL
 0x00000001

	)

360 
	#FS_UNRM_FL
 0x00000002

	)

361 
	#FS_COMPR_FL
 0x00000004

	)

362 
	#FS_SYNC_FL
 0x00000008

	)

363 
	#FS_IMMUTABLE_FL
 0x00000010

	)

364 
	#FS_APPEND_FL
 0x00000020

	)

365 
	#FS_NODUMP_FL
 0x00000040

	)

366 
	#FS_NOATIME_FL
 0x00000080

	)

368 
	#FS_DIRTY_FL
 0x00000100

	)

369 
	#FS_COMPRBLK_FL
 0x00000200

	)

370 
	#FS_NOCOMP_FL
 0x00000400

	)

371 
	#FS_ECOMPR_FL
 0x00000800

	)

373 
	#FS_BTREE_FL
 0x00001000

	)

374 
	#FS_INDEX_FL
 0x00001000

	)

375 
	#FS_IMAGIC_FL
 0x00002000

	)

376 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

377 
	#FS_NOTAIL_FL
 0x00008000

	)

378 
	#FS_DIRSYNC_FL
 0x00010000

	)

379 
	#FS_TOPDIR_FL
 0x00020000

	)

380 
	#FS_EXTENT_FL
 0x00080000

	)

381 
	#FS_DIRECTIO_FL
 0x00100000

	)

382 
	#FS_RESERVED_FL
 0x80000000

	)

384 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

385 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

388 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

389 
	#SYNC_FILE_RANGE_WRITE
 2

	)

390 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_TDLS
 0x890D

	)

84 
	#ETH_P_FIP
 0x8914

	)

85 
	#ETH_P_EDSA
 0xDADA

	)

86 
	#ETH_P_AF_IUCV
 0xFBFB

	)

92 
	#ETH_P_802_3
 0x0001

	)

93 
	#ETH_P_AX25
 0x0002

	)

94 
	#ETH_P_ALL
 0x0003

	)

95 
	#ETH_P_802_2
 0x0004

	)

96 
	#ETH_P_SNAP
 0x0005

	)

97 
	#ETH_P_DDCMP
 0x0006

	)

98 
	#ETH_P_WAN_PPP
 0x0007

	)

99 
	#ETH_P_PPP_MP
 0x0008

	)

100 
	#ETH_P_LOCALTALK
 0x0009

	)

101 
	#ETH_P_CAN
 0x000C

	)

102 
	#ETH_P_PPPTALK
 0x0010

	)

103 
	#ETH_P_TR_802_2
 0x0011

	)

104 
	#ETH_P_MOBITEX
 0x0015

	)

105 
	#ETH_P_CONTROL
 0x0016

	)

106 
	#ETH_P_IRDA
 0x0017

	)

107 
	#ETH_P_ECONET
 0x0018

	)

108 
	#ETH_P_HDLC
 0x0019

	)

109 
	#ETH_P_ARCNET
 0x001A

	)

110 
	#ETH_P_DSA
 0x001B

	)

111 
	#ETH_P_TRAILER
 0x001C

	)

112 
	#ETH_P_PHONET
 0x00F5

	)

113 
	#ETH_P_IEEE802154
 0x00F6

	)

119 
	sëhhdr
 {

120 
	mh_de°
[
ETH_ALEN
];

121 
	mh_sour˚
[
ETH_ALEN
];

122 
__be16
 
	mh_¥Ÿo
;

123 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

38 
	evœn_«me_ty≥s
 {

39 
	mVLAN_NAME_TYPE_PLUS_VID
,

40 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

41 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

42 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

43 
	mVLAN_NAME_TYPE_HIGHEST


46 
	svœn_io˘l_¨gs
 {

47 
	mcmd
;

48 
	mdevi˚1
[24];

51 
	mdevi˚2
[24];

52 
	mVID
;

53 
	mskb_¥i‹ôy
;

54 
	m«me_ty≥
;

55 
	mböd_ty≥
;

56 
	mÊag
;

57 } 
	mu
;

59 
	mvœn_qos
;

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/ipv6.h

1 #i‚de‡
_IPV6_H


2 
	#_IPV6_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/ö6.h
>

6 
	~<asm/byã‹dî.h
>

10 
	#IPV6_MIN_MTU
 1280

	)

19 
	sö6_pktöfo
 {

20 
ö6_addr
 
	mùi6_addr
;

21 
	mùi6_ifödex
;

25 
	sö6_i‰eq
 {

26 
ö6_addr
 
	mi‰6_addr
;

27 
__u32
 
	mi‰6_¥efixÀn
;

28 
	mi‰6_ifödex
;

31 
	#IPV6_SRCRT_STRICT
 0x01

	)

32 
	#IPV6_SRCRT_TYPE_0
 0

	)

33 
	#IPV6_SRCRT_TYPE_2
 2

	)

38 
	sùv6_π_hdr
 {

39 
__u8
 
	m√xthdr
;

40 
__u8
 
	mhdæí
;

41 
__u8
 
	mty≥
;

42 
__u8
 
	m£gmíts_À·
;

51 
	sùv6_›t_hdr
 {

52 
__u8
 
	m√xthdr
;

53 
__u8
 
	mhdæí
;

57 } 
__©åibuã__
 ((
∑cked
));

59 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

60 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

67 
	sπ0_hdr
 {

68 
ùv6_π_hdr
 
	mπ_hdr
;

69 
__u32
 
	mª£rved
;

70 
ö6_addr
 
	maddr
[0];

72 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

79 
	sπ2_hdr
 {

80 
ùv6_π_hdr
 
	mπ_hdr
;

81 
__u32
 
	mª£rved
;

82 
ö6_addr
 
	maddr
;

84 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

91 
	sùv6_de°›t_hao
 {

92 
__u8
 
	mty≥
;

93 
__u8
 
	mÀngth
;

94 
ö6_addr
 
	maddr
;

95 } 
__©åibuã__
 ((
__∑cked__
));

104 
	sùv6hdr
 {

105 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

106 
__u8
 
	m¥i‹ôy
:4,

107 
	mvîsi⁄
:4;

108 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

109 
__u8
 
	mvîsi⁄
:4,

110 
	m¥i‹ôy
:4;

114 
__u8
 
	mÊow_lbl
[3];

116 
__be16
 
	m∑ylﬂd_Àn
;

117 
__u8
 
	m√xthdr
;

118 
__u8
 
	mh›_limô
;

120 
ö6_addr
 
	mßddr
;

121 
ö6_addr
 
	mdaddr
;

127 
	mDEVCONF_FORWARDING
 = 0,

128 
	mDEVCONF_HOPLIMIT
,

129 
	mDEVCONF_MTU6
,

130 
	mDEVCONF_ACCEPT_RA
,

131 
	mDEVCONF_ACCEPT_REDIRECTS
,

132 
	mDEVCONF_AUTOCONF
,

133 
	mDEVCONF_DAD_TRANSMITS
,

134 
	mDEVCONF_RTR_SOLICITS
,

135 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

136 
	mDEVCONF_RTR_SOLICIT_DELAY
,

137 
	mDEVCONF_USE_TEMPADDR
,

138 
	mDEVCONF_TEMP_VALID_LFT
,

139 
	mDEVCONF_TEMP_PREFERED_LFT
,

140 
	mDEVCONF_REGEN_MAX_RETRY
,

141 
	mDEVCONF_MAX_DESYNC_FACTOR
,

142 
	mDEVCONF_MAX_ADDRESSES
,

143 
	mDEVCONF_FORCE_MLD_VERSION
,

144 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

145 
	mDEVCONF_ACCEPT_RA_PINFO
,

146 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

147 
	mDEVCONF_RTR_PROBE_INTERVAL
,

148 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

149 
	mDEVCONF_PROXY_NDP
,

150 
	mDEVCONF_OPTIMISTIC_DAD
,

151 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

152 
	mDEVCONF_MC_FORWARDING
,

153 
	mDEVCONF_DISABLE_IPV6
,

154 
	mDEVCONF_ACCEPT_DAD
,

155 
	mDEVCONF_MAX


	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

35 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

36 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

42 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

43 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

46 
	#__FUNCTION__
 (
__func__
)

	)

49 #ifde‡
CONFIG_NUMA


50 
	#NUMA_BUILD
 1

	)

52 
	#NUMA_BUILD
 0

	)

56 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


57 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

60 
	gmoduÀ
;

62 
m¨k_h¨dw¨e_unsuµ‹ãd
(c⁄° *
msg
);

63 
m¨k_ãch_¥evõw
(c⁄° *
msg
, 
moduÀ
 *
mod
);

	@/usr/include/linux/mii.h

8 #i‚de‡
__LINUX_MII_H__


9 
	#__LINUX_MII_H__


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/ëhtoﬁ.h
>

16 
	#MII_BMCR
 0x00

	)

17 
	#MII_BMSR
 0x01

	)

18 
	#MII_PHYSID1
 0x02

	)

19 
	#MII_PHYSID2
 0x03

	)

20 
	#MII_ADVERTISE
 0x04

	)

21 
	#MII_LPA
 0x05

	)

22 
	#MII_EXPANSION
 0x06

	)

23 
	#MII_CTRL1000
 0x09

	)

24 
	#MII_STAT1000
 0x0®

	)

25 
	#MII_ESTATUS
 0x0‡

	)

26 
	#MII_DCOUNTER
 0x12

	)

27 
	#MII_FCSCOUNTER
 0x13

	)

28 
	#MII_NWAYTEST
 0x14

	)

29 
	#MII_RERRCOUNTER
 0x15

	)

30 
	#MII_SREVISION
 0x16

	)

31 
	#MII_RESV1
 0x17

	)

32 
	#MII_LBRERROR
 0x18

	)

33 
	#MII_PHYADDR
 0x19

	)

34 
	#MII_RESV2
 0x1®

	)

35 
	#MII_TPISTATUS
 0x1b

	)

36 
	#MII_NCONFIG
 0x1¯

	)

39 
	#BMCR_RESV
 0x003‡

	)

40 
	#BMCR_SPEED1000
 0x0040

	)

41 
	#BMCR_CTST
 0x0080

	)

42 
	#BMCR_FULLDPLX
 0x0100

	)

43 
	#BMCR_ANRESTART
 0x0200

	)

44 
	#BMCR_ISOLATE
 0x0400

	)

45 
	#BMCR_PDOWN
 0x0800

	)

46 
	#BMCR_ANENABLE
 0x1000

	)

47 
	#BMCR_SPEED100
 0x2000

	)

48 
	#BMCR_LOOPBACK
 0x4000

	)

49 
	#BMCR_RESET
 0x8000

	)

52 
	#BMSR_ERCAP
 0x0001

	)

53 
	#BMSR_JCD
 0x0002

	)

54 
	#BMSR_LSTATUS
 0x0004

	)

55 
	#BMSR_ANEGCAPABLE
 0x0008

	)

56 
	#BMSR_RFAULT
 0x0010

	)

57 
	#BMSR_ANEGCOMPLETE
 0x0020

	)

58 
	#BMSR_RESV
 0x00c0

	)

59 
	#BMSR_ESTATEN
 0x0100

	)

60 
	#BMSR_100HALF2
 0x0200

	)

61 
	#BMSR_100FULL2
 0x0400

	)

62 
	#BMSR_10HALF
 0x0800

	)

63 
	#BMSR_10FULL
 0x1000

	)

64 
	#BMSR_100HALF
 0x2000

	)

65 
	#BMSR_100FULL
 0x4000

	)

66 
	#BMSR_100BASE4
 0x8000

	)

69 
	#ADVERTISE_SLCT
 0x001‡

	)

70 
	#ADVERTISE_CSMA
 0x0001

	)

71 
	#ADVERTISE_10HALF
 0x0020

	)

72 
	#ADVERTISE_1000XFULL
 0x0020

	)

73 
	#ADVERTISE_10FULL
 0x0040

	)

74 
	#ADVERTISE_1000XHALF
 0x0040

	)

75 
	#ADVERTISE_100HALF
 0x0080

	)

76 
	#ADVERTISE_1000XPAUSE
 0x0080

	)

77 
	#ADVERTISE_100FULL
 0x0100

	)

78 
	#ADVERTISE_1000XPSE_ASYM
 0x0100

	)

79 
	#ADVERTISE_100BASE4
 0x0200

	)

80 
	#ADVERTISE_PAUSE_CAP
 0x0400

	)

81 
	#ADVERTISE_PAUSE_ASYM
 0x0800

	)

82 
	#ADVERTISE_RESV
 0x1000

	)

83 
	#ADVERTISE_RFAULT
 0x2000

	)

84 
	#ADVERTISE_LPACK
 0x4000

	)

85 
	#ADVERTISE_NPAGE
 0x8000

	)

87 
	#ADVERTISE_FULL
 (
ADVERTISE_100FULL
 | 
ADVERTISE_10FULL
 | \

88 
ADVERTISE_CSMA
)

	)

89 
	#ADVERTISE_ALL
 (
ADVERTISE_10HALF
 | 
ADVERTISE_10FULL
 | \

90 
ADVERTISE_100HALF
 | 
ADVERTISE_100FULL
)

	)

93 
	#LPA_SLCT
 0x001‡

	)

94 
	#LPA_10HALF
 0x0020

	)

95 
	#LPA_1000XFULL
 0x0020

	)

96 
	#LPA_10FULL
 0x0040

	)

97 
	#LPA_1000XHALF
 0x0040

	)

98 
	#LPA_100HALF
 0x0080

	)

99 
	#LPA_1000XPAUSE
 0x0080

	)

100 
	#LPA_100FULL
 0x0100

	)

101 
	#LPA_1000XPAUSE_ASYM
 0x0100

	)

102 
	#LPA_100BASE4
 0x0200

	)

103 
	#LPA_PAUSE_CAP
 0x0400

	)

104 
	#LPA_PAUSE_ASYM
 0x0800

	)

105 
	#LPA_RESV
 0x1000

	)

106 
	#LPA_RFAULT
 0x2000

	)

107 
	#LPA_LPACK
 0x4000

	)

108 
	#LPA_NPAGE
 0x8000

	)

110 
	#LPA_DUPLEX
 (
LPA_10FULL
 | 
LPA_100FULL
)

	)

111 
	#LPA_100
 (
LPA_100FULL
 | 
LPA_100HALF
 | 
LPA_100BASE4
)

	)

114 
	#EXPANSION_NWAY
 0x0001

	)

115 
	#EXPANSION_LCWP
 0x0002

	)

116 
	#EXPANSION_ENABLENPAGE
 0x0004

	)

117 
	#EXPANSION_NPCAPABLE
 0x0008

	)

118 
	#EXPANSION_MFAULTS
 0x0010

	)

119 
	#EXPANSION_RESV
 0xf„0

	)

121 
	#ESTATUS_1000_TFULL
 0x2000

	)

122 
	#ESTATUS_1000_THALF
 0x1000

	)

125 
	#NWAYTEST_RESV1
 0x00f‡

	)

126 
	#NWAYTEST_LOOPBACK
 0x0100

	)

127 
	#NWAYTEST_RESV2
 0x„00

	)

130 
	#ADVERTISE_1000FULL
 0x0200

	)

131 
	#ADVERTISE_1000HALF
 0x0100

	)

132 
	#CTL1000_AS_MASTER
 0x0800

	)

133 
	#CTL1000_ENABLE_MASTER
 0x1000

	)

136 
	#LPA_1000LOCALRXOK
 0x2000

	)

137 
	#LPA_1000REMRXOK
 0x1000

	)

138 
	#LPA_1000FULL
 0x0800

	)

139 
	#LPA_1000HALF
 0x0400

	)

142 
	#FLOW_CTRL_TX
 0x01

	)

143 
	#FLOW_CTRL_RX
 0x02

	)

146 
	smii_io˘l_d©a
 {

147 
__u16
 
	mphy_id
;

148 
__u16
 
	mªg_num
;

149 
__u16
 
	mvÆ_ö
;

150 
__u16
 
	mvÆ_out
;

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

42 
	s√t_devi˚_°©s


44 
	mrx_∑ckës
;

45 
	mtx_∑ckës
;

46 
	mrx_byãs
;

47 
	mtx_byãs
;

48 
	mrx_îr‹s
;

49 
	mtx_îr‹s
;

50 
	mrx_dr›≥d
;

51 
	mtx_dr›≥d
;

52 
	mmu…iˇ°
;

53 
	mcﬁlisi⁄s
;

56 
	mrx_Àngth_îr‹s
;

57 
	mrx_ovî_îr‹s
;

58 
	mrx_¸c_îr‹s
;

59 
	mrx_‰ame_îr‹s
;

60 
	mrx_fifo_îr‹s
;

61 
	mrx_mis£d_îr‹s
;

64 
	mtx_ab‹ãd_îr‹s
;

65 
	mtx_ˇºõr_îr‹s
;

66 
	mtx_fifo_îr‹s
;

67 
	mtx_hóπbót_îr‹s
;

68 
	mtx_wödow_îr‹s
;

71 
	mrx_com¥es£d
;

72 
	mtx_com¥es£d
;

78 
	mIF_PORT_UNKNOWN
 = 0,

79 
	mIF_PORT_10BASE2
,

80 
	mIF_PORT_10BASET
,

81 
	mIF_PORT_AUI
,

82 
	mIF_PORT_100BASET
,

83 
	mIF_PORT_100BASETX
,

84 
	mIF_PORT_100BASEFX


	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/poll.h

1 #i‚de‡
_LINUX_POLL_H


2 
	#_LINUX_POLL_H


	)

4 
	~<asm/pﬁl.h
>

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_STOPPED
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

42 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

38 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

39 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

40 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/linux/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

15 
	#BIO_UPTODATE
 0

	)

16 
	#BIO_RW_BLOCK
 1

	)

17 
	#BIO_EOF
 2

	)

18 
	#BIO_SEG_VALID
 3

	)

19 
	#BIO_CLONED
 4

	)

20 
	#BIO_BOUNCED
 5

	)

21 
	#BIO_USER_MAPPED
 6

	)

22 
	#BIO_EOPNOTSUPP
 7

	)

23 
	#BIO_CPU_AFFINE
 8

	)

24 
	#BIO_NULL_MAPPED
 9

	)

25 
	#BIO_FS_INTEGRITY
 10

	)

26 
	#BIO_QUIET
 11

	)

27 
	#BIO_MAPPED_INTEGRITY
 12

	)

28 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

33 
	#BIO_POOL_BITS
 (4)

	)

34 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

35 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

36 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

37 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

68 
	ebio_rw_Êags
 {

69 
	mBIO_RW
,

70 
	mBIO_RW_FAILFAST_DEV
,

71 
	mBIO_RW_FAILFAST_TRANSPORT
,

72 
	mBIO_RW_FAILFAST_DRIVER
,

74 
	mBIO_RW_AHEAD
,

75 
	mBIO_RW_BARRIER
,

76 
	mBIO_RW_SYNCIO
,

77 
	mBIO_RW_UNPLUG
,

78 
	mBIO_RW_META
,

79 
	mBIO_RW_DISCARD
,

80 
	mBIO_RW_NOIDLE
,

85 
	mBIO_RW_FLUSH
,

86 
	mBIO_RW_FUA
,

91 
	mBIO_RW_THROTTLED
,

94 
	#BIO_FLUSH
 (1 << 
BIO_RW_FLUSH
)

	)

95 
	#BIO_FUA
 (1 << 
BIO_RW_FUA
)

	)

96 
	#BIO_DISCARD
 (1 << 
BIO_RW_DISCARD
)

	)

101 
	erq_Êag_bôs
 {

102 
	m__REQ_WRITE
,

103 
	m__REQ_FAILFAST_DEV
,

104 
	m__REQ_FAILFAST_TRANSPORT
,

105 
	m__REQ_FAILFAST_DRIVER
,

107 
	m__REQ_DISCARD
,

108 
	m__REQ_SORTED
,

109 
	m__REQ_SOFTBARRIER
,

110 
	m__REQ_HARDBARRIER
,

111 
	m__REQ_FUA
,

112 
	m__REQ_NOMERGE
,

113 
	m__REQ_STARTED
,

114 
	m__REQ_DONTPREP
,

115 
	m__REQ_QUEUED
,

116 
	m__REQ_ELVPRIV
,

117 
	m__REQ_FAILED
,

118 
	m__REQ_QUIET
,

119 
	m__REQ_PREEMPT
,

120 
	m__REQ_ORDERED_COLOR
,

121 
	m__REQ_SYNC
,

122 
	m__REQ_ALLOCED
,

123 
	m__REQ_META
,

124 
	m__REQ_COPY_USER
,

125 
	m__REQ_INTEGRITY
,

126 
	m__REQ_NOIDLE
,

127 
	m__REQ_IO_STAT
,

128 
	m__REQ_MIXED_MERGE
,

129 
	m__REQ_FLUSH
,

130 
	m__REQ_FLUSH_SEQ
,

131 
	m__REQ_NR_BITS
,

134 
	#REQ_WRITE
 (1 << 
__REQ_WRITE
)

	)

135 
	#REQ_RW
 
REQ_WRITE


	)

137 
	#REQ_FAILFAST_DEV
 (1 << 
__REQ_FAILFAST_DEV
)

	)

138 
	#REQ_FAILFAST_TRANSPORT
 (1 << 
__REQ_FAILFAST_TRANSPORT
)

	)

139 
	#REQ_FAILFAST_DRIVER
 (1 << 
__REQ_FAILFAST_DRIVER
)

	)

140 
	#REQ_HARDBARRIER
 (1 << 
__REQ_HARDBARRIER
)

	)

142 
	#REQ_SYNC
 (1 << 
__REQ_SYNC
)

	)

143 
	#REQ_RW_SYNC
 
REQ_SYNC


	)

145 
	#REQ_META
 (1 << 
__REQ_META
)

	)

146 
	#REQ_RW_META
 
REQ_META


	)

148 
	#REQ_DISCARD
 (1 << 
__REQ_DISCARD
)

	)

149 
	#REQ_NOIDLE
 (1 << 
__REQ_NOIDLE
)

	)

151 
	#REQ_FAILFAST_MASK
 \

152 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

153 
	#REQ_COMMON_MASK
 \

154 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_HARDBARRIER
 | 
REQ_SYNC
 | \

155 
REQ_META
 | 
REQ_DISCARD
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

156 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

158 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

159 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

160 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

161 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

162 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

163 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

164 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

165 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

166 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

167 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

168 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

169 
	#REQ_ORDERED_COLOR
 (1 << 
__REQ_ORDERED_COLOR
Ë

	)

170 
	#REQ_ALLOCED
 (1 << 
__REQ_ALLOCED
)

	)

171 
	#REQ_COPY_USER
 (1 << 
__REQ_COPY_USER
)

	)

172 
	#REQ_INTEGRITY
 (1 << 
__REQ_INTEGRITY
)

	)

173 
	#REQ_FLUSH
 (1 << 
__REQ_FLUSH
)

	)

174 
	#REQ_FLUSH_SEQ
 (1 << 
__REQ_FLUSH_SEQ
)

	)

175 
	#REQ_IO_STAT
 (1 << 
__REQ_IO_STAT
)

	)

176 
	#REQ_MIXED_MERGE
 (1 << 
__REQ_MIXED_MERGE
)

	)

178 
	#REQ_WRITE_FLUSH
 (
REQ_WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_IN_NETPOLL
 0x800

	)

74 
	#IFF_DISABLE_NETPOLL
 0x1000

	)

75 
	#IFF_BRIDGE_PORT
 0x2000

	)

76 
	#IFF_MACVLAN_PORT
 0x4000

	)

77 
	#IFF_OVS_DATAPATH
 0x8000

	)

81 
	#IFF_TX_SKB_SHARING
 0x10000

	)

83 
	#IFF_DONT_BRIDGE
 0x20000

	)

85 
	#IF_GET_IFACE
 0x0001

	)

86 
	#IF_GET_PROTO
 0x0002

	)

89 
	#IF_IFACE_V35
 0x1000

	)

90 
	#IF_IFACE_V24
 0x1001

	)

91 
	#IF_IFACE_X21
 0x1002

	)

92 
	#IF_IFACE_T1
 0x1003

	)

93 
	#IF_IFACE_E1
 0x1004

	)

94 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

95 
	#IF_IFACE_X21D
 0x1006

	)

98 
	#IF_PROTO_HDLC
 0x2000

	)

99 
	#IF_PROTO_PPP
 0x2001

	)

100 
	#IF_PROTO_CISCO
 0x2002

	)

101 
	#IF_PROTO_FR
 0x2003

	)

102 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

103 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

104 
	#IF_PROTO_X25
 0x2006

	)

105 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

106 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

107 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

108 
	#IF_PROTO_FR_PVC
 0x200A

	)

109 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

110 
	#IF_PROTO_RAW
 0x200C

	)

114 
	mIF_OPER_UNKNOWN
,

115 
	mIF_OPER_NOTPRESENT
,

116 
	mIF_OPER_DOWN
,

117 
	mIF_OPER_LOWERLAYERDOWN
,

118 
	mIF_OPER_TESTING
,

119 
	mIF_OPER_DORMANT
,

120 
	mIF_OPER_UP
,

125 
	mIF_LINK_MODE_DEFAULT
,

126 
	mIF_LINK_MODE_DORMANT
,

139 
	sifm≠


141 
	mmem_°¨t
;

142 
	mmem_íd
;

143 
	mba£_addr
;

144 
	múq
;

145 
	mdma
;

146 
	mp‹t
;

150 
	sif_£âögs


152 
	mty≥
;

153 
	msize
;

156 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

157 
cisco_¥Ÿo
 *
	mcisco
;

158 
‰_¥Ÿo
 *
	m‰
;

159 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

160 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

163 
sync_£rül_£âögs
 *
	msync
;

164 
ã1_£âögs
 *
	mã1
;

165 } 
	mifs_ifsu
;

175 
	si‰eq


177 
	#IFHWADDRLEN
 6

	)

180 
	mi‰n_«me
[
IFNAMSIZ
];

181 } 
	mi‰_i‰n
;

184 
sockaddr
 
	mi‰u_addr
;

185 
sockaddr
 
	mi‰u_d°addr
;

186 
sockaddr
 
	mi‰u_brﬂdaddr
;

187 
sockaddr
 
	mi‰u_√tmask
;

188 
sockaddr
 
	mi‰u_hwaddr
;

189 
	mi‰u_Êags
;

190 
	mi‰u_ivÆue
;

191 
	mi‰u_mtu
;

192 
ifm≠
 
	mi‰u_m≠
;

193 
	mi‰u_¶ave
[
IFNAMSIZ
];

194 
	mi‰u_√w«me
[
IFNAMSIZ
];

195 * 
	mi‰u_d©a
;

196 
if_£âögs
 
	mi‰u_£âögs
;

197 } 
	mi‰_i‰u
;

200 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

201 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

202 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

203 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

204 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

205 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

206 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

207 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

208 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

209 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

210 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

211 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

212 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

213 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

214 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

215 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

216 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

225 
	sifc⁄f


227 
	mifc_Àn
;

230 *
	mifcu_buf
;

231 
i‰eq
 *
	mifcu_ªq
;

232 } 
	mifc_ifcu
;

234 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

235 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s


10 
__u32
 
	mrx_∑ckës
;

11 
__u32
 
	mtx_∑ckës
;

12 
__u32
 
	mrx_byãs
;

13 
__u32
 
	mtx_byãs
;

14 
__u32
 
	mrx_îr‹s
;

15 
__u32
 
	mtx_îr‹s
;

16 
__u32
 
	mrx_dr›≥d
;

17 
__u32
 
	mtx_dr›≥d
;

18 
__u32
 
	mmu…iˇ°
;

19 
__u32
 
	mcﬁlisi⁄s
;

22 
__u32
 
	mrx_Àngth_îr‹s
;

23 
__u32
 
	mrx_ovî_îr‹s
;

24 
__u32
 
	mrx_¸c_îr‹s
;

25 
__u32
 
	mrx_‰ame_îr‹s
;

26 
__u32
 
	mrx_fifo_îr‹s
;

27 
__u32
 
	mrx_mis£d_îr‹s
;

30 
__u32
 
	mtx_ab‹ãd_îr‹s
;

31 
__u32
 
	mtx_ˇºõr_îr‹s
;

32 
__u32
 
	mtx_fifo_îr‹s
;

33 
__u32
 
	mtx_hóπbót_îr‹s
;

34 
__u32
 
	mtx_wödow_îr‹s
;

37 
__u32
 
	mrx_com¥es£d
;

38 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠


76 
__u64
 
	mmem_°¨t
;

77 
__u64
 
	mmem_íd
;

78 
__u64
 
	mba£_addr
;

79 
__u16
 
	múq
;

80 
__u8
 
	mdma
;

81 
__u8
 
	mp‹t
;

86 
	mIFLA_UNSPEC
,

87 
	mIFLA_ADDRESS
,

88 
	mIFLA_BROADCAST
,

89 
	mIFLA_IFNAME
,

90 
	mIFLA_MTU
,

91 
	mIFLA_LINK
,

92 
	mIFLA_QDISC
,

93 
	mIFLA_STATS
,

94 
	mIFLA_COST
,

95 
	#IFLA_COST
 
IFLA_COST


	)

96 
	mIFLA_PRIORITY
,

97 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

98 
	mIFLA_MASTER
,

99 
	#IFLA_MASTER
 
IFLA_MASTER


	)

100 
	mIFLA_WIRELESS
,

101 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

102 
	mIFLA_PROTINFO
,

103 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

104 
	mIFLA_TXQLEN
,

105 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

106 
	mIFLA_MAP
,

107 
	#IFLA_MAP
 
IFLA_MAP


	)

108 
	mIFLA_WEIGHT
,

109 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

110 
	mIFLA_OPERSTATE
,

111 
	mIFLA_LINKMODE
,

112 
	mIFLA_LINKINFO
,

113 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

114 
	mIFLA_NET_NS_PID
,

115 
	mIFLA_IFALIAS
,

116 
	mIFLA_NUM_VF
,

117 
	mIFLA_VFINFO_LIST
,

118 
	mIFLA_STATS64
,

119 
	mIFLA_VF_PORTS
,

120 
	mIFLA_PORT_SELF
,

121 
	m__IFLA_MAX


125 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

128 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

129 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

163 
	mIFLA_INET6_UNSPEC
,

164 
	mIFLA_INET6_FLAGS
,

165 
	mIFLA_INET6_CONF
,

166 
	mIFLA_INET6_STATS
,

167 
	mIFLA_INET6_MCAST
,

168 
	mIFLA_INET6_CACHEINFO
,

169 
	mIFLA_INET6_ICMP6STATS
,

170 
	m__IFLA_INET6_MAX


173 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

175 
	siÊa_ˇcheöfo


177 
__u32
 
	mmax_ªasm_Àn
;

178 
__u32
 
	mt°amp
;

179 
__u32
 
	mªachabÀ_time
;

180 
__u32
 
	mªå™s_time
;

185 
	mIFLA_INFO_UNSPEC
,

186 
	mIFLA_INFO_KIND
,

187 
	mIFLA_INFO_DATA
,

188 
	mIFLA_INFO_XSTATS
,

189 
	m__IFLA_INFO_MAX
,

192 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

198 
	mIFLA_VLAN_UNSPEC
,

199 
	mIFLA_VLAN_ID
,

200 
	mIFLA_VLAN_FLAGS
,

201 
	mIFLA_VLAN_EGRESS_QOS
,

202 
	mIFLA_VLAN_INGRESS_QOS
,

203 
	m__IFLA_VLAN_MAX
,

206 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

208 
	siÊa_vœn_Êags
 {

209 
__u32
 
	mÊags
;

210 
__u32
 
	mmask
;

215 
	mIFLA_VLAN_QOS_UNSPEC
,

216 
	mIFLA_VLAN_QOS_MAPPING
,

217 
	m__IFLA_VLAN_QOS_MAX


220 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

222 
	siÊa_vœn_qos_m≠pög


224 
__u32
 
	m‰om
;

225 
__u32
 
	mto
;

230 
	mIFLA_MACVLAN_UNSPEC
,

231 
	mIFLA_MACVLAN_MODE
,

232 
	m__IFLA_MACVLAN_MAX
,

235 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

237 
	emacvœn_mode
 {

238 
	mMACVLAN_MODE_PRIVATE
 = 1,

239 
	mMACVLAN_MODE_VEPA
 = 2,

240 
	mMACVLAN_MODE_BRIDGE
 = 4,

241 
	mMACVLAN_MODE_PASSTHRU
 = 8,

247 
	mIFLA_VF_INFO_UNSPEC
,

248 
	mIFLA_VF_INFO
,

249 
	m__IFLA_VF_INFO_MAX
,

252 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

255 
	mIFLA_VF_UNSPEC
,

256 
	mIFLA_VF_MAC
,

257 
	mIFLA_VF_VLAN
,

258 
	mIFLA_VF_TX_RATE
,

259 
	m__IFLA_VF_MAX
,

262 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

264 
	siÊa_vf_mac
 {

265 
__u32
 
	mvf
;

266 
__u8
 
	mmac
[32];

269 
	siÊa_vf_vœn
 {

270 
__u32
 
	mvf
;

271 
__u32
 
	mvœn
;

272 
__u32
 
	mqos
;

275 
	siÊa_vf_tx_øã
 {

276 
__u32
 
	mvf
;

277 
__u32
 
	møã
;

280 
	siÊa_vf_öfo
 {

281 
__u32
 
	mvf
;

282 
__u8
 
	mmac
[32];

283 
__u32
 
	mvœn
;

284 
__u32
 
	mqos
;

285 
__u32
 
	mtx_øã
;

304 
	mIFLA_VF_PORT_UNSPEC
,

305 
	mIFLA_VF_PORT
,

306 
	m__IFLA_VF_PORT_MAX
,

309 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

312 
	mIFLA_PORT_UNSPEC
,

313 
	mIFLA_PORT_VF
,

314 
	mIFLA_PORT_PROFILE
,

315 
	mIFLA_PORT_VSI_TYPE
,

316 
	mIFLA_PORT_INSTANCE_UUID
,

317 
	mIFLA_PORT_HOST_UUID
,

318 
	mIFLA_PORT_REQUEST
,

319 
	mIFLA_PORT_RESPONSE
,

320 
	m__IFLA_PORT_MAX
,

323 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

325 
	#PORT_PROFILE_MAX
 40

	)

326 
	#PORT_UUID_MAX
 16

	)

327 
	#PORT_SELF_VF
 -1

	)

330 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

331 
	mPORT_REQUEST_PREASSOCIATE_RR
,

332 
	mPORT_REQUEST_ASSOCIATE
,

333 
	mPORT_REQUEST_DISASSOCIATE
,

337 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

338 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

339 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

340 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

341 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

342 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

343 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

345 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

346 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

347 
	mPORT_PROFILE_RESPONSE_INVALID
,

348 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

349 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

350 
	mPORT_PROFILE_RESPONSE_ERROR
,

353 
	siÊa_p‹t_vsi
 {

354 
__u8
 
	mvsi_mgr_id
;

355 
__u8
 
	mvsi_ty≥_id
[3];

356 
__u8
 
	mvsi_ty≥_vîsi⁄
;

357 
__u8
 
	m∑d
[3];

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt


8 
	m•kt_Ámûy
;

9 
	m•kt_devi˚
[14];

10 
__be16
 
	m•kt_¥Ÿocﬁ
;

13 
	ssockaddr_Œ


15 
	m¶l_Ámûy
;

16 
__be16
 
	m¶l_¥Ÿocﬁ
;

17 
	m¶l_ifödex
;

18 
	m¶l_h©y≥
;

19 
	m¶l_pkây≥
;

20 
	m¶l_hÆí
;

21 
	m¶l_addr
[8];

26 
	#PACKET_HOST
 0

	)

27 
	#PACKET_BROADCAST
 1

	)

28 
	#PACKET_MULTICAST
 2

	)

29 
	#PACKET_OTHERHOST
 3

	)

30 
	#PACKET_OUTGOING
 4

	)

32 
	#PACKET_LOOPBACK
 5

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_TIMESTAMP
 17

	)

53 
	sçackë_°©s


55 
	mç_∑ckës
;

56 
	mç_dr›s
;

59 
	sçackë_auxd©a


61 
__u32
 
	mç_°©us
;

62 
__u32
 
	mç_Àn
;

63 
__u32
 
	mç_¢≠Àn
;

64 
__u16
 
	mç_mac
;

65 
__u16
 
	mç_√t
;

66 
__u16
 
	mç_vœn_tci
;

67 
__u16
 
	mç_∑ddög
;

71 
	#TP_STATUS_KERNEL
 0x0

	)

72 
	#TP_STATUS_USER
 0x1

	)

73 
	#TP_STATUS_COPY
 0x2

	)

74 
	#TP_STATUS_LOSING
 0x4

	)

75 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

78 
	#TP_STATUS_AVAILABLE
 0x0

	)

79 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

80 
	#TP_STATUS_SENDING
 0x2

	)

81 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

83 
	sçackë_hdr


85 
	mç_°©us
;

86 
	mç_Àn
;

87 
	mç_¢≠Àn
;

88 
	mç_mac
;

89 
	mç_√t
;

90 
	mç_£c
;

91 
	mç_u£c
;

94 
	#TPACKET_ALIGNMENT
 16

	)

95 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

96 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

98 
	sçackë2_hdr


100 
__u32
 
	mç_°©us
;

101 
__u32
 
	mç_Àn
;

102 
__u32
 
	mç_¢≠Àn
;

103 
__u16
 
	mç_mac
;

104 
__u16
 
	mç_√t
;

105 
__u32
 
	mç_£c
;

106 
__u32
 
	mç_n£c
;

107 
__u16
 
	mç_vœn_tci
;

108 
__u16
 
	mç_∑ddög
;

111 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

113 
	eçackë_vîsi⁄s


115 
	mTPACKET_V1
,

116 
	mTPACKET_V2
,

132 
	sçackë_ªq


134 
	mç_block_size
;

135 
	mç_block_ƒ
;

136 
	mç_‰ame_size
;

137 
	mç_‰ame_ƒ
;

140 
	s∑ckë_mªq


142 
	mmr_ifödex
;

143 
	mmr_ty≥
;

144 
	mmr_Æí
;

145 
	mmr_addªss
[8];

148 
	#PACKET_MR_MULTICAST
 0

	)

149 
	#PACKET_MR_PROMISC
 1

	)

150 
	#PACKET_MR_ALLMULTI
 2

	)

151 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

30 
	sö6_addr


34 
__u8
 
	mu6_addr8
[16];

35 
__be16
 
	mu6_addr16
[8];

36 
__be32
 
	mu6_addr32
[4];

37 } 
	mö6_u
;

38 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

39 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

40 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 
	ssockaddr_ö6
 {

49 
	msö6_Ámûy
;

50 
__be16
 
	msö6_p‹t
;

51 
__be32
 
	msö6_Êowöfo
;

52 
ö6_addr
 
	msö6_addr
;

53 
__u32
 
	msö6_sc›e_id
;

56 
	sùv6_mªq
 {

58 
ö6_addr
 
	mùv6mr_mu…üddr
;

61 
	mùv6mr_ifödex
;

64 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

66 
	sö6_Êowœbñ_ªq


68 
ö6_addr
 
	mÊr_d°
;

69 
__be32
 
	mÊr_œbñ
;

70 
__u8
 
	mÊr_a˘i⁄
;

71 
__u8
 
	mÊr_sh¨e
;

72 
__u16
 
	mÊr_Êags
;

73 
__u16
 
	mÊr_expúes
;

74 
__u16
 
	mÊr_lögî
;

75 
__u32
 
	m__Êr_∑d
;

79 
	#IPV6_FL_A_GET
 0

	)

80 
	#IPV6_FL_A_PUT
 1

	)

81 
	#IPV6_FL_A_RENEW
 2

	)

83 
	#IPV6_FL_F_CREATE
 1

	)

84 
	#IPV6_FL_F_EXCL
 2

	)

86 
	#IPV6_FL_S_NONE
 0

	)

87 
	#IPV6_FL_S_EXCL
 1

	)

88 
	#IPV6_FL_S_PROCESS
 2

	)

89 
	#IPV6_FL_S_USER
 3

	)

90 
	#IPV6_FL_S_ANY
 255

	)

101 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

102 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

105 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

106 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

107 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

108 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

109 
	#IPV6_PRIORITY_BULK
 0x0400

	)

110 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

111 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

112 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

113 
	#IPV6_PRIORITY_8
 0x0800

	)

114 
	#IPV6_PRIORITY_9
 0x0900

	)

115 
	#IPV6_PRIORITY_10
 0x0a00

	)

116 
	#IPV6_PRIORITY_11
 0x0b00

	)

117 
	#IPV6_PRIORITY_12
 0x0c00

	)

118 
	#IPV6_PRIORITY_13
 0x0d00

	)

119 
	#IPV6_PRIORITY_14
 0x0e00

	)

120 
	#IPV6_PRIORITY_15
 0x0f00

	)

125 
	#IPPROTO_HOPOPTS
 0

	)

126 
	#IPPROTO_ROUTING
 43

	)

127 
	#IPPROTO_FRAGMENT
 44

	)

128 
	#IPPROTO_ICMPV6
 58

	)

129 
	#IPPROTO_NONE
 59

	)

130 
	#IPPROTO_DSTOPTS
 60

	)

131 
	#IPPROTO_MH
 135

	)

136 
	#IPV6_TLV_PAD0
 0

	)

137 
	#IPV6_TLV_PADN
 1

	)

138 
	#IPV6_TLV_ROUTERALERT
 5

	)

139 
	#IPV6_TLV_JUMBO
 194

	)

140 
	#IPV6_TLV_HAO
 201

	)

146 
	#IPV6_ADDRFORM
 1

	)

147 
	#IPV6_2292PKTINFO
 2

	)

148 
	#IPV6_2292HOPOPTS
 3

	)

149 
	#IPV6_2292DSTOPTS
 4

	)

150 
	#IPV6_2292RTHDR
 5

	)

151 
	#IPV6_2292PKTOPTIONS
 6

	)

152 
	#IPV6_CHECKSUM
 7

	)

153 
	#IPV6_2292HOPLIMIT
 8

	)

154 
	#IPV6_NEXTHOP
 9

	)

155 
	#IPV6_AUTHHDR
 10

	)

156 
	#IPV6_FLOWINFO
 11

	)

158 
	#IPV6_UNICAST_HOPS
 16

	)

159 
	#IPV6_MULTICAST_IF
 17

	)

160 
	#IPV6_MULTICAST_HOPS
 18

	)

161 
	#IPV6_MULTICAST_LOOP
 19

	)

162 
	#IPV6_ADD_MEMBERSHIP
 20

	)

163 
	#IPV6_DROP_MEMBERSHIP
 21

	)

164 
	#IPV6_ROUTER_ALERT
 22

	)

165 
	#IPV6_MTU_DISCOVER
 23

	)

166 
	#IPV6_MTU
 24

	)

167 
	#IPV6_RECVERR
 25

	)

168 
	#IPV6_V6ONLY
 26

	)

169 
	#IPV6_JOIN_ANYCAST
 27

	)

170 
	#IPV6_LEAVE_ANYCAST
 28

	)

173 
	#IPV6_PMTUDISC_DONT
 0

	)

174 
	#IPV6_PMTUDISC_WANT
 1

	)

175 
	#IPV6_PMTUDISC_DO
 2

	)

176 
	#IPV6_PMTUDISC_PROBE
 3

	)

179 
	#IPV6_FLOWLABEL_MGR
 32

	)

180 
	#IPV6_FLOWINFO_SEND
 33

	)

182 
	#IPV6_IPSEC_POLICY
 34

	)

183 
	#IPV6_XFRM_POLICY
 35

	)

204 
	#IPV6_RECVPKTINFO
 49

	)

205 
	#IPV6_PKTINFO
 50

	)

206 
	#IPV6_RECVHOPLIMIT
 51

	)

207 
	#IPV6_HOPLIMIT
 52

	)

208 
	#IPV6_RECVHOPOPTS
 53

	)

209 
	#IPV6_HOPOPTS
 54

	)

210 
	#IPV6_RTHDRDSTOPTS
 55

	)

211 
	#IPV6_RECVRTHDR
 56

	)

212 
	#IPV6_RTHDR
 57

	)

213 
	#IPV6_RECVDSTOPTS
 58

	)

214 
	#IPV6_DSTOPTS
 59

	)

216 
	#IPV6_RECVPATHMTU
 60

	)

217 
	#IPV6_PATHMTU
 61

	)

218 
	#IPV6_DONTFRAG
 62

	)

219 
	#IPV6_USE_MIN_MTU
 63

	)

235 
	#IPV6_RECVTCLASS
 66

	)

236 
	#IPV6_TCLASS
 67

	)

249 
	#IPV6_ADDR_PREFERENCES
 72

	)

251 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

252 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

253 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

254 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

255 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

256 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

257 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

259 
	#IPV6_ORIGDSTADDR
 74

	)

260 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

261 
	#IPV6_TRANSPARENT
 75

	)

264 
	#IPV6_MINHOPCOUNT
 73

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_INTERRUPT
 0x08

	)

46 
	#PCI_STATUS_CAP_LIST
 0x10

	)

47 
	#PCI_STATUS_66MHZ
 0x20

	)

48 
	#PCI_STATUS_UDF
 0x40

	)

49 
	#PCI_STATUS_FAST_BACK
 0x80

	)

50 
	#PCI_STATUS_PARITY
 0x100

	)

51 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

52 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

53 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

54 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

55 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

56 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

57 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

58 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

59 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

61 
	#PCI_CLASS_REVISION
 0x08

	)

62 
	#PCI_REVISION_ID
 0x08

	)

63 
	#PCI_CLASS_PROG
 0x09

	)

64 
	#PCI_CLASS_DEVICE
 0x0®

	)

66 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

67 
	#PCI_LATENCY_TIMER
 0x0d

	)

68 
	#PCI_HEADER_TYPE
 0x0ê

	)

69 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

70 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

71 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

73 
	#PCI_BIST
 0x0‡

	)

74 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

75 
	#PCI_BIST_START
 0x40

	)

76 
	#PCI_BIST_CAPABLE
 0x80

	)

84 
	#PCI_BASE_ADDRESS_0
 0x10

	)

85 
	#PCI_BASE_ADDRESS_1
 0x14

	)

86 
	#PCI_BASE_ADDRESS_2
 0x18

	)

87 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

88 
	#PCI_BASE_ADDRESS_4
 0x20

	)

89 
	#PCI_BASE_ADDRESS_5
 0x24

	)

90 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

97 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

98 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

99 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

103 
	#PCI_CARDBUS_CIS
 0x28

	)

104 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

105 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

106 
	#PCI_ROM_ADDRESS
 0x30

	)

107 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

108 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

110 
	#PCI_CAPABILITY_LIST
 0x34

	)

113 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

114 
	#PCI_INTERRUPT_PIN
 0x3d

	)

115 
	#PCI_MIN_GNT
 0x3ê

	)

116 
	#PCI_MAX_LAT
 0x3‡

	)

119 
	#PCI_PRIMARY_BUS
 0x18

	)

120 
	#PCI_SECONDARY_BUS
 0x19

	)

121 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

122 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

123 
	#PCI_IO_BASE
 0x1¯

	)

124 
	#PCI_IO_LIMIT
 0x1d

	)

125 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

126 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

127 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

128 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

129 
	#PCI_SEC_STATUS
 0x1ê

	)

130 
	#PCI_MEMORY_BASE
 0x20

	)

131 
	#PCI_MEMORY_LIMIT
 0x22

	)

132 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

133 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

134 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

135 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

136 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

137 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

138 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

139 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

140 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

141 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

142 
	#PCI_IO_BASE_UPPER16
 0x30

	)

143 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

146 
	#PCI_ROM_ADDRESS1
 0x38

	)

148 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

149 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

150 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

151 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

152 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

153 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

154 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

155 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

158 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

160 
	#PCI_CB_SEC_STATUS
 0x16

	)

161 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

162 
	#PCI_CB_CARD_BUS
 0x19

	)

163 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

164 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

165 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

166 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

167 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

168 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

169 
	#PCI_CB_IO_BASE_0
 0x2c

	)

170 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

171 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

172 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

173 
	#PCI_CB_IO_BASE_1
 0x34

	)

174 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

175 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

176 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

177 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

179 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

180 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

181 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

182 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

183 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

184 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

185 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

186 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

188 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

189 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

190 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

191 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

192 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

197 
	#PCI_CAP_LIST_ID
 0

	)

198 
	#PCI_CAP_ID_PM
 0x01

	)

199 
	#PCI_CAP_ID_AGP
 0x02

	)

200 
	#PCI_CAP_ID_VPD
 0x03

	)

201 
	#PCI_CAP_ID_SLOTID
 0x04

	)

202 
	#PCI_CAP_ID_MSI
 0x05

	)

203 
	#PCI_CAP_ID_CHSWP
 0x06

	)

204 
	#PCI_CAP_ID_PCIX
 0x07

	)

205 
	#PCI_CAP_ID_HT
 0x08

	)

206 
	#PCI_CAP_ID_VNDR
 0x09

	)

207 
	#PCI_CAP_ID_DBG
 0x0A

	)

208 
	#PCI_CAP_ID_CCRC
 0x0B

	)

209 
	#PCI_CAP_ID_SHPC
 0x0C

	)

210 
	#PCI_CAP_ID_SSVID
 0x0D

	)

211 
	#PCI_CAP_ID_AGP3
 0x0E

	)

212 
	#PCI_CAP_ID_EXP
 0x10

	)

213 
	#PCI_CAP_ID_MSIX
 0x11

	)

214 
	#PCI_CAP_ID_AF
 0x13

	)

215 
	#PCI_CAP_LIST_NEXT
 1

	)

216 
	#PCI_CAP_FLAGS
 2

	)

217 
	#PCI_CAP_SIZEOF
 4

	)

221 
	#PCI_PM_PMC
 2

	)

222 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

223 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

224 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

225 
	#PCI_PM_CAP_DSI
 0x0020

	)

226 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

227 
	#PCI_PM_CAP_D1
 0x0200

	)

228 
	#PCI_PM_CAP_D2
 0x0400

	)

229 
	#PCI_PM_CAP_PME
 0x0800

	)

230 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

231 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

232 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

233 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

234 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

235 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

236 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

237 
	#PCI_PM_CTRL
 4

	)

238 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

239 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

240 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

241 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

242 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

243 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

244 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

245 
	#PCI_PM_PPB_B2_B3
 0x40

	)

246 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

247 
	#PCI_PM_DATA_REGISTER
 7

	)

248 
	#PCI_PM_SIZEOF
 8

	)

252 
	#PCI_AGP_VERSION
 2

	)

253 
	#PCI_AGP_RFU
 3

	)

254 
	#PCI_AGP_STATUS
 4

	)

255 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

256 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

257 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

258 
	#PCI_AGP_STATUS_FW
 0x0010

	)

259 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

260 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

261 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

262 
	#PCI_AGP_COMMAND
 8

	)

263 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

264 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

265 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

266 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

267 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

268 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

269 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

270 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

271 
	#PCI_AGP_SIZEOF
 12

	)

275 
	#PCI_VPD_ADDR
 2

	)

276 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

277 
	#PCI_VPD_ADDR_F
 0x8000

	)

278 
	#PCI_VPD_DATA
 4

	)

282 
	#PCI_SID_ESR
 2

	)

283 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

284 
	#PCI_SID_ESR_FIC
 0x20

	)

285 
	#PCI_SID_CHASSIS_NR
 3

	)

289 
	#PCI_MSI_FLAGS
 2

	)

290 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

291 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

292 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

293 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

294 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

295 
	#PCI_MSI_RFU
 3

	)

296 
	#PCI_MSI_ADDRESS_LO
 4

	)

297 
	#PCI_MSI_ADDRESS_HI
 8

	)

298 
	#PCI_MSI_DATA_32
 8

	)

299 
	#PCI_MSI_MASK_32
 12

	)

300 
	#PCI_MSI_DATA_64
 12

	)

301 
	#PCI_MSI_MASK_64
 16

	)

304 
	#PCI_MSIX_FLAGS
 2

	)

305 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

306 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

307 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

308 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

312 
	#PCI_CHSWP_CSR
 2

	)

313 
	#PCI_CHSWP_DHA
 0x01

	)

314 
	#PCI_CHSWP_EIM
 0x02

	)

315 
	#PCI_CHSWP_PIE
 0x04

	)

316 
	#PCI_CHSWP_LOO
 0x08

	)

317 
	#PCI_CHSWP_PI
 0x30

	)

318 
	#PCI_CHSWP_EXT
 0x40

	)

319 
	#PCI_CHSWP_INS
 0x80

	)

323 
	#PCI_AF_LENGTH
 2

	)

324 
	#PCI_AF_CAP
 3

	)

325 
	#PCI_AF_CAP_TP
 0x01

	)

326 
	#PCI_AF_CAP_FLR
 0x02

	)

327 
	#PCI_AF_CTRL
 4

	)

328 
	#PCI_AF_CTRL_FLR
 0x01

	)

329 
	#PCI_AF_STATUS
 5

	)

330 
	#PCI_AF_STATUS_TP
 0x01

	)

334 
	#PCI_X_CMD
 2

	)

335 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

336 
	#PCI_X_CMD_ERO
 0x0002

	)

337 
	#PCI_X_CMD_READ_512
 0x0000

	)

338 
	#PCI_X_CMD_READ_1K
 0x0004

	)

339 
	#PCI_X_CMD_READ_2K
 0x0008

	)

340 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

341 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

343 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

344 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

345 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

346 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

347 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

348 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

349 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

350 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

351 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

352 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

353 
	#PCI_X_STATUS
 4

	)

354 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

355 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

356 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

357 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

358 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

359 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

360 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

361 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

362 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

363 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

364 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

365 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

366 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

370 
	#PCI_EXP_FLAGS
 2

	)

371 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

372 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

373 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

374 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

375 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

376 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

377 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

378 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

379 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

380 
	#PCI_EXP_TYPE_RC_EC
 0x10

	)

381 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

382 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

383 
	#PCI_EXP_DEVCAP
 4

	)

384 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

385 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

386 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

387 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

388 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

389 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

390 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

391 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

392 
	#PCI_EXP_DEVCAP_RBER
 0x8000

	)

393 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

394 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

395 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

396 
	#PCI_EXP_DEVCTL
 8

	)

397 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

398 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

399 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

400 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

401 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

402 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

403 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

404 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

405 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

406 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

407 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

408 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

409 
	#PCI_EXP_DEVSTA
 10

	)

410 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

411 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

412 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

413 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

414 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

415 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

416 
	#PCI_EXP_LNKCAP
 12

	)

417 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

418 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

419 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

420 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

421 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

422 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

423 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

424 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

425 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

426 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

427 
	#PCI_EXP_LNKCTL
 16

	)

428 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

429 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

430 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

431 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

432 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

433 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

434 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

435 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

436 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

437 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

438 
	#PCI_EXP_LNKSTA
 18

	)

439 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

440 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x01

	)

441 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x02

	)

442 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

443 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

444 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

445 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

446 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

447 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

448 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

449 
	#PCI_EXP_SLTCAP
 20

	)

450 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

451 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

452 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

453 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

454 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

455 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

456 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

457 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

458 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

459 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

460 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

461 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

462 
	#PCI_EXP_SLTCTL
 24

	)

463 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

464 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

465 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

466 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

467 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

468 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

469 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

470 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

471 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

472 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

473 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

474 
	#PCI_EXP_SLTSTA
 26

	)

475 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

476 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

477 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

478 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

479 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

480 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

481 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

482 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

483 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

484 
	#PCI_EXP_RTCTL
 28

	)

485 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

486 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

487 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

488 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

489 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

490 
	#PCI_EXP_RTCAP
 30

	)

491 
	#PCI_EXP_RTSTA
 32

	)

492 
	#PCI_EXP_DEVCAP2
 36

	)

493 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

494 
	#PCI_EXP_DEVCAP2_LTR
 0x800

	)

495 
	#PCI_EXP_OBFF_MASK
 0xc0000

	)

496 
	#PCI_EXP_OBFF_MSG
 0x40000

	)

497 
	#PCI_EXP_OBFF_WAKE
 0x80000

	)

498 
	#PCI_EXP_DEVCTL2
 40

	)

499 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

500 
	#PCI_EXP_IDO_REQ_EN
 0x100

	)

501 
	#PCI_EXP_IDO_CMP_EN
 0x200

	)

502 
	#PCI_EXP_LTR_EN
 0x400

	)

503 
	#PCI_EXP_OBFF_MSGA_EN
 0x2000

	)

504 
	#PCI_EXP_OBFF_MSGB_EN
 0x4000

	)

505 
	#PCI_EXP_OBFF_WAKE_EN
 0x6000

	)

506 
	#PCI_EXP_LNKCTL2
 48

	)

507 
	#PCI_EXP_SLTCTL2
 56

	)

510 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

511 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

512 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

514 
	#PCI_EXT_CAP_ID_ERR
 1

	)

515 
	#PCI_EXT_CAP_ID_VC
 2

	)

516 
	#PCI_EXT_CAP_ID_DSN
 3

	)

517 
	#PCI_EXT_CAP_ID_PWR
 4

	)

518 
	#PCI_EXT_CAP_ID_ACS
 13

	)

519 
	#PCI_EXT_CAP_ID_ARI
 14

	)

520 
	#PCI_EXT_CAP_ID_ATS
 15

	)

521 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

522 
	#PCI_EXT_CAP_ID_LTR
 24

	)

525 
	#PCI_ERR_UNCOR_STATUS
 4

	)

526 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

527 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

528 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

529 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

530 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

531 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

532 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

533 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

534 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

535 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

536 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

537 
	#PCI_ERR_UNCOR_MASK
 8

	)

539 
	#PCI_ERR_UNCOR_SEVER
 12

	)

541 
	#PCI_ERR_COR_STATUS
 16

	)

542 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

543 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

544 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

545 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

546 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

547 
	#PCI_ERR_COR_MASK
 20

	)

549 
	#PCI_ERR_CAP
 24

	)

550 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

551 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

552 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

553 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

554 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

555 
	#PCI_ERR_HEADER_LOG
 28

	)

556 
	#PCI_ERR_ROOT_COMMAND
 44

	)

558 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

560 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

562 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

563 
	#PCI_ERR_ROOT_STATUS
 48

	)

564 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

566 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

568 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

570 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

571 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

572 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

573 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

574 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

577 
	#PCI_VC_PORT_REG1
 4

	)

578 
	#PCI_VC_PORT_REG2
 8

	)

579 
	#PCI_VC_PORT_CTRL
 12

	)

580 
	#PCI_VC_PORT_STATUS
 14

	)

581 
	#PCI_VC_RES_CAP
 16

	)

582 
	#PCI_VC_RES_CTRL
 20

	)

583 
	#PCI_VC_RES_STATUS
 26

	)

586 
	#PCI_PWR_DSR
 4

	)

587 
	#PCI_PWR_DATA
 8

	)

588 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

589 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

590 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

591 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

592 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

593 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

594 
	#PCI_PWR_CAP
 12

	)

595 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

605 
	#HT_3BIT_CAP_MASK
 0xE0

	)

606 
	#HT_CAPTYPE_SLAVE
 0x00

	)

607 
	#HT_CAPTYPE_HOST
 0x20

	)

609 
	#HT_5BIT_CAP_MASK
 0xF8

	)

610 
	#HT_CAPTYPE_IRQ
 0x80

	)

611 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

612 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

613 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

614 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

615 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

616 
	#HT_MSI_FLAGS
 0x02

	)

617 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

618 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

619 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

620 
	#HT_MSI_ADDR_LO
 0x04

	)

621 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

622 
	#HT_MSI_ADDR_HI
 0x08

	)

623 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

624 
	#HT_CAPTYPE_VCSET
 0xB8

	)

625 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

626 
	#HT_CAPTYPE_GEN3
 0xD0

	)

627 
	#HT_CAPTYPE_PM
 0xE0

	)

630 
	#PCI_ARI_CAP
 0x04

	)

631 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

632 
	#PCI_ARI_CAP_ACS
 0x0002

	)

633 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

634 
	#PCI_ARI_CTRL
 0x06

	)

635 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

636 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

637 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

640 
	#PCI_ATS_CAP
 0x04

	)

641 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

642 
	#PCI_ATS_MAX_QDEP
 32

	)

643 
	#PCI_ATS_CTRL
 0x06

	)

644 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

645 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

646 
	#PCI_ATS_MIN_STU
 12

	)

649 
	#PCI_SRIOV_CAP
 0x04

	)

650 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

651 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

652 
	#PCI_SRIOV_CTRL
 0x08

	)

653 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

654 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

655 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

656 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

657 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

658 
	#PCI_SRIOV_STATUS
 0x0®

	)

659 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

660 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

661 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

662 
	#PCI_SRIOV_NUM_VF
 0x10

	)

663 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

664 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

665 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

666 
	#PCI_SRIOV_VF_DID
 0x1®

	)

667 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

668 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

669 
	#PCI_SRIOV_BAR
 0x24

	)

670 
	#PCI_SRIOV_NUM_BARS
 6

	)

671 
	#PCI_SRIOV_VFM
 0x3¯

	)

672 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

673 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

674 
	#PCI_SRIOV_VFM_UA
 0x0

	)

675 
	#PCI_SRIOV_VFM_MI
 0x1

	)

676 
	#PCI_SRIOV_VFM_MO
 0x2

	)

677 
	#PCI_SRIOV_VFM_AV
 0x3

	)

679 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

680 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

681 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

682 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

683 
	#PCI_LTR_SCALE_SHIFT
 10

	)

686 
	#PCI_ACS_CAP
 0x04

	)

687 
	#PCI_ACS_SV
 0x01

	)

688 
	#PCI_ACS_TB
 0x02

	)

689 
	#PCI_ACS_RR
 0x04

	)

690 
	#PCI_ACS_CR
 0x08

	)

691 
	#PCI_ACS_UF
 0x10

	)

692 
	#PCI_ACS_EC
 0x20

	)

693 
	#PCI_ACS_DT
 0x40

	)

694 
	#PCI_ACS_CTRL
 0x06

	)

695 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	spﬁlfd
 {

32 
	mfd
;

33 
	mevíts
;

34 
	mªvíts
;

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

29 
	#MAX_LINKS
 32

	)

31 
	g√t
;

33 
	ssockaddr_∆


35 
ß_Ámûy_t
 
	m∆_Ámûy
;

36 
	m∆_∑d
;

37 
__u32
 
	m∆_pid
;

38 
__u32
 
	m∆_groups
;

41 
	s∆msghdr


43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

58 
	#NLM_F_ROOT
 0x100

	)

59 
	#NLM_F_MATCH
 0x200

	)

60 
	#NLM_F_ATOMIC
 0x400

	)

61 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

64 
	#NLM_F_REPLACE
 0x100

	)

65 
	#NLM_F_EXCL
 0x200

	)

66 
	#NLM_F_CREATE
 0x400

	)

67 
	#NLM_F_APPEND
 0x800

	)

78 
	#NLMSG_ALIGNTO
 4

	)

79 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

80 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

81 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

82 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

83 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

84 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

85 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

86 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

87 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

89 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

91 
	#NLMSG_NOOP
 0x1

	)

92 
	#NLMSG_ERROR
 0x2

	)

93 
	#NLMSG_DONE
 0x3

	)

94 
	#NLMSG_OVERRUN
 0x4

	)

96 
	#NLMSG_MIN_TYPE
 0x10

	)

98 
	s∆msgîr


100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	s∆_pktöfo


112 
__u32
 
	mgroup
;

115 
	#NET_MAJOR
 36

	)

118 
	mNETLINK_UNCONNECTED
 = 0,

119 
	mNETLINK_CONNECTED
,

131 
	s∆©å


133 
__u16
 
	m∆a_Àn
;

134 
__u16
 
	m∆a_ty≥
;

147 
	#NLA_F_NESTED
 (1 << 15)

	)

148 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

149 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

151 
	#NLA_ALIGNTO
 4

	)

152 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

153 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__¨ch_swab16


49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #ifde‡
__¨ch_swab32


58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #ifde‡
__¨ch_swab64


67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 
	#__swab16
(
x
) \

100 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

101 
	`___c⁄°™t_swab16
(
x
) : \

102 
	`__fswab16
(
x
))

	)

108 
	#__swab32
(
x
) \

109 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

110 
	`___c⁄°™t_swab32
(
x
) : \

111 
	`__fswab32
(
x
))

	)

117 
	#__swab64
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

119 
	`___c⁄°™t_swab64
(
x
) : \

120 
	`__fswab64
(
x
))

	)

128 
	#__swahw32
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

130 
	`___c⁄°™t_swahw32
(
x
) : \

131 
	`__fswahw32
(
x
))

	)

139 
	#__swahb32
(
x
) \

140 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

141 
	`___c⁄°™t_swahb32
(
x
) : \

142 
	`__fswahb32
(
x
))

	)

148 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

150 #ifde‡
__¨ch_swab16p


151  
	`__¨ch_swab16p
(
p
);

153  
	`__swab16
(*
p
);

155 
	}
}

161 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

163 #ifde‡
__¨ch_swab32p


164  
	`__¨ch_swab32p
(
p
);

166  
	`__swab32
(*
p
);

168 
	}
}

174 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

176 #ifde‡
__¨ch_swab64p


177  
	`__¨ch_swab64p
(
p
);

179  
	`__swab64
(*
p
);

181 
	}
}

189 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahw32p


192  
	`__¨ch_swahw32p
(
p
);

194  
	`__swahw32
(*
p
);

196 
	}
}

204 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

206 #ifde‡
__¨ch_swahb32p


207  
	`__¨ch_swahb32p
(
p
);

209  
	`__swahb32
(*
p
);

211 
	}
}

217 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

219 #ifde‡
__¨ch_swab16s


220 
	`__¨ch_swab16s
(
p
);

222 *
p
 = 
	`__swab16p
(p);

224 
	}
}

229 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

231 #ifde‡
__¨ch_swab32s


232 
	`__¨ch_swab32s
(
p
);

234 *
p
 = 
	`__swab32p
(p);

236 
	}
}

242 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

244 #ifde‡
__¨ch_swab64s


245 
	`__¨ch_swab64s
(
p
);

247 *
p
 = 
	`__swab64p
(p);

249 
	}
}

257 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahw32s


260 
	`__¨ch_swahw32s
(
p
);

262 *
p
 = 
	`__swahw32p
(p);

264 
	}
}

272 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

274 #ifde‡
__¨ch_swahb32s


275 
	`__¨ch_swahb32s
(
p
);

277 *
p
 = 
	`__swahb32p
(p);

279 
	}
}

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 #ifde‡
__i386__


10 #ifde‡
CONFIG_X86_BSWAP


11 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

13 
	`__asm__
("xchgb %b0,%h0\n\t"

16 : "=q" (
vÆ
)

17 : "0" (
vÆ
));

21 
	`__asm__
("bswapl %0"

22 : "Ù" (
vÆ
)

23 : "0" (
vÆ
));

25  
vÆ
;

26 
	}
}

27 
	#__¨ch_swab32
 
__¨ch_swab32


	)

29 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

31 #ifde‡
__i386__


34 
__u32
 
a
;

35 
__u32
 
b
;

36 } 
s
;

37 
__u64
 
u
;

38 } 
v
;

39 
v
.
u
 = 
vÆ
;

40 #ifde‡
CONFIG_X86_BSWAP


41 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

42 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

43 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

45 
v
.
s
.
a
 = 
	`__¨ch_swab32
(v.s.a);

46 
v
.
s
.
b
 = 
	`__¨ch_swab32
(v.s.b);

47 
	`__asm__
("xchgl %0,%1"

48 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

49 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

51  
v
.
u
;

53 
	`__asm__
("bswapq %0"

54 : "Ù" (
vÆ
)

55 : "0" (
vÆ
));

56  
vÆ
;

58 
	}
}

59 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
56
1402
igb/e1000_82575.c
igb/e1000_82575.h
igb/e1000_defines.h
igb/e1000_hw.h
igb/e1000_mac.c
igb/e1000_mac.h
igb/e1000_mbx.c
igb/e1000_mbx.h
igb/e1000_nvm.c
igb/e1000_nvm.h
igb/e1000_phy.c
igb/e1000_phy.h
igb/e1000_regs.h
igb/igb.h
igb/igb_ethtool.c
igb/igb_main.c
ukmem.c
/usr/include/linux/ethtool.h
/usr/include/linux/fs.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_vlan.h
/usr/include/linux/ioctl.h
/usr/include/linux/ipv6.h
/usr/include/linux/kernel.h
/usr/include/linux/mii.h
/usr/include/linux/netdevice.h
/usr/include/linux/pci.h
/usr/include/linux/poll.h
/usr/include/linux/sched.h
/usr/include/linux/types.h
/usr/include/asm/byteorder.h
/usr/include/asm/ioctl.h
/usr/include/asm/poll.h
/usr/include/asm/types.h
/usr/include/linux/blk_types.h
/usr/include/linux/if.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/in6.h
/usr/include/linux/limits.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/netlink.h
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/int-ll64.h
/usr/include/linux/swab.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/swab.h
/usr/include/asm-generic/bitsperlong.h
